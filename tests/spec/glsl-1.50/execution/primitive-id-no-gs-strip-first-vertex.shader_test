# Check proper functioning of the gl_PrimitiveID fragment shader
# input, in the case where there is no geometry shader.

[require]
GLSL >= 1.50
GL_EXT_provoking_vertex

[vertex shader]
#version 150

in vec4 piglit_vertex;
flat out int vertex_id;

void main()
{
  gl_Position = piglit_vertex;
  vertex_id = gl_VertexID;
}

[fragment shader]
#version 150

flat in int vertex_id;

void main()
{
  /* We draw a triangle strip containing 6 vertices, so the relationship between
   * the primitive ID and the input vertex ID's should be:
   *
   * Primitive ID  Vertex ID's  Provoking vertex ID
   *  0             0 1 2        0
   *  1             1 3 2        1
   *  2             2 3 4        2
   *  3             3 5 4        3
   *
   * Since vertex_id uses interpolation qualifier "flat", it should
   * always receive the value from the provoking vertex.  Therefore,
   * by the table above, it should always be the same as the
   * expected value of gl_PrimitiveID.
   */
  int expected_primitive_id = vertex_id;
  if (expected_primitive_id == gl_PrimitiveID)
    gl_FragColor = vec4(0.0, 1.0, 0.0, 1.0);
  else
    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
}

[vertex data]
piglit_vertex/float/2
-1.0 -1.0
 1.0 -1.0
-1.0  0.0
 1.0  0.0
-1.0  1.0
 1.0  1.0

[test]
clear color 0.0 0.0 0.0 0.0
clear
provoking vertex first
draw arrays GL_TRIANGLE_STRIP 0 6
probe all rgba 0.0 1.0 0.0 1.0
