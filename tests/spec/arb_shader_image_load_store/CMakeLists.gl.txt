include_directories(
	${GLEXT_INCLUDE_DIR}
	${OPENGL_INCLUDE_PATH}
	${piglit_SOURCE_DIR}/tests/util
)

link_libraries (
	piglitutil_${piglit_target_api}
	${OPENGL_gl_LIBRARY}
	${OPENGL_glu_LIBRARY}
)

set(depends image.c grid.c common.c)

piglit_add_executable(arb_shader_image_load_store-atomicity atomicity.c ${depends})
piglit_add_executable(arb_shader_image_load_store-bitcast bitcast.c ${depends})
piglit_add_executable(arb_shader_image_load_store-coherency coherency.c ${depends})
piglit_add_executable(arb_shader_image_load_store-dead-fragments dead-fragments.c ${depends})
piglit_add_executable(arb_shader_image_load_store-early-z early-z.c ${depends})
piglit_add_executable(arb_shader_image_load_store-host-mem-barrier host-mem-barrier.c ${depends})
piglit_add_executable(arb_shader_image_load_store-indexing indexing.c ${depends})
piglit_add_executable(arb_shader_image_load_store-invalid invalid.c ${depends})
piglit_add_executable(arb_shader_image_load_store-layer layer.c ${depends})
piglit_add_executable(arb_shader_image_load_store-level level.c ${depends})
piglit_add_executable(arb_shader_image_load_store-max-images max-images.c ${depends})
piglit_add_executable(arb_shader_image_load_store-max-size max-size.c ${depends})
piglit_add_executable(arb_shader_image_load_store-minmax minmax.c ${depends})
piglit_add_executable(arb_shader_image_load_store-qualifiers qualifiers.c ${depends})
piglit_add_executable(arb_shader_image_load_store-restrict restrict.c ${depends})
piglit_add_executable(arb_shader_image_load_store-semantics semantics.c ${depends})
piglit_add_executable(arb_shader_image_load_store-shader-mem-barrier shader-mem-barrier.c ${depends})
piglit_add_executable(arb_shader_image_load_store-state state.c ${depends})

# vim: ft=cmake:
