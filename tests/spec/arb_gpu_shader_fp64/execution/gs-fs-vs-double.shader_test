# test truncating a double holds precision
[require]
GLSL >= 1.50
GL_ARB_gpu_shader_fp64

[vertex shader]
#version 150
#extension GL_ARB_gpu_shader_fp64 : require
uniform dvec4 arg0;
in vec4 vertex;
out vec4 vertex_to_gs;
out dvec4 dout1_to_gs;
void main()
{
        vertex_to_gs = vertex;
	dout1_to_gs = arg0;
}

[geometry shader]
#version 150
#extension GL_ARB_gpu_shader_fp64 : require
layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;
in vec4 vertex_to_gs[3];
in dvec4 dout1_to_gs[3];
flat out dvec4 out_to_fs;

void main()
{
	for (int i = 0; i < 3; i++) {
		gl_Position = vertex_to_gs[i];
		out_to_fs = dout1_to_gs[i];
 	        EmitVertex();
        }
}

[fragment shader]
#version 150
#extension GL_ARB_gpu_shader_fp64 : require
flat in dvec4 out_to_fs;
uniform double tolerance;
uniform dvec4 expected;

void main()
{
  dvec4 result = trunc(out_to_fs);
  gl_FragColor = distance(result, dvec4(expected)) <= tolerance ? vec4(0.0, 1.0, 0.0, 1.0) : vec4(1.0, 0.0, 0.0, 1.0);
}

[vertex data]
vertex/float/2
-1.0 -1.0
 1.0 -1.0
 1.0  1.0
-1.0  1.0

[test]
uniform dvec4 arg0 1.7976931348623157E+308 1.5 -1.5 -0.5
uniform dvec4 expected 1.7976931348623157E+308 1.0 -1.0 0.0
uniform double tolerance 2.0000000000000002e-05
draw arrays GL_TRIANGLE_FAN 0 4
probe rgba 0 0 0.0 1.0 0.0 1.0
