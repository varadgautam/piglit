/**
 * DO NOT EDIT! Script 'gen_dispatch.py' generated this file from 'piglit-dispatch-gen.c.mako'
 *
 * Copyright 2014 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

static void*
resolve_glAccum(void)
{
	/* glAccum (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glAccum", 10);
	}

	unsupported("glAccum");
	return piglit_dispatch_glAccum;
}

static void APIENTRY
stub_glAccum(GLenum op, GLfloat value)
{
	check_initialized();
	piglit_dispatch_glAccum = resolve_glAccum();
	piglit_dispatch_glAccum(op, value);
}

PFNGLACCUMPROC piglit_dispatch_glAccum = stub_glAccum;

static void*
resolve_glAccumxOES(void)
{
	/* glAccumxOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glAccumxOES");
	}

	unsupported("glAccumxOES");
	return piglit_dispatch_glAccumxOES;
}

static void APIENTRY
stub_glAccumxOES(GLenum op, GLfixed value)
{
	check_initialized();
	piglit_dispatch_glAccumxOES = resolve_glAccumxOES();
	piglit_dispatch_glAccumxOES(op, value);
}

PFNGLACCUMXOESPROC piglit_dispatch_glAccumxOES = stub_glAccumxOES;

static void*
resolve_glActiveProgramEXT(void)
{
	/* glActiveProgramEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glActiveProgramEXT");
	}

	unsupported("glActiveProgramEXT");
	return piglit_dispatch_glActiveProgramEXT;
}

static void APIENTRY
stub_glActiveProgramEXT(GLuint program)
{
	check_initialized();
	piglit_dispatch_glActiveProgramEXT = resolve_glActiveProgramEXT();
	piglit_dispatch_glActiveProgramEXT(program);
}

PFNGLACTIVEPROGRAMEXTPROC piglit_dispatch_glActiveProgramEXT = stub_glActiveProgramEXT;

static void*
resolve_glActiveShaderProgram(void)
{
	/* glActiveShaderProgram (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glActiveShaderProgram", 41);
	}

	/* glActiveShaderProgram (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glActiveShaderProgram", 31);
	}

	/* glActiveShaderProgram (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glActiveShaderProgram");
	}

	unsupported("glActiveShaderProgram");
	return piglit_dispatch_glActiveShaderProgram;
}

static void APIENTRY
stub_glActiveShaderProgram(GLuint pipeline, GLuint program)
{
	check_initialized();
	piglit_dispatch_glActiveShaderProgram = resolve_glActiveShaderProgram();
	piglit_dispatch_glActiveShaderProgram(pipeline, program);
}

PFNGLACTIVESHADERPROGRAMPROC piglit_dispatch_glActiveShaderProgram = stub_glActiveShaderProgram;

static void*
resolve_glActiveShaderProgramEXT(void)
{
	/* glActiveShaderProgramEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glActiveShaderProgramEXT");
	}

	unsupported("glActiveShaderProgramEXT");
	return piglit_dispatch_glActiveShaderProgramEXT;
}

static void APIENTRY
stub_glActiveShaderProgramEXT(GLuint pipeline, GLuint program)
{
	check_initialized();
	piglit_dispatch_glActiveShaderProgramEXT = resolve_glActiveShaderProgramEXT();
	piglit_dispatch_glActiveShaderProgramEXT(pipeline, program);
}

PFNGLACTIVESHADERPROGRAMEXTPROC piglit_dispatch_glActiveShaderProgramEXT = stub_glActiveShaderProgramEXT;

static void*
resolve_glActiveStencilFaceEXT(void)
{
	/* glActiveStencilFaceEXT (GL_EXT_stencil_two_side) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_stencil_two_side")) {
		return get_ext_proc("glActiveStencilFaceEXT");
	}

	unsupported("glActiveStencilFaceEXT");
	return piglit_dispatch_glActiveStencilFaceEXT;
}

static void APIENTRY
stub_glActiveStencilFaceEXT(GLenum face)
{
	check_initialized();
	piglit_dispatch_glActiveStencilFaceEXT = resolve_glActiveStencilFaceEXT();
	piglit_dispatch_glActiveStencilFaceEXT(face);
}

PFNGLACTIVESTENCILFACEEXTPROC piglit_dispatch_glActiveStencilFaceEXT = stub_glActiveStencilFaceEXT;

static void*
resolve_glActiveTexture(void)
{
	/* glActiveTexture (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glActiveTexture", 13);
	}

	/* glActiveTexture (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glActiveTexture", 10);
	}

	/* glActiveTexture (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glActiveTexture", 20);
	}

	/* glActiveTextureARB (GL_ARB_multitexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multitexture")) {
		return get_ext_proc("glActiveTextureARB");
	}

	unsupported("glActiveTexture");
	return piglit_dispatch_glActiveTexture;
}

static void APIENTRY
stub_glActiveTexture(GLenum texture)
{
	check_initialized();
	piglit_dispatch_glActiveTexture = resolve_glActiveTexture();
	piglit_dispatch_glActiveTexture(texture);
}

PFNGLACTIVETEXTUREPROC piglit_dispatch_glActiveTexture = stub_glActiveTexture;

static void*
resolve_glActiveVaryingNV(void)
{
	/* glActiveVaryingNV (GL_NV_transform_feedback) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_transform_feedback")) {
		return get_ext_proc("glActiveVaryingNV");
	}

	unsupported("glActiveVaryingNV");
	return piglit_dispatch_glActiveVaryingNV;
}

static void APIENTRY
stub_glActiveVaryingNV(GLuint program, const GLchar * name)
{
	check_initialized();
	piglit_dispatch_glActiveVaryingNV = resolve_glActiveVaryingNV();
	piglit_dispatch_glActiveVaryingNV(program, name);
}

PFNGLACTIVEVARYINGNVPROC piglit_dispatch_glActiveVaryingNV = stub_glActiveVaryingNV;

static void*
resolve_glAlphaFragmentOp1ATI(void)
{
	/* glAlphaFragmentOp1ATI (GL_ATI_fragment_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_fragment_shader")) {
		return get_ext_proc("glAlphaFragmentOp1ATI");
	}

	unsupported("glAlphaFragmentOp1ATI");
	return piglit_dispatch_glAlphaFragmentOp1ATI;
}

static void APIENTRY
stub_glAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
{
	check_initialized();
	piglit_dispatch_glAlphaFragmentOp1ATI = resolve_glAlphaFragmentOp1ATI();
	piglit_dispatch_glAlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
}

PFNGLALPHAFRAGMENTOP1ATIPROC piglit_dispatch_glAlphaFragmentOp1ATI = stub_glAlphaFragmentOp1ATI;

static void*
resolve_glAlphaFragmentOp2ATI(void)
{
	/* glAlphaFragmentOp2ATI (GL_ATI_fragment_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_fragment_shader")) {
		return get_ext_proc("glAlphaFragmentOp2ATI");
	}

	unsupported("glAlphaFragmentOp2ATI");
	return piglit_dispatch_glAlphaFragmentOp2ATI;
}

static void APIENTRY
stub_glAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
{
	check_initialized();
	piglit_dispatch_glAlphaFragmentOp2ATI = resolve_glAlphaFragmentOp2ATI();
	piglit_dispatch_glAlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
}

PFNGLALPHAFRAGMENTOP2ATIPROC piglit_dispatch_glAlphaFragmentOp2ATI = stub_glAlphaFragmentOp2ATI;

static void*
resolve_glAlphaFragmentOp3ATI(void)
{
	/* glAlphaFragmentOp3ATI (GL_ATI_fragment_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_fragment_shader")) {
		return get_ext_proc("glAlphaFragmentOp3ATI");
	}

	unsupported("glAlphaFragmentOp3ATI");
	return piglit_dispatch_glAlphaFragmentOp3ATI;
}

static void APIENTRY
stub_glAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
{
	check_initialized();
	piglit_dispatch_glAlphaFragmentOp3ATI = resolve_glAlphaFragmentOp3ATI();
	piglit_dispatch_glAlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
}

PFNGLALPHAFRAGMENTOP3ATIPROC piglit_dispatch_glAlphaFragmentOp3ATI = stub_glAlphaFragmentOp3ATI;

static void*
resolve_glAlphaFunc(void)
{
	/* glAlphaFunc (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glAlphaFunc", 10);
	}

	/* glAlphaFunc (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glAlphaFunc", 10);
	}

	unsupported("glAlphaFunc");
	return piglit_dispatch_glAlphaFunc;
}

static void APIENTRY
stub_glAlphaFunc(GLenum func, GLfloat ref)
{
	check_initialized();
	piglit_dispatch_glAlphaFunc = resolve_glAlphaFunc();
	piglit_dispatch_glAlphaFunc(func, ref);
}

PFNGLALPHAFUNCPROC piglit_dispatch_glAlphaFunc = stub_glAlphaFunc;

static void*
resolve_glAlphaFuncQCOM(void)
{
	/* glAlphaFuncQCOM (GL_QCOM_alpha_test) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_QCOM_alpha_test")) {
		return get_ext_proc("glAlphaFuncQCOM");
	}

	unsupported("glAlphaFuncQCOM");
	return piglit_dispatch_glAlphaFuncQCOM;
}

static void APIENTRY
stub_glAlphaFuncQCOM(GLenum func, GLclampf ref)
{
	check_initialized();
	piglit_dispatch_glAlphaFuncQCOM = resolve_glAlphaFuncQCOM();
	piglit_dispatch_glAlphaFuncQCOM(func, ref);
}

PFNGLALPHAFUNCQCOMPROC piglit_dispatch_glAlphaFuncQCOM = stub_glAlphaFuncQCOM;

static void*
resolve_glAlphaFuncx(void)
{
	/* glAlphaFuncx (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glAlphaFuncx", 10);
	}

	unsupported("glAlphaFuncx");
	return piglit_dispatch_glAlphaFuncx;
}

static void APIENTRY
stub_glAlphaFuncx(GLenum func, GLfixed ref)
{
	check_initialized();
	piglit_dispatch_glAlphaFuncx = resolve_glAlphaFuncx();
	piglit_dispatch_glAlphaFuncx(func, ref);
}

PFNGLALPHAFUNCXPROC piglit_dispatch_glAlphaFuncx = stub_glAlphaFuncx;

static void*
resolve_glAlphaFuncxOES(void)
{
	/* glAlphaFuncxOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glAlphaFuncxOES");
	}

	unsupported("glAlphaFuncxOES");
	return piglit_dispatch_glAlphaFuncxOES;
}

static void APIENTRY
stub_glAlphaFuncxOES(GLenum func, GLfixed ref)
{
	check_initialized();
	piglit_dispatch_glAlphaFuncxOES = resolve_glAlphaFuncxOES();
	piglit_dispatch_glAlphaFuncxOES(func, ref);
}

PFNGLALPHAFUNCXOESPROC piglit_dispatch_glAlphaFuncxOES = stub_glAlphaFuncxOES;

static void*
resolve_glApplyTextureEXT(void)
{
	/* glApplyTextureEXT (GL_EXT_light_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_light_texture")) {
		return get_ext_proc("glApplyTextureEXT");
	}

	unsupported("glApplyTextureEXT");
	return piglit_dispatch_glApplyTextureEXT;
}

static void APIENTRY
stub_glApplyTextureEXT(GLenum mode)
{
	check_initialized();
	piglit_dispatch_glApplyTextureEXT = resolve_glApplyTextureEXT();
	piglit_dispatch_glApplyTextureEXT(mode);
}

PFNGLAPPLYTEXTUREEXTPROC piglit_dispatch_glApplyTextureEXT = stub_glApplyTextureEXT;

static void*
resolve_glAreProgramsResidentNV(void)
{
	/* glAreProgramsResidentNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glAreProgramsResidentNV");
	}

	unsupported("glAreProgramsResidentNV");
	return piglit_dispatch_glAreProgramsResidentNV;
}

static GLboolean APIENTRY
stub_glAreProgramsResidentNV(GLsizei n, const GLuint * programs, GLboolean * residences)
{
	check_initialized();
	piglit_dispatch_glAreProgramsResidentNV = resolve_glAreProgramsResidentNV();
	return piglit_dispatch_glAreProgramsResidentNV(n, programs, residences);
}

PFNGLAREPROGRAMSRESIDENTNVPROC piglit_dispatch_glAreProgramsResidentNV = stub_glAreProgramsResidentNV;

static void*
resolve_glAreTexturesResident(void)
{
	/* glAreTexturesResident (GL_VERSION_1_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glAreTexturesResident", 11);
	}

	unsupported("glAreTexturesResident");
	return piglit_dispatch_glAreTexturesResident;
}

static GLboolean APIENTRY
stub_glAreTexturesResident(GLsizei n, const GLuint * textures, GLboolean * residences)
{
	check_initialized();
	piglit_dispatch_glAreTexturesResident = resolve_glAreTexturesResident();
	return piglit_dispatch_glAreTexturesResident(n, textures, residences);
}

PFNGLARETEXTURESRESIDENTPROC piglit_dispatch_glAreTexturesResident = stub_glAreTexturesResident;

static void*
resolve_glAreTexturesResidentEXT(void)
{
	/* glAreTexturesResidentEXT (GL_EXT_texture_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_texture_object")) {
		return get_ext_proc("glAreTexturesResidentEXT");
	}

	unsupported("glAreTexturesResidentEXT");
	return piglit_dispatch_glAreTexturesResidentEXT;
}

static GLboolean APIENTRY
stub_glAreTexturesResidentEXT(GLsizei n, const GLuint * textures, GLboolean * residences)
{
	check_initialized();
	piglit_dispatch_glAreTexturesResidentEXT = resolve_glAreTexturesResidentEXT();
	return piglit_dispatch_glAreTexturesResidentEXT(n, textures, residences);
}

PFNGLARETEXTURESRESIDENTEXTPROC piglit_dispatch_glAreTexturesResidentEXT = stub_glAreTexturesResidentEXT;

static void*
resolve_glArrayElement(void)
{
	/* glArrayElement (GL_VERSION_1_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glArrayElement", 11);
	}

	/* glArrayElementEXT (GL_EXT_vertex_array) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_array")) {
		return get_ext_proc("glArrayElementEXT");
	}

	unsupported("glArrayElement");
	return piglit_dispatch_glArrayElement;
}

static void APIENTRY
stub_glArrayElement(GLint i)
{
	check_initialized();
	piglit_dispatch_glArrayElement = resolve_glArrayElement();
	piglit_dispatch_glArrayElement(i);
}

PFNGLARRAYELEMENTPROC piglit_dispatch_glArrayElement = stub_glArrayElement;

static void*
resolve_glArrayObjectATI(void)
{
	/* glArrayObjectATI (GL_ATI_vertex_array_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_array_object")) {
		return get_ext_proc("glArrayObjectATI");
	}

	unsupported("glArrayObjectATI");
	return piglit_dispatch_glArrayObjectATI;
}

static void APIENTRY
stub_glArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
{
	check_initialized();
	piglit_dispatch_glArrayObjectATI = resolve_glArrayObjectATI();
	piglit_dispatch_glArrayObjectATI(array, size, type, stride, buffer, offset);
}

PFNGLARRAYOBJECTATIPROC piglit_dispatch_glArrayObjectATI = stub_glArrayObjectATI;

static void*
resolve_glAsyncMarkerSGIX(void)
{
	/* glAsyncMarkerSGIX (GL_SGIX_async) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_async")) {
		return get_ext_proc("glAsyncMarkerSGIX");
	}

	unsupported("glAsyncMarkerSGIX");
	return piglit_dispatch_glAsyncMarkerSGIX;
}

static void APIENTRY
stub_glAsyncMarkerSGIX(GLuint marker)
{
	check_initialized();
	piglit_dispatch_glAsyncMarkerSGIX = resolve_glAsyncMarkerSGIX();
	piglit_dispatch_glAsyncMarkerSGIX(marker);
}

PFNGLASYNCMARKERSGIXPROC piglit_dispatch_glAsyncMarkerSGIX = stub_glAsyncMarkerSGIX;

static void*
resolve_glAttachObjectARB(void)
{
	/* glAttachShader (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glAttachShader", 20);
	}

	/* glAttachShader (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glAttachShader", 20);
	}

	/* glAttachObjectARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glAttachObjectARB");
	}

	unsupported("glAttachObjectARB");
	return piglit_dispatch_glAttachObjectARB;
}

static void APIENTRY
stub_glAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj)
{
	check_initialized();
	piglit_dispatch_glAttachObjectARB = resolve_glAttachObjectARB();
	piglit_dispatch_glAttachObjectARB(containerObj, obj);
}

PFNGLATTACHOBJECTARBPROC piglit_dispatch_glAttachObjectARB = stub_glAttachObjectARB;

static void*
resolve_glBegin(void)
{
	/* glBegin (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glBegin", 10);
	}

	unsupported("glBegin");
	return piglit_dispatch_glBegin;
}

static void APIENTRY
stub_glBegin(GLenum mode)
{
	check_initialized();
	piglit_dispatch_glBegin = resolve_glBegin();
	piglit_dispatch_glBegin(mode);
}

PFNGLBEGINPROC piglit_dispatch_glBegin = stub_glBegin;

static void*
resolve_glBeginConditionalRender(void)
{
	/* glBeginConditionalRender (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBeginConditionalRender", 30);
	}

	/* glBeginConditionalRenderNV (GL_NV_conditional_render) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_conditional_render")) {
		return get_ext_proc("glBeginConditionalRenderNV");
	}

	unsupported("glBeginConditionalRender");
	return piglit_dispatch_glBeginConditionalRender;
}

static void APIENTRY
stub_glBeginConditionalRender(GLuint id, GLenum mode)
{
	check_initialized();
	piglit_dispatch_glBeginConditionalRender = resolve_glBeginConditionalRender();
	piglit_dispatch_glBeginConditionalRender(id, mode);
}

PFNGLBEGINCONDITIONALRENDERPROC piglit_dispatch_glBeginConditionalRender = stub_glBeginConditionalRender;

static void*
resolve_glBeginConditionalRenderNVX(void)
{
	/* glBeginConditionalRenderNVX (GL_NVX_conditional_render) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NVX_conditional_render")) {
		return get_ext_proc("glBeginConditionalRenderNVX");
	}

	unsupported("glBeginConditionalRenderNVX");
	return piglit_dispatch_glBeginConditionalRenderNVX;
}

static void APIENTRY
stub_glBeginConditionalRenderNVX(GLuint id)
{
	check_initialized();
	piglit_dispatch_glBeginConditionalRenderNVX = resolve_glBeginConditionalRenderNVX();
	piglit_dispatch_glBeginConditionalRenderNVX(id);
}

PFNGLBEGINCONDITIONALRENDERNVXPROC piglit_dispatch_glBeginConditionalRenderNVX = stub_glBeginConditionalRenderNVX;

static void*
resolve_glBeginFragmentShaderATI(void)
{
	/* glBeginFragmentShaderATI (GL_ATI_fragment_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_fragment_shader")) {
		return get_ext_proc("glBeginFragmentShaderATI");
	}

	unsupported("glBeginFragmentShaderATI");
	return piglit_dispatch_glBeginFragmentShaderATI;
}

static void APIENTRY
stub_glBeginFragmentShaderATI()
{
	check_initialized();
	piglit_dispatch_glBeginFragmentShaderATI = resolve_glBeginFragmentShaderATI();
	piglit_dispatch_glBeginFragmentShaderATI();
}

PFNGLBEGINFRAGMENTSHADERATIPROC piglit_dispatch_glBeginFragmentShaderATI = stub_glBeginFragmentShaderATI;

static void*
resolve_glBeginOcclusionQueryNV(void)
{
	/* glBeginOcclusionQueryNV (GL_NV_occlusion_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_occlusion_query")) {
		return get_ext_proc("glBeginOcclusionQueryNV");
	}

	unsupported("glBeginOcclusionQueryNV");
	return piglit_dispatch_glBeginOcclusionQueryNV;
}

static void APIENTRY
stub_glBeginOcclusionQueryNV(GLuint id)
{
	check_initialized();
	piglit_dispatch_glBeginOcclusionQueryNV = resolve_glBeginOcclusionQueryNV();
	piglit_dispatch_glBeginOcclusionQueryNV(id);
}

PFNGLBEGINOCCLUSIONQUERYNVPROC piglit_dispatch_glBeginOcclusionQueryNV = stub_glBeginOcclusionQueryNV;

static void*
resolve_glBeginPerfMonitorAMD(void)
{
	/* glBeginPerfMonitorAMD (GL_AMD_performance_monitor) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_AMD_performance_monitor")) {
		return get_ext_proc("glBeginPerfMonitorAMD");
	}

	unsupported("glBeginPerfMonitorAMD");
	return piglit_dispatch_glBeginPerfMonitorAMD;
}

static void APIENTRY
stub_glBeginPerfMonitorAMD(GLuint monitor)
{
	check_initialized();
	piglit_dispatch_glBeginPerfMonitorAMD = resolve_glBeginPerfMonitorAMD();
	piglit_dispatch_glBeginPerfMonitorAMD(monitor);
}

PFNGLBEGINPERFMONITORAMDPROC piglit_dispatch_glBeginPerfMonitorAMD = stub_glBeginPerfMonitorAMD;

static void*
resolve_glBeginPerfQueryINTEL(void)
{
	/* glBeginPerfQueryINTEL (GL_INTEL_performance_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_INTEL_performance_query")) {
		return get_ext_proc("glBeginPerfQueryINTEL");
	}

	unsupported("glBeginPerfQueryINTEL");
	return piglit_dispatch_glBeginPerfQueryINTEL;
}

static void APIENTRY
stub_glBeginPerfQueryINTEL(GLuint queryHandle)
{
	check_initialized();
	piglit_dispatch_glBeginPerfQueryINTEL = resolve_glBeginPerfQueryINTEL();
	piglit_dispatch_glBeginPerfQueryINTEL(queryHandle);
}

PFNGLBEGINPERFQUERYINTELPROC piglit_dispatch_glBeginPerfQueryINTEL = stub_glBeginPerfQueryINTEL;

static void*
resolve_glBeginQuery(void)
{
	/* glBeginQuery (GL_VERSION_1_5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBeginQuery", 15);
	}

	/* glBeginQuery (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glBeginQuery", 30);
	}

	/* glBeginQueryARB (GL_ARB_occlusion_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_occlusion_query")) {
		return get_ext_proc("glBeginQueryARB");
	}

	unsupported("glBeginQuery");
	return piglit_dispatch_glBeginQuery;
}

static void APIENTRY
stub_glBeginQuery(GLenum target, GLuint id)
{
	check_initialized();
	piglit_dispatch_glBeginQuery = resolve_glBeginQuery();
	piglit_dispatch_glBeginQuery(target, id);
}

PFNGLBEGINQUERYPROC piglit_dispatch_glBeginQuery = stub_glBeginQuery;

static void*
resolve_glBeginQueryEXT(void)
{
	/* glBeginQueryEXT (GL_EXT_disjoint_timer_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_disjoint_timer_query")) {
		return get_ext_proc("glBeginQueryEXT");
	}

	/* glBeginQueryEXT (GL_EXT_occlusion_query_boolean) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_occlusion_query_boolean")) {
		return get_ext_proc("glBeginQueryEXT");
	}

	unsupported("glBeginQueryEXT");
	return piglit_dispatch_glBeginQueryEXT;
}

static void APIENTRY
stub_glBeginQueryEXT(GLenum target, GLuint id)
{
	check_initialized();
	piglit_dispatch_glBeginQueryEXT = resolve_glBeginQueryEXT();
	piglit_dispatch_glBeginQueryEXT(target, id);
}

PFNGLBEGINQUERYEXTPROC piglit_dispatch_glBeginQueryEXT = stub_glBeginQueryEXT;

static void*
resolve_glBeginQueryIndexed(void)
{
	/* glBeginQueryIndexed (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBeginQueryIndexed", 40);
	}

	/* glBeginQueryIndexed (GL_ARB_transform_feedback3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_transform_feedback3")) {
		return get_ext_proc("glBeginQueryIndexed");
	}

	unsupported("glBeginQueryIndexed");
	return piglit_dispatch_glBeginQueryIndexed;
}

static void APIENTRY
stub_glBeginQueryIndexed(GLenum target, GLuint index, GLuint id)
{
	check_initialized();
	piglit_dispatch_glBeginQueryIndexed = resolve_glBeginQueryIndexed();
	piglit_dispatch_glBeginQueryIndexed(target, index, id);
}

PFNGLBEGINQUERYINDEXEDPROC piglit_dispatch_glBeginQueryIndexed = stub_glBeginQueryIndexed;

static void*
resolve_glBeginTransformFeedback(void)
{
	/* glBeginTransformFeedback (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBeginTransformFeedback", 30);
	}

	/* glBeginTransformFeedback (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glBeginTransformFeedback", 30);
	}

	/* glBeginTransformFeedbackEXT (GL_EXT_transform_feedback) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_transform_feedback")) {
		return get_ext_proc("glBeginTransformFeedbackEXT");
	}

	/* glBeginTransformFeedbackNV (GL_NV_transform_feedback) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_transform_feedback")) {
		return get_ext_proc("glBeginTransformFeedbackNV");
	}

	unsupported("glBeginTransformFeedback");
	return piglit_dispatch_glBeginTransformFeedback;
}

static void APIENTRY
stub_glBeginTransformFeedback(GLenum primitiveMode)
{
	check_initialized();
	piglit_dispatch_glBeginTransformFeedback = resolve_glBeginTransformFeedback();
	piglit_dispatch_glBeginTransformFeedback(primitiveMode);
}

PFNGLBEGINTRANSFORMFEEDBACKPROC piglit_dispatch_glBeginTransformFeedback = stub_glBeginTransformFeedback;

static void*
resolve_glBeginVertexShaderEXT(void)
{
	/* glBeginVertexShaderEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glBeginVertexShaderEXT");
	}

	unsupported("glBeginVertexShaderEXT");
	return piglit_dispatch_glBeginVertexShaderEXT;
}

static void APIENTRY
stub_glBeginVertexShaderEXT()
{
	check_initialized();
	piglit_dispatch_glBeginVertexShaderEXT = resolve_glBeginVertexShaderEXT();
	piglit_dispatch_glBeginVertexShaderEXT();
}

PFNGLBEGINVERTEXSHADEREXTPROC piglit_dispatch_glBeginVertexShaderEXT = stub_glBeginVertexShaderEXT;

static void*
resolve_glBeginVideoCaptureNV(void)
{
	/* glBeginVideoCaptureNV (GL_NV_video_capture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_video_capture")) {
		return get_ext_proc("glBeginVideoCaptureNV");
	}

	unsupported("glBeginVideoCaptureNV");
	return piglit_dispatch_glBeginVideoCaptureNV;
}

static void APIENTRY
stub_glBeginVideoCaptureNV(GLuint video_capture_slot)
{
	check_initialized();
	piglit_dispatch_glBeginVideoCaptureNV = resolve_glBeginVideoCaptureNV();
	piglit_dispatch_glBeginVideoCaptureNV(video_capture_slot);
}

PFNGLBEGINVIDEOCAPTURENVPROC piglit_dispatch_glBeginVideoCaptureNV = stub_glBeginVideoCaptureNV;

static void*
resolve_glBindAttribLocation(void)
{
	/* glBindAttribLocation (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBindAttribLocation", 20);
	}

	/* glBindAttribLocation (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glBindAttribLocation", 20);
	}

	/* glBindAttribLocationARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glBindAttribLocationARB");
	}

	unsupported("glBindAttribLocation");
	return piglit_dispatch_glBindAttribLocation;
}

static void APIENTRY
stub_glBindAttribLocation(GLuint program, GLuint index, const GLchar * name)
{
	check_initialized();
	piglit_dispatch_glBindAttribLocation = resolve_glBindAttribLocation();
	piglit_dispatch_glBindAttribLocation(program, index, name);
}

PFNGLBINDATTRIBLOCATIONPROC piglit_dispatch_glBindAttribLocation = stub_glBindAttribLocation;

static void*
resolve_glBindBuffer(void)
{
	/* glBindBuffer (GL_VERSION_1_5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBindBuffer", 15);
	}

	/* glBindBuffer (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glBindBuffer", 10);
	}

	/* glBindBuffer (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glBindBuffer", 20);
	}

	/* glBindBufferARB (GL_ARB_vertex_buffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_buffer_object")) {
		return get_ext_proc("glBindBufferARB");
	}

	unsupported("glBindBuffer");
	return piglit_dispatch_glBindBuffer;
}

static void APIENTRY
stub_glBindBuffer(GLenum target, GLuint buffer)
{
	check_initialized();
	piglit_dispatch_glBindBuffer = resolve_glBindBuffer();
	piglit_dispatch_glBindBuffer(target, buffer);
}

PFNGLBINDBUFFERPROC piglit_dispatch_glBindBuffer = stub_glBindBuffer;

static void*
resolve_glBindBufferBase(void)
{
	/* glBindBufferBase (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBindBufferBase", 30);
	}

	/* glBindBufferBase (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glBindBufferBase", 30);
	}

	/* glBindBufferBaseEXT (GL_EXT_transform_feedback) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_transform_feedback")) {
		return get_ext_proc("glBindBufferBaseEXT");
	}

	/* glBindBufferBaseNV (GL_NV_transform_feedback) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_transform_feedback")) {
		return get_ext_proc("glBindBufferBaseNV");
	}

	unsupported("glBindBufferBase");
	return piglit_dispatch_glBindBufferBase;
}

static void APIENTRY
stub_glBindBufferBase(GLenum target, GLuint index, GLuint buffer)
{
	check_initialized();
	piglit_dispatch_glBindBufferBase = resolve_glBindBufferBase();
	piglit_dispatch_glBindBufferBase(target, index, buffer);
}

PFNGLBINDBUFFERBASEPROC piglit_dispatch_glBindBufferBase = stub_glBindBufferBase;

static void*
resolve_glBindBufferOffsetEXT(void)
{
	/* glBindBufferOffsetEXT (GL_EXT_transform_feedback) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_transform_feedback")) {
		return get_ext_proc("glBindBufferOffsetEXT");
	}

	/* glBindBufferOffsetNV (GL_NV_transform_feedback) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_transform_feedback")) {
		return get_ext_proc("glBindBufferOffsetNV");
	}

	unsupported("glBindBufferOffsetEXT");
	return piglit_dispatch_glBindBufferOffsetEXT;
}

static void APIENTRY
stub_glBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset)
{
	check_initialized();
	piglit_dispatch_glBindBufferOffsetEXT = resolve_glBindBufferOffsetEXT();
	piglit_dispatch_glBindBufferOffsetEXT(target, index, buffer, offset);
}

PFNGLBINDBUFFEROFFSETEXTPROC piglit_dispatch_glBindBufferOffsetEXT = stub_glBindBufferOffsetEXT;

static void*
resolve_glBindBufferRange(void)
{
	/* glBindBufferRange (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBindBufferRange", 30);
	}

	/* glBindBufferRange (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glBindBufferRange", 30);
	}

	/* glBindBufferRangeEXT (GL_EXT_transform_feedback) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_transform_feedback")) {
		return get_ext_proc("glBindBufferRangeEXT");
	}

	/* glBindBufferRangeNV (GL_NV_transform_feedback) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_transform_feedback")) {
		return get_ext_proc("glBindBufferRangeNV");
	}

	unsupported("glBindBufferRange");
	return piglit_dispatch_glBindBufferRange;
}

static void APIENTRY
stub_glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
	check_initialized();
	piglit_dispatch_glBindBufferRange = resolve_glBindBufferRange();
	piglit_dispatch_glBindBufferRange(target, index, buffer, offset, size);
}

PFNGLBINDBUFFERRANGEPROC piglit_dispatch_glBindBufferRange = stub_glBindBufferRange;

static void*
resolve_glBindBuffersBase(void)
{
	/* glBindBuffersBase (GL_VERSION_4_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBindBuffersBase", 44);
	}

	/* glBindBuffersBase (GL_ARB_multi_bind) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multi_bind")) {
		return get_ext_proc("glBindBuffersBase");
	}

	unsupported("glBindBuffersBase");
	return piglit_dispatch_glBindBuffersBase;
}

static void APIENTRY
stub_glBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint * buffers)
{
	check_initialized();
	piglit_dispatch_glBindBuffersBase = resolve_glBindBuffersBase();
	piglit_dispatch_glBindBuffersBase(target, first, count, buffers);
}

PFNGLBINDBUFFERSBASEPROC piglit_dispatch_glBindBuffersBase = stub_glBindBuffersBase;

static void*
resolve_glBindBuffersRange(void)
{
	/* glBindBuffersRange (GL_VERSION_4_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBindBuffersRange", 44);
	}

	/* glBindBuffersRange (GL_ARB_multi_bind) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multi_bind")) {
		return get_ext_proc("glBindBuffersRange");
	}

	unsupported("glBindBuffersRange");
	return piglit_dispatch_glBindBuffersRange;
}

static void APIENTRY
stub_glBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes)
{
	check_initialized();
	piglit_dispatch_glBindBuffersRange = resolve_glBindBuffersRange();
	piglit_dispatch_glBindBuffersRange(target, first, count, buffers, offsets, sizes);
}

PFNGLBINDBUFFERSRANGEPROC piglit_dispatch_glBindBuffersRange = stub_glBindBuffersRange;

static void*
resolve_glBindFragDataLocation(void)
{
	/* glBindFragDataLocation (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBindFragDataLocation", 30);
	}

	/* glBindFragDataLocationEXT (GL_EXT_gpu_shader4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_gpu_shader4")) {
		return get_ext_proc("glBindFragDataLocationEXT");
	}

	unsupported("glBindFragDataLocation");
	return piglit_dispatch_glBindFragDataLocation;
}

static void APIENTRY
stub_glBindFragDataLocation(GLuint program, GLuint color, const GLchar * name)
{
	check_initialized();
	piglit_dispatch_glBindFragDataLocation = resolve_glBindFragDataLocation();
	piglit_dispatch_glBindFragDataLocation(program, color, name);
}

PFNGLBINDFRAGDATALOCATIONPROC piglit_dispatch_glBindFragDataLocation = stub_glBindFragDataLocation;

static void*
resolve_glBindFragDataLocationIndexed(void)
{
	/* glBindFragDataLocationIndexed (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBindFragDataLocationIndexed", 33);
	}

	/* glBindFragDataLocationIndexed (GL_ARB_blend_func_extended) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_blend_func_extended")) {
		return get_ext_proc("glBindFragDataLocationIndexed");
	}

	unsupported("glBindFragDataLocationIndexed");
	return piglit_dispatch_glBindFragDataLocationIndexed;
}

static void APIENTRY
stub_glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name)
{
	check_initialized();
	piglit_dispatch_glBindFragDataLocationIndexed = resolve_glBindFragDataLocationIndexed();
	piglit_dispatch_glBindFragDataLocationIndexed(program, colorNumber, index, name);
}

PFNGLBINDFRAGDATALOCATIONINDEXEDPROC piglit_dispatch_glBindFragDataLocationIndexed = stub_glBindFragDataLocationIndexed;

static void*
resolve_glBindFragmentShaderATI(void)
{
	/* glBindFragmentShaderATI (GL_ATI_fragment_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_fragment_shader")) {
		return get_ext_proc("glBindFragmentShaderATI");
	}

	unsupported("glBindFragmentShaderATI");
	return piglit_dispatch_glBindFragmentShaderATI;
}

static void APIENTRY
stub_glBindFragmentShaderATI(GLuint id)
{
	check_initialized();
	piglit_dispatch_glBindFragmentShaderATI = resolve_glBindFragmentShaderATI();
	piglit_dispatch_glBindFragmentShaderATI(id);
}

PFNGLBINDFRAGMENTSHADERATIPROC piglit_dispatch_glBindFragmentShaderATI = stub_glBindFragmentShaderATI;

static void*
resolve_glBindFramebuffer(void)
{
	/* glBindFramebuffer (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBindFramebuffer", 30);
	}

	/* glBindFramebuffer (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glBindFramebuffer", 20);
	}

	/* glBindFramebuffer (GL_ARB_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_framebuffer_object")) {
		return get_ext_proc("glBindFramebuffer");
	}

	unsupported("glBindFramebuffer");
	return piglit_dispatch_glBindFramebuffer;
}

static void APIENTRY
stub_glBindFramebuffer(GLenum target, GLuint framebuffer)
{
	check_initialized();
	piglit_dispatch_glBindFramebuffer = resolve_glBindFramebuffer();
	piglit_dispatch_glBindFramebuffer(target, framebuffer);
}

PFNGLBINDFRAMEBUFFERPROC piglit_dispatch_glBindFramebuffer = stub_glBindFramebuffer;

static void*
resolve_glBindFramebufferEXT(void)
{
	/* glBindFramebufferEXT (GL_EXT_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_framebuffer_object")) {
		return get_ext_proc("glBindFramebufferEXT");
	}

	unsupported("glBindFramebufferEXT");
	return piglit_dispatch_glBindFramebufferEXT;
}

static void APIENTRY
stub_glBindFramebufferEXT(GLenum target, GLuint framebuffer)
{
	check_initialized();
	piglit_dispatch_glBindFramebufferEXT = resolve_glBindFramebufferEXT();
	piglit_dispatch_glBindFramebufferEXT(target, framebuffer);
}

PFNGLBINDFRAMEBUFFEREXTPROC piglit_dispatch_glBindFramebufferEXT = stub_glBindFramebufferEXT;

static void*
resolve_glBindFramebufferOES(void)
{
	/* glBindFramebufferOES (GL_OES_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_framebuffer_object")) {
		return get_ext_proc("glBindFramebufferOES");
	}

	unsupported("glBindFramebufferOES");
	return piglit_dispatch_glBindFramebufferOES;
}

static void APIENTRY
stub_glBindFramebufferOES(GLenum target, GLuint framebuffer)
{
	check_initialized();
	piglit_dispatch_glBindFramebufferOES = resolve_glBindFramebufferOES();
	piglit_dispatch_glBindFramebufferOES(target, framebuffer);
}

PFNGLBINDFRAMEBUFFEROESPROC piglit_dispatch_glBindFramebufferOES = stub_glBindFramebufferOES;

static void*
resolve_glBindImageTexture(void)
{
	/* glBindImageTexture (GL_VERSION_4_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBindImageTexture", 42);
	}

	/* glBindImageTexture (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glBindImageTexture", 31);
	}

	/* glBindImageTexture (GL_ARB_shader_image_load_store) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_image_load_store")) {
		return get_ext_proc("glBindImageTexture");
	}

	unsupported("glBindImageTexture");
	return piglit_dispatch_glBindImageTexture;
}

static void APIENTRY
stub_glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
{
	check_initialized();
	piglit_dispatch_glBindImageTexture = resolve_glBindImageTexture();
	piglit_dispatch_glBindImageTexture(unit, texture, level, layered, layer, access, format);
}

PFNGLBINDIMAGETEXTUREPROC piglit_dispatch_glBindImageTexture = stub_glBindImageTexture;

static void*
resolve_glBindImageTextureEXT(void)
{
	/* glBindImageTextureEXT (GL_EXT_shader_image_load_store) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_shader_image_load_store")) {
		return get_ext_proc("glBindImageTextureEXT");
	}

	unsupported("glBindImageTextureEXT");
	return piglit_dispatch_glBindImageTextureEXT;
}

static void APIENTRY
stub_glBindImageTextureEXT(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format)
{
	check_initialized();
	piglit_dispatch_glBindImageTextureEXT = resolve_glBindImageTextureEXT();
	piglit_dispatch_glBindImageTextureEXT(index, texture, level, layered, layer, access, format);
}

PFNGLBINDIMAGETEXTUREEXTPROC piglit_dispatch_glBindImageTextureEXT = stub_glBindImageTextureEXT;

static void*
resolve_glBindImageTextures(void)
{
	/* glBindImageTextures (GL_VERSION_4_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBindImageTextures", 44);
	}

	/* glBindImageTextures (GL_ARB_multi_bind) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multi_bind")) {
		return get_ext_proc("glBindImageTextures");
	}

	unsupported("glBindImageTextures");
	return piglit_dispatch_glBindImageTextures;
}

static void APIENTRY
stub_glBindImageTextures(GLuint first, GLsizei count, const GLuint * textures)
{
	check_initialized();
	piglit_dispatch_glBindImageTextures = resolve_glBindImageTextures();
	piglit_dispatch_glBindImageTextures(first, count, textures);
}

PFNGLBINDIMAGETEXTURESPROC piglit_dispatch_glBindImageTextures = stub_glBindImageTextures;

static void*
resolve_glBindLightParameterEXT(void)
{
	/* glBindLightParameterEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glBindLightParameterEXT");
	}

	unsupported("glBindLightParameterEXT");
	return piglit_dispatch_glBindLightParameterEXT;
}

static GLuint APIENTRY
stub_glBindLightParameterEXT(GLenum light, GLenum value)
{
	check_initialized();
	piglit_dispatch_glBindLightParameterEXT = resolve_glBindLightParameterEXT();
	return piglit_dispatch_glBindLightParameterEXT(light, value);
}

PFNGLBINDLIGHTPARAMETEREXTPROC piglit_dispatch_glBindLightParameterEXT = stub_glBindLightParameterEXT;

static void*
resolve_glBindMaterialParameterEXT(void)
{
	/* glBindMaterialParameterEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glBindMaterialParameterEXT");
	}

	unsupported("glBindMaterialParameterEXT");
	return piglit_dispatch_glBindMaterialParameterEXT;
}

static GLuint APIENTRY
stub_glBindMaterialParameterEXT(GLenum face, GLenum value)
{
	check_initialized();
	piglit_dispatch_glBindMaterialParameterEXT = resolve_glBindMaterialParameterEXT();
	return piglit_dispatch_glBindMaterialParameterEXT(face, value);
}

PFNGLBINDMATERIALPARAMETEREXTPROC piglit_dispatch_glBindMaterialParameterEXT = stub_glBindMaterialParameterEXT;

static void*
resolve_glBindMultiTextureEXT(void)
{
	/* glBindMultiTextureEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glBindMultiTextureEXT");
	}

	unsupported("glBindMultiTextureEXT");
	return piglit_dispatch_glBindMultiTextureEXT;
}

static void APIENTRY
stub_glBindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture)
{
	check_initialized();
	piglit_dispatch_glBindMultiTextureEXT = resolve_glBindMultiTextureEXT();
	piglit_dispatch_glBindMultiTextureEXT(texunit, target, texture);
}

PFNGLBINDMULTITEXTUREEXTPROC piglit_dispatch_glBindMultiTextureEXT = stub_glBindMultiTextureEXT;

static void*
resolve_glBindParameterEXT(void)
{
	/* glBindParameterEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glBindParameterEXT");
	}

	unsupported("glBindParameterEXT");
	return piglit_dispatch_glBindParameterEXT;
}

static GLuint APIENTRY
stub_glBindParameterEXT(GLenum value)
{
	check_initialized();
	piglit_dispatch_glBindParameterEXT = resolve_glBindParameterEXT();
	return piglit_dispatch_glBindParameterEXT(value);
}

PFNGLBINDPARAMETEREXTPROC piglit_dispatch_glBindParameterEXT = stub_glBindParameterEXT;

static void*
resolve_glBindProgramARB(void)
{
	/* glBindProgramARB (GL_ARB_fragment_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_fragment_program")) {
		return get_ext_proc("glBindProgramARB");
	}

	/* glBindProgramARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glBindProgramARB");
	}

	/* glBindProgramNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glBindProgramNV");
	}

	unsupported("glBindProgramARB");
	return piglit_dispatch_glBindProgramARB;
}

static void APIENTRY
stub_glBindProgramARB(GLenum target, GLuint program)
{
	check_initialized();
	piglit_dispatch_glBindProgramARB = resolve_glBindProgramARB();
	piglit_dispatch_glBindProgramARB(target, program);
}

PFNGLBINDPROGRAMARBPROC piglit_dispatch_glBindProgramARB = stub_glBindProgramARB;

static void*
resolve_glBindProgramPipeline(void)
{
	/* glBindProgramPipeline (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBindProgramPipeline", 41);
	}

	/* glBindProgramPipeline (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glBindProgramPipeline", 31);
	}

	/* glBindProgramPipeline (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glBindProgramPipeline");
	}

	unsupported("glBindProgramPipeline");
	return piglit_dispatch_glBindProgramPipeline;
}

static void APIENTRY
stub_glBindProgramPipeline(GLuint pipeline)
{
	check_initialized();
	piglit_dispatch_glBindProgramPipeline = resolve_glBindProgramPipeline();
	piglit_dispatch_glBindProgramPipeline(pipeline);
}

PFNGLBINDPROGRAMPIPELINEPROC piglit_dispatch_glBindProgramPipeline = stub_glBindProgramPipeline;

static void*
resolve_glBindProgramPipelineEXT(void)
{
	/* glBindProgramPipelineEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glBindProgramPipelineEXT");
	}

	unsupported("glBindProgramPipelineEXT");
	return piglit_dispatch_glBindProgramPipelineEXT;
}

static void APIENTRY
stub_glBindProgramPipelineEXT(GLuint pipeline)
{
	check_initialized();
	piglit_dispatch_glBindProgramPipelineEXT = resolve_glBindProgramPipelineEXT();
	piglit_dispatch_glBindProgramPipelineEXT(pipeline);
}

PFNGLBINDPROGRAMPIPELINEEXTPROC piglit_dispatch_glBindProgramPipelineEXT = stub_glBindProgramPipelineEXT;

static void*
resolve_glBindRenderbuffer(void)
{
	/* glBindRenderbuffer (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBindRenderbuffer", 30);
	}

	/* glBindRenderbuffer (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glBindRenderbuffer", 20);
	}

	/* glBindRenderbuffer (GL_ARB_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_framebuffer_object")) {
		return get_ext_proc("glBindRenderbuffer");
	}

	unsupported("glBindRenderbuffer");
	return piglit_dispatch_glBindRenderbuffer;
}

static void APIENTRY
stub_glBindRenderbuffer(GLenum target, GLuint renderbuffer)
{
	check_initialized();
	piglit_dispatch_glBindRenderbuffer = resolve_glBindRenderbuffer();
	piglit_dispatch_glBindRenderbuffer(target, renderbuffer);
}

PFNGLBINDRENDERBUFFERPROC piglit_dispatch_glBindRenderbuffer = stub_glBindRenderbuffer;

static void*
resolve_glBindRenderbufferEXT(void)
{
	/* glBindRenderbufferEXT (GL_EXT_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_framebuffer_object")) {
		return get_ext_proc("glBindRenderbufferEXT");
	}

	unsupported("glBindRenderbufferEXT");
	return piglit_dispatch_glBindRenderbufferEXT;
}

static void APIENTRY
stub_glBindRenderbufferEXT(GLenum target, GLuint renderbuffer)
{
	check_initialized();
	piglit_dispatch_glBindRenderbufferEXT = resolve_glBindRenderbufferEXT();
	piglit_dispatch_glBindRenderbufferEXT(target, renderbuffer);
}

PFNGLBINDRENDERBUFFEREXTPROC piglit_dispatch_glBindRenderbufferEXT = stub_glBindRenderbufferEXT;

static void*
resolve_glBindRenderbufferOES(void)
{
	/* glBindRenderbufferOES (GL_OES_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_framebuffer_object")) {
		return get_ext_proc("glBindRenderbufferOES");
	}

	unsupported("glBindRenderbufferOES");
	return piglit_dispatch_glBindRenderbufferOES;
}

static void APIENTRY
stub_glBindRenderbufferOES(GLenum target, GLuint renderbuffer)
{
	check_initialized();
	piglit_dispatch_glBindRenderbufferOES = resolve_glBindRenderbufferOES();
	piglit_dispatch_glBindRenderbufferOES(target, renderbuffer);
}

PFNGLBINDRENDERBUFFEROESPROC piglit_dispatch_glBindRenderbufferOES = stub_glBindRenderbufferOES;

static void*
resolve_glBindSampler(void)
{
	/* glBindSampler (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBindSampler", 33);
	}

	/* glBindSampler (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glBindSampler", 30);
	}

	/* glBindSampler (GL_ARB_sampler_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_sampler_objects")) {
		return get_ext_proc("glBindSampler");
	}

	unsupported("glBindSampler");
	return piglit_dispatch_glBindSampler;
}

static void APIENTRY
stub_glBindSampler(GLuint unit, GLuint sampler)
{
	check_initialized();
	piglit_dispatch_glBindSampler = resolve_glBindSampler();
	piglit_dispatch_glBindSampler(unit, sampler);
}

PFNGLBINDSAMPLERPROC piglit_dispatch_glBindSampler = stub_glBindSampler;

static void*
resolve_glBindSamplers(void)
{
	/* glBindSamplers (GL_VERSION_4_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBindSamplers", 44);
	}

	/* glBindSamplers (GL_ARB_multi_bind) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multi_bind")) {
		return get_ext_proc("glBindSamplers");
	}

	unsupported("glBindSamplers");
	return piglit_dispatch_glBindSamplers;
}

static void APIENTRY
stub_glBindSamplers(GLuint first, GLsizei count, const GLuint * samplers)
{
	check_initialized();
	piglit_dispatch_glBindSamplers = resolve_glBindSamplers();
	piglit_dispatch_glBindSamplers(first, count, samplers);
}

PFNGLBINDSAMPLERSPROC piglit_dispatch_glBindSamplers = stub_glBindSamplers;

static void*
resolve_glBindTexGenParameterEXT(void)
{
	/* glBindTexGenParameterEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glBindTexGenParameterEXT");
	}

	unsupported("glBindTexGenParameterEXT");
	return piglit_dispatch_glBindTexGenParameterEXT;
}

static GLuint APIENTRY
stub_glBindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value)
{
	check_initialized();
	piglit_dispatch_glBindTexGenParameterEXT = resolve_glBindTexGenParameterEXT();
	return piglit_dispatch_glBindTexGenParameterEXT(unit, coord, value);
}

PFNGLBINDTEXGENPARAMETEREXTPROC piglit_dispatch_glBindTexGenParameterEXT = stub_glBindTexGenParameterEXT;

static void*
resolve_glBindTexture(void)
{
	/* glBindTexture (GL_VERSION_1_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBindTexture", 11);
	}

	/* glBindTexture (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glBindTexture", 10);
	}

	/* glBindTexture (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glBindTexture", 20);
	}

	/* glBindTextureEXT (GL_EXT_texture_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_texture_object")) {
		return get_ext_proc("glBindTextureEXT");
	}

	unsupported("glBindTexture");
	return piglit_dispatch_glBindTexture;
}

static void APIENTRY
stub_glBindTexture(GLenum target, GLuint texture)
{
	check_initialized();
	piglit_dispatch_glBindTexture = resolve_glBindTexture();
	piglit_dispatch_glBindTexture(target, texture);
}

PFNGLBINDTEXTUREPROC piglit_dispatch_glBindTexture = stub_glBindTexture;

static void*
resolve_glBindTextureUnitParameterEXT(void)
{
	/* glBindTextureUnitParameterEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glBindTextureUnitParameterEXT");
	}

	unsupported("glBindTextureUnitParameterEXT");
	return piglit_dispatch_glBindTextureUnitParameterEXT;
}

static GLuint APIENTRY
stub_glBindTextureUnitParameterEXT(GLenum unit, GLenum value)
{
	check_initialized();
	piglit_dispatch_glBindTextureUnitParameterEXT = resolve_glBindTextureUnitParameterEXT();
	return piglit_dispatch_glBindTextureUnitParameterEXT(unit, value);
}

PFNGLBINDTEXTUREUNITPARAMETEREXTPROC piglit_dispatch_glBindTextureUnitParameterEXT = stub_glBindTextureUnitParameterEXT;

static void*
resolve_glBindTextures(void)
{
	/* glBindTextures (GL_VERSION_4_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBindTextures", 44);
	}

	/* glBindTextures (GL_ARB_multi_bind) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multi_bind")) {
		return get_ext_proc("glBindTextures");
	}

	unsupported("glBindTextures");
	return piglit_dispatch_glBindTextures;
}

static void APIENTRY
stub_glBindTextures(GLuint first, GLsizei count, const GLuint * textures)
{
	check_initialized();
	piglit_dispatch_glBindTextures = resolve_glBindTextures();
	piglit_dispatch_glBindTextures(first, count, textures);
}

PFNGLBINDTEXTURESPROC piglit_dispatch_glBindTextures = stub_glBindTextures;

static void*
resolve_glBindTransformFeedback(void)
{
	/* glBindTransformFeedback (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBindTransformFeedback", 40);
	}

	/* glBindTransformFeedback (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glBindTransformFeedback", 30);
	}

	/* glBindTransformFeedback (GL_ARB_transform_feedback2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_transform_feedback2")) {
		return get_ext_proc("glBindTransformFeedback");
	}

	unsupported("glBindTransformFeedback");
	return piglit_dispatch_glBindTransformFeedback;
}

static void APIENTRY
stub_glBindTransformFeedback(GLenum target, GLuint id)
{
	check_initialized();
	piglit_dispatch_glBindTransformFeedback = resolve_glBindTransformFeedback();
	piglit_dispatch_glBindTransformFeedback(target, id);
}

PFNGLBINDTRANSFORMFEEDBACKPROC piglit_dispatch_glBindTransformFeedback = stub_glBindTransformFeedback;

static void*
resolve_glBindTransformFeedbackNV(void)
{
	/* glBindTransformFeedbackNV (GL_NV_transform_feedback2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_transform_feedback2")) {
		return get_ext_proc("glBindTransformFeedbackNV");
	}

	unsupported("glBindTransformFeedbackNV");
	return piglit_dispatch_glBindTransformFeedbackNV;
}

static void APIENTRY
stub_glBindTransformFeedbackNV(GLenum target, GLuint id)
{
	check_initialized();
	piglit_dispatch_glBindTransformFeedbackNV = resolve_glBindTransformFeedbackNV();
	piglit_dispatch_glBindTransformFeedbackNV(target, id);
}

PFNGLBINDTRANSFORMFEEDBACKNVPROC piglit_dispatch_glBindTransformFeedbackNV = stub_glBindTransformFeedbackNV;

static void*
resolve_glBindVertexArray(void)
{
	/* glBindVertexArray (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBindVertexArray", 30);
	}

	/* glBindVertexArray (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glBindVertexArray", 30);
	}

	/* glBindVertexArray (GL_ARB_vertex_array_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_array_object")) {
		return get_ext_proc("glBindVertexArray");
	}

	/* glBindVertexArrayOES (GL_OES_vertex_array_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_OES_vertex_array_object")) {
		return get_ext_proc("glBindVertexArrayOES");
	}

	unsupported("glBindVertexArray");
	return piglit_dispatch_glBindVertexArray;
}

static void APIENTRY
stub_glBindVertexArray(GLuint array)
{
	check_initialized();
	piglit_dispatch_glBindVertexArray = resolve_glBindVertexArray();
	piglit_dispatch_glBindVertexArray(array);
}

PFNGLBINDVERTEXARRAYPROC piglit_dispatch_glBindVertexArray = stub_glBindVertexArray;

static void*
resolve_glBindVertexArrayAPPLE(void)
{
	/* glBindVertexArrayAPPLE (GL_APPLE_vertex_array_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_APPLE_vertex_array_object")) {
		return get_ext_proc("glBindVertexArrayAPPLE");
	}

	unsupported("glBindVertexArrayAPPLE");
	return piglit_dispatch_glBindVertexArrayAPPLE;
}

static void APIENTRY
stub_glBindVertexArrayAPPLE(GLuint array)
{
	check_initialized();
	piglit_dispatch_glBindVertexArrayAPPLE = resolve_glBindVertexArrayAPPLE();
	piglit_dispatch_glBindVertexArrayAPPLE(array);
}

PFNGLBINDVERTEXARRAYAPPLEPROC piglit_dispatch_glBindVertexArrayAPPLE = stub_glBindVertexArrayAPPLE;

static void*
resolve_glBindVertexBuffer(void)
{
	/* glBindVertexBuffer (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBindVertexBuffer", 43);
	}

	/* glBindVertexBuffer (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glBindVertexBuffer", 31);
	}

	/* glBindVertexBuffer (GL_ARB_vertex_attrib_binding) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_attrib_binding")) {
		return get_ext_proc("glBindVertexBuffer");
	}

	unsupported("glBindVertexBuffer");
	return piglit_dispatch_glBindVertexBuffer;
}

static void APIENTRY
stub_glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
	check_initialized();
	piglit_dispatch_glBindVertexBuffer = resolve_glBindVertexBuffer();
	piglit_dispatch_glBindVertexBuffer(bindingindex, buffer, offset, stride);
}

PFNGLBINDVERTEXBUFFERPROC piglit_dispatch_glBindVertexBuffer = stub_glBindVertexBuffer;

static void*
resolve_glBindVertexBuffers(void)
{
	/* glBindVertexBuffers (GL_VERSION_4_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBindVertexBuffers", 44);
	}

	/* glBindVertexBuffers (GL_ARB_multi_bind) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multi_bind")) {
		return get_ext_proc("glBindVertexBuffers");
	}

	unsupported("glBindVertexBuffers");
	return piglit_dispatch_glBindVertexBuffers;
}

static void APIENTRY
stub_glBindVertexBuffers(GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides)
{
	check_initialized();
	piglit_dispatch_glBindVertexBuffers = resolve_glBindVertexBuffers();
	piglit_dispatch_glBindVertexBuffers(first, count, buffers, offsets, strides);
}

PFNGLBINDVERTEXBUFFERSPROC piglit_dispatch_glBindVertexBuffers = stub_glBindVertexBuffers;

static void*
resolve_glBindVertexShaderEXT(void)
{
	/* glBindVertexShaderEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glBindVertexShaderEXT");
	}

	unsupported("glBindVertexShaderEXT");
	return piglit_dispatch_glBindVertexShaderEXT;
}

static void APIENTRY
stub_glBindVertexShaderEXT(GLuint id)
{
	check_initialized();
	piglit_dispatch_glBindVertexShaderEXT = resolve_glBindVertexShaderEXT();
	piglit_dispatch_glBindVertexShaderEXT(id);
}

PFNGLBINDVERTEXSHADEREXTPROC piglit_dispatch_glBindVertexShaderEXT = stub_glBindVertexShaderEXT;

static void*
resolve_glBindVideoCaptureStreamBufferNV(void)
{
	/* glBindVideoCaptureStreamBufferNV (GL_NV_video_capture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_video_capture")) {
		return get_ext_proc("glBindVideoCaptureStreamBufferNV");
	}

	unsupported("glBindVideoCaptureStreamBufferNV");
	return piglit_dispatch_glBindVideoCaptureStreamBufferNV;
}

static void APIENTRY
stub_glBindVideoCaptureStreamBufferNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset)
{
	check_initialized();
	piglit_dispatch_glBindVideoCaptureStreamBufferNV = resolve_glBindVideoCaptureStreamBufferNV();
	piglit_dispatch_glBindVideoCaptureStreamBufferNV(video_capture_slot, stream, frame_region, offset);
}

PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC piglit_dispatch_glBindVideoCaptureStreamBufferNV = stub_glBindVideoCaptureStreamBufferNV;

static void*
resolve_glBindVideoCaptureStreamTextureNV(void)
{
	/* glBindVideoCaptureStreamTextureNV (GL_NV_video_capture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_video_capture")) {
		return get_ext_proc("glBindVideoCaptureStreamTextureNV");
	}

	unsupported("glBindVideoCaptureStreamTextureNV");
	return piglit_dispatch_glBindVideoCaptureStreamTextureNV;
}

static void APIENTRY
stub_glBindVideoCaptureStreamTextureNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture)
{
	check_initialized();
	piglit_dispatch_glBindVideoCaptureStreamTextureNV = resolve_glBindVideoCaptureStreamTextureNV();
	piglit_dispatch_glBindVideoCaptureStreamTextureNV(video_capture_slot, stream, frame_region, target, texture);
}

PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC piglit_dispatch_glBindVideoCaptureStreamTextureNV = stub_glBindVideoCaptureStreamTextureNV;

static void*
resolve_glBinormal3bEXT(void)
{
	/* glBinormal3bEXT (GL_EXT_coordinate_frame) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_coordinate_frame")) {
		return get_ext_proc("glBinormal3bEXT");
	}

	unsupported("glBinormal3bEXT");
	return piglit_dispatch_glBinormal3bEXT;
}

static void APIENTRY
stub_glBinormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz)
{
	check_initialized();
	piglit_dispatch_glBinormal3bEXT = resolve_glBinormal3bEXT();
	piglit_dispatch_glBinormal3bEXT(bx, by, bz);
}

PFNGLBINORMAL3BEXTPROC piglit_dispatch_glBinormal3bEXT = stub_glBinormal3bEXT;

static void*
resolve_glBinormal3bvEXT(void)
{
	/* glBinormal3bvEXT (GL_EXT_coordinate_frame) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_coordinate_frame")) {
		return get_ext_proc("glBinormal3bvEXT");
	}

	unsupported("glBinormal3bvEXT");
	return piglit_dispatch_glBinormal3bvEXT;
}

static void APIENTRY
stub_glBinormal3bvEXT(const GLbyte * v)
{
	check_initialized();
	piglit_dispatch_glBinormal3bvEXT = resolve_glBinormal3bvEXT();
	piglit_dispatch_glBinormal3bvEXT(v);
}

PFNGLBINORMAL3BVEXTPROC piglit_dispatch_glBinormal3bvEXT = stub_glBinormal3bvEXT;

static void*
resolve_glBinormal3dEXT(void)
{
	/* glBinormal3dEXT (GL_EXT_coordinate_frame) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_coordinate_frame")) {
		return get_ext_proc("glBinormal3dEXT");
	}

	unsupported("glBinormal3dEXT");
	return piglit_dispatch_glBinormal3dEXT;
}

static void APIENTRY
stub_glBinormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz)
{
	check_initialized();
	piglit_dispatch_glBinormal3dEXT = resolve_glBinormal3dEXT();
	piglit_dispatch_glBinormal3dEXT(bx, by, bz);
}

PFNGLBINORMAL3DEXTPROC piglit_dispatch_glBinormal3dEXT = stub_glBinormal3dEXT;

static void*
resolve_glBinormal3dvEXT(void)
{
	/* glBinormal3dvEXT (GL_EXT_coordinate_frame) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_coordinate_frame")) {
		return get_ext_proc("glBinormal3dvEXT");
	}

	unsupported("glBinormal3dvEXT");
	return piglit_dispatch_glBinormal3dvEXT;
}

static void APIENTRY
stub_glBinormal3dvEXT(const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glBinormal3dvEXT = resolve_glBinormal3dvEXT();
	piglit_dispatch_glBinormal3dvEXT(v);
}

PFNGLBINORMAL3DVEXTPROC piglit_dispatch_glBinormal3dvEXT = stub_glBinormal3dvEXT;

static void*
resolve_glBinormal3fEXT(void)
{
	/* glBinormal3fEXT (GL_EXT_coordinate_frame) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_coordinate_frame")) {
		return get_ext_proc("glBinormal3fEXT");
	}

	unsupported("glBinormal3fEXT");
	return piglit_dispatch_glBinormal3fEXT;
}

static void APIENTRY
stub_glBinormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz)
{
	check_initialized();
	piglit_dispatch_glBinormal3fEXT = resolve_glBinormal3fEXT();
	piglit_dispatch_glBinormal3fEXT(bx, by, bz);
}

PFNGLBINORMAL3FEXTPROC piglit_dispatch_glBinormal3fEXT = stub_glBinormal3fEXT;

static void*
resolve_glBinormal3fvEXT(void)
{
	/* glBinormal3fvEXT (GL_EXT_coordinate_frame) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_coordinate_frame")) {
		return get_ext_proc("glBinormal3fvEXT");
	}

	unsupported("glBinormal3fvEXT");
	return piglit_dispatch_glBinormal3fvEXT;
}

static void APIENTRY
stub_glBinormal3fvEXT(const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glBinormal3fvEXT = resolve_glBinormal3fvEXT();
	piglit_dispatch_glBinormal3fvEXT(v);
}

PFNGLBINORMAL3FVEXTPROC piglit_dispatch_glBinormal3fvEXT = stub_glBinormal3fvEXT;

static void*
resolve_glBinormal3iEXT(void)
{
	/* glBinormal3iEXT (GL_EXT_coordinate_frame) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_coordinate_frame")) {
		return get_ext_proc("glBinormal3iEXT");
	}

	unsupported("glBinormal3iEXT");
	return piglit_dispatch_glBinormal3iEXT;
}

static void APIENTRY
stub_glBinormal3iEXT(GLint bx, GLint by, GLint bz)
{
	check_initialized();
	piglit_dispatch_glBinormal3iEXT = resolve_glBinormal3iEXT();
	piglit_dispatch_glBinormal3iEXT(bx, by, bz);
}

PFNGLBINORMAL3IEXTPROC piglit_dispatch_glBinormal3iEXT = stub_glBinormal3iEXT;

static void*
resolve_glBinormal3ivEXT(void)
{
	/* glBinormal3ivEXT (GL_EXT_coordinate_frame) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_coordinate_frame")) {
		return get_ext_proc("glBinormal3ivEXT");
	}

	unsupported("glBinormal3ivEXT");
	return piglit_dispatch_glBinormal3ivEXT;
}

static void APIENTRY
stub_glBinormal3ivEXT(const GLint * v)
{
	check_initialized();
	piglit_dispatch_glBinormal3ivEXT = resolve_glBinormal3ivEXT();
	piglit_dispatch_glBinormal3ivEXT(v);
}

PFNGLBINORMAL3IVEXTPROC piglit_dispatch_glBinormal3ivEXT = stub_glBinormal3ivEXT;

static void*
resolve_glBinormal3sEXT(void)
{
	/* glBinormal3sEXT (GL_EXT_coordinate_frame) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_coordinate_frame")) {
		return get_ext_proc("glBinormal3sEXT");
	}

	unsupported("glBinormal3sEXT");
	return piglit_dispatch_glBinormal3sEXT;
}

static void APIENTRY
stub_glBinormal3sEXT(GLshort bx, GLshort by, GLshort bz)
{
	check_initialized();
	piglit_dispatch_glBinormal3sEXT = resolve_glBinormal3sEXT();
	piglit_dispatch_glBinormal3sEXT(bx, by, bz);
}

PFNGLBINORMAL3SEXTPROC piglit_dispatch_glBinormal3sEXT = stub_glBinormal3sEXT;

static void*
resolve_glBinormal3svEXT(void)
{
	/* glBinormal3svEXT (GL_EXT_coordinate_frame) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_coordinate_frame")) {
		return get_ext_proc("glBinormal3svEXT");
	}

	unsupported("glBinormal3svEXT");
	return piglit_dispatch_glBinormal3svEXT;
}

static void APIENTRY
stub_glBinormal3svEXT(const GLshort * v)
{
	check_initialized();
	piglit_dispatch_glBinormal3svEXT = resolve_glBinormal3svEXT();
	piglit_dispatch_glBinormal3svEXT(v);
}

PFNGLBINORMAL3SVEXTPROC piglit_dispatch_glBinormal3svEXT = stub_glBinormal3svEXT;

static void*
resolve_glBinormalPointerEXT(void)
{
	/* glBinormalPointerEXT (GL_EXT_coordinate_frame) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_coordinate_frame")) {
		return get_ext_proc("glBinormalPointerEXT");
	}

	unsupported("glBinormalPointerEXT");
	return piglit_dispatch_glBinormalPointerEXT;
}

static void APIENTRY
stub_glBinormalPointerEXT(GLenum type, GLsizei stride, const void * pointer)
{
	check_initialized();
	piglit_dispatch_glBinormalPointerEXT = resolve_glBinormalPointerEXT();
	piglit_dispatch_glBinormalPointerEXT(type, stride, pointer);
}

PFNGLBINORMALPOINTEREXTPROC piglit_dispatch_glBinormalPointerEXT = stub_glBinormalPointerEXT;

static void*
resolve_glBitmap(void)
{
	/* glBitmap (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glBitmap", 10);
	}

	unsupported("glBitmap");
	return piglit_dispatch_glBitmap;
}

static void APIENTRY
stub_glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap)
{
	check_initialized();
	piglit_dispatch_glBitmap = resolve_glBitmap();
	piglit_dispatch_glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap);
}

PFNGLBITMAPPROC piglit_dispatch_glBitmap = stub_glBitmap;

static void*
resolve_glBitmapxOES(void)
{
	/* glBitmapxOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glBitmapxOES");
	}

	unsupported("glBitmapxOES");
	return piglit_dispatch_glBitmapxOES;
}

static void APIENTRY
stub_glBitmapxOES(GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte * bitmap)
{
	check_initialized();
	piglit_dispatch_glBitmapxOES = resolve_glBitmapxOES();
	piglit_dispatch_glBitmapxOES(width, height, xorig, yorig, xmove, ymove, bitmap);
}

PFNGLBITMAPXOESPROC piglit_dispatch_glBitmapxOES = stub_glBitmapxOES;

static void*
resolve_glBlendBarrierKHR(void)
{
	/* glBlendBarrierKHR (GL_KHR_blend_equation_advanced) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_KHR_blend_equation_advanced")) {
		return get_ext_proc("glBlendBarrierKHR");
	}

	unsupported("glBlendBarrierKHR");
	return piglit_dispatch_glBlendBarrierKHR;
}

static void APIENTRY
stub_glBlendBarrierKHR()
{
	check_initialized();
	piglit_dispatch_glBlendBarrierKHR = resolve_glBlendBarrierKHR();
	piglit_dispatch_glBlendBarrierKHR();
}

PFNGLBLENDBARRIERKHRPROC piglit_dispatch_glBlendBarrierKHR = stub_glBlendBarrierKHR;

static void*
resolve_glBlendBarrierNV(void)
{
	/* glBlendBarrierNV (GL_NV_blend_equation_advanced) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_NV_blend_equation_advanced")) {
		return get_ext_proc("glBlendBarrierNV");
	}

	unsupported("glBlendBarrierNV");
	return piglit_dispatch_glBlendBarrierNV;
}

static void APIENTRY
stub_glBlendBarrierNV()
{
	check_initialized();
	piglit_dispatch_glBlendBarrierNV = resolve_glBlendBarrierNV();
	piglit_dispatch_glBlendBarrierNV();
}

PFNGLBLENDBARRIERNVPROC piglit_dispatch_glBlendBarrierNV = stub_glBlendBarrierNV;

static void*
resolve_glBlendColor(void)
{
	/* glBlendColor (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBlendColor", 14);
	}

	/* glBlendColor (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glBlendColor", 20);
	}

	/* glBlendColor (GL_ARB_imaging) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_imaging")) {
		return get_ext_proc("glBlendColor");
	}

	/* glBlendColorEXT (GL_EXT_blend_color) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_blend_color")) {
		return get_ext_proc("glBlendColorEXT");
	}

	unsupported("glBlendColor");
	return piglit_dispatch_glBlendColor;
}

static void APIENTRY
stub_glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
	check_initialized();
	piglit_dispatch_glBlendColor = resolve_glBlendColor();
	piglit_dispatch_glBlendColor(red, green, blue, alpha);
}

PFNGLBLENDCOLORPROC piglit_dispatch_glBlendColor = stub_glBlendColor;

static void*
resolve_glBlendColorxOES(void)
{
	/* glBlendColorxOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glBlendColorxOES");
	}

	unsupported("glBlendColorxOES");
	return piglit_dispatch_glBlendColorxOES;
}

static void APIENTRY
stub_glBlendColorxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
{
	check_initialized();
	piglit_dispatch_glBlendColorxOES = resolve_glBlendColorxOES();
	piglit_dispatch_glBlendColorxOES(red, green, blue, alpha);
}

PFNGLBLENDCOLORXOESPROC piglit_dispatch_glBlendColorxOES = stub_glBlendColorxOES;

static void*
resolve_glBlendEquation(void)
{
	/* glBlendEquation (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBlendEquation", 14);
	}

	/* glBlendEquation (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glBlendEquation", 20);
	}

	/* glBlendEquation (GL_ARB_imaging) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_imaging")) {
		return get_ext_proc("glBlendEquation");
	}

	/* glBlendEquationEXT (GL_EXT_blend_minmax) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_blend_minmax")) {
		return get_ext_proc("glBlendEquationEXT");
	}

	unsupported("glBlendEquation");
	return piglit_dispatch_glBlendEquation;
}

static void APIENTRY
stub_glBlendEquation(GLenum mode)
{
	check_initialized();
	piglit_dispatch_glBlendEquation = resolve_glBlendEquation();
	piglit_dispatch_glBlendEquation(mode);
}

PFNGLBLENDEQUATIONPROC piglit_dispatch_glBlendEquation = stub_glBlendEquation;

static void*
resolve_glBlendEquationIndexedAMD(void)
{
	/* glBlendEquationi (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBlendEquationi", 40);
	}

	/* glBlendEquationiARB (GL_ARB_draw_buffers_blend) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_draw_buffers_blend")) {
		return get_ext_proc("glBlendEquationiARB");
	}

	/* glBlendEquationiEXT (GL_EXT_draw_buffers_indexed) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_draw_buffers_indexed")) {
		return get_ext_proc("glBlendEquationiEXT");
	}

	/* glBlendEquationIndexedAMD (GL_AMD_draw_buffers_blend) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_draw_buffers_blend")) {
		return get_ext_proc("glBlendEquationIndexedAMD");
	}

	unsupported("glBlendEquationIndexedAMD");
	return piglit_dispatch_glBlendEquationIndexedAMD;
}

static void APIENTRY
stub_glBlendEquationIndexedAMD(GLuint buf, GLenum mode)
{
	check_initialized();
	piglit_dispatch_glBlendEquationIndexedAMD = resolve_glBlendEquationIndexedAMD();
	piglit_dispatch_glBlendEquationIndexedAMD(buf, mode);
}

PFNGLBLENDEQUATIONINDEXEDAMDPROC piglit_dispatch_glBlendEquationIndexedAMD = stub_glBlendEquationIndexedAMD;

static void*
resolve_glBlendEquationOES(void)
{
	/* glBlendEquationOES (GL_OES_blend_subtract) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_blend_subtract")) {
		return get_ext_proc("glBlendEquationOES");
	}

	unsupported("glBlendEquationOES");
	return piglit_dispatch_glBlendEquationOES;
}

static void APIENTRY
stub_glBlendEquationOES(GLenum mode)
{
	check_initialized();
	piglit_dispatch_glBlendEquationOES = resolve_glBlendEquationOES();
	piglit_dispatch_glBlendEquationOES(mode);
}

PFNGLBLENDEQUATIONOESPROC piglit_dispatch_glBlendEquationOES = stub_glBlendEquationOES;

static void*
resolve_glBlendEquationSeparate(void)
{
	/* glBlendEquationSeparate (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBlendEquationSeparate", 20);
	}

	/* glBlendEquationSeparate (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glBlendEquationSeparate", 20);
	}

	/* glBlendEquationSeparateEXT (GL_EXT_blend_equation_separate) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_blend_equation_separate")) {
		return get_ext_proc("glBlendEquationSeparateEXT");
	}

	unsupported("glBlendEquationSeparate");
	return piglit_dispatch_glBlendEquationSeparate;
}

static void APIENTRY
stub_glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)
{
	check_initialized();
	piglit_dispatch_glBlendEquationSeparate = resolve_glBlendEquationSeparate();
	piglit_dispatch_glBlendEquationSeparate(modeRGB, modeAlpha);
}

PFNGLBLENDEQUATIONSEPARATEPROC piglit_dispatch_glBlendEquationSeparate = stub_glBlendEquationSeparate;

static void*
resolve_glBlendEquationSeparateIndexedAMD(void)
{
	/* glBlendEquationSeparatei (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBlendEquationSeparatei", 40);
	}

	/* glBlendEquationSeparateiARB (GL_ARB_draw_buffers_blend) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_draw_buffers_blend")) {
		return get_ext_proc("glBlendEquationSeparateiARB");
	}

	/* glBlendEquationSeparateiEXT (GL_EXT_draw_buffers_indexed) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_draw_buffers_indexed")) {
		return get_ext_proc("glBlendEquationSeparateiEXT");
	}

	/* glBlendEquationSeparateIndexedAMD (GL_AMD_draw_buffers_blend) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_draw_buffers_blend")) {
		return get_ext_proc("glBlendEquationSeparateIndexedAMD");
	}

	unsupported("glBlendEquationSeparateIndexedAMD");
	return piglit_dispatch_glBlendEquationSeparateIndexedAMD;
}

static void APIENTRY
stub_glBlendEquationSeparateIndexedAMD(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
	check_initialized();
	piglit_dispatch_glBlendEquationSeparateIndexedAMD = resolve_glBlendEquationSeparateIndexedAMD();
	piglit_dispatch_glBlendEquationSeparateIndexedAMD(buf, modeRGB, modeAlpha);
}

PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC piglit_dispatch_glBlendEquationSeparateIndexedAMD = stub_glBlendEquationSeparateIndexedAMD;

static void*
resolve_glBlendEquationSeparateOES(void)
{
	/* glBlendEquationSeparateOES (GL_OES_blend_equation_separate) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_blend_equation_separate")) {
		return get_ext_proc("glBlendEquationSeparateOES");
	}

	unsupported("glBlendEquationSeparateOES");
	return piglit_dispatch_glBlendEquationSeparateOES;
}

static void APIENTRY
stub_glBlendEquationSeparateOES(GLenum modeRGB, GLenum modeAlpha)
{
	check_initialized();
	piglit_dispatch_glBlendEquationSeparateOES = resolve_glBlendEquationSeparateOES();
	piglit_dispatch_glBlendEquationSeparateOES(modeRGB, modeAlpha);
}

PFNGLBLENDEQUATIONSEPARATEOESPROC piglit_dispatch_glBlendEquationSeparateOES = stub_glBlendEquationSeparateOES;

static void*
resolve_glBlendFunc(void)
{
	/* glBlendFunc (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glBlendFunc", 10);
	}

	/* glBlendFunc (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glBlendFunc", 10);
	}

	/* glBlendFunc (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glBlendFunc", 20);
	}

	unsupported("glBlendFunc");
	return piglit_dispatch_glBlendFunc;
}

static void APIENTRY
stub_glBlendFunc(GLenum sfactor, GLenum dfactor)
{
	check_initialized();
	piglit_dispatch_glBlendFunc = resolve_glBlendFunc();
	piglit_dispatch_glBlendFunc(sfactor, dfactor);
}

PFNGLBLENDFUNCPROC piglit_dispatch_glBlendFunc = stub_glBlendFunc;

static void*
resolve_glBlendFuncIndexedAMD(void)
{
	/* glBlendFunci (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBlendFunci", 40);
	}

	/* glBlendFunciARB (GL_ARB_draw_buffers_blend) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_draw_buffers_blend")) {
		return get_ext_proc("glBlendFunciARB");
	}

	/* glBlendFunciEXT (GL_EXT_draw_buffers_indexed) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_draw_buffers_indexed")) {
		return get_ext_proc("glBlendFunciEXT");
	}

	/* glBlendFuncIndexedAMD (GL_AMD_draw_buffers_blend) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_draw_buffers_blend")) {
		return get_ext_proc("glBlendFuncIndexedAMD");
	}

	unsupported("glBlendFuncIndexedAMD");
	return piglit_dispatch_glBlendFuncIndexedAMD;
}

static void APIENTRY
stub_glBlendFuncIndexedAMD(GLuint buf, GLenum src, GLenum dst)
{
	check_initialized();
	piglit_dispatch_glBlendFuncIndexedAMD = resolve_glBlendFuncIndexedAMD();
	piglit_dispatch_glBlendFuncIndexedAMD(buf, src, dst);
}

PFNGLBLENDFUNCINDEXEDAMDPROC piglit_dispatch_glBlendFuncIndexedAMD = stub_glBlendFuncIndexedAMD;

static void*
resolve_glBlendFuncSeparate(void)
{
	/* glBlendFuncSeparate (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBlendFuncSeparate", 14);
	}

	/* glBlendFuncSeparate (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glBlendFuncSeparate", 20);
	}

	/* glBlendFuncSeparateEXT (GL_EXT_blend_func_separate) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_blend_func_separate")) {
		return get_ext_proc("glBlendFuncSeparateEXT");
	}

	/* glBlendFuncSeparateINGR (GL_INGR_blend_func_separate) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_INGR_blend_func_separate")) {
		return get_ext_proc("glBlendFuncSeparateINGR");
	}

	unsupported("glBlendFuncSeparate");
	return piglit_dispatch_glBlendFuncSeparate;
}

static void APIENTRY
stub_glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
	check_initialized();
	piglit_dispatch_glBlendFuncSeparate = resolve_glBlendFuncSeparate();
	piglit_dispatch_glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}

PFNGLBLENDFUNCSEPARATEPROC piglit_dispatch_glBlendFuncSeparate = stub_glBlendFuncSeparate;

static void*
resolve_glBlendFuncSeparateIndexedAMD(void)
{
	/* glBlendFuncSeparatei (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBlendFuncSeparatei", 40);
	}

	/* glBlendFuncSeparateiARB (GL_ARB_draw_buffers_blend) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_draw_buffers_blend")) {
		return get_ext_proc("glBlendFuncSeparateiARB");
	}

	/* glBlendFuncSeparateiEXT (GL_EXT_draw_buffers_indexed) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_draw_buffers_indexed")) {
		return get_ext_proc("glBlendFuncSeparateiEXT");
	}

	/* glBlendFuncSeparateIndexedAMD (GL_AMD_draw_buffers_blend) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_draw_buffers_blend")) {
		return get_ext_proc("glBlendFuncSeparateIndexedAMD");
	}

	unsupported("glBlendFuncSeparateIndexedAMD");
	return piglit_dispatch_glBlendFuncSeparateIndexedAMD;
}

static void APIENTRY
stub_glBlendFuncSeparateIndexedAMD(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
	check_initialized();
	piglit_dispatch_glBlendFuncSeparateIndexedAMD = resolve_glBlendFuncSeparateIndexedAMD();
	piglit_dispatch_glBlendFuncSeparateIndexedAMD(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}

PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC piglit_dispatch_glBlendFuncSeparateIndexedAMD = stub_glBlendFuncSeparateIndexedAMD;

static void*
resolve_glBlendFuncSeparateOES(void)
{
	/* glBlendFuncSeparateOES (GL_OES_blend_func_separate) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_blend_func_separate")) {
		return get_ext_proc("glBlendFuncSeparateOES");
	}

	unsupported("glBlendFuncSeparateOES");
	return piglit_dispatch_glBlendFuncSeparateOES;
}

static void APIENTRY
stub_glBlendFuncSeparateOES(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
	check_initialized();
	piglit_dispatch_glBlendFuncSeparateOES = resolve_glBlendFuncSeparateOES();
	piglit_dispatch_glBlendFuncSeparateOES(srcRGB, dstRGB, srcAlpha, dstAlpha);
}

PFNGLBLENDFUNCSEPARATEOESPROC piglit_dispatch_glBlendFuncSeparateOES = stub_glBlendFuncSeparateOES;

static void*
resolve_glBlendParameteriNV(void)
{
	/* glBlendParameteriNV (GL_NV_blend_equation_advanced) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_NV_blend_equation_advanced")) {
		return get_ext_proc("glBlendParameteriNV");
	}

	unsupported("glBlendParameteriNV");
	return piglit_dispatch_glBlendParameteriNV;
}

static void APIENTRY
stub_glBlendParameteriNV(GLenum pname, GLint value)
{
	check_initialized();
	piglit_dispatch_glBlendParameteriNV = resolve_glBlendParameteriNV();
	piglit_dispatch_glBlendParameteriNV(pname, value);
}

PFNGLBLENDPARAMETERINVPROC piglit_dispatch_glBlendParameteriNV = stub_glBlendParameteriNV;

static void*
resolve_glBlitFramebuffer(void)
{
	/* glBlitFramebuffer (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBlitFramebuffer", 30);
	}

	/* glBlitFramebuffer (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glBlitFramebuffer", 30);
	}

	/* glBlitFramebuffer (GL_ARB_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_framebuffer_object")) {
		return get_ext_proc("glBlitFramebuffer");
	}

	/* glBlitFramebufferEXT (GL_EXT_framebuffer_blit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_framebuffer_blit")) {
		return get_ext_proc("glBlitFramebufferEXT");
	}

	/* glBlitFramebufferNV (GL_NV_framebuffer_blit) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_NV_framebuffer_blit")) {
		return get_ext_proc("glBlitFramebufferNV");
	}

	unsupported("glBlitFramebuffer");
	return piglit_dispatch_glBlitFramebuffer;
}

static void APIENTRY
stub_glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
	check_initialized();
	piglit_dispatch_glBlitFramebuffer = resolve_glBlitFramebuffer();
	piglit_dispatch_glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

PFNGLBLITFRAMEBUFFERPROC piglit_dispatch_glBlitFramebuffer = stub_glBlitFramebuffer;

static void*
resolve_glBlitFramebufferANGLE(void)
{
	/* glBlitFramebufferANGLE (GL_ANGLE_framebuffer_blit) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_ANGLE_framebuffer_blit")) {
		return get_ext_proc("glBlitFramebufferANGLE");
	}

	unsupported("glBlitFramebufferANGLE");
	return piglit_dispatch_glBlitFramebufferANGLE;
}

static void APIENTRY
stub_glBlitFramebufferANGLE(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
	check_initialized();
	piglit_dispatch_glBlitFramebufferANGLE = resolve_glBlitFramebufferANGLE();
	piglit_dispatch_glBlitFramebufferANGLE(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

PFNGLBLITFRAMEBUFFERANGLEPROC piglit_dispatch_glBlitFramebufferANGLE = stub_glBlitFramebufferANGLE;

static void*
resolve_glBufferAddressRangeNV(void)
{
	/* glBufferAddressRangeNV (GL_NV_vertex_buffer_unified_memory) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_buffer_unified_memory")) {
		return get_ext_proc("glBufferAddressRangeNV");
	}

	unsupported("glBufferAddressRangeNV");
	return piglit_dispatch_glBufferAddressRangeNV;
}

static void APIENTRY
stub_glBufferAddressRangeNV(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length)
{
	check_initialized();
	piglit_dispatch_glBufferAddressRangeNV = resolve_glBufferAddressRangeNV();
	piglit_dispatch_glBufferAddressRangeNV(pname, index, address, length);
}

PFNGLBUFFERADDRESSRANGENVPROC piglit_dispatch_glBufferAddressRangeNV = stub_glBufferAddressRangeNV;

static void*
resolve_glBufferData(void)
{
	/* glBufferData (GL_VERSION_1_5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBufferData", 15);
	}

	/* glBufferData (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glBufferData", 10);
	}

	/* glBufferData (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glBufferData", 20);
	}

	/* glBufferDataARB (GL_ARB_vertex_buffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_buffer_object")) {
		return get_ext_proc("glBufferDataARB");
	}

	unsupported("glBufferData");
	return piglit_dispatch_glBufferData;
}

static void APIENTRY
stub_glBufferData(GLenum target, GLsizeiptr size, const void * data, GLenum usage)
{
	check_initialized();
	piglit_dispatch_glBufferData = resolve_glBufferData();
	piglit_dispatch_glBufferData(target, size, data, usage);
}

PFNGLBUFFERDATAPROC piglit_dispatch_glBufferData = stub_glBufferData;

static void*
resolve_glBufferParameteriAPPLE(void)
{
	/* glBufferParameteriAPPLE (GL_APPLE_flush_buffer_range) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_APPLE_flush_buffer_range")) {
		return get_ext_proc("glBufferParameteriAPPLE");
	}

	unsupported("glBufferParameteriAPPLE");
	return piglit_dispatch_glBufferParameteriAPPLE;
}

static void APIENTRY
stub_glBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param)
{
	check_initialized();
	piglit_dispatch_glBufferParameteriAPPLE = resolve_glBufferParameteriAPPLE();
	piglit_dispatch_glBufferParameteriAPPLE(target, pname, param);
}

PFNGLBUFFERPARAMETERIAPPLEPROC piglit_dispatch_glBufferParameteriAPPLE = stub_glBufferParameteriAPPLE;

static void*
resolve_glBufferStorage(void)
{
	/* glBufferStorage (GL_VERSION_4_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBufferStorage", 44);
	}

	/* glBufferStorage (GL_ARB_buffer_storage) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_buffer_storage")) {
		return get_ext_proc("glBufferStorage");
	}

	unsupported("glBufferStorage");
	return piglit_dispatch_glBufferStorage;
}

static void APIENTRY
stub_glBufferStorage(GLenum target, GLsizeiptr size, const void * data, GLbitfield flags)
{
	check_initialized();
	piglit_dispatch_glBufferStorage = resolve_glBufferStorage();
	piglit_dispatch_glBufferStorage(target, size, data, flags);
}

PFNGLBUFFERSTORAGEPROC piglit_dispatch_glBufferStorage = stub_glBufferStorage;

static void*
resolve_glBufferSubData(void)
{
	/* glBufferSubData (GL_VERSION_1_5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glBufferSubData", 15);
	}

	/* glBufferSubData (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glBufferSubData", 10);
	}

	/* glBufferSubData (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glBufferSubData", 20);
	}

	/* glBufferSubDataARB (GL_ARB_vertex_buffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_buffer_object")) {
		return get_ext_proc("glBufferSubDataARB");
	}

	unsupported("glBufferSubData");
	return piglit_dispatch_glBufferSubData;
}

static void APIENTRY
stub_glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void * data)
{
	check_initialized();
	piglit_dispatch_glBufferSubData = resolve_glBufferSubData();
	piglit_dispatch_glBufferSubData(target, offset, size, data);
}

PFNGLBUFFERSUBDATAPROC piglit_dispatch_glBufferSubData = stub_glBufferSubData;

static void*
resolve_glCallList(void)
{
	/* glCallList (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glCallList", 10);
	}

	unsupported("glCallList");
	return piglit_dispatch_glCallList;
}

static void APIENTRY
stub_glCallList(GLuint list)
{
	check_initialized();
	piglit_dispatch_glCallList = resolve_glCallList();
	piglit_dispatch_glCallList(list);
}

PFNGLCALLLISTPROC piglit_dispatch_glCallList = stub_glCallList;

static void*
resolve_glCallLists(void)
{
	/* glCallLists (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glCallLists", 10);
	}

	unsupported("glCallLists");
	return piglit_dispatch_glCallLists;
}

static void APIENTRY
stub_glCallLists(GLsizei n, GLenum type, const void * lists)
{
	check_initialized();
	piglit_dispatch_glCallLists = resolve_glCallLists();
	piglit_dispatch_glCallLists(n, type, lists);
}

PFNGLCALLLISTSPROC piglit_dispatch_glCallLists = stub_glCallLists;

static void*
resolve_glCheckFramebufferStatus(void)
{
	/* glCheckFramebufferStatus (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glCheckFramebufferStatus", 30);
	}

	/* glCheckFramebufferStatus (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glCheckFramebufferStatus", 20);
	}

	/* glCheckFramebufferStatus (GL_ARB_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_framebuffer_object")) {
		return get_ext_proc("glCheckFramebufferStatus");
	}

	/* glCheckFramebufferStatusEXT (GL_EXT_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_framebuffer_object")) {
		return get_ext_proc("glCheckFramebufferStatusEXT");
	}

	unsupported("glCheckFramebufferStatus");
	return piglit_dispatch_glCheckFramebufferStatus;
}

static GLenum APIENTRY
stub_glCheckFramebufferStatus(GLenum target)
{
	check_initialized();
	piglit_dispatch_glCheckFramebufferStatus = resolve_glCheckFramebufferStatus();
	return piglit_dispatch_glCheckFramebufferStatus(target);
}

PFNGLCHECKFRAMEBUFFERSTATUSPROC piglit_dispatch_glCheckFramebufferStatus = stub_glCheckFramebufferStatus;

static void*
resolve_glCheckFramebufferStatusOES(void)
{
	/* glCheckFramebufferStatusOES (GL_OES_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_framebuffer_object")) {
		return get_ext_proc("glCheckFramebufferStatusOES");
	}

	unsupported("glCheckFramebufferStatusOES");
	return piglit_dispatch_glCheckFramebufferStatusOES;
}

static GLenum APIENTRY
stub_glCheckFramebufferStatusOES(GLenum target)
{
	check_initialized();
	piglit_dispatch_glCheckFramebufferStatusOES = resolve_glCheckFramebufferStatusOES();
	return piglit_dispatch_glCheckFramebufferStatusOES(target);
}

PFNGLCHECKFRAMEBUFFERSTATUSOESPROC piglit_dispatch_glCheckFramebufferStatusOES = stub_glCheckFramebufferStatusOES;

static void*
resolve_glCheckNamedFramebufferStatusEXT(void)
{
	/* glCheckNamedFramebufferStatusEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glCheckNamedFramebufferStatusEXT");
	}

	unsupported("glCheckNamedFramebufferStatusEXT");
	return piglit_dispatch_glCheckNamedFramebufferStatusEXT;
}

static GLenum APIENTRY
stub_glCheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target)
{
	check_initialized();
	piglit_dispatch_glCheckNamedFramebufferStatusEXT = resolve_glCheckNamedFramebufferStatusEXT();
	return piglit_dispatch_glCheckNamedFramebufferStatusEXT(framebuffer, target);
}

PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC piglit_dispatch_glCheckNamedFramebufferStatusEXT = stub_glCheckNamedFramebufferStatusEXT;

static void*
resolve_glClampColor(void)
{
	/* glClampColor (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glClampColor", 30);
	}

	/* glClampColorARB (GL_ARB_color_buffer_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_color_buffer_float")) {
		return get_ext_proc("glClampColorARB");
	}

	unsupported("glClampColor");
	return piglit_dispatch_glClampColor;
}

static void APIENTRY
stub_glClampColor(GLenum target, GLenum clamp)
{
	check_initialized();
	piglit_dispatch_glClampColor = resolve_glClampColor();
	piglit_dispatch_glClampColor(target, clamp);
}

PFNGLCLAMPCOLORPROC piglit_dispatch_glClampColor = stub_glClampColor;

static void*
resolve_glClear(void)
{
	/* glClear (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glClear", 10);
	}

	/* glClear (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glClear", 10);
	}

	/* glClear (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glClear", 20);
	}

	unsupported("glClear");
	return piglit_dispatch_glClear;
}

static void APIENTRY
stub_glClear(GLbitfield mask)
{
	check_initialized();
	piglit_dispatch_glClear = resolve_glClear();
	piglit_dispatch_glClear(mask);
}

PFNGLCLEARPROC piglit_dispatch_glClear = stub_glClear;

static void*
resolve_glClearAccum(void)
{
	/* glClearAccum (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glClearAccum", 10);
	}

	unsupported("glClearAccum");
	return piglit_dispatch_glClearAccum;
}

static void APIENTRY
stub_glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
	check_initialized();
	piglit_dispatch_glClearAccum = resolve_glClearAccum();
	piglit_dispatch_glClearAccum(red, green, blue, alpha);
}

PFNGLCLEARACCUMPROC piglit_dispatch_glClearAccum = stub_glClearAccum;

static void*
resolve_glClearAccumxOES(void)
{
	/* glClearAccumxOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glClearAccumxOES");
	}

	unsupported("glClearAccumxOES");
	return piglit_dispatch_glClearAccumxOES;
}

static void APIENTRY
stub_glClearAccumxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
{
	check_initialized();
	piglit_dispatch_glClearAccumxOES = resolve_glClearAccumxOES();
	piglit_dispatch_glClearAccumxOES(red, green, blue, alpha);
}

PFNGLCLEARACCUMXOESPROC piglit_dispatch_glClearAccumxOES = stub_glClearAccumxOES;

static void*
resolve_glClearBufferData(void)
{
	/* glClearBufferData (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glClearBufferData", 43);
	}

	/* glClearBufferData (GL_ARB_clear_buffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_clear_buffer_object")) {
		return get_ext_proc("glClearBufferData");
	}

	unsupported("glClearBufferData");
	return piglit_dispatch_glClearBufferData;
}

static void APIENTRY
stub_glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data)
{
	check_initialized();
	piglit_dispatch_glClearBufferData = resolve_glClearBufferData();
	piglit_dispatch_glClearBufferData(target, internalformat, format, type, data);
}

PFNGLCLEARBUFFERDATAPROC piglit_dispatch_glClearBufferData = stub_glClearBufferData;

static void*
resolve_glClearBufferSubData(void)
{
	/* glClearBufferSubData (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glClearBufferSubData", 43);
	}

	/* glClearBufferSubData (GL_ARB_clear_buffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_clear_buffer_object")) {
		return get_ext_proc("glClearBufferSubData");
	}

	unsupported("glClearBufferSubData");
	return piglit_dispatch_glClearBufferSubData;
}

static void APIENTRY
stub_glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data)
{
	check_initialized();
	piglit_dispatch_glClearBufferSubData = resolve_glClearBufferSubData();
	piglit_dispatch_glClearBufferSubData(target, internalformat, offset, size, format, type, data);
}

PFNGLCLEARBUFFERSUBDATAPROC piglit_dispatch_glClearBufferSubData = stub_glClearBufferSubData;

static void*
resolve_glClearBufferfi(void)
{
	/* glClearBufferfi (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glClearBufferfi", 30);
	}

	/* glClearBufferfi (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glClearBufferfi", 30);
	}

	unsupported("glClearBufferfi");
	return piglit_dispatch_glClearBufferfi;
}

static void APIENTRY
stub_glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
{
	check_initialized();
	piglit_dispatch_glClearBufferfi = resolve_glClearBufferfi();
	piglit_dispatch_glClearBufferfi(buffer, drawbuffer, depth, stencil);
}

PFNGLCLEARBUFFERFIPROC piglit_dispatch_glClearBufferfi = stub_glClearBufferfi;

static void*
resolve_glClearBufferfv(void)
{
	/* glClearBufferfv (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glClearBufferfv", 30);
	}

	/* glClearBufferfv (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glClearBufferfv", 30);
	}

	unsupported("glClearBufferfv");
	return piglit_dispatch_glClearBufferfv;
}

static void APIENTRY
stub_glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat * value)
{
	check_initialized();
	piglit_dispatch_glClearBufferfv = resolve_glClearBufferfv();
	piglit_dispatch_glClearBufferfv(buffer, drawbuffer, value);
}

PFNGLCLEARBUFFERFVPROC piglit_dispatch_glClearBufferfv = stub_glClearBufferfv;

static void*
resolve_glClearBufferiv(void)
{
	/* glClearBufferiv (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glClearBufferiv", 30);
	}

	/* glClearBufferiv (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glClearBufferiv", 30);
	}

	unsupported("glClearBufferiv");
	return piglit_dispatch_glClearBufferiv;
}

static void APIENTRY
stub_glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint * value)
{
	check_initialized();
	piglit_dispatch_glClearBufferiv = resolve_glClearBufferiv();
	piglit_dispatch_glClearBufferiv(buffer, drawbuffer, value);
}

PFNGLCLEARBUFFERIVPROC piglit_dispatch_glClearBufferiv = stub_glClearBufferiv;

static void*
resolve_glClearBufferuiv(void)
{
	/* glClearBufferuiv (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glClearBufferuiv", 30);
	}

	/* glClearBufferuiv (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glClearBufferuiv", 30);
	}

	unsupported("glClearBufferuiv");
	return piglit_dispatch_glClearBufferuiv;
}

static void APIENTRY
stub_glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint * value)
{
	check_initialized();
	piglit_dispatch_glClearBufferuiv = resolve_glClearBufferuiv();
	piglit_dispatch_glClearBufferuiv(buffer, drawbuffer, value);
}

PFNGLCLEARBUFFERUIVPROC piglit_dispatch_glClearBufferuiv = stub_glClearBufferuiv;

static void*
resolve_glClearColor(void)
{
	/* glClearColor (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glClearColor", 10);
	}

	/* glClearColor (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glClearColor", 10);
	}

	/* glClearColor (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glClearColor", 20);
	}

	unsupported("glClearColor");
	return piglit_dispatch_glClearColor;
}

static void APIENTRY
stub_glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
	check_initialized();
	piglit_dispatch_glClearColor = resolve_glClearColor();
	piglit_dispatch_glClearColor(red, green, blue, alpha);
}

PFNGLCLEARCOLORPROC piglit_dispatch_glClearColor = stub_glClearColor;

static void*
resolve_glClearColorIiEXT(void)
{
	/* glClearColorIiEXT (GL_EXT_texture_integer) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_texture_integer")) {
		return get_ext_proc("glClearColorIiEXT");
	}

	unsupported("glClearColorIiEXT");
	return piglit_dispatch_glClearColorIiEXT;
}

static void APIENTRY
stub_glClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha)
{
	check_initialized();
	piglit_dispatch_glClearColorIiEXT = resolve_glClearColorIiEXT();
	piglit_dispatch_glClearColorIiEXT(red, green, blue, alpha);
}

PFNGLCLEARCOLORIIEXTPROC piglit_dispatch_glClearColorIiEXT = stub_glClearColorIiEXT;

static void*
resolve_glClearColorIuiEXT(void)
{
	/* glClearColorIuiEXT (GL_EXT_texture_integer) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_texture_integer")) {
		return get_ext_proc("glClearColorIuiEXT");
	}

	unsupported("glClearColorIuiEXT");
	return piglit_dispatch_glClearColorIuiEXT;
}

static void APIENTRY
stub_glClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha)
{
	check_initialized();
	piglit_dispatch_glClearColorIuiEXT = resolve_glClearColorIuiEXT();
	piglit_dispatch_glClearColorIuiEXT(red, green, blue, alpha);
}

PFNGLCLEARCOLORIUIEXTPROC piglit_dispatch_glClearColorIuiEXT = stub_glClearColorIuiEXT;

static void*
resolve_glClearColorx(void)
{
	/* glClearColorx (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glClearColorx", 10);
	}

	unsupported("glClearColorx");
	return piglit_dispatch_glClearColorx;
}

static void APIENTRY
stub_glClearColorx(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
{
	check_initialized();
	piglit_dispatch_glClearColorx = resolve_glClearColorx();
	piglit_dispatch_glClearColorx(red, green, blue, alpha);
}

PFNGLCLEARCOLORXPROC piglit_dispatch_glClearColorx = stub_glClearColorx;

static void*
resolve_glClearColorxOES(void)
{
	/* glClearColorxOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glClearColorxOES");
	}

	unsupported("glClearColorxOES");
	return piglit_dispatch_glClearColorxOES;
}

static void APIENTRY
stub_glClearColorxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
{
	check_initialized();
	piglit_dispatch_glClearColorxOES = resolve_glClearColorxOES();
	piglit_dispatch_glClearColorxOES(red, green, blue, alpha);
}

PFNGLCLEARCOLORXOESPROC piglit_dispatch_glClearColorxOES = stub_glClearColorxOES;

static void*
resolve_glClearDepth(void)
{
	/* glClearDepth (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glClearDepth", 10);
	}

	unsupported("glClearDepth");
	return piglit_dispatch_glClearDepth;
}

static void APIENTRY
stub_glClearDepth(GLdouble depth)
{
	check_initialized();
	piglit_dispatch_glClearDepth = resolve_glClearDepth();
	piglit_dispatch_glClearDepth(depth);
}

PFNGLCLEARDEPTHPROC piglit_dispatch_glClearDepth = stub_glClearDepth;

static void*
resolve_glClearDepthdNV(void)
{
	/* glClearDepthdNV (GL_NV_depth_buffer_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_depth_buffer_float")) {
		return get_ext_proc("glClearDepthdNV");
	}

	unsupported("glClearDepthdNV");
	return piglit_dispatch_glClearDepthdNV;
}

static void APIENTRY
stub_glClearDepthdNV(GLdouble depth)
{
	check_initialized();
	piglit_dispatch_glClearDepthdNV = resolve_glClearDepthdNV();
	piglit_dispatch_glClearDepthdNV(depth);
}

PFNGLCLEARDEPTHDNVPROC piglit_dispatch_glClearDepthdNV = stub_glClearDepthdNV;

static void*
resolve_glClearDepthf(void)
{
	/* glClearDepthf (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glClearDepthf", 41);
	}

	/* glClearDepthf (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glClearDepthf", 10);
	}

	/* glClearDepthf (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glClearDepthf", 20);
	}

	/* glClearDepthf (GL_ARB_ES2_compatibility) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_ES2_compatibility")) {
		return get_ext_proc("glClearDepthf");
	}

	/* glClearDepthfOES (GL_OES_single_precision) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_single_precision")) {
		return get_ext_proc("glClearDepthfOES");
	}

	unsupported("glClearDepthf");
	return piglit_dispatch_glClearDepthf;
}

static void APIENTRY
stub_glClearDepthf(GLfloat d)
{
	check_initialized();
	piglit_dispatch_glClearDepthf = resolve_glClearDepthf();
	piglit_dispatch_glClearDepthf(d);
}

PFNGLCLEARDEPTHFPROC piglit_dispatch_glClearDepthf = stub_glClearDepthf;

static void*
resolve_glClearDepthx(void)
{
	/* glClearDepthx (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glClearDepthx", 10);
	}

	unsupported("glClearDepthx");
	return piglit_dispatch_glClearDepthx;
}

static void APIENTRY
stub_glClearDepthx(GLfixed depth)
{
	check_initialized();
	piglit_dispatch_glClearDepthx = resolve_glClearDepthx();
	piglit_dispatch_glClearDepthx(depth);
}

PFNGLCLEARDEPTHXPROC piglit_dispatch_glClearDepthx = stub_glClearDepthx;

static void*
resolve_glClearDepthxOES(void)
{
	/* glClearDepthxOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glClearDepthxOES");
	}

	unsupported("glClearDepthxOES");
	return piglit_dispatch_glClearDepthxOES;
}

static void APIENTRY
stub_glClearDepthxOES(GLfixed depth)
{
	check_initialized();
	piglit_dispatch_glClearDepthxOES = resolve_glClearDepthxOES();
	piglit_dispatch_glClearDepthxOES(depth);
}

PFNGLCLEARDEPTHXOESPROC piglit_dispatch_glClearDepthxOES = stub_glClearDepthxOES;

static void*
resolve_glClearIndex(void)
{
	/* glClearIndex (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glClearIndex", 10);
	}

	unsupported("glClearIndex");
	return piglit_dispatch_glClearIndex;
}

static void APIENTRY
stub_glClearIndex(GLfloat c)
{
	check_initialized();
	piglit_dispatch_glClearIndex = resolve_glClearIndex();
	piglit_dispatch_glClearIndex(c);
}

PFNGLCLEARINDEXPROC piglit_dispatch_glClearIndex = stub_glClearIndex;

static void*
resolve_glClearNamedBufferDataEXT(void)
{
	/* glClearNamedBufferDataEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glClearNamedBufferDataEXT");
	}

	unsupported("glClearNamedBufferDataEXT");
	return piglit_dispatch_glClearNamedBufferDataEXT;
}

static void APIENTRY
stub_glClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data)
{
	check_initialized();
	piglit_dispatch_glClearNamedBufferDataEXT = resolve_glClearNamedBufferDataEXT();
	piglit_dispatch_glClearNamedBufferDataEXT(buffer, internalformat, format, type, data);
}

PFNGLCLEARNAMEDBUFFERDATAEXTPROC piglit_dispatch_glClearNamedBufferDataEXT = stub_glClearNamedBufferDataEXT;

static void*
resolve_glClearNamedBufferSubDataEXT(void)
{
	/* glClearNamedBufferSubDataEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glClearNamedBufferSubDataEXT");
	}

	unsupported("glClearNamedBufferSubDataEXT");
	return piglit_dispatch_glClearNamedBufferSubDataEXT;
}

static void APIENTRY
stub_glClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data)
{
	check_initialized();
	piglit_dispatch_glClearNamedBufferSubDataEXT = resolve_glClearNamedBufferSubDataEXT();
	piglit_dispatch_glClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data);
}

PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC piglit_dispatch_glClearNamedBufferSubDataEXT = stub_glClearNamedBufferSubDataEXT;

static void*
resolve_glClearStencil(void)
{
	/* glClearStencil (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glClearStencil", 10);
	}

	/* glClearStencil (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glClearStencil", 10);
	}

	/* glClearStencil (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glClearStencil", 20);
	}

	unsupported("glClearStencil");
	return piglit_dispatch_glClearStencil;
}

static void APIENTRY
stub_glClearStencil(GLint s)
{
	check_initialized();
	piglit_dispatch_glClearStencil = resolve_glClearStencil();
	piglit_dispatch_glClearStencil(s);
}

PFNGLCLEARSTENCILPROC piglit_dispatch_glClearStencil = stub_glClearStencil;

static void*
resolve_glClearTexImage(void)
{
	/* glClearTexImage (GL_VERSION_4_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glClearTexImage", 44);
	}

	/* glClearTexImage (GL_ARB_clear_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_clear_texture")) {
		return get_ext_proc("glClearTexImage");
	}

	unsupported("glClearTexImage");
	return piglit_dispatch_glClearTexImage;
}

static void APIENTRY
stub_glClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const void * data)
{
	check_initialized();
	piglit_dispatch_glClearTexImage = resolve_glClearTexImage();
	piglit_dispatch_glClearTexImage(texture, level, format, type, data);
}

PFNGLCLEARTEXIMAGEPROC piglit_dispatch_glClearTexImage = stub_glClearTexImage;

static void*
resolve_glClearTexSubImage(void)
{
	/* glClearTexSubImage (GL_VERSION_4_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glClearTexSubImage", 44);
	}

	/* glClearTexSubImage (GL_ARB_clear_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_clear_texture")) {
		return get_ext_proc("glClearTexSubImage");
	}

	unsupported("glClearTexSubImage");
	return piglit_dispatch_glClearTexSubImage;
}

static void APIENTRY
stub_glClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data)
{
	check_initialized();
	piglit_dispatch_glClearTexSubImage = resolve_glClearTexSubImage();
	piglit_dispatch_glClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
}

PFNGLCLEARTEXSUBIMAGEPROC piglit_dispatch_glClearTexSubImage = stub_glClearTexSubImage;

static void*
resolve_glClientActiveTexture(void)
{
	/* glClientActiveTexture (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glClientActiveTexture", 13);
	}

	/* glClientActiveTexture (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glClientActiveTexture", 10);
	}

	/* glClientActiveTextureARB (GL_ARB_multitexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multitexture")) {
		return get_ext_proc("glClientActiveTextureARB");
	}

	unsupported("glClientActiveTexture");
	return piglit_dispatch_glClientActiveTexture;
}

static void APIENTRY
stub_glClientActiveTexture(GLenum texture)
{
	check_initialized();
	piglit_dispatch_glClientActiveTexture = resolve_glClientActiveTexture();
	piglit_dispatch_glClientActiveTexture(texture);
}

PFNGLCLIENTACTIVETEXTUREPROC piglit_dispatch_glClientActiveTexture = stub_glClientActiveTexture;

static void*
resolve_glClientActiveVertexStreamATI(void)
{
	/* glClientActiveVertexStreamATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glClientActiveVertexStreamATI");
	}

	unsupported("glClientActiveVertexStreamATI");
	return piglit_dispatch_glClientActiveVertexStreamATI;
}

static void APIENTRY
stub_glClientActiveVertexStreamATI(GLenum stream)
{
	check_initialized();
	piglit_dispatch_glClientActiveVertexStreamATI = resolve_glClientActiveVertexStreamATI();
	piglit_dispatch_glClientActiveVertexStreamATI(stream);
}

PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC piglit_dispatch_glClientActiveVertexStreamATI = stub_glClientActiveVertexStreamATI;

static void*
resolve_glClientAttribDefaultEXT(void)
{
	/* glClientAttribDefaultEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glClientAttribDefaultEXT");
	}

	unsupported("glClientAttribDefaultEXT");
	return piglit_dispatch_glClientAttribDefaultEXT;
}

static void APIENTRY
stub_glClientAttribDefaultEXT(GLbitfield mask)
{
	check_initialized();
	piglit_dispatch_glClientAttribDefaultEXT = resolve_glClientAttribDefaultEXT();
	piglit_dispatch_glClientAttribDefaultEXT(mask);
}

PFNGLCLIENTATTRIBDEFAULTEXTPROC piglit_dispatch_glClientAttribDefaultEXT = stub_glClientAttribDefaultEXT;

static void*
resolve_glClientWaitSync(void)
{
	/* glClientWaitSync (GL_VERSION_3_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glClientWaitSync", 32);
	}

	/* glClientWaitSync (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glClientWaitSync", 30);
	}

	/* glClientWaitSync (GL_ARB_sync) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_sync")) {
		return get_ext_proc("glClientWaitSync");
	}

	/* glClientWaitSyncAPPLE (GL_APPLE_sync) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_APPLE_sync")) {
		return get_ext_proc("glClientWaitSyncAPPLE");
	}

	unsupported("glClientWaitSync");
	return piglit_dispatch_glClientWaitSync;
}

static GLenum APIENTRY
stub_glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
	check_initialized();
	piglit_dispatch_glClientWaitSync = resolve_glClientWaitSync();
	return piglit_dispatch_glClientWaitSync(sync, flags, timeout);
}

PFNGLCLIENTWAITSYNCPROC piglit_dispatch_glClientWaitSync = stub_glClientWaitSync;

static void*
resolve_glClipPlane(void)
{
	/* glClipPlane (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glClipPlane", 10);
	}

	unsupported("glClipPlane");
	return piglit_dispatch_glClipPlane;
}

static void APIENTRY
stub_glClipPlane(GLenum plane, const GLdouble * equation)
{
	check_initialized();
	piglit_dispatch_glClipPlane = resolve_glClipPlane();
	piglit_dispatch_glClipPlane(plane, equation);
}

PFNGLCLIPPLANEPROC piglit_dispatch_glClipPlane = stub_glClipPlane;

static void*
resolve_glClipPlanef(void)
{
	/* glClipPlanef (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glClipPlanef", 10);
	}

	unsupported("glClipPlanef");
	return piglit_dispatch_glClipPlanef;
}

static void APIENTRY
stub_glClipPlanef(GLenum p, const GLfloat * eqn)
{
	check_initialized();
	piglit_dispatch_glClipPlanef = resolve_glClipPlanef();
	piglit_dispatch_glClipPlanef(p, eqn);
}

PFNGLCLIPPLANEFPROC piglit_dispatch_glClipPlanef = stub_glClipPlanef;

static void*
resolve_glClipPlanefIMG(void)
{
	/* glClipPlanefIMG (GL_IMG_user_clip_plane) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_IMG_user_clip_plane")) {
		return get_ext_proc("glClipPlanefIMG");
	}

	unsupported("glClipPlanefIMG");
	return piglit_dispatch_glClipPlanefIMG;
}

static void APIENTRY
stub_glClipPlanefIMG(GLenum p, const GLfloat * eqn)
{
	check_initialized();
	piglit_dispatch_glClipPlanefIMG = resolve_glClipPlanefIMG();
	piglit_dispatch_glClipPlanefIMG(p, eqn);
}

PFNGLCLIPPLANEFIMGPROC piglit_dispatch_glClipPlanefIMG = stub_glClipPlanefIMG;

static void*
resolve_glClipPlanefOES(void)
{
	/* glClipPlanefOES (GL_OES_single_precision) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_single_precision")) {
		return get_ext_proc("glClipPlanefOES");
	}

	unsupported("glClipPlanefOES");
	return piglit_dispatch_glClipPlanefOES;
}

static void APIENTRY
stub_glClipPlanefOES(GLenum plane, const GLfloat * equation)
{
	check_initialized();
	piglit_dispatch_glClipPlanefOES = resolve_glClipPlanefOES();
	piglit_dispatch_glClipPlanefOES(plane, equation);
}

PFNGLCLIPPLANEFOESPROC piglit_dispatch_glClipPlanefOES = stub_glClipPlanefOES;

static void*
resolve_glClipPlanex(void)
{
	/* glClipPlanex (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glClipPlanex", 10);
	}

	unsupported("glClipPlanex");
	return piglit_dispatch_glClipPlanex;
}

static void APIENTRY
stub_glClipPlanex(GLenum plane, const GLfixed * equation)
{
	check_initialized();
	piglit_dispatch_glClipPlanex = resolve_glClipPlanex();
	piglit_dispatch_glClipPlanex(plane, equation);
}

PFNGLCLIPPLANEXPROC piglit_dispatch_glClipPlanex = stub_glClipPlanex;

static void*
resolve_glClipPlanexIMG(void)
{
	/* glClipPlanexIMG (GL_IMG_user_clip_plane) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_IMG_user_clip_plane")) {
		return get_ext_proc("glClipPlanexIMG");
	}

	unsupported("glClipPlanexIMG");
	return piglit_dispatch_glClipPlanexIMG;
}

static void APIENTRY
stub_glClipPlanexIMG(GLenum p, const GLfixed * eqn)
{
	check_initialized();
	piglit_dispatch_glClipPlanexIMG = resolve_glClipPlanexIMG();
	piglit_dispatch_glClipPlanexIMG(p, eqn);
}

PFNGLCLIPPLANEXIMGPROC piglit_dispatch_glClipPlanexIMG = stub_glClipPlanexIMG;

static void*
resolve_glClipPlanexOES(void)
{
	/* glClipPlanexOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glClipPlanexOES");
	}

	unsupported("glClipPlanexOES");
	return piglit_dispatch_glClipPlanexOES;
}

static void APIENTRY
stub_glClipPlanexOES(GLenum plane, const GLfixed * equation)
{
	check_initialized();
	piglit_dispatch_glClipPlanexOES = resolve_glClipPlanexOES();
	piglit_dispatch_glClipPlanexOES(plane, equation);
}

PFNGLCLIPPLANEXOESPROC piglit_dispatch_glClipPlanexOES = stub_glClipPlanexOES;

static void*
resolve_glColor3b(void)
{
	/* glColor3b (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glColor3b", 10);
	}

	unsupported("glColor3b");
	return piglit_dispatch_glColor3b;
}

static void APIENTRY
stub_glColor3b(GLbyte red, GLbyte green, GLbyte blue)
{
	check_initialized();
	piglit_dispatch_glColor3b = resolve_glColor3b();
	piglit_dispatch_glColor3b(red, green, blue);
}

PFNGLCOLOR3BPROC piglit_dispatch_glColor3b = stub_glColor3b;

static void*
resolve_glColor3bv(void)
{
	/* glColor3bv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glColor3bv", 10);
	}

	unsupported("glColor3bv");
	return piglit_dispatch_glColor3bv;
}

static void APIENTRY
stub_glColor3bv(const GLbyte * v)
{
	check_initialized();
	piglit_dispatch_glColor3bv = resolve_glColor3bv();
	piglit_dispatch_glColor3bv(v);
}

PFNGLCOLOR3BVPROC piglit_dispatch_glColor3bv = stub_glColor3bv;

static void*
resolve_glColor3d(void)
{
	/* glColor3d (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glColor3d", 10);
	}

	unsupported("glColor3d");
	return piglit_dispatch_glColor3d;
}

static void APIENTRY
stub_glColor3d(GLdouble red, GLdouble green, GLdouble blue)
{
	check_initialized();
	piglit_dispatch_glColor3d = resolve_glColor3d();
	piglit_dispatch_glColor3d(red, green, blue);
}

PFNGLCOLOR3DPROC piglit_dispatch_glColor3d = stub_glColor3d;

static void*
resolve_glColor3dv(void)
{
	/* glColor3dv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glColor3dv", 10);
	}

	unsupported("glColor3dv");
	return piglit_dispatch_glColor3dv;
}

static void APIENTRY
stub_glColor3dv(const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glColor3dv = resolve_glColor3dv();
	piglit_dispatch_glColor3dv(v);
}

PFNGLCOLOR3DVPROC piglit_dispatch_glColor3dv = stub_glColor3dv;

static void*
resolve_glColor3f(void)
{
	/* glColor3f (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glColor3f", 10);
	}

	unsupported("glColor3f");
	return piglit_dispatch_glColor3f;
}

static void APIENTRY
stub_glColor3f(GLfloat red, GLfloat green, GLfloat blue)
{
	check_initialized();
	piglit_dispatch_glColor3f = resolve_glColor3f();
	piglit_dispatch_glColor3f(red, green, blue);
}

PFNGLCOLOR3FPROC piglit_dispatch_glColor3f = stub_glColor3f;

static void*
resolve_glColor3fVertex3fSUN(void)
{
	/* glColor3fVertex3fSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glColor3fVertex3fSUN");
	}

	unsupported("glColor3fVertex3fSUN");
	return piglit_dispatch_glColor3fVertex3fSUN;
}

static void APIENTRY
stub_glColor3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
{
	check_initialized();
	piglit_dispatch_glColor3fVertex3fSUN = resolve_glColor3fVertex3fSUN();
	piglit_dispatch_glColor3fVertex3fSUN(r, g, b, x, y, z);
}

PFNGLCOLOR3FVERTEX3FSUNPROC piglit_dispatch_glColor3fVertex3fSUN = stub_glColor3fVertex3fSUN;

static void*
resolve_glColor3fVertex3fvSUN(void)
{
	/* glColor3fVertex3fvSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glColor3fVertex3fvSUN");
	}

	unsupported("glColor3fVertex3fvSUN");
	return piglit_dispatch_glColor3fVertex3fvSUN;
}

static void APIENTRY
stub_glColor3fVertex3fvSUN(const GLfloat * c, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glColor3fVertex3fvSUN = resolve_glColor3fVertex3fvSUN();
	piglit_dispatch_glColor3fVertex3fvSUN(c, v);
}

PFNGLCOLOR3FVERTEX3FVSUNPROC piglit_dispatch_glColor3fVertex3fvSUN = stub_glColor3fVertex3fvSUN;

static void*
resolve_glColor3fv(void)
{
	/* glColor3fv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glColor3fv", 10);
	}

	unsupported("glColor3fv");
	return piglit_dispatch_glColor3fv;
}

static void APIENTRY
stub_glColor3fv(const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glColor3fv = resolve_glColor3fv();
	piglit_dispatch_glColor3fv(v);
}

PFNGLCOLOR3FVPROC piglit_dispatch_glColor3fv = stub_glColor3fv;

static void*
resolve_glColor3hNV(void)
{
	/* glColor3hNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glColor3hNV");
	}

	unsupported("glColor3hNV");
	return piglit_dispatch_glColor3hNV;
}

static void APIENTRY
stub_glColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
{
	check_initialized();
	piglit_dispatch_glColor3hNV = resolve_glColor3hNV();
	piglit_dispatch_glColor3hNV(red, green, blue);
}

PFNGLCOLOR3HNVPROC piglit_dispatch_glColor3hNV = stub_glColor3hNV;

static void*
resolve_glColor3hvNV(void)
{
	/* glColor3hvNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glColor3hvNV");
	}

	unsupported("glColor3hvNV");
	return piglit_dispatch_glColor3hvNV;
}

static void APIENTRY
stub_glColor3hvNV(const GLhalfNV * v)
{
	check_initialized();
	piglit_dispatch_glColor3hvNV = resolve_glColor3hvNV();
	piglit_dispatch_glColor3hvNV(v);
}

PFNGLCOLOR3HVNVPROC piglit_dispatch_glColor3hvNV = stub_glColor3hvNV;

static void*
resolve_glColor3i(void)
{
	/* glColor3i (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glColor3i", 10);
	}

	unsupported("glColor3i");
	return piglit_dispatch_glColor3i;
}

static void APIENTRY
stub_glColor3i(GLint red, GLint green, GLint blue)
{
	check_initialized();
	piglit_dispatch_glColor3i = resolve_glColor3i();
	piglit_dispatch_glColor3i(red, green, blue);
}

PFNGLCOLOR3IPROC piglit_dispatch_glColor3i = stub_glColor3i;

static void*
resolve_glColor3iv(void)
{
	/* glColor3iv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glColor3iv", 10);
	}

	unsupported("glColor3iv");
	return piglit_dispatch_glColor3iv;
}

static void APIENTRY
stub_glColor3iv(const GLint * v)
{
	check_initialized();
	piglit_dispatch_glColor3iv = resolve_glColor3iv();
	piglit_dispatch_glColor3iv(v);
}

PFNGLCOLOR3IVPROC piglit_dispatch_glColor3iv = stub_glColor3iv;

static void*
resolve_glColor3s(void)
{
	/* glColor3s (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glColor3s", 10);
	}

	unsupported("glColor3s");
	return piglit_dispatch_glColor3s;
}

static void APIENTRY
stub_glColor3s(GLshort red, GLshort green, GLshort blue)
{
	check_initialized();
	piglit_dispatch_glColor3s = resolve_glColor3s();
	piglit_dispatch_glColor3s(red, green, blue);
}

PFNGLCOLOR3SPROC piglit_dispatch_glColor3s = stub_glColor3s;

static void*
resolve_glColor3sv(void)
{
	/* glColor3sv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glColor3sv", 10);
	}

	unsupported("glColor3sv");
	return piglit_dispatch_glColor3sv;
}

static void APIENTRY
stub_glColor3sv(const GLshort * v)
{
	check_initialized();
	piglit_dispatch_glColor3sv = resolve_glColor3sv();
	piglit_dispatch_glColor3sv(v);
}

PFNGLCOLOR3SVPROC piglit_dispatch_glColor3sv = stub_glColor3sv;

static void*
resolve_glColor3ub(void)
{
	/* glColor3ub (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glColor3ub", 10);
	}

	unsupported("glColor3ub");
	return piglit_dispatch_glColor3ub;
}

static void APIENTRY
stub_glColor3ub(GLubyte red, GLubyte green, GLubyte blue)
{
	check_initialized();
	piglit_dispatch_glColor3ub = resolve_glColor3ub();
	piglit_dispatch_glColor3ub(red, green, blue);
}

PFNGLCOLOR3UBPROC piglit_dispatch_glColor3ub = stub_glColor3ub;

static void*
resolve_glColor3ubv(void)
{
	/* glColor3ubv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glColor3ubv", 10);
	}

	unsupported("glColor3ubv");
	return piglit_dispatch_glColor3ubv;
}

static void APIENTRY
stub_glColor3ubv(const GLubyte * v)
{
	check_initialized();
	piglit_dispatch_glColor3ubv = resolve_glColor3ubv();
	piglit_dispatch_glColor3ubv(v);
}

PFNGLCOLOR3UBVPROC piglit_dispatch_glColor3ubv = stub_glColor3ubv;

static void*
resolve_glColor3ui(void)
{
	/* glColor3ui (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glColor3ui", 10);
	}

	unsupported("glColor3ui");
	return piglit_dispatch_glColor3ui;
}

static void APIENTRY
stub_glColor3ui(GLuint red, GLuint green, GLuint blue)
{
	check_initialized();
	piglit_dispatch_glColor3ui = resolve_glColor3ui();
	piglit_dispatch_glColor3ui(red, green, blue);
}

PFNGLCOLOR3UIPROC piglit_dispatch_glColor3ui = stub_glColor3ui;

static void*
resolve_glColor3uiv(void)
{
	/* glColor3uiv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glColor3uiv", 10);
	}

	unsupported("glColor3uiv");
	return piglit_dispatch_glColor3uiv;
}

static void APIENTRY
stub_glColor3uiv(const GLuint * v)
{
	check_initialized();
	piglit_dispatch_glColor3uiv = resolve_glColor3uiv();
	piglit_dispatch_glColor3uiv(v);
}

PFNGLCOLOR3UIVPROC piglit_dispatch_glColor3uiv = stub_glColor3uiv;

static void*
resolve_glColor3us(void)
{
	/* glColor3us (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glColor3us", 10);
	}

	unsupported("glColor3us");
	return piglit_dispatch_glColor3us;
}

static void APIENTRY
stub_glColor3us(GLushort red, GLushort green, GLushort blue)
{
	check_initialized();
	piglit_dispatch_glColor3us = resolve_glColor3us();
	piglit_dispatch_glColor3us(red, green, blue);
}

PFNGLCOLOR3USPROC piglit_dispatch_glColor3us = stub_glColor3us;

static void*
resolve_glColor3usv(void)
{
	/* glColor3usv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glColor3usv", 10);
	}

	unsupported("glColor3usv");
	return piglit_dispatch_glColor3usv;
}

static void APIENTRY
stub_glColor3usv(const GLushort * v)
{
	check_initialized();
	piglit_dispatch_glColor3usv = resolve_glColor3usv();
	piglit_dispatch_glColor3usv(v);
}

PFNGLCOLOR3USVPROC piglit_dispatch_glColor3usv = stub_glColor3usv;

static void*
resolve_glColor3xOES(void)
{
	/* glColor3xOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glColor3xOES");
	}

	unsupported("glColor3xOES");
	return piglit_dispatch_glColor3xOES;
}

static void APIENTRY
stub_glColor3xOES(GLfixed red, GLfixed green, GLfixed blue)
{
	check_initialized();
	piglit_dispatch_glColor3xOES = resolve_glColor3xOES();
	piglit_dispatch_glColor3xOES(red, green, blue);
}

PFNGLCOLOR3XOESPROC piglit_dispatch_glColor3xOES = stub_glColor3xOES;

static void*
resolve_glColor3xvOES(void)
{
	/* glColor3xvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glColor3xvOES");
	}

	unsupported("glColor3xvOES");
	return piglit_dispatch_glColor3xvOES;
}

static void APIENTRY
stub_glColor3xvOES(const GLfixed * components)
{
	check_initialized();
	piglit_dispatch_glColor3xvOES = resolve_glColor3xvOES();
	piglit_dispatch_glColor3xvOES(components);
}

PFNGLCOLOR3XVOESPROC piglit_dispatch_glColor3xvOES = stub_glColor3xvOES;

static void*
resolve_glColor4b(void)
{
	/* glColor4b (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glColor4b", 10);
	}

	unsupported("glColor4b");
	return piglit_dispatch_glColor4b;
}

static void APIENTRY
stub_glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)
{
	check_initialized();
	piglit_dispatch_glColor4b = resolve_glColor4b();
	piglit_dispatch_glColor4b(red, green, blue, alpha);
}

PFNGLCOLOR4BPROC piglit_dispatch_glColor4b = stub_glColor4b;

static void*
resolve_glColor4bv(void)
{
	/* glColor4bv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glColor4bv", 10);
	}

	unsupported("glColor4bv");
	return piglit_dispatch_glColor4bv;
}

static void APIENTRY
stub_glColor4bv(const GLbyte * v)
{
	check_initialized();
	piglit_dispatch_glColor4bv = resolve_glColor4bv();
	piglit_dispatch_glColor4bv(v);
}

PFNGLCOLOR4BVPROC piglit_dispatch_glColor4bv = stub_glColor4bv;

static void*
resolve_glColor4d(void)
{
	/* glColor4d (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glColor4d", 10);
	}

	unsupported("glColor4d");
	return piglit_dispatch_glColor4d;
}

static void APIENTRY
stub_glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)
{
	check_initialized();
	piglit_dispatch_glColor4d = resolve_glColor4d();
	piglit_dispatch_glColor4d(red, green, blue, alpha);
}

PFNGLCOLOR4DPROC piglit_dispatch_glColor4d = stub_glColor4d;

static void*
resolve_glColor4dv(void)
{
	/* glColor4dv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glColor4dv", 10);
	}

	unsupported("glColor4dv");
	return piglit_dispatch_glColor4dv;
}

static void APIENTRY
stub_glColor4dv(const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glColor4dv = resolve_glColor4dv();
	piglit_dispatch_glColor4dv(v);
}

PFNGLCOLOR4DVPROC piglit_dispatch_glColor4dv = stub_glColor4dv;

static void*
resolve_glColor4f(void)
{
	/* glColor4f (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glColor4f", 10);
	}

	/* glColor4f (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glColor4f", 10);
	}

	unsupported("glColor4f");
	return piglit_dispatch_glColor4f;
}

static void APIENTRY
stub_glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
	check_initialized();
	piglit_dispatch_glColor4f = resolve_glColor4f();
	piglit_dispatch_glColor4f(red, green, blue, alpha);
}

PFNGLCOLOR4FPROC piglit_dispatch_glColor4f = stub_glColor4f;

static void*
resolve_glColor4fNormal3fVertex3fSUN(void)
{
	/* glColor4fNormal3fVertex3fSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glColor4fNormal3fVertex3fSUN");
	}

	unsupported("glColor4fNormal3fVertex3fSUN");
	return piglit_dispatch_glColor4fNormal3fVertex3fSUN;
}

static void APIENTRY
stub_glColor4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
	check_initialized();
	piglit_dispatch_glColor4fNormal3fVertex3fSUN = resolve_glColor4fNormal3fVertex3fSUN();
	piglit_dispatch_glColor4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z);
}

PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC piglit_dispatch_glColor4fNormal3fVertex3fSUN = stub_glColor4fNormal3fVertex3fSUN;

static void*
resolve_glColor4fNormal3fVertex3fvSUN(void)
{
	/* glColor4fNormal3fVertex3fvSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glColor4fNormal3fVertex3fvSUN");
	}

	unsupported("glColor4fNormal3fVertex3fvSUN");
	return piglit_dispatch_glColor4fNormal3fVertex3fvSUN;
}

static void APIENTRY
stub_glColor4fNormal3fVertex3fvSUN(const GLfloat * c, const GLfloat * n, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glColor4fNormal3fVertex3fvSUN = resolve_glColor4fNormal3fVertex3fvSUN();
	piglit_dispatch_glColor4fNormal3fVertex3fvSUN(c, n, v);
}

PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC piglit_dispatch_glColor4fNormal3fVertex3fvSUN = stub_glColor4fNormal3fVertex3fvSUN;

static void*
resolve_glColor4fv(void)
{
	/* glColor4fv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glColor4fv", 10);
	}

	unsupported("glColor4fv");
	return piglit_dispatch_glColor4fv;
}

static void APIENTRY
stub_glColor4fv(const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glColor4fv = resolve_glColor4fv();
	piglit_dispatch_glColor4fv(v);
}

PFNGLCOLOR4FVPROC piglit_dispatch_glColor4fv = stub_glColor4fv;

static void*
resolve_glColor4hNV(void)
{
	/* glColor4hNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glColor4hNV");
	}

	unsupported("glColor4hNV");
	return piglit_dispatch_glColor4hNV;
}

static void APIENTRY
stub_glColor4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha)
{
	check_initialized();
	piglit_dispatch_glColor4hNV = resolve_glColor4hNV();
	piglit_dispatch_glColor4hNV(red, green, blue, alpha);
}

PFNGLCOLOR4HNVPROC piglit_dispatch_glColor4hNV = stub_glColor4hNV;

static void*
resolve_glColor4hvNV(void)
{
	/* glColor4hvNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glColor4hvNV");
	}

	unsupported("glColor4hvNV");
	return piglit_dispatch_glColor4hvNV;
}

static void APIENTRY
stub_glColor4hvNV(const GLhalfNV * v)
{
	check_initialized();
	piglit_dispatch_glColor4hvNV = resolve_glColor4hvNV();
	piglit_dispatch_glColor4hvNV(v);
}

PFNGLCOLOR4HVNVPROC piglit_dispatch_glColor4hvNV = stub_glColor4hvNV;

static void*
resolve_glColor4i(void)
{
	/* glColor4i (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glColor4i", 10);
	}

	unsupported("glColor4i");
	return piglit_dispatch_glColor4i;
}

static void APIENTRY
stub_glColor4i(GLint red, GLint green, GLint blue, GLint alpha)
{
	check_initialized();
	piglit_dispatch_glColor4i = resolve_glColor4i();
	piglit_dispatch_glColor4i(red, green, blue, alpha);
}

PFNGLCOLOR4IPROC piglit_dispatch_glColor4i = stub_glColor4i;

static void*
resolve_glColor4iv(void)
{
	/* glColor4iv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glColor4iv", 10);
	}

	unsupported("glColor4iv");
	return piglit_dispatch_glColor4iv;
}

static void APIENTRY
stub_glColor4iv(const GLint * v)
{
	check_initialized();
	piglit_dispatch_glColor4iv = resolve_glColor4iv();
	piglit_dispatch_glColor4iv(v);
}

PFNGLCOLOR4IVPROC piglit_dispatch_glColor4iv = stub_glColor4iv;

static void*
resolve_glColor4s(void)
{
	/* glColor4s (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glColor4s", 10);
	}

	unsupported("glColor4s");
	return piglit_dispatch_glColor4s;
}

static void APIENTRY
stub_glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha)
{
	check_initialized();
	piglit_dispatch_glColor4s = resolve_glColor4s();
	piglit_dispatch_glColor4s(red, green, blue, alpha);
}

PFNGLCOLOR4SPROC piglit_dispatch_glColor4s = stub_glColor4s;

static void*
resolve_glColor4sv(void)
{
	/* glColor4sv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glColor4sv", 10);
	}

	unsupported("glColor4sv");
	return piglit_dispatch_glColor4sv;
}

static void APIENTRY
stub_glColor4sv(const GLshort * v)
{
	check_initialized();
	piglit_dispatch_glColor4sv = resolve_glColor4sv();
	piglit_dispatch_glColor4sv(v);
}

PFNGLCOLOR4SVPROC piglit_dispatch_glColor4sv = stub_glColor4sv;

static void*
resolve_glColor4ub(void)
{
	/* glColor4ub (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glColor4ub", 10);
	}

	/* glColor4ub (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glColor4ub", 10);
	}

	unsupported("glColor4ub");
	return piglit_dispatch_glColor4ub;
}

static void APIENTRY
stub_glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
{
	check_initialized();
	piglit_dispatch_glColor4ub = resolve_glColor4ub();
	piglit_dispatch_glColor4ub(red, green, blue, alpha);
}

PFNGLCOLOR4UBPROC piglit_dispatch_glColor4ub = stub_glColor4ub;

static void*
resolve_glColor4ubVertex2fSUN(void)
{
	/* glColor4ubVertex2fSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glColor4ubVertex2fSUN");
	}

	unsupported("glColor4ubVertex2fSUN");
	return piglit_dispatch_glColor4ubVertex2fSUN;
}

static void APIENTRY
stub_glColor4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y)
{
	check_initialized();
	piglit_dispatch_glColor4ubVertex2fSUN = resolve_glColor4ubVertex2fSUN();
	piglit_dispatch_glColor4ubVertex2fSUN(r, g, b, a, x, y);
}

PFNGLCOLOR4UBVERTEX2FSUNPROC piglit_dispatch_glColor4ubVertex2fSUN = stub_glColor4ubVertex2fSUN;

static void*
resolve_glColor4ubVertex2fvSUN(void)
{
	/* glColor4ubVertex2fvSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glColor4ubVertex2fvSUN");
	}

	unsupported("glColor4ubVertex2fvSUN");
	return piglit_dispatch_glColor4ubVertex2fvSUN;
}

static void APIENTRY
stub_glColor4ubVertex2fvSUN(const GLubyte * c, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glColor4ubVertex2fvSUN = resolve_glColor4ubVertex2fvSUN();
	piglit_dispatch_glColor4ubVertex2fvSUN(c, v);
}

PFNGLCOLOR4UBVERTEX2FVSUNPROC piglit_dispatch_glColor4ubVertex2fvSUN = stub_glColor4ubVertex2fvSUN;

static void*
resolve_glColor4ubVertex3fSUN(void)
{
	/* glColor4ubVertex3fSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glColor4ubVertex3fSUN");
	}

	unsupported("glColor4ubVertex3fSUN");
	return piglit_dispatch_glColor4ubVertex3fSUN;
}

static void APIENTRY
stub_glColor4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
{
	check_initialized();
	piglit_dispatch_glColor4ubVertex3fSUN = resolve_glColor4ubVertex3fSUN();
	piglit_dispatch_glColor4ubVertex3fSUN(r, g, b, a, x, y, z);
}

PFNGLCOLOR4UBVERTEX3FSUNPROC piglit_dispatch_glColor4ubVertex3fSUN = stub_glColor4ubVertex3fSUN;

static void*
resolve_glColor4ubVertex3fvSUN(void)
{
	/* glColor4ubVertex3fvSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glColor4ubVertex3fvSUN");
	}

	unsupported("glColor4ubVertex3fvSUN");
	return piglit_dispatch_glColor4ubVertex3fvSUN;
}

static void APIENTRY
stub_glColor4ubVertex3fvSUN(const GLubyte * c, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glColor4ubVertex3fvSUN = resolve_glColor4ubVertex3fvSUN();
	piglit_dispatch_glColor4ubVertex3fvSUN(c, v);
}

PFNGLCOLOR4UBVERTEX3FVSUNPROC piglit_dispatch_glColor4ubVertex3fvSUN = stub_glColor4ubVertex3fvSUN;

static void*
resolve_glColor4ubv(void)
{
	/* glColor4ubv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glColor4ubv", 10);
	}

	unsupported("glColor4ubv");
	return piglit_dispatch_glColor4ubv;
}

static void APIENTRY
stub_glColor4ubv(const GLubyte * v)
{
	check_initialized();
	piglit_dispatch_glColor4ubv = resolve_glColor4ubv();
	piglit_dispatch_glColor4ubv(v);
}

PFNGLCOLOR4UBVPROC piglit_dispatch_glColor4ubv = stub_glColor4ubv;

static void*
resolve_glColor4ui(void)
{
	/* glColor4ui (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glColor4ui", 10);
	}

	unsupported("glColor4ui");
	return piglit_dispatch_glColor4ui;
}

static void APIENTRY
stub_glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha)
{
	check_initialized();
	piglit_dispatch_glColor4ui = resolve_glColor4ui();
	piglit_dispatch_glColor4ui(red, green, blue, alpha);
}

PFNGLCOLOR4UIPROC piglit_dispatch_glColor4ui = stub_glColor4ui;

static void*
resolve_glColor4uiv(void)
{
	/* glColor4uiv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glColor4uiv", 10);
	}

	unsupported("glColor4uiv");
	return piglit_dispatch_glColor4uiv;
}

static void APIENTRY
stub_glColor4uiv(const GLuint * v)
{
	check_initialized();
	piglit_dispatch_glColor4uiv = resolve_glColor4uiv();
	piglit_dispatch_glColor4uiv(v);
}

PFNGLCOLOR4UIVPROC piglit_dispatch_glColor4uiv = stub_glColor4uiv;

static void*
resolve_glColor4us(void)
{
	/* glColor4us (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glColor4us", 10);
	}

	unsupported("glColor4us");
	return piglit_dispatch_glColor4us;
}

static void APIENTRY
stub_glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha)
{
	check_initialized();
	piglit_dispatch_glColor4us = resolve_glColor4us();
	piglit_dispatch_glColor4us(red, green, blue, alpha);
}

PFNGLCOLOR4USPROC piglit_dispatch_glColor4us = stub_glColor4us;

static void*
resolve_glColor4usv(void)
{
	/* glColor4usv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glColor4usv", 10);
	}

	unsupported("glColor4usv");
	return piglit_dispatch_glColor4usv;
}

static void APIENTRY
stub_glColor4usv(const GLushort * v)
{
	check_initialized();
	piglit_dispatch_glColor4usv = resolve_glColor4usv();
	piglit_dispatch_glColor4usv(v);
}

PFNGLCOLOR4USVPROC piglit_dispatch_glColor4usv = stub_glColor4usv;

static void*
resolve_glColor4x(void)
{
	/* glColor4x (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glColor4x", 10);
	}

	unsupported("glColor4x");
	return piglit_dispatch_glColor4x;
}

static void APIENTRY
stub_glColor4x(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
{
	check_initialized();
	piglit_dispatch_glColor4x = resolve_glColor4x();
	piglit_dispatch_glColor4x(red, green, blue, alpha);
}

PFNGLCOLOR4XPROC piglit_dispatch_glColor4x = stub_glColor4x;

static void*
resolve_glColor4xOES(void)
{
	/* glColor4xOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glColor4xOES");
	}

	unsupported("glColor4xOES");
	return piglit_dispatch_glColor4xOES;
}

static void APIENTRY
stub_glColor4xOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
{
	check_initialized();
	piglit_dispatch_glColor4xOES = resolve_glColor4xOES();
	piglit_dispatch_glColor4xOES(red, green, blue, alpha);
}

PFNGLCOLOR4XOESPROC piglit_dispatch_glColor4xOES = stub_glColor4xOES;

static void*
resolve_glColor4xvOES(void)
{
	/* glColor4xvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glColor4xvOES");
	}

	unsupported("glColor4xvOES");
	return piglit_dispatch_glColor4xvOES;
}

static void APIENTRY
stub_glColor4xvOES(const GLfixed * components)
{
	check_initialized();
	piglit_dispatch_glColor4xvOES = resolve_glColor4xvOES();
	piglit_dispatch_glColor4xvOES(components);
}

PFNGLCOLOR4XVOESPROC piglit_dispatch_glColor4xvOES = stub_glColor4xvOES;

static void*
resolve_glColorFormatNV(void)
{
	/* glColorFormatNV (GL_NV_vertex_buffer_unified_memory) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_buffer_unified_memory")) {
		return get_ext_proc("glColorFormatNV");
	}

	unsupported("glColorFormatNV");
	return piglit_dispatch_glColorFormatNV;
}

static void APIENTRY
stub_glColorFormatNV(GLint size, GLenum type, GLsizei stride)
{
	check_initialized();
	piglit_dispatch_glColorFormatNV = resolve_glColorFormatNV();
	piglit_dispatch_glColorFormatNV(size, type, stride);
}

PFNGLCOLORFORMATNVPROC piglit_dispatch_glColorFormatNV = stub_glColorFormatNV;

static void*
resolve_glColorFragmentOp1ATI(void)
{
	/* glColorFragmentOp1ATI (GL_ATI_fragment_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_fragment_shader")) {
		return get_ext_proc("glColorFragmentOp1ATI");
	}

	unsupported("glColorFragmentOp1ATI");
	return piglit_dispatch_glColorFragmentOp1ATI;
}

static void APIENTRY
stub_glColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
{
	check_initialized();
	piglit_dispatch_glColorFragmentOp1ATI = resolve_glColorFragmentOp1ATI();
	piglit_dispatch_glColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
}

PFNGLCOLORFRAGMENTOP1ATIPROC piglit_dispatch_glColorFragmentOp1ATI = stub_glColorFragmentOp1ATI;

static void*
resolve_glColorFragmentOp2ATI(void)
{
	/* glColorFragmentOp2ATI (GL_ATI_fragment_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_fragment_shader")) {
		return get_ext_proc("glColorFragmentOp2ATI");
	}

	unsupported("glColorFragmentOp2ATI");
	return piglit_dispatch_glColorFragmentOp2ATI;
}

static void APIENTRY
stub_glColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
{
	check_initialized();
	piglit_dispatch_glColorFragmentOp2ATI = resolve_glColorFragmentOp2ATI();
	piglit_dispatch_glColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
}

PFNGLCOLORFRAGMENTOP2ATIPROC piglit_dispatch_glColorFragmentOp2ATI = stub_glColorFragmentOp2ATI;

static void*
resolve_glColorFragmentOp3ATI(void)
{
	/* glColorFragmentOp3ATI (GL_ATI_fragment_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_fragment_shader")) {
		return get_ext_proc("glColorFragmentOp3ATI");
	}

	unsupported("glColorFragmentOp3ATI");
	return piglit_dispatch_glColorFragmentOp3ATI;
}

static void APIENTRY
stub_glColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
{
	check_initialized();
	piglit_dispatch_glColorFragmentOp3ATI = resolve_glColorFragmentOp3ATI();
	piglit_dispatch_glColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
}

PFNGLCOLORFRAGMENTOP3ATIPROC piglit_dispatch_glColorFragmentOp3ATI = stub_glColorFragmentOp3ATI;

static void*
resolve_glColorMask(void)
{
	/* glColorMask (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glColorMask", 10);
	}

	/* glColorMask (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glColorMask", 10);
	}

	/* glColorMask (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glColorMask", 20);
	}

	unsupported("glColorMask");
	return piglit_dispatch_glColorMask;
}

static void APIENTRY
stub_glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
	check_initialized();
	piglit_dispatch_glColorMask = resolve_glColorMask();
	piglit_dispatch_glColorMask(red, green, blue, alpha);
}

PFNGLCOLORMASKPROC piglit_dispatch_glColorMask = stub_glColorMask;

static void*
resolve_glColorMaskIndexedEXT(void)
{
	/* glColorMaski (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glColorMaski", 30);
	}

	/* glColorMaskIndexedEXT (GL_EXT_draw_buffers2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_draw_buffers2")) {
		return get_ext_proc("glColorMaskIndexedEXT");
	}

	/* glColorMaskiEXT (GL_EXT_draw_buffers_indexed) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_draw_buffers_indexed")) {
		return get_ext_proc("glColorMaskiEXT");
	}

	unsupported("glColorMaskIndexedEXT");
	return piglit_dispatch_glColorMaskIndexedEXT;
}

static void APIENTRY
stub_glColorMaskIndexedEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
	check_initialized();
	piglit_dispatch_glColorMaskIndexedEXT = resolve_glColorMaskIndexedEXT();
	piglit_dispatch_glColorMaskIndexedEXT(index, r, g, b, a);
}

PFNGLCOLORMASKINDEXEDEXTPROC piglit_dispatch_glColorMaskIndexedEXT = stub_glColorMaskIndexedEXT;

static void*
resolve_glColorMaterial(void)
{
	/* glColorMaterial (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glColorMaterial", 10);
	}

	unsupported("glColorMaterial");
	return piglit_dispatch_glColorMaterial;
}

static void APIENTRY
stub_glColorMaterial(GLenum face, GLenum mode)
{
	check_initialized();
	piglit_dispatch_glColorMaterial = resolve_glColorMaterial();
	piglit_dispatch_glColorMaterial(face, mode);
}

PFNGLCOLORMATERIALPROC piglit_dispatch_glColorMaterial = stub_glColorMaterial;

static void*
resolve_glColorP3ui(void)
{
	/* glColorP3ui (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glColorP3ui", 33);
	}

	/* glColorP3ui (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glColorP3ui");
	}

	unsupported("glColorP3ui");
	return piglit_dispatch_glColorP3ui;
}

static void APIENTRY
stub_glColorP3ui(GLenum type, GLuint color)
{
	check_initialized();
	piglit_dispatch_glColorP3ui = resolve_glColorP3ui();
	piglit_dispatch_glColorP3ui(type, color);
}

PFNGLCOLORP3UIPROC piglit_dispatch_glColorP3ui = stub_glColorP3ui;

static void*
resolve_glColorP3uiv(void)
{
	/* glColorP3uiv (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glColorP3uiv", 33);
	}

	/* glColorP3uiv (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glColorP3uiv");
	}

	unsupported("glColorP3uiv");
	return piglit_dispatch_glColorP3uiv;
}

static void APIENTRY
stub_glColorP3uiv(GLenum type, const GLuint * color)
{
	check_initialized();
	piglit_dispatch_glColorP3uiv = resolve_glColorP3uiv();
	piglit_dispatch_glColorP3uiv(type, color);
}

PFNGLCOLORP3UIVPROC piglit_dispatch_glColorP3uiv = stub_glColorP3uiv;

static void*
resolve_glColorP4ui(void)
{
	/* glColorP4ui (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glColorP4ui", 33);
	}

	/* glColorP4ui (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glColorP4ui");
	}

	unsupported("glColorP4ui");
	return piglit_dispatch_glColorP4ui;
}

static void APIENTRY
stub_glColorP4ui(GLenum type, GLuint color)
{
	check_initialized();
	piglit_dispatch_glColorP4ui = resolve_glColorP4ui();
	piglit_dispatch_glColorP4ui(type, color);
}

PFNGLCOLORP4UIPROC piglit_dispatch_glColorP4ui = stub_glColorP4ui;

static void*
resolve_glColorP4uiv(void)
{
	/* glColorP4uiv (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glColorP4uiv", 33);
	}

	/* glColorP4uiv (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glColorP4uiv");
	}

	unsupported("glColorP4uiv");
	return piglit_dispatch_glColorP4uiv;
}

static void APIENTRY
stub_glColorP4uiv(GLenum type, const GLuint * color)
{
	check_initialized();
	piglit_dispatch_glColorP4uiv = resolve_glColorP4uiv();
	piglit_dispatch_glColorP4uiv(type, color);
}

PFNGLCOLORP4UIVPROC piglit_dispatch_glColorP4uiv = stub_glColorP4uiv;

static void*
resolve_glColorPointer(void)
{
	/* glColorPointer (GL_VERSION_1_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glColorPointer", 11);
	}

	/* glColorPointer (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glColorPointer", 10);
	}

	unsupported("glColorPointer");
	return piglit_dispatch_glColorPointer;
}

static void APIENTRY
stub_glColorPointer(GLint size, GLenum type, GLsizei stride, const void * pointer)
{
	check_initialized();
	piglit_dispatch_glColorPointer = resolve_glColorPointer();
	piglit_dispatch_glColorPointer(size, type, stride, pointer);
}

PFNGLCOLORPOINTERPROC piglit_dispatch_glColorPointer = stub_glColorPointer;

static void*
resolve_glColorPointerEXT(void)
{
	/* glColorPointerEXT (GL_EXT_vertex_array) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_array")) {
		return get_ext_proc("glColorPointerEXT");
	}

	unsupported("glColorPointerEXT");
	return piglit_dispatch_glColorPointerEXT;
}

static void APIENTRY
stub_glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer)
{
	check_initialized();
	piglit_dispatch_glColorPointerEXT = resolve_glColorPointerEXT();
	piglit_dispatch_glColorPointerEXT(size, type, stride, count, pointer);
}

PFNGLCOLORPOINTEREXTPROC piglit_dispatch_glColorPointerEXT = stub_glColorPointerEXT;

static void*
resolve_glColorPointerListIBM(void)
{
	/* glColorPointerListIBM (GL_IBM_vertex_array_lists) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_IBM_vertex_array_lists")) {
		return get_ext_proc("glColorPointerListIBM");
	}

	unsupported("glColorPointerListIBM");
	return piglit_dispatch_glColorPointerListIBM;
}

static void APIENTRY
stub_glColorPointerListIBM(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride)
{
	check_initialized();
	piglit_dispatch_glColorPointerListIBM = resolve_glColorPointerListIBM();
	piglit_dispatch_glColorPointerListIBM(size, type, stride, pointer, ptrstride);
}

PFNGLCOLORPOINTERLISTIBMPROC piglit_dispatch_glColorPointerListIBM = stub_glColorPointerListIBM;

static void*
resolve_glColorPointervINTEL(void)
{
	/* glColorPointervINTEL (GL_INTEL_parallel_arrays) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_INTEL_parallel_arrays")) {
		return get_ext_proc("glColorPointervINTEL");
	}

	unsupported("glColorPointervINTEL");
	return piglit_dispatch_glColorPointervINTEL;
}

static void APIENTRY
stub_glColorPointervINTEL(GLint size, GLenum type, const void ** pointer)
{
	check_initialized();
	piglit_dispatch_glColorPointervINTEL = resolve_glColorPointervINTEL();
	piglit_dispatch_glColorPointervINTEL(size, type, pointer);
}

PFNGLCOLORPOINTERVINTELPROC piglit_dispatch_glColorPointervINTEL = stub_glColorPointervINTEL;

static void*
resolve_glColorSubTable(void)
{
	/* glColorSubTable (GL_ARB_imaging) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_imaging")) {
		return get_ext_proc("glColorSubTable");
	}

	/* glColorSubTableEXT (GL_EXT_color_subtable) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_color_subtable")) {
		return get_ext_proc("glColorSubTableEXT");
	}

	unsupported("glColorSubTable");
	return piglit_dispatch_glColorSubTable;
}

static void APIENTRY
stub_glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void * data)
{
	check_initialized();
	piglit_dispatch_glColorSubTable = resolve_glColorSubTable();
	piglit_dispatch_glColorSubTable(target, start, count, format, type, data);
}

PFNGLCOLORSUBTABLEPROC piglit_dispatch_glColorSubTable = stub_glColorSubTable;

static void*
resolve_glColorTable(void)
{
	/* glColorTable (GL_ARB_imaging) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_imaging")) {
		return get_ext_proc("glColorTable");
	}

	/* glColorTableEXT (GL_EXT_paletted_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_paletted_texture")) {
		return get_ext_proc("glColorTableEXT");
	}

	/* glColorTableSGI (GL_SGI_color_table) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGI_color_table")) {
		return get_ext_proc("glColorTableSGI");
	}

	unsupported("glColorTable");
	return piglit_dispatch_glColorTable;
}

static void APIENTRY
stub_glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * table)
{
	check_initialized();
	piglit_dispatch_glColorTable = resolve_glColorTable();
	piglit_dispatch_glColorTable(target, internalformat, width, format, type, table);
}

PFNGLCOLORTABLEPROC piglit_dispatch_glColorTable = stub_glColorTable;

static void*
resolve_glColorTableParameterfv(void)
{
	/* glColorTableParameterfv (GL_ARB_imaging) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_imaging")) {
		return get_ext_proc("glColorTableParameterfv");
	}

	/* glColorTableParameterfvSGI (GL_SGI_color_table) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGI_color_table")) {
		return get_ext_proc("glColorTableParameterfvSGI");
	}

	unsupported("glColorTableParameterfv");
	return piglit_dispatch_glColorTableParameterfv;
}

static void APIENTRY
stub_glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glColorTableParameterfv = resolve_glColorTableParameterfv();
	piglit_dispatch_glColorTableParameterfv(target, pname, params);
}

PFNGLCOLORTABLEPARAMETERFVPROC piglit_dispatch_glColorTableParameterfv = stub_glColorTableParameterfv;

static void*
resolve_glColorTableParameteriv(void)
{
	/* glColorTableParameteriv (GL_ARB_imaging) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_imaging")) {
		return get_ext_proc("glColorTableParameteriv");
	}

	/* glColorTableParameterivSGI (GL_SGI_color_table) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGI_color_table")) {
		return get_ext_proc("glColorTableParameterivSGI");
	}

	unsupported("glColorTableParameteriv");
	return piglit_dispatch_glColorTableParameteriv;
}

static void APIENTRY
stub_glColorTableParameteriv(GLenum target, GLenum pname, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glColorTableParameteriv = resolve_glColorTableParameteriv();
	piglit_dispatch_glColorTableParameteriv(target, pname, params);
}

PFNGLCOLORTABLEPARAMETERIVPROC piglit_dispatch_glColorTableParameteriv = stub_glColorTableParameteriv;

static void*
resolve_glCombinerInputNV(void)
{
	/* glCombinerInputNV (GL_NV_register_combiners) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_register_combiners")) {
		return get_ext_proc("glCombinerInputNV");
	}

	unsupported("glCombinerInputNV");
	return piglit_dispatch_glCombinerInputNV;
}

static void APIENTRY
stub_glCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
{
	check_initialized();
	piglit_dispatch_glCombinerInputNV = resolve_glCombinerInputNV();
	piglit_dispatch_glCombinerInputNV(stage, portion, variable, input, mapping, componentUsage);
}

PFNGLCOMBINERINPUTNVPROC piglit_dispatch_glCombinerInputNV = stub_glCombinerInputNV;

static void*
resolve_glCombinerOutputNV(void)
{
	/* glCombinerOutputNV (GL_NV_register_combiners) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_register_combiners")) {
		return get_ext_proc("glCombinerOutputNV");
	}

	unsupported("glCombinerOutputNV");
	return piglit_dispatch_glCombinerOutputNV;
}

static void APIENTRY
stub_glCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum)
{
	check_initialized();
	piglit_dispatch_glCombinerOutputNV = resolve_glCombinerOutputNV();
	piglit_dispatch_glCombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
}

PFNGLCOMBINEROUTPUTNVPROC piglit_dispatch_glCombinerOutputNV = stub_glCombinerOutputNV;

static void*
resolve_glCombinerParameterfNV(void)
{
	/* glCombinerParameterfNV (GL_NV_register_combiners) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_register_combiners")) {
		return get_ext_proc("glCombinerParameterfNV");
	}

	unsupported("glCombinerParameterfNV");
	return piglit_dispatch_glCombinerParameterfNV;
}

static void APIENTRY
stub_glCombinerParameterfNV(GLenum pname, GLfloat param)
{
	check_initialized();
	piglit_dispatch_glCombinerParameterfNV = resolve_glCombinerParameterfNV();
	piglit_dispatch_glCombinerParameterfNV(pname, param);
}

PFNGLCOMBINERPARAMETERFNVPROC piglit_dispatch_glCombinerParameterfNV = stub_glCombinerParameterfNV;

static void*
resolve_glCombinerParameterfvNV(void)
{
	/* glCombinerParameterfvNV (GL_NV_register_combiners) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_register_combiners")) {
		return get_ext_proc("glCombinerParameterfvNV");
	}

	unsupported("glCombinerParameterfvNV");
	return piglit_dispatch_glCombinerParameterfvNV;
}

static void APIENTRY
stub_glCombinerParameterfvNV(GLenum pname, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glCombinerParameterfvNV = resolve_glCombinerParameterfvNV();
	piglit_dispatch_glCombinerParameterfvNV(pname, params);
}

PFNGLCOMBINERPARAMETERFVNVPROC piglit_dispatch_glCombinerParameterfvNV = stub_glCombinerParameterfvNV;

static void*
resolve_glCombinerParameteriNV(void)
{
	/* glCombinerParameteriNV (GL_NV_register_combiners) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_register_combiners")) {
		return get_ext_proc("glCombinerParameteriNV");
	}

	unsupported("glCombinerParameteriNV");
	return piglit_dispatch_glCombinerParameteriNV;
}

static void APIENTRY
stub_glCombinerParameteriNV(GLenum pname, GLint param)
{
	check_initialized();
	piglit_dispatch_glCombinerParameteriNV = resolve_glCombinerParameteriNV();
	piglit_dispatch_glCombinerParameteriNV(pname, param);
}

PFNGLCOMBINERPARAMETERINVPROC piglit_dispatch_glCombinerParameteriNV = stub_glCombinerParameteriNV;

static void*
resolve_glCombinerParameterivNV(void)
{
	/* glCombinerParameterivNV (GL_NV_register_combiners) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_register_combiners")) {
		return get_ext_proc("glCombinerParameterivNV");
	}

	unsupported("glCombinerParameterivNV");
	return piglit_dispatch_glCombinerParameterivNV;
}

static void APIENTRY
stub_glCombinerParameterivNV(GLenum pname, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glCombinerParameterivNV = resolve_glCombinerParameterivNV();
	piglit_dispatch_glCombinerParameterivNV(pname, params);
}

PFNGLCOMBINERPARAMETERIVNVPROC piglit_dispatch_glCombinerParameterivNV = stub_glCombinerParameterivNV;

static void*
resolve_glCombinerStageParameterfvNV(void)
{
	/* glCombinerStageParameterfvNV (GL_NV_register_combiners2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_register_combiners2")) {
		return get_ext_proc("glCombinerStageParameterfvNV");
	}

	unsupported("glCombinerStageParameterfvNV");
	return piglit_dispatch_glCombinerStageParameterfvNV;
}

static void APIENTRY
stub_glCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glCombinerStageParameterfvNV = resolve_glCombinerStageParameterfvNV();
	piglit_dispatch_glCombinerStageParameterfvNV(stage, pname, params);
}

PFNGLCOMBINERSTAGEPARAMETERFVNVPROC piglit_dispatch_glCombinerStageParameterfvNV = stub_glCombinerStageParameterfvNV;

static void*
resolve_glCompileShader(void)
{
	/* glCompileShader (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glCompileShader", 20);
	}

	/* glCompileShader (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glCompileShader", 20);
	}

	/* glCompileShaderARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glCompileShaderARB");
	}

	unsupported("glCompileShader");
	return piglit_dispatch_glCompileShader;
}

static void APIENTRY
stub_glCompileShader(GLuint shader)
{
	check_initialized();
	piglit_dispatch_glCompileShader = resolve_glCompileShader();
	piglit_dispatch_glCompileShader(shader);
}

PFNGLCOMPILESHADERPROC piglit_dispatch_glCompileShader = stub_glCompileShader;

static void*
resolve_glCompileShaderIncludeARB(void)
{
	/* glCompileShaderIncludeARB (GL_ARB_shading_language_include) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shading_language_include")) {
		return get_ext_proc("glCompileShaderIncludeARB");
	}

	unsupported("glCompileShaderIncludeARB");
	return piglit_dispatch_glCompileShaderIncludeARB;
}

static void APIENTRY
stub_glCompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar *const* path, const GLint * length)
{
	check_initialized();
	piglit_dispatch_glCompileShaderIncludeARB = resolve_glCompileShaderIncludeARB();
	piglit_dispatch_glCompileShaderIncludeARB(shader, count, path, length);
}

PFNGLCOMPILESHADERINCLUDEARBPROC piglit_dispatch_glCompileShaderIncludeARB = stub_glCompileShaderIncludeARB;

static void*
resolve_glCompressedMultiTexImage1DEXT(void)
{
	/* glCompressedMultiTexImage1DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glCompressedMultiTexImage1DEXT");
	}

	unsupported("glCompressedMultiTexImage1DEXT");
	return piglit_dispatch_glCompressedMultiTexImage1DEXT;
}

static void APIENTRY
stub_glCompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * bits)
{
	check_initialized();
	piglit_dispatch_glCompressedMultiTexImage1DEXT = resolve_glCompressedMultiTexImage1DEXT();
	piglit_dispatch_glCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits);
}

PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC piglit_dispatch_glCompressedMultiTexImage1DEXT = stub_glCompressedMultiTexImage1DEXT;

static void*
resolve_glCompressedMultiTexImage2DEXT(void)
{
	/* glCompressedMultiTexImage2DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glCompressedMultiTexImage2DEXT");
	}

	unsupported("glCompressedMultiTexImage2DEXT");
	return piglit_dispatch_glCompressedMultiTexImage2DEXT;
}

static void APIENTRY
stub_glCompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * bits)
{
	check_initialized();
	piglit_dispatch_glCompressedMultiTexImage2DEXT = resolve_glCompressedMultiTexImage2DEXT();
	piglit_dispatch_glCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits);
}

PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC piglit_dispatch_glCompressedMultiTexImage2DEXT = stub_glCompressedMultiTexImage2DEXT;

static void*
resolve_glCompressedMultiTexImage3DEXT(void)
{
	/* glCompressedMultiTexImage3DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glCompressedMultiTexImage3DEXT");
	}

	unsupported("glCompressedMultiTexImage3DEXT");
	return piglit_dispatch_glCompressedMultiTexImage3DEXT;
}

static void APIENTRY
stub_glCompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * bits)
{
	check_initialized();
	piglit_dispatch_glCompressedMultiTexImage3DEXT = resolve_glCompressedMultiTexImage3DEXT();
	piglit_dispatch_glCompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);
}

PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC piglit_dispatch_glCompressedMultiTexImage3DEXT = stub_glCompressedMultiTexImage3DEXT;

static void*
resolve_glCompressedMultiTexSubImage1DEXT(void)
{
	/* glCompressedMultiTexSubImage1DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glCompressedMultiTexSubImage1DEXT");
	}

	unsupported("glCompressedMultiTexSubImage1DEXT");
	return piglit_dispatch_glCompressedMultiTexSubImage1DEXT;
}

static void APIENTRY
stub_glCompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * bits)
{
	check_initialized();
	piglit_dispatch_glCompressedMultiTexSubImage1DEXT = resolve_glCompressedMultiTexSubImage1DEXT();
	piglit_dispatch_glCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits);
}

PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC piglit_dispatch_glCompressedMultiTexSubImage1DEXT = stub_glCompressedMultiTexSubImage1DEXT;

static void*
resolve_glCompressedMultiTexSubImage2DEXT(void)
{
	/* glCompressedMultiTexSubImage2DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glCompressedMultiTexSubImage2DEXT");
	}

	unsupported("glCompressedMultiTexSubImage2DEXT");
	return piglit_dispatch_glCompressedMultiTexSubImage2DEXT;
}

static void APIENTRY
stub_glCompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * bits)
{
	check_initialized();
	piglit_dispatch_glCompressedMultiTexSubImage2DEXT = resolve_glCompressedMultiTexSubImage2DEXT();
	piglit_dispatch_glCompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
}

PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC piglit_dispatch_glCompressedMultiTexSubImage2DEXT = stub_glCompressedMultiTexSubImage2DEXT;

static void*
resolve_glCompressedMultiTexSubImage3DEXT(void)
{
	/* glCompressedMultiTexSubImage3DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glCompressedMultiTexSubImage3DEXT");
	}

	unsupported("glCompressedMultiTexSubImage3DEXT");
	return piglit_dispatch_glCompressedMultiTexSubImage3DEXT;
}

static void APIENTRY
stub_glCompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * bits)
{
	check_initialized();
	piglit_dispatch_glCompressedMultiTexSubImage3DEXT = resolve_glCompressedMultiTexSubImage3DEXT();
	piglit_dispatch_glCompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
}

PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC piglit_dispatch_glCompressedMultiTexSubImage3DEXT = stub_glCompressedMultiTexSubImage3DEXT;

static void*
resolve_glCompressedTexImage1D(void)
{
	/* glCompressedTexImage1D (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glCompressedTexImage1D", 13);
	}

	/* glCompressedTexImage1DARB (GL_ARB_texture_compression) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_texture_compression")) {
		return get_ext_proc("glCompressedTexImage1DARB");
	}

	unsupported("glCompressedTexImage1D");
	return piglit_dispatch_glCompressedTexImage1D;
}

static void APIENTRY
stub_glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data)
{
	check_initialized();
	piglit_dispatch_glCompressedTexImage1D = resolve_glCompressedTexImage1D();
	piglit_dispatch_glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);
}

PFNGLCOMPRESSEDTEXIMAGE1DPROC piglit_dispatch_glCompressedTexImage1D = stub_glCompressedTexImage1D;

static void*
resolve_glCompressedTexImage2D(void)
{
	/* glCompressedTexImage2D (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glCompressedTexImage2D", 13);
	}

	/* glCompressedTexImage2D (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glCompressedTexImage2D", 10);
	}

	/* glCompressedTexImage2D (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glCompressedTexImage2D", 20);
	}

	/* glCompressedTexImage2DARB (GL_ARB_texture_compression) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_texture_compression")) {
		return get_ext_proc("glCompressedTexImage2DARB");
	}

	unsupported("glCompressedTexImage2D");
	return piglit_dispatch_glCompressedTexImage2D;
}

static void APIENTRY
stub_glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data)
{
	check_initialized();
	piglit_dispatch_glCompressedTexImage2D = resolve_glCompressedTexImage2D();
	piglit_dispatch_glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
}

PFNGLCOMPRESSEDTEXIMAGE2DPROC piglit_dispatch_glCompressedTexImage2D = stub_glCompressedTexImage2D;

static void*
resolve_glCompressedTexImage3D(void)
{
	/* glCompressedTexImage3D (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glCompressedTexImage3D", 13);
	}

	/* glCompressedTexImage3D (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glCompressedTexImage3D", 30);
	}

	/* glCompressedTexImage3DARB (GL_ARB_texture_compression) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_texture_compression")) {
		return get_ext_proc("glCompressedTexImage3DARB");
	}

	/* glCompressedTexImage3DOES (GL_OES_texture_3D) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_OES_texture_3D")) {
		return get_ext_proc("glCompressedTexImage3DOES");
	}

	unsupported("glCompressedTexImage3D");
	return piglit_dispatch_glCompressedTexImage3D;
}

static void APIENTRY
stub_glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data)
{
	check_initialized();
	piglit_dispatch_glCompressedTexImage3D = resolve_glCompressedTexImage3D();
	piglit_dispatch_glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);
}

PFNGLCOMPRESSEDTEXIMAGE3DPROC piglit_dispatch_glCompressedTexImage3D = stub_glCompressedTexImage3D;

static void*
resolve_glCompressedTexSubImage1D(void)
{
	/* glCompressedTexSubImage1D (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glCompressedTexSubImage1D", 13);
	}

	/* glCompressedTexSubImage1DARB (GL_ARB_texture_compression) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_texture_compression")) {
		return get_ext_proc("glCompressedTexSubImage1DARB");
	}

	unsupported("glCompressedTexSubImage1D");
	return piglit_dispatch_glCompressedTexSubImage1D;
}

static void APIENTRY
stub_glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data)
{
	check_initialized();
	piglit_dispatch_glCompressedTexSubImage1D = resolve_glCompressedTexSubImage1D();
	piglit_dispatch_glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);
}

PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC piglit_dispatch_glCompressedTexSubImage1D = stub_glCompressedTexSubImage1D;

static void*
resolve_glCompressedTexSubImage2D(void)
{
	/* glCompressedTexSubImage2D (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glCompressedTexSubImage2D", 13);
	}

	/* glCompressedTexSubImage2D (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glCompressedTexSubImage2D", 10);
	}

	/* glCompressedTexSubImage2D (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glCompressedTexSubImage2D", 20);
	}

	/* glCompressedTexSubImage2DARB (GL_ARB_texture_compression) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_texture_compression")) {
		return get_ext_proc("glCompressedTexSubImage2DARB");
	}

	unsupported("glCompressedTexSubImage2D");
	return piglit_dispatch_glCompressedTexSubImage2D;
}

static void APIENTRY
stub_glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data)
{
	check_initialized();
	piglit_dispatch_glCompressedTexSubImage2D = resolve_glCompressedTexSubImage2D();
	piglit_dispatch_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC piglit_dispatch_glCompressedTexSubImage2D = stub_glCompressedTexSubImage2D;

static void*
resolve_glCompressedTexSubImage3D(void)
{
	/* glCompressedTexSubImage3D (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glCompressedTexSubImage3D", 13);
	}

	/* glCompressedTexSubImage3D (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glCompressedTexSubImage3D", 30);
	}

	/* glCompressedTexSubImage3DARB (GL_ARB_texture_compression) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_texture_compression")) {
		return get_ext_proc("glCompressedTexSubImage3DARB");
	}

	/* glCompressedTexSubImage3DOES (GL_OES_texture_3D) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_OES_texture_3D")) {
		return get_ext_proc("glCompressedTexSubImage3DOES");
	}

	unsupported("glCompressedTexSubImage3D");
	return piglit_dispatch_glCompressedTexSubImage3D;
}

static void APIENTRY
stub_glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data)
{
	check_initialized();
	piglit_dispatch_glCompressedTexSubImage3D = resolve_glCompressedTexSubImage3D();
	piglit_dispatch_glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC piglit_dispatch_glCompressedTexSubImage3D = stub_glCompressedTexSubImage3D;

static void*
resolve_glCompressedTextureImage1DEXT(void)
{
	/* glCompressedTextureImage1DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glCompressedTextureImage1DEXT");
	}

	unsupported("glCompressedTextureImage1DEXT");
	return piglit_dispatch_glCompressedTextureImage1DEXT;
}

static void APIENTRY
stub_glCompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * bits)
{
	check_initialized();
	piglit_dispatch_glCompressedTextureImage1DEXT = resolve_glCompressedTextureImage1DEXT();
	piglit_dispatch_glCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits);
}

PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC piglit_dispatch_glCompressedTextureImage1DEXT = stub_glCompressedTextureImage1DEXT;

static void*
resolve_glCompressedTextureImage2DEXT(void)
{
	/* glCompressedTextureImage2DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glCompressedTextureImage2DEXT");
	}

	unsupported("glCompressedTextureImage2DEXT");
	return piglit_dispatch_glCompressedTextureImage2DEXT;
}

static void APIENTRY
stub_glCompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * bits)
{
	check_initialized();
	piglit_dispatch_glCompressedTextureImage2DEXT = resolve_glCompressedTextureImage2DEXT();
	piglit_dispatch_glCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits);
}

PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC piglit_dispatch_glCompressedTextureImage2DEXT = stub_glCompressedTextureImage2DEXT;

static void*
resolve_glCompressedTextureImage3DEXT(void)
{
	/* glCompressedTextureImage3DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glCompressedTextureImage3DEXT");
	}

	unsupported("glCompressedTextureImage3DEXT");
	return piglit_dispatch_glCompressedTextureImage3DEXT;
}

static void APIENTRY
stub_glCompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * bits)
{
	check_initialized();
	piglit_dispatch_glCompressedTextureImage3DEXT = resolve_glCompressedTextureImage3DEXT();
	piglit_dispatch_glCompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
}

PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC piglit_dispatch_glCompressedTextureImage3DEXT = stub_glCompressedTextureImage3DEXT;

static void*
resolve_glCompressedTextureSubImage1DEXT(void)
{
	/* glCompressedTextureSubImage1DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glCompressedTextureSubImage1DEXT");
	}

	unsupported("glCompressedTextureSubImage1DEXT");
	return piglit_dispatch_glCompressedTextureSubImage1DEXT;
}

static void APIENTRY
stub_glCompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * bits)
{
	check_initialized();
	piglit_dispatch_glCompressedTextureSubImage1DEXT = resolve_glCompressedTextureSubImage1DEXT();
	piglit_dispatch_glCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits);
}

PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC piglit_dispatch_glCompressedTextureSubImage1DEXT = stub_glCompressedTextureSubImage1DEXT;

static void*
resolve_glCompressedTextureSubImage2DEXT(void)
{
	/* glCompressedTextureSubImage2DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glCompressedTextureSubImage2DEXT");
	}

	unsupported("glCompressedTextureSubImage2DEXT");
	return piglit_dispatch_glCompressedTextureSubImage2DEXT;
}

static void APIENTRY
stub_glCompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * bits)
{
	check_initialized();
	piglit_dispatch_glCompressedTextureSubImage2DEXT = resolve_glCompressedTextureSubImage2DEXT();
	piglit_dispatch_glCompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
}

PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC piglit_dispatch_glCompressedTextureSubImage2DEXT = stub_glCompressedTextureSubImage2DEXT;

static void*
resolve_glCompressedTextureSubImage3DEXT(void)
{
	/* glCompressedTextureSubImage3DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glCompressedTextureSubImage3DEXT");
	}

	unsupported("glCompressedTextureSubImage3DEXT");
	return piglit_dispatch_glCompressedTextureSubImage3DEXT;
}

static void APIENTRY
stub_glCompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * bits)
{
	check_initialized();
	piglit_dispatch_glCompressedTextureSubImage3DEXT = resolve_glCompressedTextureSubImage3DEXT();
	piglit_dispatch_glCompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
}

PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC piglit_dispatch_glCompressedTextureSubImage3DEXT = stub_glCompressedTextureSubImage3DEXT;

static void*
resolve_glConvolutionFilter1D(void)
{
	/* glConvolutionFilter1D (GL_ARB_imaging) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_imaging")) {
		return get_ext_proc("glConvolutionFilter1D");
	}

	/* glConvolutionFilter1DEXT (GL_EXT_convolution) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_convolution")) {
		return get_ext_proc("glConvolutionFilter1DEXT");
	}

	unsupported("glConvolutionFilter1D");
	return piglit_dispatch_glConvolutionFilter1D;
}

static void APIENTRY
stub_glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * image)
{
	check_initialized();
	piglit_dispatch_glConvolutionFilter1D = resolve_glConvolutionFilter1D();
	piglit_dispatch_glConvolutionFilter1D(target, internalformat, width, format, type, image);
}

PFNGLCONVOLUTIONFILTER1DPROC piglit_dispatch_glConvolutionFilter1D = stub_glConvolutionFilter1D;

static void*
resolve_glConvolutionFilter2D(void)
{
	/* glConvolutionFilter2D (GL_ARB_imaging) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_imaging")) {
		return get_ext_proc("glConvolutionFilter2D");
	}

	/* glConvolutionFilter2DEXT (GL_EXT_convolution) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_convolution")) {
		return get_ext_proc("glConvolutionFilter2DEXT");
	}

	unsupported("glConvolutionFilter2D");
	return piglit_dispatch_glConvolutionFilter2D;
}

static void APIENTRY
stub_glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * image)
{
	check_initialized();
	piglit_dispatch_glConvolutionFilter2D = resolve_glConvolutionFilter2D();
	piglit_dispatch_glConvolutionFilter2D(target, internalformat, width, height, format, type, image);
}

PFNGLCONVOLUTIONFILTER2DPROC piglit_dispatch_glConvolutionFilter2D = stub_glConvolutionFilter2D;

static void*
resolve_glConvolutionParameterf(void)
{
	/* glConvolutionParameterf (GL_ARB_imaging) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_imaging")) {
		return get_ext_proc("glConvolutionParameterf");
	}

	/* glConvolutionParameterfEXT (GL_EXT_convolution) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_convolution")) {
		return get_ext_proc("glConvolutionParameterfEXT");
	}

	unsupported("glConvolutionParameterf");
	return piglit_dispatch_glConvolutionParameterf;
}

static void APIENTRY
stub_glConvolutionParameterf(GLenum target, GLenum pname, GLfloat params)
{
	check_initialized();
	piglit_dispatch_glConvolutionParameterf = resolve_glConvolutionParameterf();
	piglit_dispatch_glConvolutionParameterf(target, pname, params);
}

PFNGLCONVOLUTIONPARAMETERFPROC piglit_dispatch_glConvolutionParameterf = stub_glConvolutionParameterf;

static void*
resolve_glConvolutionParameterfv(void)
{
	/* glConvolutionParameterfv (GL_ARB_imaging) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_imaging")) {
		return get_ext_proc("glConvolutionParameterfv");
	}

	/* glConvolutionParameterfvEXT (GL_EXT_convolution) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_convolution")) {
		return get_ext_proc("glConvolutionParameterfvEXT");
	}

	unsupported("glConvolutionParameterfv");
	return piglit_dispatch_glConvolutionParameterfv;
}

static void APIENTRY
stub_glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glConvolutionParameterfv = resolve_glConvolutionParameterfv();
	piglit_dispatch_glConvolutionParameterfv(target, pname, params);
}

PFNGLCONVOLUTIONPARAMETERFVPROC piglit_dispatch_glConvolutionParameterfv = stub_glConvolutionParameterfv;

static void*
resolve_glConvolutionParameteri(void)
{
	/* glConvolutionParameteri (GL_ARB_imaging) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_imaging")) {
		return get_ext_proc("glConvolutionParameteri");
	}

	/* glConvolutionParameteriEXT (GL_EXT_convolution) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_convolution")) {
		return get_ext_proc("glConvolutionParameteriEXT");
	}

	unsupported("glConvolutionParameteri");
	return piglit_dispatch_glConvolutionParameteri;
}

static void APIENTRY
stub_glConvolutionParameteri(GLenum target, GLenum pname, GLint params)
{
	check_initialized();
	piglit_dispatch_glConvolutionParameteri = resolve_glConvolutionParameteri();
	piglit_dispatch_glConvolutionParameteri(target, pname, params);
}

PFNGLCONVOLUTIONPARAMETERIPROC piglit_dispatch_glConvolutionParameteri = stub_glConvolutionParameteri;

static void*
resolve_glConvolutionParameteriv(void)
{
	/* glConvolutionParameteriv (GL_ARB_imaging) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_imaging")) {
		return get_ext_proc("glConvolutionParameteriv");
	}

	/* glConvolutionParameterivEXT (GL_EXT_convolution) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_convolution")) {
		return get_ext_proc("glConvolutionParameterivEXT");
	}

	unsupported("glConvolutionParameteriv");
	return piglit_dispatch_glConvolutionParameteriv;
}

static void APIENTRY
stub_glConvolutionParameteriv(GLenum target, GLenum pname, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glConvolutionParameteriv = resolve_glConvolutionParameteriv();
	piglit_dispatch_glConvolutionParameteriv(target, pname, params);
}

PFNGLCONVOLUTIONPARAMETERIVPROC piglit_dispatch_glConvolutionParameteriv = stub_glConvolutionParameteriv;

static void*
resolve_glConvolutionParameterxOES(void)
{
	/* glConvolutionParameterxOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glConvolutionParameterxOES");
	}

	unsupported("glConvolutionParameterxOES");
	return piglit_dispatch_glConvolutionParameterxOES;
}

static void APIENTRY
stub_glConvolutionParameterxOES(GLenum target, GLenum pname, GLfixed param)
{
	check_initialized();
	piglit_dispatch_glConvolutionParameterxOES = resolve_glConvolutionParameterxOES();
	piglit_dispatch_glConvolutionParameterxOES(target, pname, param);
}

PFNGLCONVOLUTIONPARAMETERXOESPROC piglit_dispatch_glConvolutionParameterxOES = stub_glConvolutionParameterxOES;

static void*
resolve_glConvolutionParameterxvOES(void)
{
	/* glConvolutionParameterxvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glConvolutionParameterxvOES");
	}

	unsupported("glConvolutionParameterxvOES");
	return piglit_dispatch_glConvolutionParameterxvOES;
}

static void APIENTRY
stub_glConvolutionParameterxvOES(GLenum target, GLenum pname, const GLfixed * params)
{
	check_initialized();
	piglit_dispatch_glConvolutionParameterxvOES = resolve_glConvolutionParameterxvOES();
	piglit_dispatch_glConvolutionParameterxvOES(target, pname, params);
}

PFNGLCONVOLUTIONPARAMETERXVOESPROC piglit_dispatch_glConvolutionParameterxvOES = stub_glConvolutionParameterxvOES;

static void*
resolve_glCopyBufferSubData(void)
{
	/* glCopyBufferSubData (GL_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glCopyBufferSubData", 31);
	}

	/* glCopyBufferSubData (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glCopyBufferSubData", 30);
	}

	/* glCopyBufferSubData (GL_ARB_copy_buffer) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_copy_buffer")) {
		return get_ext_proc("glCopyBufferSubData");
	}

	/* glCopyBufferSubDataNV (GL_NV_copy_buffer) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_NV_copy_buffer")) {
		return get_ext_proc("glCopyBufferSubDataNV");
	}

	unsupported("glCopyBufferSubData");
	return piglit_dispatch_glCopyBufferSubData;
}

static void APIENTRY
stub_glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
	check_initialized();
	piglit_dispatch_glCopyBufferSubData = resolve_glCopyBufferSubData();
	piglit_dispatch_glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);
}

PFNGLCOPYBUFFERSUBDATAPROC piglit_dispatch_glCopyBufferSubData = stub_glCopyBufferSubData;

static void*
resolve_glCopyColorSubTable(void)
{
	/* glCopyColorSubTable (GL_ARB_imaging) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_imaging")) {
		return get_ext_proc("glCopyColorSubTable");
	}

	/* glCopyColorSubTableEXT (GL_EXT_color_subtable) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_color_subtable")) {
		return get_ext_proc("glCopyColorSubTableEXT");
	}

	unsupported("glCopyColorSubTable");
	return piglit_dispatch_glCopyColorSubTable;
}

static void APIENTRY
stub_glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
{
	check_initialized();
	piglit_dispatch_glCopyColorSubTable = resolve_glCopyColorSubTable();
	piglit_dispatch_glCopyColorSubTable(target, start, x, y, width);
}

PFNGLCOPYCOLORSUBTABLEPROC piglit_dispatch_glCopyColorSubTable = stub_glCopyColorSubTable;

static void*
resolve_glCopyColorTable(void)
{
	/* glCopyColorTable (GL_ARB_imaging) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_imaging")) {
		return get_ext_proc("glCopyColorTable");
	}

	/* glCopyColorTableSGI (GL_SGI_color_table) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGI_color_table")) {
		return get_ext_proc("glCopyColorTableSGI");
	}

	unsupported("glCopyColorTable");
	return piglit_dispatch_glCopyColorTable;
}

static void APIENTRY
stub_glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
	check_initialized();
	piglit_dispatch_glCopyColorTable = resolve_glCopyColorTable();
	piglit_dispatch_glCopyColorTable(target, internalformat, x, y, width);
}

PFNGLCOPYCOLORTABLEPROC piglit_dispatch_glCopyColorTable = stub_glCopyColorTable;

static void*
resolve_glCopyConvolutionFilter1D(void)
{
	/* glCopyConvolutionFilter1D (GL_ARB_imaging) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_imaging")) {
		return get_ext_proc("glCopyConvolutionFilter1D");
	}

	/* glCopyConvolutionFilter1DEXT (GL_EXT_convolution) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_convolution")) {
		return get_ext_proc("glCopyConvolutionFilter1DEXT");
	}

	unsupported("glCopyConvolutionFilter1D");
	return piglit_dispatch_glCopyConvolutionFilter1D;
}

static void APIENTRY
stub_glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
	check_initialized();
	piglit_dispatch_glCopyConvolutionFilter1D = resolve_glCopyConvolutionFilter1D();
	piglit_dispatch_glCopyConvolutionFilter1D(target, internalformat, x, y, width);
}

PFNGLCOPYCONVOLUTIONFILTER1DPROC piglit_dispatch_glCopyConvolutionFilter1D = stub_glCopyConvolutionFilter1D;

static void*
resolve_glCopyConvolutionFilter2D(void)
{
	/* glCopyConvolutionFilter2D (GL_ARB_imaging) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_imaging")) {
		return get_ext_proc("glCopyConvolutionFilter2D");
	}

	/* glCopyConvolutionFilter2DEXT (GL_EXT_convolution) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_convolution")) {
		return get_ext_proc("glCopyConvolutionFilter2DEXT");
	}

	unsupported("glCopyConvolutionFilter2D");
	return piglit_dispatch_glCopyConvolutionFilter2D;
}

static void APIENTRY
stub_glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
{
	check_initialized();
	piglit_dispatch_glCopyConvolutionFilter2D = resolve_glCopyConvolutionFilter2D();
	piglit_dispatch_glCopyConvolutionFilter2D(target, internalformat, x, y, width, height);
}

PFNGLCOPYCONVOLUTIONFILTER2DPROC piglit_dispatch_glCopyConvolutionFilter2D = stub_glCopyConvolutionFilter2D;

static void*
resolve_glCopyImageSubData(void)
{
	/* glCopyImageSubData (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glCopyImageSubData", 43);
	}

	/* glCopyImageSubData (GL_ARB_copy_image) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_copy_image")) {
		return get_ext_proc("glCopyImageSubData");
	}

	/* glCopyImageSubDataEXT (GL_EXT_copy_image) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_copy_image")) {
		return get_ext_proc("glCopyImageSubDataEXT");
	}

	unsupported("glCopyImageSubData");
	return piglit_dispatch_glCopyImageSubData;
}

static void APIENTRY
stub_glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
{
	check_initialized();
	piglit_dispatch_glCopyImageSubData = resolve_glCopyImageSubData();
	piglit_dispatch_glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}

PFNGLCOPYIMAGESUBDATAPROC piglit_dispatch_glCopyImageSubData = stub_glCopyImageSubData;

static void*
resolve_glCopyImageSubDataNV(void)
{
	/* glCopyImageSubDataNV (GL_NV_copy_image) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_copy_image")) {
		return get_ext_proc("glCopyImageSubDataNV");
	}

	unsupported("glCopyImageSubDataNV");
	return piglit_dispatch_glCopyImageSubDataNV;
}

static void APIENTRY
stub_glCopyImageSubDataNV(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
{
	check_initialized();
	piglit_dispatch_glCopyImageSubDataNV = resolve_glCopyImageSubDataNV();
	piglit_dispatch_glCopyImageSubDataNV(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
}

PFNGLCOPYIMAGESUBDATANVPROC piglit_dispatch_glCopyImageSubDataNV = stub_glCopyImageSubDataNV;

static void*
resolve_glCopyMultiTexImage1DEXT(void)
{
	/* glCopyMultiTexImage1DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glCopyMultiTexImage1DEXT");
	}

	unsupported("glCopyMultiTexImage1DEXT");
	return piglit_dispatch_glCopyMultiTexImage1DEXT;
}

static void APIENTRY
stub_glCopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
	check_initialized();
	piglit_dispatch_glCopyMultiTexImage1DEXT = resolve_glCopyMultiTexImage1DEXT();
	piglit_dispatch_glCopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border);
}

PFNGLCOPYMULTITEXIMAGE1DEXTPROC piglit_dispatch_glCopyMultiTexImage1DEXT = stub_glCopyMultiTexImage1DEXT;

static void*
resolve_glCopyMultiTexImage2DEXT(void)
{
	/* glCopyMultiTexImage2DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glCopyMultiTexImage2DEXT");
	}

	unsupported("glCopyMultiTexImage2DEXT");
	return piglit_dispatch_glCopyMultiTexImage2DEXT;
}

static void APIENTRY
stub_glCopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
	check_initialized();
	piglit_dispatch_glCopyMultiTexImage2DEXT = resolve_glCopyMultiTexImage2DEXT();
	piglit_dispatch_glCopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border);
}

PFNGLCOPYMULTITEXIMAGE2DEXTPROC piglit_dispatch_glCopyMultiTexImage2DEXT = stub_glCopyMultiTexImage2DEXT;

static void*
resolve_glCopyMultiTexSubImage1DEXT(void)
{
	/* glCopyMultiTexSubImage1DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glCopyMultiTexSubImage1DEXT");
	}

	unsupported("glCopyMultiTexSubImage1DEXT");
	return piglit_dispatch_glCopyMultiTexSubImage1DEXT;
}

static void APIENTRY
stub_glCopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
	check_initialized();
	piglit_dispatch_glCopyMultiTexSubImage1DEXT = resolve_glCopyMultiTexSubImage1DEXT();
	piglit_dispatch_glCopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width);
}

PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC piglit_dispatch_glCopyMultiTexSubImage1DEXT = stub_glCopyMultiTexSubImage1DEXT;

static void*
resolve_glCopyMultiTexSubImage2DEXT(void)
{
	/* glCopyMultiTexSubImage2DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glCopyMultiTexSubImage2DEXT");
	}

	unsupported("glCopyMultiTexSubImage2DEXT");
	return piglit_dispatch_glCopyMultiTexSubImage2DEXT;
}

static void APIENTRY
stub_glCopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
	check_initialized();
	piglit_dispatch_glCopyMultiTexSubImage2DEXT = resolve_glCopyMultiTexSubImage2DEXT();
	piglit_dispatch_glCopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height);
}

PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC piglit_dispatch_glCopyMultiTexSubImage2DEXT = stub_glCopyMultiTexSubImage2DEXT;

static void*
resolve_glCopyMultiTexSubImage3DEXT(void)
{
	/* glCopyMultiTexSubImage3DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glCopyMultiTexSubImage3DEXT");
	}

	unsupported("glCopyMultiTexSubImage3DEXT");
	return piglit_dispatch_glCopyMultiTexSubImage3DEXT;
}

static void APIENTRY
stub_glCopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
	check_initialized();
	piglit_dispatch_glCopyMultiTexSubImage3DEXT = resolve_glCopyMultiTexSubImage3DEXT();
	piglit_dispatch_glCopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC piglit_dispatch_glCopyMultiTexSubImage3DEXT = stub_glCopyMultiTexSubImage3DEXT;

static void*
resolve_glCopyPathNV(void)
{
	/* glCopyPathNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glCopyPathNV");
	}

	unsupported("glCopyPathNV");
	return piglit_dispatch_glCopyPathNV;
}

static void APIENTRY
stub_glCopyPathNV(GLuint resultPath, GLuint srcPath)
{
	check_initialized();
	piglit_dispatch_glCopyPathNV = resolve_glCopyPathNV();
	piglit_dispatch_glCopyPathNV(resultPath, srcPath);
}

PFNGLCOPYPATHNVPROC piglit_dispatch_glCopyPathNV = stub_glCopyPathNV;

static void*
resolve_glCopyPixels(void)
{
	/* glCopyPixels (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glCopyPixels", 10);
	}

	unsupported("glCopyPixels");
	return piglit_dispatch_glCopyPixels;
}

static void APIENTRY
stub_glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)
{
	check_initialized();
	piglit_dispatch_glCopyPixels = resolve_glCopyPixels();
	piglit_dispatch_glCopyPixels(x, y, width, height, type);
}

PFNGLCOPYPIXELSPROC piglit_dispatch_glCopyPixels = stub_glCopyPixels;

static void*
resolve_glCopyTexImage1D(void)
{
	/* glCopyTexImage1D (GL_VERSION_1_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glCopyTexImage1D", 11);
	}

	/* glCopyTexImage1DEXT (GL_EXT_copy_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_copy_texture")) {
		return get_ext_proc("glCopyTexImage1DEXT");
	}

	unsupported("glCopyTexImage1D");
	return piglit_dispatch_glCopyTexImage1D;
}

static void APIENTRY
stub_glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
	check_initialized();
	piglit_dispatch_glCopyTexImage1D = resolve_glCopyTexImage1D();
	piglit_dispatch_glCopyTexImage1D(target, level, internalformat, x, y, width, border);
}

PFNGLCOPYTEXIMAGE1DPROC piglit_dispatch_glCopyTexImage1D = stub_glCopyTexImage1D;

static void*
resolve_glCopyTexImage2D(void)
{
	/* glCopyTexImage2D (GL_VERSION_1_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glCopyTexImage2D", 11);
	}

	/* glCopyTexImage2D (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glCopyTexImage2D", 10);
	}

	/* glCopyTexImage2D (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glCopyTexImage2D", 20);
	}

	/* glCopyTexImage2DEXT (GL_EXT_copy_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_copy_texture")) {
		return get_ext_proc("glCopyTexImage2DEXT");
	}

	unsupported("glCopyTexImage2D");
	return piglit_dispatch_glCopyTexImage2D;
}

static void APIENTRY
stub_glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
	check_initialized();
	piglit_dispatch_glCopyTexImage2D = resolve_glCopyTexImage2D();
	piglit_dispatch_glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
}

PFNGLCOPYTEXIMAGE2DPROC piglit_dispatch_glCopyTexImage2D = stub_glCopyTexImage2D;

static void*
resolve_glCopyTexSubImage1D(void)
{
	/* glCopyTexSubImage1D (GL_VERSION_1_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glCopyTexSubImage1D", 11);
	}

	/* glCopyTexSubImage1DEXT (GL_EXT_copy_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_copy_texture")) {
		return get_ext_proc("glCopyTexSubImage1DEXT");
	}

	unsupported("glCopyTexSubImage1D");
	return piglit_dispatch_glCopyTexSubImage1D;
}

static void APIENTRY
stub_glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
	check_initialized();
	piglit_dispatch_glCopyTexSubImage1D = resolve_glCopyTexSubImage1D();
	piglit_dispatch_glCopyTexSubImage1D(target, level, xoffset, x, y, width);
}

PFNGLCOPYTEXSUBIMAGE1DPROC piglit_dispatch_glCopyTexSubImage1D = stub_glCopyTexSubImage1D;

static void*
resolve_glCopyTexSubImage2D(void)
{
	/* glCopyTexSubImage2D (GL_VERSION_1_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glCopyTexSubImage2D", 11);
	}

	/* glCopyTexSubImage2D (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glCopyTexSubImage2D", 10);
	}

	/* glCopyTexSubImage2D (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glCopyTexSubImage2D", 20);
	}

	/* glCopyTexSubImage2DEXT (GL_EXT_copy_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_copy_texture")) {
		return get_ext_proc("glCopyTexSubImage2DEXT");
	}

	unsupported("glCopyTexSubImage2D");
	return piglit_dispatch_glCopyTexSubImage2D;
}

static void APIENTRY
stub_glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
	check_initialized();
	piglit_dispatch_glCopyTexSubImage2D = resolve_glCopyTexSubImage2D();
	piglit_dispatch_glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
}

PFNGLCOPYTEXSUBIMAGE2DPROC piglit_dispatch_glCopyTexSubImage2D = stub_glCopyTexSubImage2D;

static void*
resolve_glCopyTexSubImage3D(void)
{
	/* glCopyTexSubImage3D (GL_VERSION_1_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glCopyTexSubImage3D", 12);
	}

	/* glCopyTexSubImage3D (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glCopyTexSubImage3D", 30);
	}

	/* glCopyTexSubImage3DOES (GL_OES_texture_3D) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_OES_texture_3D")) {
		return get_ext_proc("glCopyTexSubImage3DOES");
	}

	/* glCopyTexSubImage3DEXT (GL_EXT_copy_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_copy_texture")) {
		return get_ext_proc("glCopyTexSubImage3DEXT");
	}

	unsupported("glCopyTexSubImage3D");
	return piglit_dispatch_glCopyTexSubImage3D;
}

static void APIENTRY
stub_glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
	check_initialized();
	piglit_dispatch_glCopyTexSubImage3D = resolve_glCopyTexSubImage3D();
	piglit_dispatch_glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

PFNGLCOPYTEXSUBIMAGE3DPROC piglit_dispatch_glCopyTexSubImage3D = stub_glCopyTexSubImage3D;

static void*
resolve_glCopyTextureImage1DEXT(void)
{
	/* glCopyTextureImage1DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glCopyTextureImage1DEXT");
	}

	unsupported("glCopyTextureImage1DEXT");
	return piglit_dispatch_glCopyTextureImage1DEXT;
}

static void APIENTRY
stub_glCopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
	check_initialized();
	piglit_dispatch_glCopyTextureImage1DEXT = resolve_glCopyTextureImage1DEXT();
	piglit_dispatch_glCopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border);
}

PFNGLCOPYTEXTUREIMAGE1DEXTPROC piglit_dispatch_glCopyTextureImage1DEXT = stub_glCopyTextureImage1DEXT;

static void*
resolve_glCopyTextureImage2DEXT(void)
{
	/* glCopyTextureImage2DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glCopyTextureImage2DEXT");
	}

	unsupported("glCopyTextureImage2DEXT");
	return piglit_dispatch_glCopyTextureImage2DEXT;
}

static void APIENTRY
stub_glCopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
	check_initialized();
	piglit_dispatch_glCopyTextureImage2DEXT = resolve_glCopyTextureImage2DEXT();
	piglit_dispatch_glCopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border);
}

PFNGLCOPYTEXTUREIMAGE2DEXTPROC piglit_dispatch_glCopyTextureImage2DEXT = stub_glCopyTextureImage2DEXT;

static void*
resolve_glCopyTextureLevelsAPPLE(void)
{
	/* glCopyTextureLevelsAPPLE (GL_APPLE_copy_texture_levels) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_APPLE_copy_texture_levels")) {
		return get_ext_proc("glCopyTextureLevelsAPPLE");
	}

	unsupported("glCopyTextureLevelsAPPLE");
	return piglit_dispatch_glCopyTextureLevelsAPPLE;
}

static void APIENTRY
stub_glCopyTextureLevelsAPPLE(GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount)
{
	check_initialized();
	piglit_dispatch_glCopyTextureLevelsAPPLE = resolve_glCopyTextureLevelsAPPLE();
	piglit_dispatch_glCopyTextureLevelsAPPLE(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount);
}

PFNGLCOPYTEXTURELEVELSAPPLEPROC piglit_dispatch_glCopyTextureLevelsAPPLE = stub_glCopyTextureLevelsAPPLE;

static void*
resolve_glCopyTextureSubImage1DEXT(void)
{
	/* glCopyTextureSubImage1DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glCopyTextureSubImage1DEXT");
	}

	unsupported("glCopyTextureSubImage1DEXT");
	return piglit_dispatch_glCopyTextureSubImage1DEXT;
}

static void APIENTRY
stub_glCopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
	check_initialized();
	piglit_dispatch_glCopyTextureSubImage1DEXT = resolve_glCopyTextureSubImage1DEXT();
	piglit_dispatch_glCopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width);
}

PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC piglit_dispatch_glCopyTextureSubImage1DEXT = stub_glCopyTextureSubImage1DEXT;

static void*
resolve_glCopyTextureSubImage2DEXT(void)
{
	/* glCopyTextureSubImage2DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glCopyTextureSubImage2DEXT");
	}

	unsupported("glCopyTextureSubImage2DEXT");
	return piglit_dispatch_glCopyTextureSubImage2DEXT;
}

static void APIENTRY
stub_glCopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
	check_initialized();
	piglit_dispatch_glCopyTextureSubImage2DEXT = resolve_glCopyTextureSubImage2DEXT();
	piglit_dispatch_glCopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height);
}

PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC piglit_dispatch_glCopyTextureSubImage2DEXT = stub_glCopyTextureSubImage2DEXT;

static void*
resolve_glCopyTextureSubImage3DEXT(void)
{
	/* glCopyTextureSubImage3DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glCopyTextureSubImage3DEXT");
	}

	unsupported("glCopyTextureSubImage3DEXT");
	return piglit_dispatch_glCopyTextureSubImage3DEXT;
}

static void APIENTRY
stub_glCopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
	check_initialized();
	piglit_dispatch_glCopyTextureSubImage3DEXT = resolve_glCopyTextureSubImage3DEXT();
	piglit_dispatch_glCopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC piglit_dispatch_glCopyTextureSubImage3DEXT = stub_glCopyTextureSubImage3DEXT;

static void*
resolve_glCoverFillPathInstancedNV(void)
{
	/* glCoverFillPathInstancedNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glCoverFillPathInstancedNV");
	}

	unsupported("glCoverFillPathInstancedNV");
	return piglit_dispatch_glCoverFillPathInstancedNV;
}

static void APIENTRY
stub_glCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues)
{
	check_initialized();
	piglit_dispatch_glCoverFillPathInstancedNV = resolve_glCoverFillPathInstancedNV();
	piglit_dispatch_glCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
}

PFNGLCOVERFILLPATHINSTANCEDNVPROC piglit_dispatch_glCoverFillPathInstancedNV = stub_glCoverFillPathInstancedNV;

static void*
resolve_glCoverFillPathNV(void)
{
	/* glCoverFillPathNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glCoverFillPathNV");
	}

	unsupported("glCoverFillPathNV");
	return piglit_dispatch_glCoverFillPathNV;
}

static void APIENTRY
stub_glCoverFillPathNV(GLuint path, GLenum coverMode)
{
	check_initialized();
	piglit_dispatch_glCoverFillPathNV = resolve_glCoverFillPathNV();
	piglit_dispatch_glCoverFillPathNV(path, coverMode);
}

PFNGLCOVERFILLPATHNVPROC piglit_dispatch_glCoverFillPathNV = stub_glCoverFillPathNV;

static void*
resolve_glCoverStrokePathInstancedNV(void)
{
	/* glCoverStrokePathInstancedNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glCoverStrokePathInstancedNV");
	}

	unsupported("glCoverStrokePathInstancedNV");
	return piglit_dispatch_glCoverStrokePathInstancedNV;
}

static void APIENTRY
stub_glCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues)
{
	check_initialized();
	piglit_dispatch_glCoverStrokePathInstancedNV = resolve_glCoverStrokePathInstancedNV();
	piglit_dispatch_glCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
}

PFNGLCOVERSTROKEPATHINSTANCEDNVPROC piglit_dispatch_glCoverStrokePathInstancedNV = stub_glCoverStrokePathInstancedNV;

static void*
resolve_glCoverStrokePathNV(void)
{
	/* glCoverStrokePathNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glCoverStrokePathNV");
	}

	unsupported("glCoverStrokePathNV");
	return piglit_dispatch_glCoverStrokePathNV;
}

static void APIENTRY
stub_glCoverStrokePathNV(GLuint path, GLenum coverMode)
{
	check_initialized();
	piglit_dispatch_glCoverStrokePathNV = resolve_glCoverStrokePathNV();
	piglit_dispatch_glCoverStrokePathNV(path, coverMode);
}

PFNGLCOVERSTROKEPATHNVPROC piglit_dispatch_glCoverStrokePathNV = stub_glCoverStrokePathNV;

static void*
resolve_glCoverageMaskNV(void)
{
	/* glCoverageMaskNV (GL_NV_coverage_sample) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_NV_coverage_sample")) {
		return get_ext_proc("glCoverageMaskNV");
	}

	unsupported("glCoverageMaskNV");
	return piglit_dispatch_glCoverageMaskNV;
}

static void APIENTRY
stub_glCoverageMaskNV(GLboolean mask)
{
	check_initialized();
	piglit_dispatch_glCoverageMaskNV = resolve_glCoverageMaskNV();
	piglit_dispatch_glCoverageMaskNV(mask);
}

PFNGLCOVERAGEMASKNVPROC piglit_dispatch_glCoverageMaskNV = stub_glCoverageMaskNV;

static void*
resolve_glCoverageOperationNV(void)
{
	/* glCoverageOperationNV (GL_NV_coverage_sample) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_NV_coverage_sample")) {
		return get_ext_proc("glCoverageOperationNV");
	}

	unsupported("glCoverageOperationNV");
	return piglit_dispatch_glCoverageOperationNV;
}

static void APIENTRY
stub_glCoverageOperationNV(GLenum operation)
{
	check_initialized();
	piglit_dispatch_glCoverageOperationNV = resolve_glCoverageOperationNV();
	piglit_dispatch_glCoverageOperationNV(operation);
}

PFNGLCOVERAGEOPERATIONNVPROC piglit_dispatch_glCoverageOperationNV = stub_glCoverageOperationNV;

static void*
resolve_glCreatePerfQueryINTEL(void)
{
	/* glCreatePerfQueryINTEL (GL_INTEL_performance_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_INTEL_performance_query")) {
		return get_ext_proc("glCreatePerfQueryINTEL");
	}

	unsupported("glCreatePerfQueryINTEL");
	return piglit_dispatch_glCreatePerfQueryINTEL;
}

static void APIENTRY
stub_glCreatePerfQueryINTEL(GLuint queryId, GLuint * queryHandle)
{
	check_initialized();
	piglit_dispatch_glCreatePerfQueryINTEL = resolve_glCreatePerfQueryINTEL();
	piglit_dispatch_glCreatePerfQueryINTEL(queryId, queryHandle);
}

PFNGLCREATEPERFQUERYINTELPROC piglit_dispatch_glCreatePerfQueryINTEL = stub_glCreatePerfQueryINTEL;

static void*
resolve_glCreateProgram(void)
{
	/* glCreateProgram (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glCreateProgram", 20);
	}

	/* glCreateProgram (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glCreateProgram", 20);
	}

	/* glCreateProgramObjectARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glCreateProgramObjectARB");
	}

	unsupported("glCreateProgram");
	return piglit_dispatch_glCreateProgram;
}

static GLuint APIENTRY
stub_glCreateProgram()
{
	check_initialized();
	piglit_dispatch_glCreateProgram = resolve_glCreateProgram();
	return piglit_dispatch_glCreateProgram();
}

PFNGLCREATEPROGRAMPROC piglit_dispatch_glCreateProgram = stub_glCreateProgram;

static void*
resolve_glCreateShader(void)
{
	/* glCreateShader (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glCreateShader", 20);
	}

	/* glCreateShader (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glCreateShader", 20);
	}

	/* glCreateShaderObjectARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glCreateShaderObjectARB");
	}

	unsupported("glCreateShader");
	return piglit_dispatch_glCreateShader;
}

static GLuint APIENTRY
stub_glCreateShader(GLenum type)
{
	check_initialized();
	piglit_dispatch_glCreateShader = resolve_glCreateShader();
	return piglit_dispatch_glCreateShader(type);
}

PFNGLCREATESHADERPROC piglit_dispatch_glCreateShader = stub_glCreateShader;

static void*
resolve_glCreateShaderProgramEXT(void)
{
	/* glCreateShaderProgramEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glCreateShaderProgramEXT");
	}

	unsupported("glCreateShaderProgramEXT");
	return piglit_dispatch_glCreateShaderProgramEXT;
}

static GLuint APIENTRY
stub_glCreateShaderProgramEXT(GLenum type, const GLchar * string)
{
	check_initialized();
	piglit_dispatch_glCreateShaderProgramEXT = resolve_glCreateShaderProgramEXT();
	return piglit_dispatch_glCreateShaderProgramEXT(type, string);
}

PFNGLCREATESHADERPROGRAMEXTPROC piglit_dispatch_glCreateShaderProgramEXT = stub_glCreateShaderProgramEXT;

static void*
resolve_glCreateShaderProgramv(void)
{
	/* glCreateShaderProgramv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glCreateShaderProgramv", 41);
	}

	/* glCreateShaderProgramv (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glCreateShaderProgramv", 31);
	}

	/* glCreateShaderProgramv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glCreateShaderProgramv");
	}

	unsupported("glCreateShaderProgramv");
	return piglit_dispatch_glCreateShaderProgramv;
}

static GLuint APIENTRY
stub_glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const* strings)
{
	check_initialized();
	piglit_dispatch_glCreateShaderProgramv = resolve_glCreateShaderProgramv();
	return piglit_dispatch_glCreateShaderProgramv(type, count, strings);
}

PFNGLCREATESHADERPROGRAMVPROC piglit_dispatch_glCreateShaderProgramv = stub_glCreateShaderProgramv;

static void*
resolve_glCreateShaderProgramvEXT(void)
{
	/* glCreateShaderProgramvEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glCreateShaderProgramvEXT");
	}

	unsupported("glCreateShaderProgramvEXT");
	return piglit_dispatch_glCreateShaderProgramvEXT;
}

static GLuint APIENTRY
stub_glCreateShaderProgramvEXT(GLenum type, GLsizei count, const GLchar ** strings)
{
	check_initialized();
	piglit_dispatch_glCreateShaderProgramvEXT = resolve_glCreateShaderProgramvEXT();
	return piglit_dispatch_glCreateShaderProgramvEXT(type, count, strings);
}

PFNGLCREATESHADERPROGRAMVEXTPROC piglit_dispatch_glCreateShaderProgramvEXT = stub_glCreateShaderProgramvEXT;

static void*
resolve_glCreateSyncFromCLeventARB(void)
{
	/* glCreateSyncFromCLeventARB (GL_ARB_cl_event) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_cl_event")) {
		return get_ext_proc("glCreateSyncFromCLeventARB");
	}

	unsupported("glCreateSyncFromCLeventARB");
	return piglit_dispatch_glCreateSyncFromCLeventARB;
}

static GLsync APIENTRY
stub_glCreateSyncFromCLeventARB(struct _cl_context * context, struct _cl_event * event, GLbitfield flags)
{
	check_initialized();
	piglit_dispatch_glCreateSyncFromCLeventARB = resolve_glCreateSyncFromCLeventARB();
	return piglit_dispatch_glCreateSyncFromCLeventARB(context, event, flags);
}

PFNGLCREATESYNCFROMCLEVENTARBPROC piglit_dispatch_glCreateSyncFromCLeventARB = stub_glCreateSyncFromCLeventARB;

static void*
resolve_glCullFace(void)
{
	/* glCullFace (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glCullFace", 10);
	}

	/* glCullFace (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glCullFace", 10);
	}

	/* glCullFace (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glCullFace", 20);
	}

	unsupported("glCullFace");
	return piglit_dispatch_glCullFace;
}

static void APIENTRY
stub_glCullFace(GLenum mode)
{
	check_initialized();
	piglit_dispatch_glCullFace = resolve_glCullFace();
	piglit_dispatch_glCullFace(mode);
}

PFNGLCULLFACEPROC piglit_dispatch_glCullFace = stub_glCullFace;

static void*
resolve_glCullParameterdvEXT(void)
{
	/* glCullParameterdvEXT (GL_EXT_cull_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_cull_vertex")) {
		return get_ext_proc("glCullParameterdvEXT");
	}

	unsupported("glCullParameterdvEXT");
	return piglit_dispatch_glCullParameterdvEXT;
}

static void APIENTRY
stub_glCullParameterdvEXT(GLenum pname, GLdouble * params)
{
	check_initialized();
	piglit_dispatch_glCullParameterdvEXT = resolve_glCullParameterdvEXT();
	piglit_dispatch_glCullParameterdvEXT(pname, params);
}

PFNGLCULLPARAMETERDVEXTPROC piglit_dispatch_glCullParameterdvEXT = stub_glCullParameterdvEXT;

static void*
resolve_glCullParameterfvEXT(void)
{
	/* glCullParameterfvEXT (GL_EXT_cull_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_cull_vertex")) {
		return get_ext_proc("glCullParameterfvEXT");
	}

	unsupported("glCullParameterfvEXT");
	return piglit_dispatch_glCullParameterfvEXT;
}

static void APIENTRY
stub_glCullParameterfvEXT(GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glCullParameterfvEXT = resolve_glCullParameterfvEXT();
	piglit_dispatch_glCullParameterfvEXT(pname, params);
}

PFNGLCULLPARAMETERFVEXTPROC piglit_dispatch_glCullParameterfvEXT = stub_glCullParameterfvEXT;

static void*
resolve_glCurrentPaletteMatrixARB(void)
{
	/* glCurrentPaletteMatrixARB (GL_ARB_matrix_palette) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_matrix_palette")) {
		return get_ext_proc("glCurrentPaletteMatrixARB");
	}

	unsupported("glCurrentPaletteMatrixARB");
	return piglit_dispatch_glCurrentPaletteMatrixARB;
}

static void APIENTRY
stub_glCurrentPaletteMatrixARB(GLint index)
{
	check_initialized();
	piglit_dispatch_glCurrentPaletteMatrixARB = resolve_glCurrentPaletteMatrixARB();
	piglit_dispatch_glCurrentPaletteMatrixARB(index);
}

PFNGLCURRENTPALETTEMATRIXARBPROC piglit_dispatch_glCurrentPaletteMatrixARB = stub_glCurrentPaletteMatrixARB;

static void*
resolve_glCurrentPaletteMatrixOES(void)
{
	/* glCurrentPaletteMatrixOES (GL_OES_matrix_palette) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_matrix_palette")) {
		return get_ext_proc("glCurrentPaletteMatrixOES");
	}

	unsupported("glCurrentPaletteMatrixOES");
	return piglit_dispatch_glCurrentPaletteMatrixOES;
}

static void APIENTRY
stub_glCurrentPaletteMatrixOES(GLuint matrixpaletteindex)
{
	check_initialized();
	piglit_dispatch_glCurrentPaletteMatrixOES = resolve_glCurrentPaletteMatrixOES();
	piglit_dispatch_glCurrentPaletteMatrixOES(matrixpaletteindex);
}

PFNGLCURRENTPALETTEMATRIXOESPROC piglit_dispatch_glCurrentPaletteMatrixOES = stub_glCurrentPaletteMatrixOES;

static void*
resolve_glDebugMessageCallback(void)
{
	/* glDebugMessageCallback (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDebugMessageCallback", 43);
	}

	/* glDebugMessageCallbackARB (GL_ARB_debug_output) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_debug_output")) {
		return get_ext_proc("glDebugMessageCallbackARB");
	}

	/* glDebugMessageCallback (GL_KHR_debug) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_KHR_debug")) {
		return get_ext_proc("glDebugMessageCallback");
	}

	/* glDebugMessageCallbackKHR (GL_KHR_debug) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_KHR_debug")) {
		return get_ext_proc("glDebugMessageCallbackKHR");
	}

	unsupported("glDebugMessageCallback");
	return piglit_dispatch_glDebugMessageCallback;
}

static void APIENTRY
stub_glDebugMessageCallback(GLDEBUGPROC callback, const void * userParam)
{
	check_initialized();
	piglit_dispatch_glDebugMessageCallback = resolve_glDebugMessageCallback();
	piglit_dispatch_glDebugMessageCallback(callback, userParam);
}

PFNGLDEBUGMESSAGECALLBACKPROC piglit_dispatch_glDebugMessageCallback = stub_glDebugMessageCallback;

static void*
resolve_glDebugMessageCallbackAMD(void)
{
	/* glDebugMessageCallbackAMD (GL_AMD_debug_output) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_debug_output")) {
		return get_ext_proc("glDebugMessageCallbackAMD");
	}

	unsupported("glDebugMessageCallbackAMD");
	return piglit_dispatch_glDebugMessageCallbackAMD;
}

static void APIENTRY
stub_glDebugMessageCallbackAMD(GLDEBUGPROCAMD callback, void * userParam)
{
	check_initialized();
	piglit_dispatch_glDebugMessageCallbackAMD = resolve_glDebugMessageCallbackAMD();
	piglit_dispatch_glDebugMessageCallbackAMD(callback, userParam);
}

PFNGLDEBUGMESSAGECALLBACKAMDPROC piglit_dispatch_glDebugMessageCallbackAMD = stub_glDebugMessageCallbackAMD;

static void*
resolve_glDebugMessageControl(void)
{
	/* glDebugMessageControl (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDebugMessageControl", 43);
	}

	/* glDebugMessageControlARB (GL_ARB_debug_output) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_debug_output")) {
		return get_ext_proc("glDebugMessageControlARB");
	}

	/* glDebugMessageControl (GL_KHR_debug) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_KHR_debug")) {
		return get_ext_proc("glDebugMessageControl");
	}

	/* glDebugMessageControlKHR (GL_KHR_debug) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_KHR_debug")) {
		return get_ext_proc("glDebugMessageControlKHR");
	}

	unsupported("glDebugMessageControl");
	return piglit_dispatch_glDebugMessageControl;
}

static void APIENTRY
stub_glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled)
{
	check_initialized();
	piglit_dispatch_glDebugMessageControl = resolve_glDebugMessageControl();
	piglit_dispatch_glDebugMessageControl(source, type, severity, count, ids, enabled);
}

PFNGLDEBUGMESSAGECONTROLPROC piglit_dispatch_glDebugMessageControl = stub_glDebugMessageControl;

static void*
resolve_glDebugMessageEnableAMD(void)
{
	/* glDebugMessageEnableAMD (GL_AMD_debug_output) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_debug_output")) {
		return get_ext_proc("glDebugMessageEnableAMD");
	}

	unsupported("glDebugMessageEnableAMD");
	return piglit_dispatch_glDebugMessageEnableAMD;
}

static void APIENTRY
stub_glDebugMessageEnableAMD(GLenum category, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled)
{
	check_initialized();
	piglit_dispatch_glDebugMessageEnableAMD = resolve_glDebugMessageEnableAMD();
	piglit_dispatch_glDebugMessageEnableAMD(category, severity, count, ids, enabled);
}

PFNGLDEBUGMESSAGEENABLEAMDPROC piglit_dispatch_glDebugMessageEnableAMD = stub_glDebugMessageEnableAMD;

static void*
resolve_glDebugMessageInsert(void)
{
	/* glDebugMessageInsert (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDebugMessageInsert", 43);
	}

	/* glDebugMessageInsertARB (GL_ARB_debug_output) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_debug_output")) {
		return get_ext_proc("glDebugMessageInsertARB");
	}

	/* glDebugMessageInsert (GL_KHR_debug) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_KHR_debug")) {
		return get_ext_proc("glDebugMessageInsert");
	}

	/* glDebugMessageInsertKHR (GL_KHR_debug) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_KHR_debug")) {
		return get_ext_proc("glDebugMessageInsertKHR");
	}

	unsupported("glDebugMessageInsert");
	return piglit_dispatch_glDebugMessageInsert;
}

static void APIENTRY
stub_glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf)
{
	check_initialized();
	piglit_dispatch_glDebugMessageInsert = resolve_glDebugMessageInsert();
	piglit_dispatch_glDebugMessageInsert(source, type, id, severity, length, buf);
}

PFNGLDEBUGMESSAGEINSERTPROC piglit_dispatch_glDebugMessageInsert = stub_glDebugMessageInsert;

static void*
resolve_glDebugMessageInsertAMD(void)
{
	/* glDebugMessageInsertAMD (GL_AMD_debug_output) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_debug_output")) {
		return get_ext_proc("glDebugMessageInsertAMD");
	}

	unsupported("glDebugMessageInsertAMD");
	return piglit_dispatch_glDebugMessageInsertAMD;
}

static void APIENTRY
stub_glDebugMessageInsertAMD(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar * buf)
{
	check_initialized();
	piglit_dispatch_glDebugMessageInsertAMD = resolve_glDebugMessageInsertAMD();
	piglit_dispatch_glDebugMessageInsertAMD(category, severity, id, length, buf);
}

PFNGLDEBUGMESSAGEINSERTAMDPROC piglit_dispatch_glDebugMessageInsertAMD = stub_glDebugMessageInsertAMD;

static void*
resolve_glDeformSGIX(void)
{
	/* glDeformSGIX (GL_SGIX_polynomial_ffd) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_polynomial_ffd")) {
		return get_ext_proc("glDeformSGIX");
	}

	unsupported("glDeformSGIX");
	return piglit_dispatch_glDeformSGIX;
}

static void APIENTRY
stub_glDeformSGIX(GLbitfield mask)
{
	check_initialized();
	piglit_dispatch_glDeformSGIX = resolve_glDeformSGIX();
	piglit_dispatch_glDeformSGIX(mask);
}

PFNGLDEFORMSGIXPROC piglit_dispatch_glDeformSGIX = stub_glDeformSGIX;

static void*
resolve_glDeformationMap3dSGIX(void)
{
	/* glDeformationMap3dSGIX (GL_SGIX_polynomial_ffd) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_polynomial_ffd")) {
		return get_ext_proc("glDeformationMap3dSGIX");
	}

	unsupported("glDeformationMap3dSGIX");
	return piglit_dispatch_glDeformationMap3dSGIX;
}

static void APIENTRY
stub_glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble * points)
{
	check_initialized();
	piglit_dispatch_glDeformationMap3dSGIX = resolve_glDeformationMap3dSGIX();
	piglit_dispatch_glDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
}

PFNGLDEFORMATIONMAP3DSGIXPROC piglit_dispatch_glDeformationMap3dSGIX = stub_glDeformationMap3dSGIX;

static void*
resolve_glDeformationMap3fSGIX(void)
{
	/* glDeformationMap3fSGIX (GL_SGIX_polynomial_ffd) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_polynomial_ffd")) {
		return get_ext_proc("glDeformationMap3fSGIX");
	}

	unsupported("glDeformationMap3fSGIX");
	return piglit_dispatch_glDeformationMap3fSGIX;
}

static void APIENTRY
stub_glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat * points)
{
	check_initialized();
	piglit_dispatch_glDeformationMap3fSGIX = resolve_glDeformationMap3fSGIX();
	piglit_dispatch_glDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
}

PFNGLDEFORMATIONMAP3FSGIXPROC piglit_dispatch_glDeformationMap3fSGIX = stub_glDeformationMap3fSGIX;

static void*
resolve_glDeleteAsyncMarkersSGIX(void)
{
	/* glDeleteAsyncMarkersSGIX (GL_SGIX_async) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_async")) {
		return get_ext_proc("glDeleteAsyncMarkersSGIX");
	}

	unsupported("glDeleteAsyncMarkersSGIX");
	return piglit_dispatch_glDeleteAsyncMarkersSGIX;
}

static void APIENTRY
stub_glDeleteAsyncMarkersSGIX(GLuint marker, GLsizei range)
{
	check_initialized();
	piglit_dispatch_glDeleteAsyncMarkersSGIX = resolve_glDeleteAsyncMarkersSGIX();
	piglit_dispatch_glDeleteAsyncMarkersSGIX(marker, range);
}

PFNGLDELETEASYNCMARKERSSGIXPROC piglit_dispatch_glDeleteAsyncMarkersSGIX = stub_glDeleteAsyncMarkersSGIX;

static void*
resolve_glDeleteBuffers(void)
{
	/* glDeleteBuffers (GL_VERSION_1_5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDeleteBuffers", 15);
	}

	/* glDeleteBuffers (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glDeleteBuffers", 10);
	}

	/* glDeleteBuffers (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glDeleteBuffers", 20);
	}

	/* glDeleteBuffersARB (GL_ARB_vertex_buffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_buffer_object")) {
		return get_ext_proc("glDeleteBuffersARB");
	}

	unsupported("glDeleteBuffers");
	return piglit_dispatch_glDeleteBuffers;
}

static void APIENTRY
stub_glDeleteBuffers(GLsizei n, const GLuint * buffers)
{
	check_initialized();
	piglit_dispatch_glDeleteBuffers = resolve_glDeleteBuffers();
	piglit_dispatch_glDeleteBuffers(n, buffers);
}

PFNGLDELETEBUFFERSPROC piglit_dispatch_glDeleteBuffers = stub_glDeleteBuffers;

static void*
resolve_glDeleteFencesAPPLE(void)
{
	/* glDeleteFencesAPPLE (GL_APPLE_fence) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_APPLE_fence")) {
		return get_ext_proc("glDeleteFencesAPPLE");
	}

	unsupported("glDeleteFencesAPPLE");
	return piglit_dispatch_glDeleteFencesAPPLE;
}

static void APIENTRY
stub_glDeleteFencesAPPLE(GLsizei n, const GLuint * fences)
{
	check_initialized();
	piglit_dispatch_glDeleteFencesAPPLE = resolve_glDeleteFencesAPPLE();
	piglit_dispatch_glDeleteFencesAPPLE(n, fences);
}

PFNGLDELETEFENCESAPPLEPROC piglit_dispatch_glDeleteFencesAPPLE = stub_glDeleteFencesAPPLE;

static void*
resolve_glDeleteFencesNV(void)
{
	/* glDeleteFencesNV (GL_NV_fence) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_NV_fence")) {
		return get_ext_proc("glDeleteFencesNV");
	}

	unsupported("glDeleteFencesNV");
	return piglit_dispatch_glDeleteFencesNV;
}

static void APIENTRY
stub_glDeleteFencesNV(GLsizei n, const GLuint * fences)
{
	check_initialized();
	piglit_dispatch_glDeleteFencesNV = resolve_glDeleteFencesNV();
	piglit_dispatch_glDeleteFencesNV(n, fences);
}

PFNGLDELETEFENCESNVPROC piglit_dispatch_glDeleteFencesNV = stub_glDeleteFencesNV;

static void*
resolve_glDeleteFragmentShaderATI(void)
{
	/* glDeleteFragmentShaderATI (GL_ATI_fragment_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_fragment_shader")) {
		return get_ext_proc("glDeleteFragmentShaderATI");
	}

	unsupported("glDeleteFragmentShaderATI");
	return piglit_dispatch_glDeleteFragmentShaderATI;
}

static void APIENTRY
stub_glDeleteFragmentShaderATI(GLuint id)
{
	check_initialized();
	piglit_dispatch_glDeleteFragmentShaderATI = resolve_glDeleteFragmentShaderATI();
	piglit_dispatch_glDeleteFragmentShaderATI(id);
}

PFNGLDELETEFRAGMENTSHADERATIPROC piglit_dispatch_glDeleteFragmentShaderATI = stub_glDeleteFragmentShaderATI;

static void*
resolve_glDeleteFramebuffers(void)
{
	/* glDeleteFramebuffers (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDeleteFramebuffers", 30);
	}

	/* glDeleteFramebuffers (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glDeleteFramebuffers", 20);
	}

	/* glDeleteFramebuffers (GL_ARB_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_framebuffer_object")) {
		return get_ext_proc("glDeleteFramebuffers");
	}

	/* glDeleteFramebuffersEXT (GL_EXT_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_framebuffer_object")) {
		return get_ext_proc("glDeleteFramebuffersEXT");
	}

	unsupported("glDeleteFramebuffers");
	return piglit_dispatch_glDeleteFramebuffers;
}

static void APIENTRY
stub_glDeleteFramebuffers(GLsizei n, const GLuint * framebuffers)
{
	check_initialized();
	piglit_dispatch_glDeleteFramebuffers = resolve_glDeleteFramebuffers();
	piglit_dispatch_glDeleteFramebuffers(n, framebuffers);
}

PFNGLDELETEFRAMEBUFFERSPROC piglit_dispatch_glDeleteFramebuffers = stub_glDeleteFramebuffers;

static void*
resolve_glDeleteFramebuffersOES(void)
{
	/* glDeleteFramebuffersOES (GL_OES_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_framebuffer_object")) {
		return get_ext_proc("glDeleteFramebuffersOES");
	}

	unsupported("glDeleteFramebuffersOES");
	return piglit_dispatch_glDeleteFramebuffersOES;
}

static void APIENTRY
stub_glDeleteFramebuffersOES(GLsizei n, const GLuint * framebuffers)
{
	check_initialized();
	piglit_dispatch_glDeleteFramebuffersOES = resolve_glDeleteFramebuffersOES();
	piglit_dispatch_glDeleteFramebuffersOES(n, framebuffers);
}

PFNGLDELETEFRAMEBUFFERSOESPROC piglit_dispatch_glDeleteFramebuffersOES = stub_glDeleteFramebuffersOES;

static void*
resolve_glDeleteLists(void)
{
	/* glDeleteLists (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glDeleteLists", 10);
	}

	unsupported("glDeleteLists");
	return piglit_dispatch_glDeleteLists;
}

static void APIENTRY
stub_glDeleteLists(GLuint list, GLsizei range)
{
	check_initialized();
	piglit_dispatch_glDeleteLists = resolve_glDeleteLists();
	piglit_dispatch_glDeleteLists(list, range);
}

PFNGLDELETELISTSPROC piglit_dispatch_glDeleteLists = stub_glDeleteLists;

static void*
resolve_glDeleteNamedStringARB(void)
{
	/* glDeleteNamedStringARB (GL_ARB_shading_language_include) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shading_language_include")) {
		return get_ext_proc("glDeleteNamedStringARB");
	}

	unsupported("glDeleteNamedStringARB");
	return piglit_dispatch_glDeleteNamedStringARB;
}

static void APIENTRY
stub_glDeleteNamedStringARB(GLint namelen, const GLchar * name)
{
	check_initialized();
	piglit_dispatch_glDeleteNamedStringARB = resolve_glDeleteNamedStringARB();
	piglit_dispatch_glDeleteNamedStringARB(namelen, name);
}

PFNGLDELETENAMEDSTRINGARBPROC piglit_dispatch_glDeleteNamedStringARB = stub_glDeleteNamedStringARB;

static void*
resolve_glDeleteNamesAMD(void)
{
	/* glDeleteNamesAMD (GL_AMD_name_gen_delete) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_name_gen_delete")) {
		return get_ext_proc("glDeleteNamesAMD");
	}

	unsupported("glDeleteNamesAMD");
	return piglit_dispatch_glDeleteNamesAMD;
}

static void APIENTRY
stub_glDeleteNamesAMD(GLenum identifier, GLuint num, const GLuint * names)
{
	check_initialized();
	piglit_dispatch_glDeleteNamesAMD = resolve_glDeleteNamesAMD();
	piglit_dispatch_glDeleteNamesAMD(identifier, num, names);
}

PFNGLDELETENAMESAMDPROC piglit_dispatch_glDeleteNamesAMD = stub_glDeleteNamesAMD;

static void*
resolve_glDeleteObjectARB(void)
{
	/* glDeleteObjectARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glDeleteObjectARB");
	}

	unsupported("glDeleteObjectARB");
	return piglit_dispatch_glDeleteObjectARB;
}

static void APIENTRY
stub_glDeleteObjectARB(GLhandleARB obj)
{
	check_initialized();
	piglit_dispatch_glDeleteObjectARB = resolve_glDeleteObjectARB();
	piglit_dispatch_glDeleteObjectARB(obj);
}

PFNGLDELETEOBJECTARBPROC piglit_dispatch_glDeleteObjectARB = stub_glDeleteObjectARB;

static void*
resolve_glDeleteOcclusionQueriesNV(void)
{
	/* glDeleteOcclusionQueriesNV (GL_NV_occlusion_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_occlusion_query")) {
		return get_ext_proc("glDeleteOcclusionQueriesNV");
	}

	unsupported("glDeleteOcclusionQueriesNV");
	return piglit_dispatch_glDeleteOcclusionQueriesNV;
}

static void APIENTRY
stub_glDeleteOcclusionQueriesNV(GLsizei n, const GLuint * ids)
{
	check_initialized();
	piglit_dispatch_glDeleteOcclusionQueriesNV = resolve_glDeleteOcclusionQueriesNV();
	piglit_dispatch_glDeleteOcclusionQueriesNV(n, ids);
}

PFNGLDELETEOCCLUSIONQUERIESNVPROC piglit_dispatch_glDeleteOcclusionQueriesNV = stub_glDeleteOcclusionQueriesNV;

static void*
resolve_glDeletePathsNV(void)
{
	/* glDeletePathsNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glDeletePathsNV");
	}

	unsupported("glDeletePathsNV");
	return piglit_dispatch_glDeletePathsNV;
}

static void APIENTRY
stub_glDeletePathsNV(GLuint path, GLsizei range)
{
	check_initialized();
	piglit_dispatch_glDeletePathsNV = resolve_glDeletePathsNV();
	piglit_dispatch_glDeletePathsNV(path, range);
}

PFNGLDELETEPATHSNVPROC piglit_dispatch_glDeletePathsNV = stub_glDeletePathsNV;

static void*
resolve_glDeletePerfMonitorsAMD(void)
{
	/* glDeletePerfMonitorsAMD (GL_AMD_performance_monitor) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_AMD_performance_monitor")) {
		return get_ext_proc("glDeletePerfMonitorsAMD");
	}

	unsupported("glDeletePerfMonitorsAMD");
	return piglit_dispatch_glDeletePerfMonitorsAMD;
}

static void APIENTRY
stub_glDeletePerfMonitorsAMD(GLsizei n, GLuint * monitors)
{
	check_initialized();
	piglit_dispatch_glDeletePerfMonitorsAMD = resolve_glDeletePerfMonitorsAMD();
	piglit_dispatch_glDeletePerfMonitorsAMD(n, monitors);
}

PFNGLDELETEPERFMONITORSAMDPROC piglit_dispatch_glDeletePerfMonitorsAMD = stub_glDeletePerfMonitorsAMD;

static void*
resolve_glDeletePerfQueryINTEL(void)
{
	/* glDeletePerfQueryINTEL (GL_INTEL_performance_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_INTEL_performance_query")) {
		return get_ext_proc("glDeletePerfQueryINTEL");
	}

	unsupported("glDeletePerfQueryINTEL");
	return piglit_dispatch_glDeletePerfQueryINTEL;
}

static void APIENTRY
stub_glDeletePerfQueryINTEL(GLuint queryHandle)
{
	check_initialized();
	piglit_dispatch_glDeletePerfQueryINTEL = resolve_glDeletePerfQueryINTEL();
	piglit_dispatch_glDeletePerfQueryINTEL(queryHandle);
}

PFNGLDELETEPERFQUERYINTELPROC piglit_dispatch_glDeletePerfQueryINTEL = stub_glDeletePerfQueryINTEL;

static void*
resolve_glDeleteProgram(void)
{
	/* glDeleteProgram (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDeleteProgram", 20);
	}

	/* glDeleteProgram (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glDeleteProgram", 20);
	}

	unsupported("glDeleteProgram");
	return piglit_dispatch_glDeleteProgram;
}

static void APIENTRY
stub_glDeleteProgram(GLuint program)
{
	check_initialized();
	piglit_dispatch_glDeleteProgram = resolve_glDeleteProgram();
	piglit_dispatch_glDeleteProgram(program);
}

PFNGLDELETEPROGRAMPROC piglit_dispatch_glDeleteProgram = stub_glDeleteProgram;

static void*
resolve_glDeleteProgramPipelines(void)
{
	/* glDeleteProgramPipelines (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDeleteProgramPipelines", 41);
	}

	/* glDeleteProgramPipelines (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glDeleteProgramPipelines", 31);
	}

	/* glDeleteProgramPipelines (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glDeleteProgramPipelines");
	}

	unsupported("glDeleteProgramPipelines");
	return piglit_dispatch_glDeleteProgramPipelines;
}

static void APIENTRY
stub_glDeleteProgramPipelines(GLsizei n, const GLuint * pipelines)
{
	check_initialized();
	piglit_dispatch_glDeleteProgramPipelines = resolve_glDeleteProgramPipelines();
	piglit_dispatch_glDeleteProgramPipelines(n, pipelines);
}

PFNGLDELETEPROGRAMPIPELINESPROC piglit_dispatch_glDeleteProgramPipelines = stub_glDeleteProgramPipelines;

static void*
resolve_glDeleteProgramPipelinesEXT(void)
{
	/* glDeleteProgramPipelinesEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glDeleteProgramPipelinesEXT");
	}

	unsupported("glDeleteProgramPipelinesEXT");
	return piglit_dispatch_glDeleteProgramPipelinesEXT;
}

static void APIENTRY
stub_glDeleteProgramPipelinesEXT(GLsizei n, const GLuint * pipelines)
{
	check_initialized();
	piglit_dispatch_glDeleteProgramPipelinesEXT = resolve_glDeleteProgramPipelinesEXT();
	piglit_dispatch_glDeleteProgramPipelinesEXT(n, pipelines);
}

PFNGLDELETEPROGRAMPIPELINESEXTPROC piglit_dispatch_glDeleteProgramPipelinesEXT = stub_glDeleteProgramPipelinesEXT;

static void*
resolve_glDeleteProgramsARB(void)
{
	/* glDeleteProgramsARB (GL_ARB_fragment_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_fragment_program")) {
		return get_ext_proc("glDeleteProgramsARB");
	}

	/* glDeleteProgramsARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glDeleteProgramsARB");
	}

	/* glDeleteProgramsNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glDeleteProgramsNV");
	}

	unsupported("glDeleteProgramsARB");
	return piglit_dispatch_glDeleteProgramsARB;
}

static void APIENTRY
stub_glDeleteProgramsARB(GLsizei n, const GLuint * programs)
{
	check_initialized();
	piglit_dispatch_glDeleteProgramsARB = resolve_glDeleteProgramsARB();
	piglit_dispatch_glDeleteProgramsARB(n, programs);
}

PFNGLDELETEPROGRAMSARBPROC piglit_dispatch_glDeleteProgramsARB = stub_glDeleteProgramsARB;

static void*
resolve_glDeleteQueries(void)
{
	/* glDeleteQueries (GL_VERSION_1_5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDeleteQueries", 15);
	}

	/* glDeleteQueries (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glDeleteQueries", 30);
	}

	/* glDeleteQueriesARB (GL_ARB_occlusion_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_occlusion_query")) {
		return get_ext_proc("glDeleteQueriesARB");
	}

	unsupported("glDeleteQueries");
	return piglit_dispatch_glDeleteQueries;
}

static void APIENTRY
stub_glDeleteQueries(GLsizei n, const GLuint * ids)
{
	check_initialized();
	piglit_dispatch_glDeleteQueries = resolve_glDeleteQueries();
	piglit_dispatch_glDeleteQueries(n, ids);
}

PFNGLDELETEQUERIESPROC piglit_dispatch_glDeleteQueries = stub_glDeleteQueries;

static void*
resolve_glDeleteQueriesEXT(void)
{
	/* glDeleteQueriesEXT (GL_EXT_disjoint_timer_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_disjoint_timer_query")) {
		return get_ext_proc("glDeleteQueriesEXT");
	}

	/* glDeleteQueriesEXT (GL_EXT_occlusion_query_boolean) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_occlusion_query_boolean")) {
		return get_ext_proc("glDeleteQueriesEXT");
	}

	unsupported("glDeleteQueriesEXT");
	return piglit_dispatch_glDeleteQueriesEXT;
}

static void APIENTRY
stub_glDeleteQueriesEXT(GLsizei n, const GLuint * ids)
{
	check_initialized();
	piglit_dispatch_glDeleteQueriesEXT = resolve_glDeleteQueriesEXT();
	piglit_dispatch_glDeleteQueriesEXT(n, ids);
}

PFNGLDELETEQUERIESEXTPROC piglit_dispatch_glDeleteQueriesEXT = stub_glDeleteQueriesEXT;

static void*
resolve_glDeleteRenderbuffers(void)
{
	/* glDeleteRenderbuffers (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDeleteRenderbuffers", 30);
	}

	/* glDeleteRenderbuffers (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glDeleteRenderbuffers", 20);
	}

	/* glDeleteRenderbuffers (GL_ARB_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_framebuffer_object")) {
		return get_ext_proc("glDeleteRenderbuffers");
	}

	/* glDeleteRenderbuffersEXT (GL_EXT_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_framebuffer_object")) {
		return get_ext_proc("glDeleteRenderbuffersEXT");
	}

	unsupported("glDeleteRenderbuffers");
	return piglit_dispatch_glDeleteRenderbuffers;
}

static void APIENTRY
stub_glDeleteRenderbuffers(GLsizei n, const GLuint * renderbuffers)
{
	check_initialized();
	piglit_dispatch_glDeleteRenderbuffers = resolve_glDeleteRenderbuffers();
	piglit_dispatch_glDeleteRenderbuffers(n, renderbuffers);
}

PFNGLDELETERENDERBUFFERSPROC piglit_dispatch_glDeleteRenderbuffers = stub_glDeleteRenderbuffers;

static void*
resolve_glDeleteRenderbuffersOES(void)
{
	/* glDeleteRenderbuffersOES (GL_OES_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_framebuffer_object")) {
		return get_ext_proc("glDeleteRenderbuffersOES");
	}

	unsupported("glDeleteRenderbuffersOES");
	return piglit_dispatch_glDeleteRenderbuffersOES;
}

static void APIENTRY
stub_glDeleteRenderbuffersOES(GLsizei n, const GLuint * renderbuffers)
{
	check_initialized();
	piglit_dispatch_glDeleteRenderbuffersOES = resolve_glDeleteRenderbuffersOES();
	piglit_dispatch_glDeleteRenderbuffersOES(n, renderbuffers);
}

PFNGLDELETERENDERBUFFERSOESPROC piglit_dispatch_glDeleteRenderbuffersOES = stub_glDeleteRenderbuffersOES;

static void*
resolve_glDeleteSamplers(void)
{
	/* glDeleteSamplers (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDeleteSamplers", 33);
	}

	/* glDeleteSamplers (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glDeleteSamplers", 30);
	}

	/* glDeleteSamplers (GL_ARB_sampler_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_sampler_objects")) {
		return get_ext_proc("glDeleteSamplers");
	}

	unsupported("glDeleteSamplers");
	return piglit_dispatch_glDeleteSamplers;
}

static void APIENTRY
stub_glDeleteSamplers(GLsizei count, const GLuint * samplers)
{
	check_initialized();
	piglit_dispatch_glDeleteSamplers = resolve_glDeleteSamplers();
	piglit_dispatch_glDeleteSamplers(count, samplers);
}

PFNGLDELETESAMPLERSPROC piglit_dispatch_glDeleteSamplers = stub_glDeleteSamplers;

static void*
resolve_glDeleteShader(void)
{
	/* glDeleteShader (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDeleteShader", 20);
	}

	/* glDeleteShader (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glDeleteShader", 20);
	}

	unsupported("glDeleteShader");
	return piglit_dispatch_glDeleteShader;
}

static void APIENTRY
stub_glDeleteShader(GLuint shader)
{
	check_initialized();
	piglit_dispatch_glDeleteShader = resolve_glDeleteShader();
	piglit_dispatch_glDeleteShader(shader);
}

PFNGLDELETESHADERPROC piglit_dispatch_glDeleteShader = stub_glDeleteShader;

static void*
resolve_glDeleteSync(void)
{
	/* glDeleteSync (GL_VERSION_3_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDeleteSync", 32);
	}

	/* glDeleteSync (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glDeleteSync", 30);
	}

	/* glDeleteSync (GL_ARB_sync) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_sync")) {
		return get_ext_proc("glDeleteSync");
	}

	/* glDeleteSyncAPPLE (GL_APPLE_sync) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_APPLE_sync")) {
		return get_ext_proc("glDeleteSyncAPPLE");
	}

	unsupported("glDeleteSync");
	return piglit_dispatch_glDeleteSync;
}

static void APIENTRY
stub_glDeleteSync(GLsync sync)
{
	check_initialized();
	piglit_dispatch_glDeleteSync = resolve_glDeleteSync();
	piglit_dispatch_glDeleteSync(sync);
}

PFNGLDELETESYNCPROC piglit_dispatch_glDeleteSync = stub_glDeleteSync;

static void*
resolve_glDeleteTextures(void)
{
	/* glDeleteTextures (GL_VERSION_1_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDeleteTextures", 11);
	}

	/* glDeleteTextures (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glDeleteTextures", 10);
	}

	/* glDeleteTextures (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glDeleteTextures", 20);
	}

	unsupported("glDeleteTextures");
	return piglit_dispatch_glDeleteTextures;
}

static void APIENTRY
stub_glDeleteTextures(GLsizei n, const GLuint * textures)
{
	check_initialized();
	piglit_dispatch_glDeleteTextures = resolve_glDeleteTextures();
	piglit_dispatch_glDeleteTextures(n, textures);
}

PFNGLDELETETEXTURESPROC piglit_dispatch_glDeleteTextures = stub_glDeleteTextures;

static void*
resolve_glDeleteTexturesEXT(void)
{
	/* glDeleteTexturesEXT (GL_EXT_texture_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_texture_object")) {
		return get_ext_proc("glDeleteTexturesEXT");
	}

	unsupported("glDeleteTexturesEXT");
	return piglit_dispatch_glDeleteTexturesEXT;
}

static void APIENTRY
stub_glDeleteTexturesEXT(GLsizei n, const GLuint * textures)
{
	check_initialized();
	piglit_dispatch_glDeleteTexturesEXT = resolve_glDeleteTexturesEXT();
	piglit_dispatch_glDeleteTexturesEXT(n, textures);
}

PFNGLDELETETEXTURESEXTPROC piglit_dispatch_glDeleteTexturesEXT = stub_glDeleteTexturesEXT;

static void*
resolve_glDeleteTransformFeedbacks(void)
{
	/* glDeleteTransformFeedbacks (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDeleteTransformFeedbacks", 40);
	}

	/* glDeleteTransformFeedbacks (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glDeleteTransformFeedbacks", 30);
	}

	/* glDeleteTransformFeedbacks (GL_ARB_transform_feedback2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_transform_feedback2")) {
		return get_ext_proc("glDeleteTransformFeedbacks");
	}

	/* glDeleteTransformFeedbacksNV (GL_NV_transform_feedback2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_transform_feedback2")) {
		return get_ext_proc("glDeleteTransformFeedbacksNV");
	}

	unsupported("glDeleteTransformFeedbacks");
	return piglit_dispatch_glDeleteTransformFeedbacks;
}

static void APIENTRY
stub_glDeleteTransformFeedbacks(GLsizei n, const GLuint * ids)
{
	check_initialized();
	piglit_dispatch_glDeleteTransformFeedbacks = resolve_glDeleteTransformFeedbacks();
	piglit_dispatch_glDeleteTransformFeedbacks(n, ids);
}

PFNGLDELETETRANSFORMFEEDBACKSPROC piglit_dispatch_glDeleteTransformFeedbacks = stub_glDeleteTransformFeedbacks;

static void*
resolve_glDeleteVertexArrays(void)
{
	/* glDeleteVertexArrays (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDeleteVertexArrays", 30);
	}

	/* glDeleteVertexArrays (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glDeleteVertexArrays", 30);
	}

	/* glDeleteVertexArrays (GL_ARB_vertex_array_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_array_object")) {
		return get_ext_proc("glDeleteVertexArrays");
	}

	/* glDeleteVertexArraysOES (GL_OES_vertex_array_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_OES_vertex_array_object")) {
		return get_ext_proc("glDeleteVertexArraysOES");
	}

	/* glDeleteVertexArraysAPPLE (GL_APPLE_vertex_array_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_APPLE_vertex_array_object")) {
		return get_ext_proc("glDeleteVertexArraysAPPLE");
	}

	unsupported("glDeleteVertexArrays");
	return piglit_dispatch_glDeleteVertexArrays;
}

static void APIENTRY
stub_glDeleteVertexArrays(GLsizei n, const GLuint * arrays)
{
	check_initialized();
	piglit_dispatch_glDeleteVertexArrays = resolve_glDeleteVertexArrays();
	piglit_dispatch_glDeleteVertexArrays(n, arrays);
}

PFNGLDELETEVERTEXARRAYSPROC piglit_dispatch_glDeleteVertexArrays = stub_glDeleteVertexArrays;

static void*
resolve_glDeleteVertexShaderEXT(void)
{
	/* glDeleteVertexShaderEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glDeleteVertexShaderEXT");
	}

	unsupported("glDeleteVertexShaderEXT");
	return piglit_dispatch_glDeleteVertexShaderEXT;
}

static void APIENTRY
stub_glDeleteVertexShaderEXT(GLuint id)
{
	check_initialized();
	piglit_dispatch_glDeleteVertexShaderEXT = resolve_glDeleteVertexShaderEXT();
	piglit_dispatch_glDeleteVertexShaderEXT(id);
}

PFNGLDELETEVERTEXSHADEREXTPROC piglit_dispatch_glDeleteVertexShaderEXT = stub_glDeleteVertexShaderEXT;

static void*
resolve_glDepthBoundsEXT(void)
{
	/* glDepthBoundsEXT (GL_EXT_depth_bounds_test) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_depth_bounds_test")) {
		return get_ext_proc("glDepthBoundsEXT");
	}

	unsupported("glDepthBoundsEXT");
	return piglit_dispatch_glDepthBoundsEXT;
}

static void APIENTRY
stub_glDepthBoundsEXT(GLclampd zmin, GLclampd zmax)
{
	check_initialized();
	piglit_dispatch_glDepthBoundsEXT = resolve_glDepthBoundsEXT();
	piglit_dispatch_glDepthBoundsEXT(zmin, zmax);
}

PFNGLDEPTHBOUNDSEXTPROC piglit_dispatch_glDepthBoundsEXT = stub_glDepthBoundsEXT;

static void*
resolve_glDepthBoundsdNV(void)
{
	/* glDepthBoundsdNV (GL_NV_depth_buffer_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_depth_buffer_float")) {
		return get_ext_proc("glDepthBoundsdNV");
	}

	unsupported("glDepthBoundsdNV");
	return piglit_dispatch_glDepthBoundsdNV;
}

static void APIENTRY
stub_glDepthBoundsdNV(GLdouble zmin, GLdouble zmax)
{
	check_initialized();
	piglit_dispatch_glDepthBoundsdNV = resolve_glDepthBoundsdNV();
	piglit_dispatch_glDepthBoundsdNV(zmin, zmax);
}

PFNGLDEPTHBOUNDSDNVPROC piglit_dispatch_glDepthBoundsdNV = stub_glDepthBoundsdNV;

static void*
resolve_glDepthFunc(void)
{
	/* glDepthFunc (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glDepthFunc", 10);
	}

	/* glDepthFunc (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glDepthFunc", 10);
	}

	/* glDepthFunc (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glDepthFunc", 20);
	}

	unsupported("glDepthFunc");
	return piglit_dispatch_glDepthFunc;
}

static void APIENTRY
stub_glDepthFunc(GLenum func)
{
	check_initialized();
	piglit_dispatch_glDepthFunc = resolve_glDepthFunc();
	piglit_dispatch_glDepthFunc(func);
}

PFNGLDEPTHFUNCPROC piglit_dispatch_glDepthFunc = stub_glDepthFunc;

static void*
resolve_glDepthMask(void)
{
	/* glDepthMask (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glDepthMask", 10);
	}

	/* glDepthMask (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glDepthMask", 10);
	}

	/* glDepthMask (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glDepthMask", 20);
	}

	unsupported("glDepthMask");
	return piglit_dispatch_glDepthMask;
}

static void APIENTRY
stub_glDepthMask(GLboolean flag)
{
	check_initialized();
	piglit_dispatch_glDepthMask = resolve_glDepthMask();
	piglit_dispatch_glDepthMask(flag);
}

PFNGLDEPTHMASKPROC piglit_dispatch_glDepthMask = stub_glDepthMask;

static void*
resolve_glDepthRange(void)
{
	/* glDepthRange (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glDepthRange", 10);
	}

	unsupported("glDepthRange");
	return piglit_dispatch_glDepthRange;
}

static void APIENTRY
stub_glDepthRange(GLdouble hither, GLdouble yon)
{
	check_initialized();
	piglit_dispatch_glDepthRange = resolve_glDepthRange();
	piglit_dispatch_glDepthRange(hither, yon);
}

PFNGLDEPTHRANGEPROC piglit_dispatch_glDepthRange = stub_glDepthRange;

static void*
resolve_glDepthRangeArrayv(void)
{
	/* glDepthRangeArrayv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDepthRangeArrayv", 41);
	}

	/* glDepthRangeArrayv (GL_ARB_viewport_array) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_viewport_array")) {
		return get_ext_proc("glDepthRangeArrayv");
	}

	unsupported("glDepthRangeArrayv");
	return piglit_dispatch_glDepthRangeArrayv;
}

static void APIENTRY
stub_glDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glDepthRangeArrayv = resolve_glDepthRangeArrayv();
	piglit_dispatch_glDepthRangeArrayv(first, count, v);
}

PFNGLDEPTHRANGEARRAYVPROC piglit_dispatch_glDepthRangeArrayv = stub_glDepthRangeArrayv;

static void*
resolve_glDepthRangeIndexed(void)
{
	/* glDepthRangeIndexed (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDepthRangeIndexed", 41);
	}

	/* glDepthRangeIndexed (GL_ARB_viewport_array) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_viewport_array")) {
		return get_ext_proc("glDepthRangeIndexed");
	}

	unsupported("glDepthRangeIndexed");
	return piglit_dispatch_glDepthRangeIndexed;
}

static void APIENTRY
stub_glDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f)
{
	check_initialized();
	piglit_dispatch_glDepthRangeIndexed = resolve_glDepthRangeIndexed();
	piglit_dispatch_glDepthRangeIndexed(index, n, f);
}

PFNGLDEPTHRANGEINDEXEDPROC piglit_dispatch_glDepthRangeIndexed = stub_glDepthRangeIndexed;

static void*
resolve_glDepthRangedNV(void)
{
	/* glDepthRangedNV (GL_NV_depth_buffer_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_depth_buffer_float")) {
		return get_ext_proc("glDepthRangedNV");
	}

	unsupported("glDepthRangedNV");
	return piglit_dispatch_glDepthRangedNV;
}

static void APIENTRY
stub_glDepthRangedNV(GLdouble zNear, GLdouble zFar)
{
	check_initialized();
	piglit_dispatch_glDepthRangedNV = resolve_glDepthRangedNV();
	piglit_dispatch_glDepthRangedNV(zNear, zFar);
}

PFNGLDEPTHRANGEDNVPROC piglit_dispatch_glDepthRangedNV = stub_glDepthRangedNV;

static void*
resolve_glDepthRangef(void)
{
	/* glDepthRangef (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDepthRangef", 41);
	}

	/* glDepthRangef (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glDepthRangef", 10);
	}

	/* glDepthRangef (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glDepthRangef", 20);
	}

	/* glDepthRangef (GL_ARB_ES2_compatibility) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_ES2_compatibility")) {
		return get_ext_proc("glDepthRangef");
	}

	/* glDepthRangefOES (GL_OES_single_precision) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_single_precision")) {
		return get_ext_proc("glDepthRangefOES");
	}

	unsupported("glDepthRangef");
	return piglit_dispatch_glDepthRangef;
}

static void APIENTRY
stub_glDepthRangef(GLfloat n, GLfloat f)
{
	check_initialized();
	piglit_dispatch_glDepthRangef = resolve_glDepthRangef();
	piglit_dispatch_glDepthRangef(n, f);
}

PFNGLDEPTHRANGEFPROC piglit_dispatch_glDepthRangef = stub_glDepthRangef;

static void*
resolve_glDepthRangex(void)
{
	/* glDepthRangex (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glDepthRangex", 10);
	}

	unsupported("glDepthRangex");
	return piglit_dispatch_glDepthRangex;
}

static void APIENTRY
stub_glDepthRangex(GLfixed n, GLfixed f)
{
	check_initialized();
	piglit_dispatch_glDepthRangex = resolve_glDepthRangex();
	piglit_dispatch_glDepthRangex(n, f);
}

PFNGLDEPTHRANGEXPROC piglit_dispatch_glDepthRangex = stub_glDepthRangex;

static void*
resolve_glDepthRangexOES(void)
{
	/* glDepthRangexOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glDepthRangexOES");
	}

	unsupported("glDepthRangexOES");
	return piglit_dispatch_glDepthRangexOES;
}

static void APIENTRY
stub_glDepthRangexOES(GLfixed n, GLfixed f)
{
	check_initialized();
	piglit_dispatch_glDepthRangexOES = resolve_glDepthRangexOES();
	piglit_dispatch_glDepthRangexOES(n, f);
}

PFNGLDEPTHRANGEXOESPROC piglit_dispatch_glDepthRangexOES = stub_glDepthRangexOES;

static void*
resolve_glDetachObjectARB(void)
{
	/* glDetachShader (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDetachShader", 20);
	}

	/* glDetachShader (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glDetachShader", 20);
	}

	/* glDetachObjectARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glDetachObjectARB");
	}

	unsupported("glDetachObjectARB");
	return piglit_dispatch_glDetachObjectARB;
}

static void APIENTRY
stub_glDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj)
{
	check_initialized();
	piglit_dispatch_glDetachObjectARB = resolve_glDetachObjectARB();
	piglit_dispatch_glDetachObjectARB(containerObj, attachedObj);
}

PFNGLDETACHOBJECTARBPROC piglit_dispatch_glDetachObjectARB = stub_glDetachObjectARB;

static void*
resolve_glDetailTexFuncSGIS(void)
{
	/* glDetailTexFuncSGIS (GL_SGIS_detail_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIS_detail_texture")) {
		return get_ext_proc("glDetailTexFuncSGIS");
	}

	unsupported("glDetailTexFuncSGIS");
	return piglit_dispatch_glDetailTexFuncSGIS;
}

static void APIENTRY
stub_glDetailTexFuncSGIS(GLenum target, GLsizei n, const GLfloat * points)
{
	check_initialized();
	piglit_dispatch_glDetailTexFuncSGIS = resolve_glDetailTexFuncSGIS();
	piglit_dispatch_glDetailTexFuncSGIS(target, n, points);
}

PFNGLDETAILTEXFUNCSGISPROC piglit_dispatch_glDetailTexFuncSGIS = stub_glDetailTexFuncSGIS;

static void*
resolve_glDisable(void)
{
	/* glDisable (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glDisable", 10);
	}

	/* glDisable (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glDisable", 10);
	}

	/* glDisable (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glDisable", 20);
	}

	unsupported("glDisable");
	return piglit_dispatch_glDisable;
}

static void APIENTRY
stub_glDisable(GLenum cap)
{
	check_initialized();
	piglit_dispatch_glDisable = resolve_glDisable();
	piglit_dispatch_glDisable(cap);
}

PFNGLDISABLEPROC piglit_dispatch_glDisable = stub_glDisable;

static void*
resolve_glDisableClientState(void)
{
	/* glDisableClientState (GL_VERSION_1_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDisableClientState", 11);
	}

	/* glDisableClientState (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glDisableClientState", 10);
	}

	unsupported("glDisableClientState");
	return piglit_dispatch_glDisableClientState;
}

static void APIENTRY
stub_glDisableClientState(GLenum array)
{
	check_initialized();
	piglit_dispatch_glDisableClientState = resolve_glDisableClientState();
	piglit_dispatch_glDisableClientState(array);
}

PFNGLDISABLECLIENTSTATEPROC piglit_dispatch_glDisableClientState = stub_glDisableClientState;

static void*
resolve_glDisableClientStateIndexedEXT(void)
{
	/* glDisableClientStateIndexedEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glDisableClientStateIndexedEXT");
	}

	unsupported("glDisableClientStateIndexedEXT");
	return piglit_dispatch_glDisableClientStateIndexedEXT;
}

static void APIENTRY
stub_glDisableClientStateIndexedEXT(GLenum array, GLuint index)
{
	check_initialized();
	piglit_dispatch_glDisableClientStateIndexedEXT = resolve_glDisableClientStateIndexedEXT();
	piglit_dispatch_glDisableClientStateIndexedEXT(array, index);
}

PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC piglit_dispatch_glDisableClientStateIndexedEXT = stub_glDisableClientStateIndexedEXT;

static void*
resolve_glDisableClientStateiEXT(void)
{
	/* glDisableClientStateiEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glDisableClientStateiEXT");
	}

	unsupported("glDisableClientStateiEXT");
	return piglit_dispatch_glDisableClientStateiEXT;
}

static void APIENTRY
stub_glDisableClientStateiEXT(GLenum array, GLuint index)
{
	check_initialized();
	piglit_dispatch_glDisableClientStateiEXT = resolve_glDisableClientStateiEXT();
	piglit_dispatch_glDisableClientStateiEXT(array, index);
}

PFNGLDISABLECLIENTSTATEIEXTPROC piglit_dispatch_glDisableClientStateiEXT = stub_glDisableClientStateiEXT;

static void*
resolve_glDisableDriverControlQCOM(void)
{
	/* glDisableDriverControlQCOM (GL_QCOM_driver_control) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_QCOM_driver_control")) {
		return get_ext_proc("glDisableDriverControlQCOM");
	}

	unsupported("glDisableDriverControlQCOM");
	return piglit_dispatch_glDisableDriverControlQCOM;
}

static void APIENTRY
stub_glDisableDriverControlQCOM(GLuint driverControl)
{
	check_initialized();
	piglit_dispatch_glDisableDriverControlQCOM = resolve_glDisableDriverControlQCOM();
	piglit_dispatch_glDisableDriverControlQCOM(driverControl);
}

PFNGLDISABLEDRIVERCONTROLQCOMPROC piglit_dispatch_glDisableDriverControlQCOM = stub_glDisableDriverControlQCOM;

static void*
resolve_glDisableIndexedEXT(void)
{
	/* glDisablei (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDisablei", 30);
	}

	/* glDisableIndexedEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glDisableIndexedEXT");
	}

	/* glDisableIndexedEXT (GL_EXT_draw_buffers2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_draw_buffers2")) {
		return get_ext_proc("glDisableIndexedEXT");
	}

	/* glDisableiEXT (GL_EXT_draw_buffers_indexed) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_draw_buffers_indexed")) {
		return get_ext_proc("glDisableiEXT");
	}

	unsupported("glDisableIndexedEXT");
	return piglit_dispatch_glDisableIndexedEXT;
}

static void APIENTRY
stub_glDisableIndexedEXT(GLenum target, GLuint index)
{
	check_initialized();
	piglit_dispatch_glDisableIndexedEXT = resolve_glDisableIndexedEXT();
	piglit_dispatch_glDisableIndexedEXT(target, index);
}

PFNGLDISABLEINDEXEDEXTPROC piglit_dispatch_glDisableIndexedEXT = stub_glDisableIndexedEXT;

static void*
resolve_glDisableVariantClientStateEXT(void)
{
	/* glDisableVariantClientStateEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glDisableVariantClientStateEXT");
	}

	unsupported("glDisableVariantClientStateEXT");
	return piglit_dispatch_glDisableVariantClientStateEXT;
}

static void APIENTRY
stub_glDisableVariantClientStateEXT(GLuint id)
{
	check_initialized();
	piglit_dispatch_glDisableVariantClientStateEXT = resolve_glDisableVariantClientStateEXT();
	piglit_dispatch_glDisableVariantClientStateEXT(id);
}

PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC piglit_dispatch_glDisableVariantClientStateEXT = stub_glDisableVariantClientStateEXT;

static void*
resolve_glDisableVertexArrayAttribEXT(void)
{
	/* glDisableVertexArrayAttribEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glDisableVertexArrayAttribEXT");
	}

	unsupported("glDisableVertexArrayAttribEXT");
	return piglit_dispatch_glDisableVertexArrayAttribEXT;
}

static void APIENTRY
stub_glDisableVertexArrayAttribEXT(GLuint vaobj, GLuint index)
{
	check_initialized();
	piglit_dispatch_glDisableVertexArrayAttribEXT = resolve_glDisableVertexArrayAttribEXT();
	piglit_dispatch_glDisableVertexArrayAttribEXT(vaobj, index);
}

PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC piglit_dispatch_glDisableVertexArrayAttribEXT = stub_glDisableVertexArrayAttribEXT;

static void*
resolve_glDisableVertexArrayEXT(void)
{
	/* glDisableVertexArrayEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glDisableVertexArrayEXT");
	}

	unsupported("glDisableVertexArrayEXT");
	return piglit_dispatch_glDisableVertexArrayEXT;
}

static void APIENTRY
stub_glDisableVertexArrayEXT(GLuint vaobj, GLenum array)
{
	check_initialized();
	piglit_dispatch_glDisableVertexArrayEXT = resolve_glDisableVertexArrayEXT();
	piglit_dispatch_glDisableVertexArrayEXT(vaobj, array);
}

PFNGLDISABLEVERTEXARRAYEXTPROC piglit_dispatch_glDisableVertexArrayEXT = stub_glDisableVertexArrayEXT;

static void*
resolve_glDisableVertexAttribAPPLE(void)
{
	/* glDisableVertexAttribAPPLE (GL_APPLE_vertex_program_evaluators) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_APPLE_vertex_program_evaluators")) {
		return get_ext_proc("glDisableVertexAttribAPPLE");
	}

	unsupported("glDisableVertexAttribAPPLE");
	return piglit_dispatch_glDisableVertexAttribAPPLE;
}

static void APIENTRY
stub_glDisableVertexAttribAPPLE(GLuint index, GLenum pname)
{
	check_initialized();
	piglit_dispatch_glDisableVertexAttribAPPLE = resolve_glDisableVertexAttribAPPLE();
	piglit_dispatch_glDisableVertexAttribAPPLE(index, pname);
}

PFNGLDISABLEVERTEXATTRIBAPPLEPROC piglit_dispatch_glDisableVertexAttribAPPLE = stub_glDisableVertexAttribAPPLE;

static void*
resolve_glDisableVertexAttribArray(void)
{
	/* glDisableVertexAttribArray (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDisableVertexAttribArray", 20);
	}

	/* glDisableVertexAttribArray (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glDisableVertexAttribArray", 20);
	}

	/* glDisableVertexAttribArrayARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glDisableVertexAttribArrayARB");
	}

	/* glDisableVertexAttribArrayARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glDisableVertexAttribArrayARB");
	}

	unsupported("glDisableVertexAttribArray");
	return piglit_dispatch_glDisableVertexAttribArray;
}

static void APIENTRY
stub_glDisableVertexAttribArray(GLuint index)
{
	check_initialized();
	piglit_dispatch_glDisableVertexAttribArray = resolve_glDisableVertexAttribArray();
	piglit_dispatch_glDisableVertexAttribArray(index);
}

PFNGLDISABLEVERTEXATTRIBARRAYPROC piglit_dispatch_glDisableVertexAttribArray = stub_glDisableVertexAttribArray;

static void*
resolve_glDiscardFramebufferEXT(void)
{
	/* glDiscardFramebufferEXT (GL_EXT_discard_framebuffer) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_discard_framebuffer")) {
		return get_ext_proc("glDiscardFramebufferEXT");
	}

	unsupported("glDiscardFramebufferEXT");
	return piglit_dispatch_glDiscardFramebufferEXT;
}

static void APIENTRY
stub_glDiscardFramebufferEXT(GLenum target, GLsizei numAttachments, const GLenum * attachments)
{
	check_initialized();
	piglit_dispatch_glDiscardFramebufferEXT = resolve_glDiscardFramebufferEXT();
	piglit_dispatch_glDiscardFramebufferEXT(target, numAttachments, attachments);
}

PFNGLDISCARDFRAMEBUFFEREXTPROC piglit_dispatch_glDiscardFramebufferEXT = stub_glDiscardFramebufferEXT;

static void*
resolve_glDispatchCompute(void)
{
	/* glDispatchCompute (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDispatchCompute", 43);
	}

	/* glDispatchCompute (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glDispatchCompute", 31);
	}

	/* glDispatchCompute (GL_ARB_compute_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_compute_shader")) {
		return get_ext_proc("glDispatchCompute");
	}

	unsupported("glDispatchCompute");
	return piglit_dispatch_glDispatchCompute;
}

static void APIENTRY
stub_glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
{
	check_initialized();
	piglit_dispatch_glDispatchCompute = resolve_glDispatchCompute();
	piglit_dispatch_glDispatchCompute(num_groups_x, num_groups_y, num_groups_z);
}

PFNGLDISPATCHCOMPUTEPROC piglit_dispatch_glDispatchCompute = stub_glDispatchCompute;

static void*
resolve_glDispatchComputeGroupSizeARB(void)
{
	/* glDispatchComputeGroupSizeARB (GL_ARB_compute_variable_group_size) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_compute_variable_group_size")) {
		return get_ext_proc("glDispatchComputeGroupSizeARB");
	}

	unsupported("glDispatchComputeGroupSizeARB");
	return piglit_dispatch_glDispatchComputeGroupSizeARB;
}

static void APIENTRY
stub_glDispatchComputeGroupSizeARB(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z)
{
	check_initialized();
	piglit_dispatch_glDispatchComputeGroupSizeARB = resolve_glDispatchComputeGroupSizeARB();
	piglit_dispatch_glDispatchComputeGroupSizeARB(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);
}

PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC piglit_dispatch_glDispatchComputeGroupSizeARB = stub_glDispatchComputeGroupSizeARB;

static void*
resolve_glDispatchComputeIndirect(void)
{
	/* glDispatchComputeIndirect (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDispatchComputeIndirect", 43);
	}

	/* glDispatchComputeIndirect (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glDispatchComputeIndirect", 31);
	}

	/* glDispatchComputeIndirect (GL_ARB_compute_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_compute_shader")) {
		return get_ext_proc("glDispatchComputeIndirect");
	}

	unsupported("glDispatchComputeIndirect");
	return piglit_dispatch_glDispatchComputeIndirect;
}

static void APIENTRY
stub_glDispatchComputeIndirect(GLintptr indirect)
{
	check_initialized();
	piglit_dispatch_glDispatchComputeIndirect = resolve_glDispatchComputeIndirect();
	piglit_dispatch_glDispatchComputeIndirect(indirect);
}

PFNGLDISPATCHCOMPUTEINDIRECTPROC piglit_dispatch_glDispatchComputeIndirect = stub_glDispatchComputeIndirect;

static void*
resolve_glDrawArrays(void)
{
	/* glDrawArrays (GL_VERSION_1_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDrawArrays", 11);
	}

	/* glDrawArrays (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glDrawArrays", 10);
	}

	/* glDrawArrays (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glDrawArrays", 20);
	}

	/* glDrawArraysEXT (GL_EXT_vertex_array) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_array")) {
		return get_ext_proc("glDrawArraysEXT");
	}

	unsupported("glDrawArrays");
	return piglit_dispatch_glDrawArrays;
}

static void APIENTRY
stub_glDrawArrays(GLenum mode, GLint first, GLsizei count)
{
	check_initialized();
	piglit_dispatch_glDrawArrays = resolve_glDrawArrays();
	piglit_dispatch_glDrawArrays(mode, first, count);
}

PFNGLDRAWARRAYSPROC piglit_dispatch_glDrawArrays = stub_glDrawArrays;

static void*
resolve_glDrawArraysIndirect(void)
{
	/* glDrawArraysIndirect (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDrawArraysIndirect", 40);
	}

	/* glDrawArraysIndirect (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glDrawArraysIndirect", 31);
	}

	/* glDrawArraysIndirect (GL_ARB_draw_indirect) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_draw_indirect")) {
		return get_ext_proc("glDrawArraysIndirect");
	}

	unsupported("glDrawArraysIndirect");
	return piglit_dispatch_glDrawArraysIndirect;
}

static void APIENTRY
stub_glDrawArraysIndirect(GLenum mode, const void * indirect)
{
	check_initialized();
	piglit_dispatch_glDrawArraysIndirect = resolve_glDrawArraysIndirect();
	piglit_dispatch_glDrawArraysIndirect(mode, indirect);
}

PFNGLDRAWARRAYSINDIRECTPROC piglit_dispatch_glDrawArraysIndirect = stub_glDrawArraysIndirect;

static void*
resolve_glDrawArraysInstanced(void)
{
	/* glDrawArraysInstanced (GL_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDrawArraysInstanced", 31);
	}

	/* glDrawArraysInstanced (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glDrawArraysInstanced", 30);
	}

	/* glDrawArraysInstancedARB (GL_ARB_draw_instanced) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_draw_instanced")) {
		return get_ext_proc("glDrawArraysInstancedARB");
	}

	/* glDrawArraysInstancedEXT (GL_EXT_draw_instanced) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_draw_instanced")) {
		return get_ext_proc("glDrawArraysInstancedEXT");
	}

	/* glDrawArraysInstancedEXT (GL_EXT_instanced_arrays) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_instanced_arrays")) {
		return get_ext_proc("glDrawArraysInstancedEXT");
	}

	/* glDrawArraysInstancedANGLE (GL_ANGLE_instanced_arrays) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_ANGLE_instanced_arrays")) {
		return get_ext_proc("glDrawArraysInstancedANGLE");
	}

	/* glDrawArraysInstancedNV (GL_NV_draw_instanced) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_NV_draw_instanced")) {
		return get_ext_proc("glDrawArraysInstancedNV");
	}

	unsupported("glDrawArraysInstanced");
	return piglit_dispatch_glDrawArraysInstanced;
}

static void APIENTRY
stub_glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount)
{
	check_initialized();
	piglit_dispatch_glDrawArraysInstanced = resolve_glDrawArraysInstanced();
	piglit_dispatch_glDrawArraysInstanced(mode, first, count, instancecount);
}

PFNGLDRAWARRAYSINSTANCEDPROC piglit_dispatch_glDrawArraysInstanced = stub_glDrawArraysInstanced;

static void*
resolve_glDrawArraysInstancedBaseInstance(void)
{
	/* glDrawArraysInstancedBaseInstance (GL_VERSION_4_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDrawArraysInstancedBaseInstance", 42);
	}

	/* glDrawArraysInstancedBaseInstance (GL_ARB_base_instance) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_base_instance")) {
		return get_ext_proc("glDrawArraysInstancedBaseInstance");
	}

	unsupported("glDrawArraysInstancedBaseInstance");
	return piglit_dispatch_glDrawArraysInstancedBaseInstance;
}

static void APIENTRY
stub_glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance)
{
	check_initialized();
	piglit_dispatch_glDrawArraysInstancedBaseInstance = resolve_glDrawArraysInstancedBaseInstance();
	piglit_dispatch_glDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance);
}

PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC piglit_dispatch_glDrawArraysInstancedBaseInstance = stub_glDrawArraysInstancedBaseInstance;

static void*
resolve_glDrawBuffer(void)
{
	/* glDrawBuffer (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glDrawBuffer", 10);
	}

	unsupported("glDrawBuffer");
	return piglit_dispatch_glDrawBuffer;
}

static void APIENTRY
stub_glDrawBuffer(GLenum mode)
{
	check_initialized();
	piglit_dispatch_glDrawBuffer = resolve_glDrawBuffer();
	piglit_dispatch_glDrawBuffer(mode);
}

PFNGLDRAWBUFFERPROC piglit_dispatch_glDrawBuffer = stub_glDrawBuffer;

static void*
resolve_glDrawBuffers(void)
{
	/* glDrawBuffers (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDrawBuffers", 20);
	}

	/* glDrawBuffers (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glDrawBuffers", 30);
	}

	/* glDrawBuffersARB (GL_ARB_draw_buffers) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_draw_buffers")) {
		return get_ext_proc("glDrawBuffersARB");
	}

	/* glDrawBuffersEXT (GL_EXT_draw_buffers) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_draw_buffers")) {
		return get_ext_proc("glDrawBuffersEXT");
	}

	/* glDrawBuffersATI (GL_ATI_draw_buffers) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_draw_buffers")) {
		return get_ext_proc("glDrawBuffersATI");
	}

	unsupported("glDrawBuffers");
	return piglit_dispatch_glDrawBuffers;
}

static void APIENTRY
stub_glDrawBuffers(GLsizei n, const GLenum * bufs)
{
	check_initialized();
	piglit_dispatch_glDrawBuffers = resolve_glDrawBuffers();
	piglit_dispatch_glDrawBuffers(n, bufs);
}

PFNGLDRAWBUFFERSPROC piglit_dispatch_glDrawBuffers = stub_glDrawBuffers;

static void*
resolve_glDrawBuffersIndexedEXT(void)
{
	/* glDrawBuffersIndexedEXT (GL_EXT_multiview_draw_buffers) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_multiview_draw_buffers")) {
		return get_ext_proc("glDrawBuffersIndexedEXT");
	}

	unsupported("glDrawBuffersIndexedEXT");
	return piglit_dispatch_glDrawBuffersIndexedEXT;
}

static void APIENTRY
stub_glDrawBuffersIndexedEXT(GLint n, const GLenum * location, const GLint * indices)
{
	check_initialized();
	piglit_dispatch_glDrawBuffersIndexedEXT = resolve_glDrawBuffersIndexedEXT();
	piglit_dispatch_glDrawBuffersIndexedEXT(n, location, indices);
}

PFNGLDRAWBUFFERSINDEXEDEXTPROC piglit_dispatch_glDrawBuffersIndexedEXT = stub_glDrawBuffersIndexedEXT;

static void*
resolve_glDrawBuffersNV(void)
{
	/* glDrawBuffersNV (GL_NV_draw_buffers) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_NV_draw_buffers")) {
		return get_ext_proc("glDrawBuffersNV");
	}

	unsupported("glDrawBuffersNV");
	return piglit_dispatch_glDrawBuffersNV;
}

static void APIENTRY
stub_glDrawBuffersNV(GLsizei n, const GLenum * bufs)
{
	check_initialized();
	piglit_dispatch_glDrawBuffersNV = resolve_glDrawBuffersNV();
	piglit_dispatch_glDrawBuffersNV(n, bufs);
}

PFNGLDRAWBUFFERSNVPROC piglit_dispatch_glDrawBuffersNV = stub_glDrawBuffersNV;

static void*
resolve_glDrawElementArrayAPPLE(void)
{
	/* glDrawElementArrayAPPLE (GL_APPLE_element_array) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_APPLE_element_array")) {
		return get_ext_proc("glDrawElementArrayAPPLE");
	}

	unsupported("glDrawElementArrayAPPLE");
	return piglit_dispatch_glDrawElementArrayAPPLE;
}

static void APIENTRY
stub_glDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count)
{
	check_initialized();
	piglit_dispatch_glDrawElementArrayAPPLE = resolve_glDrawElementArrayAPPLE();
	piglit_dispatch_glDrawElementArrayAPPLE(mode, first, count);
}

PFNGLDRAWELEMENTARRAYAPPLEPROC piglit_dispatch_glDrawElementArrayAPPLE = stub_glDrawElementArrayAPPLE;

static void*
resolve_glDrawElementArrayATI(void)
{
	/* glDrawElementArrayATI (GL_ATI_element_array) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_element_array")) {
		return get_ext_proc("glDrawElementArrayATI");
	}

	unsupported("glDrawElementArrayATI");
	return piglit_dispatch_glDrawElementArrayATI;
}

static void APIENTRY
stub_glDrawElementArrayATI(GLenum mode, GLsizei count)
{
	check_initialized();
	piglit_dispatch_glDrawElementArrayATI = resolve_glDrawElementArrayATI();
	piglit_dispatch_glDrawElementArrayATI(mode, count);
}

PFNGLDRAWELEMENTARRAYATIPROC piglit_dispatch_glDrawElementArrayATI = stub_glDrawElementArrayATI;

static void*
resolve_glDrawElements(void)
{
	/* glDrawElements (GL_VERSION_1_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDrawElements", 11);
	}

	/* glDrawElements (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glDrawElements", 10);
	}

	/* glDrawElements (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glDrawElements", 20);
	}

	unsupported("glDrawElements");
	return piglit_dispatch_glDrawElements;
}

static void APIENTRY
stub_glDrawElements(GLenum mode, GLsizei count, GLenum type, const void * indices)
{
	check_initialized();
	piglit_dispatch_glDrawElements = resolve_glDrawElements();
	piglit_dispatch_glDrawElements(mode, count, type, indices);
}

PFNGLDRAWELEMENTSPROC piglit_dispatch_glDrawElements = stub_glDrawElements;

static void*
resolve_glDrawElementsBaseVertex(void)
{
	/* glDrawElementsBaseVertex (GL_VERSION_3_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDrawElementsBaseVertex", 32);
	}

	/* glDrawElementsBaseVertex (GL_ARB_draw_elements_base_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_draw_elements_base_vertex")) {
		return get_ext_proc("glDrawElementsBaseVertex");
	}

	unsupported("glDrawElementsBaseVertex");
	return piglit_dispatch_glDrawElementsBaseVertex;
}

static void APIENTRY
stub_glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex)
{
	check_initialized();
	piglit_dispatch_glDrawElementsBaseVertex = resolve_glDrawElementsBaseVertex();
	piglit_dispatch_glDrawElementsBaseVertex(mode, count, type, indices, basevertex);
}

PFNGLDRAWELEMENTSBASEVERTEXPROC piglit_dispatch_glDrawElementsBaseVertex = stub_glDrawElementsBaseVertex;

static void*
resolve_glDrawElementsIndirect(void)
{
	/* glDrawElementsIndirect (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDrawElementsIndirect", 40);
	}

	/* glDrawElementsIndirect (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glDrawElementsIndirect", 31);
	}

	/* glDrawElementsIndirect (GL_ARB_draw_indirect) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_draw_indirect")) {
		return get_ext_proc("glDrawElementsIndirect");
	}

	unsupported("glDrawElementsIndirect");
	return piglit_dispatch_glDrawElementsIndirect;
}

static void APIENTRY
stub_glDrawElementsIndirect(GLenum mode, GLenum type, const void * indirect)
{
	check_initialized();
	piglit_dispatch_glDrawElementsIndirect = resolve_glDrawElementsIndirect();
	piglit_dispatch_glDrawElementsIndirect(mode, type, indirect);
}

PFNGLDRAWELEMENTSINDIRECTPROC piglit_dispatch_glDrawElementsIndirect = stub_glDrawElementsIndirect;

static void*
resolve_glDrawElementsInstanced(void)
{
	/* glDrawElementsInstanced (GL_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDrawElementsInstanced", 31);
	}

	/* glDrawElementsInstanced (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glDrawElementsInstanced", 30);
	}

	/* glDrawElementsInstancedARB (GL_ARB_draw_instanced) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_draw_instanced")) {
		return get_ext_proc("glDrawElementsInstancedARB");
	}

	/* glDrawElementsInstancedEXT (GL_EXT_draw_instanced) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_draw_instanced")) {
		return get_ext_proc("glDrawElementsInstancedEXT");
	}

	/* glDrawElementsInstancedEXT (GL_EXT_instanced_arrays) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_instanced_arrays")) {
		return get_ext_proc("glDrawElementsInstancedEXT");
	}

	/* glDrawElementsInstancedANGLE (GL_ANGLE_instanced_arrays) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_ANGLE_instanced_arrays")) {
		return get_ext_proc("glDrawElementsInstancedANGLE");
	}

	/* glDrawElementsInstancedNV (GL_NV_draw_instanced) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_NV_draw_instanced")) {
		return get_ext_proc("glDrawElementsInstancedNV");
	}

	unsupported("glDrawElementsInstanced");
	return piglit_dispatch_glDrawElementsInstanced;
}

static void APIENTRY
stub_glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount)
{
	check_initialized();
	piglit_dispatch_glDrawElementsInstanced = resolve_glDrawElementsInstanced();
	piglit_dispatch_glDrawElementsInstanced(mode, count, type, indices, instancecount);
}

PFNGLDRAWELEMENTSINSTANCEDPROC piglit_dispatch_glDrawElementsInstanced = stub_glDrawElementsInstanced;

static void*
resolve_glDrawElementsInstancedBaseInstance(void)
{
	/* glDrawElementsInstancedBaseInstance (GL_VERSION_4_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDrawElementsInstancedBaseInstance", 42);
	}

	/* glDrawElementsInstancedBaseInstance (GL_ARB_base_instance) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_base_instance")) {
		return get_ext_proc("glDrawElementsInstancedBaseInstance");
	}

	unsupported("glDrawElementsInstancedBaseInstance");
	return piglit_dispatch_glDrawElementsInstancedBaseInstance;
}

static void APIENTRY
stub_glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance)
{
	check_initialized();
	piglit_dispatch_glDrawElementsInstancedBaseInstance = resolve_glDrawElementsInstancedBaseInstance();
	piglit_dispatch_glDrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance);
}

PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC piglit_dispatch_glDrawElementsInstancedBaseInstance = stub_glDrawElementsInstancedBaseInstance;

static void*
resolve_glDrawElementsInstancedBaseVertex(void)
{
	/* glDrawElementsInstancedBaseVertex (GL_VERSION_3_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDrawElementsInstancedBaseVertex", 32);
	}

	/* glDrawElementsInstancedBaseVertex (GL_ARB_draw_elements_base_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_draw_elements_base_vertex")) {
		return get_ext_proc("glDrawElementsInstancedBaseVertex");
	}

	unsupported("glDrawElementsInstancedBaseVertex");
	return piglit_dispatch_glDrawElementsInstancedBaseVertex;
}

static void APIENTRY
stub_glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex)
{
	check_initialized();
	piglit_dispatch_glDrawElementsInstancedBaseVertex = resolve_glDrawElementsInstancedBaseVertex();
	piglit_dispatch_glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex);
}

PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC piglit_dispatch_glDrawElementsInstancedBaseVertex = stub_glDrawElementsInstancedBaseVertex;

static void*
resolve_glDrawElementsInstancedBaseVertexBaseInstance(void)
{
	/* glDrawElementsInstancedBaseVertexBaseInstance (GL_VERSION_4_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDrawElementsInstancedBaseVertexBaseInstance", 42);
	}

	/* glDrawElementsInstancedBaseVertexBaseInstance (GL_ARB_base_instance) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_base_instance")) {
		return get_ext_proc("glDrawElementsInstancedBaseVertexBaseInstance");
	}

	unsupported("glDrawElementsInstancedBaseVertexBaseInstance");
	return piglit_dispatch_glDrawElementsInstancedBaseVertexBaseInstance;
}

static void APIENTRY
stub_glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance)
{
	check_initialized();
	piglit_dispatch_glDrawElementsInstancedBaseVertexBaseInstance = resolve_glDrawElementsInstancedBaseVertexBaseInstance();
	piglit_dispatch_glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance);
}

PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC piglit_dispatch_glDrawElementsInstancedBaseVertexBaseInstance = stub_glDrawElementsInstancedBaseVertexBaseInstance;

static void*
resolve_glDrawMeshArraysSUN(void)
{
	/* glDrawMeshArraysSUN (GL_SUN_mesh_array) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_mesh_array")) {
		return get_ext_proc("glDrawMeshArraysSUN");
	}

	unsupported("glDrawMeshArraysSUN");
	return piglit_dispatch_glDrawMeshArraysSUN;
}

static void APIENTRY
stub_glDrawMeshArraysSUN(GLenum mode, GLint first, GLsizei count, GLsizei width)
{
	check_initialized();
	piglit_dispatch_glDrawMeshArraysSUN = resolve_glDrawMeshArraysSUN();
	piglit_dispatch_glDrawMeshArraysSUN(mode, first, count, width);
}

PFNGLDRAWMESHARRAYSSUNPROC piglit_dispatch_glDrawMeshArraysSUN = stub_glDrawMeshArraysSUN;

static void*
resolve_glDrawPixels(void)
{
	/* glDrawPixels (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glDrawPixels", 10);
	}

	unsupported("glDrawPixels");
	return piglit_dispatch_glDrawPixels;
}

static void APIENTRY
stub_glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels)
{
	check_initialized();
	piglit_dispatch_glDrawPixels = resolve_glDrawPixels();
	piglit_dispatch_glDrawPixels(width, height, format, type, pixels);
}

PFNGLDRAWPIXELSPROC piglit_dispatch_glDrawPixels = stub_glDrawPixels;

static void*
resolve_glDrawRangeElementArrayAPPLE(void)
{
	/* glDrawRangeElementArrayAPPLE (GL_APPLE_element_array) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_APPLE_element_array")) {
		return get_ext_proc("glDrawRangeElementArrayAPPLE");
	}

	unsupported("glDrawRangeElementArrayAPPLE");
	return piglit_dispatch_glDrawRangeElementArrayAPPLE;
}

static void APIENTRY
stub_glDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)
{
	check_initialized();
	piglit_dispatch_glDrawRangeElementArrayAPPLE = resolve_glDrawRangeElementArrayAPPLE();
	piglit_dispatch_glDrawRangeElementArrayAPPLE(mode, start, end, first, count);
}

PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC piglit_dispatch_glDrawRangeElementArrayAPPLE = stub_glDrawRangeElementArrayAPPLE;

static void*
resolve_glDrawRangeElementArrayATI(void)
{
	/* glDrawRangeElementArrayATI (GL_ATI_element_array) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_element_array")) {
		return get_ext_proc("glDrawRangeElementArrayATI");
	}

	unsupported("glDrawRangeElementArrayATI");
	return piglit_dispatch_glDrawRangeElementArrayATI;
}

static void APIENTRY
stub_glDrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count)
{
	check_initialized();
	piglit_dispatch_glDrawRangeElementArrayATI = resolve_glDrawRangeElementArrayATI();
	piglit_dispatch_glDrawRangeElementArrayATI(mode, start, end, count);
}

PFNGLDRAWRANGEELEMENTARRAYATIPROC piglit_dispatch_glDrawRangeElementArrayATI = stub_glDrawRangeElementArrayATI;

static void*
resolve_glDrawRangeElements(void)
{
	/* glDrawRangeElements (GL_VERSION_1_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDrawRangeElements", 12);
	}

	/* glDrawRangeElements (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glDrawRangeElements", 30);
	}

	/* glDrawRangeElementsEXT (GL_EXT_draw_range_elements) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_draw_range_elements")) {
		return get_ext_proc("glDrawRangeElementsEXT");
	}

	unsupported("glDrawRangeElements");
	return piglit_dispatch_glDrawRangeElements;
}

static void APIENTRY
stub_glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices)
{
	check_initialized();
	piglit_dispatch_glDrawRangeElements = resolve_glDrawRangeElements();
	piglit_dispatch_glDrawRangeElements(mode, start, end, count, type, indices);
}

PFNGLDRAWRANGEELEMENTSPROC piglit_dispatch_glDrawRangeElements = stub_glDrawRangeElements;

static void*
resolve_glDrawRangeElementsBaseVertex(void)
{
	/* glDrawRangeElementsBaseVertex (GL_VERSION_3_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDrawRangeElementsBaseVertex", 32);
	}

	/* glDrawRangeElementsBaseVertex (GL_ARB_draw_elements_base_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_draw_elements_base_vertex")) {
		return get_ext_proc("glDrawRangeElementsBaseVertex");
	}

	unsupported("glDrawRangeElementsBaseVertex");
	return piglit_dispatch_glDrawRangeElementsBaseVertex;
}

static void APIENTRY
stub_glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex)
{
	check_initialized();
	piglit_dispatch_glDrawRangeElementsBaseVertex = resolve_glDrawRangeElementsBaseVertex();
	piglit_dispatch_glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);
}

PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC piglit_dispatch_glDrawRangeElementsBaseVertex = stub_glDrawRangeElementsBaseVertex;

static void*
resolve_glDrawTexfOES(void)
{
	/* glDrawTexfOES (GL_OES_draw_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_draw_texture")) {
		return get_ext_proc("glDrawTexfOES");
	}

	unsupported("glDrawTexfOES");
	return piglit_dispatch_glDrawTexfOES;
}

static void APIENTRY
stub_glDrawTexfOES(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height)
{
	check_initialized();
	piglit_dispatch_glDrawTexfOES = resolve_glDrawTexfOES();
	piglit_dispatch_glDrawTexfOES(x, y, z, width, height);
}

PFNGLDRAWTEXFOESPROC piglit_dispatch_glDrawTexfOES = stub_glDrawTexfOES;

static void*
resolve_glDrawTexfvOES(void)
{
	/* glDrawTexfvOES (GL_OES_draw_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_draw_texture")) {
		return get_ext_proc("glDrawTexfvOES");
	}

	unsupported("glDrawTexfvOES");
	return piglit_dispatch_glDrawTexfvOES;
}

static void APIENTRY
stub_glDrawTexfvOES(const GLfloat * coords)
{
	check_initialized();
	piglit_dispatch_glDrawTexfvOES = resolve_glDrawTexfvOES();
	piglit_dispatch_glDrawTexfvOES(coords);
}

PFNGLDRAWTEXFVOESPROC piglit_dispatch_glDrawTexfvOES = stub_glDrawTexfvOES;

static void*
resolve_glDrawTexiOES(void)
{
	/* glDrawTexiOES (GL_OES_draw_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_draw_texture")) {
		return get_ext_proc("glDrawTexiOES");
	}

	unsupported("glDrawTexiOES");
	return piglit_dispatch_glDrawTexiOES;
}

static void APIENTRY
stub_glDrawTexiOES(GLint x, GLint y, GLint z, GLint width, GLint height)
{
	check_initialized();
	piglit_dispatch_glDrawTexiOES = resolve_glDrawTexiOES();
	piglit_dispatch_glDrawTexiOES(x, y, z, width, height);
}

PFNGLDRAWTEXIOESPROC piglit_dispatch_glDrawTexiOES = stub_glDrawTexiOES;

static void*
resolve_glDrawTexivOES(void)
{
	/* glDrawTexivOES (GL_OES_draw_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_draw_texture")) {
		return get_ext_proc("glDrawTexivOES");
	}

	unsupported("glDrawTexivOES");
	return piglit_dispatch_glDrawTexivOES;
}

static void APIENTRY
stub_glDrawTexivOES(const GLint * coords)
{
	check_initialized();
	piglit_dispatch_glDrawTexivOES = resolve_glDrawTexivOES();
	piglit_dispatch_glDrawTexivOES(coords);
}

PFNGLDRAWTEXIVOESPROC piglit_dispatch_glDrawTexivOES = stub_glDrawTexivOES;

static void*
resolve_glDrawTexsOES(void)
{
	/* glDrawTexsOES (GL_OES_draw_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_draw_texture")) {
		return get_ext_proc("glDrawTexsOES");
	}

	unsupported("glDrawTexsOES");
	return piglit_dispatch_glDrawTexsOES;
}

static void APIENTRY
stub_glDrawTexsOES(GLshort x, GLshort y, GLshort z, GLshort width, GLshort height)
{
	check_initialized();
	piglit_dispatch_glDrawTexsOES = resolve_glDrawTexsOES();
	piglit_dispatch_glDrawTexsOES(x, y, z, width, height);
}

PFNGLDRAWTEXSOESPROC piglit_dispatch_glDrawTexsOES = stub_glDrawTexsOES;

static void*
resolve_glDrawTexsvOES(void)
{
	/* glDrawTexsvOES (GL_OES_draw_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_draw_texture")) {
		return get_ext_proc("glDrawTexsvOES");
	}

	unsupported("glDrawTexsvOES");
	return piglit_dispatch_glDrawTexsvOES;
}

static void APIENTRY
stub_glDrawTexsvOES(const GLshort * coords)
{
	check_initialized();
	piglit_dispatch_glDrawTexsvOES = resolve_glDrawTexsvOES();
	piglit_dispatch_glDrawTexsvOES(coords);
}

PFNGLDRAWTEXSVOESPROC piglit_dispatch_glDrawTexsvOES = stub_glDrawTexsvOES;

static void*
resolve_glDrawTextureNV(void)
{
	/* glDrawTextureNV (GL_NV_draw_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_draw_texture")) {
		return get_ext_proc("glDrawTextureNV");
	}

	unsupported("glDrawTextureNV");
	return piglit_dispatch_glDrawTextureNV;
}

static void APIENTRY
stub_glDrawTextureNV(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1)
{
	check_initialized();
	piglit_dispatch_glDrawTextureNV = resolve_glDrawTextureNV();
	piglit_dispatch_glDrawTextureNV(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
}

PFNGLDRAWTEXTURENVPROC piglit_dispatch_glDrawTextureNV = stub_glDrawTextureNV;

static void*
resolve_glDrawTexxOES(void)
{
	/* glDrawTexxOES (GL_OES_draw_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_draw_texture")) {
		return get_ext_proc("glDrawTexxOES");
	}

	unsupported("glDrawTexxOES");
	return piglit_dispatch_glDrawTexxOES;
}

static void APIENTRY
stub_glDrawTexxOES(GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height)
{
	check_initialized();
	piglit_dispatch_glDrawTexxOES = resolve_glDrawTexxOES();
	piglit_dispatch_glDrawTexxOES(x, y, z, width, height);
}

PFNGLDRAWTEXXOESPROC piglit_dispatch_glDrawTexxOES = stub_glDrawTexxOES;

static void*
resolve_glDrawTexxvOES(void)
{
	/* glDrawTexxvOES (GL_OES_draw_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_draw_texture")) {
		return get_ext_proc("glDrawTexxvOES");
	}

	unsupported("glDrawTexxvOES");
	return piglit_dispatch_glDrawTexxvOES;
}

static void APIENTRY
stub_glDrawTexxvOES(const GLfixed * coords)
{
	check_initialized();
	piglit_dispatch_glDrawTexxvOES = resolve_glDrawTexxvOES();
	piglit_dispatch_glDrawTexxvOES(coords);
}

PFNGLDRAWTEXXVOESPROC piglit_dispatch_glDrawTexxvOES = stub_glDrawTexxvOES;

static void*
resolve_glDrawTransformFeedback(void)
{
	/* glDrawTransformFeedback (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDrawTransformFeedback", 40);
	}

	/* glDrawTransformFeedback (GL_ARB_transform_feedback2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_transform_feedback2")) {
		return get_ext_proc("glDrawTransformFeedback");
	}

	/* glDrawTransformFeedbackNV (GL_NV_transform_feedback2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_transform_feedback2")) {
		return get_ext_proc("glDrawTransformFeedbackNV");
	}

	unsupported("glDrawTransformFeedback");
	return piglit_dispatch_glDrawTransformFeedback;
}

static void APIENTRY
stub_glDrawTransformFeedback(GLenum mode, GLuint id)
{
	check_initialized();
	piglit_dispatch_glDrawTransformFeedback = resolve_glDrawTransformFeedback();
	piglit_dispatch_glDrawTransformFeedback(mode, id);
}

PFNGLDRAWTRANSFORMFEEDBACKPROC piglit_dispatch_glDrawTransformFeedback = stub_glDrawTransformFeedback;

static void*
resolve_glDrawTransformFeedbackInstanced(void)
{
	/* glDrawTransformFeedbackInstanced (GL_VERSION_4_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDrawTransformFeedbackInstanced", 42);
	}

	/* glDrawTransformFeedbackInstanced (GL_ARB_transform_feedback_instanced) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_transform_feedback_instanced")) {
		return get_ext_proc("glDrawTransformFeedbackInstanced");
	}

	unsupported("glDrawTransformFeedbackInstanced");
	return piglit_dispatch_glDrawTransformFeedbackInstanced;
}

static void APIENTRY
stub_glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount)
{
	check_initialized();
	piglit_dispatch_glDrawTransformFeedbackInstanced = resolve_glDrawTransformFeedbackInstanced();
	piglit_dispatch_glDrawTransformFeedbackInstanced(mode, id, instancecount);
}

PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC piglit_dispatch_glDrawTransformFeedbackInstanced = stub_glDrawTransformFeedbackInstanced;

static void*
resolve_glDrawTransformFeedbackStream(void)
{
	/* glDrawTransformFeedbackStream (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDrawTransformFeedbackStream", 40);
	}

	/* glDrawTransformFeedbackStream (GL_ARB_transform_feedback3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_transform_feedback3")) {
		return get_ext_proc("glDrawTransformFeedbackStream");
	}

	unsupported("glDrawTransformFeedbackStream");
	return piglit_dispatch_glDrawTransformFeedbackStream;
}

static void APIENTRY
stub_glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream)
{
	check_initialized();
	piglit_dispatch_glDrawTransformFeedbackStream = resolve_glDrawTransformFeedbackStream();
	piglit_dispatch_glDrawTransformFeedbackStream(mode, id, stream);
}

PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC piglit_dispatch_glDrawTransformFeedbackStream = stub_glDrawTransformFeedbackStream;

static void*
resolve_glDrawTransformFeedbackStreamInstanced(void)
{
	/* glDrawTransformFeedbackStreamInstanced (GL_VERSION_4_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glDrawTransformFeedbackStreamInstanced", 42);
	}

	/* glDrawTransformFeedbackStreamInstanced (GL_ARB_transform_feedback_instanced) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_transform_feedback_instanced")) {
		return get_ext_proc("glDrawTransformFeedbackStreamInstanced");
	}

	unsupported("glDrawTransformFeedbackStreamInstanced");
	return piglit_dispatch_glDrawTransformFeedbackStreamInstanced;
}

static void APIENTRY
stub_glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount)
{
	check_initialized();
	piglit_dispatch_glDrawTransformFeedbackStreamInstanced = resolve_glDrawTransformFeedbackStreamInstanced();
	piglit_dispatch_glDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount);
}

PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC piglit_dispatch_glDrawTransformFeedbackStreamInstanced = stub_glDrawTransformFeedbackStreamInstanced;

static void*
resolve_glEGLImageTargetRenderbufferStorageOES(void)
{
	/* glEGLImageTargetRenderbufferStorageOES (GL_OES_EGL_image) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_OES_EGL_image")) {
		return get_ext_proc("glEGLImageTargetRenderbufferStorageOES");
	}

	unsupported("glEGLImageTargetRenderbufferStorageOES");
	return piglit_dispatch_glEGLImageTargetRenderbufferStorageOES;
}

static void APIENTRY
stub_glEGLImageTargetRenderbufferStorageOES(GLenum target, GLeglImageOES image)
{
	check_initialized();
	piglit_dispatch_glEGLImageTargetRenderbufferStorageOES = resolve_glEGLImageTargetRenderbufferStorageOES();
	piglit_dispatch_glEGLImageTargetRenderbufferStorageOES(target, image);
}

PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC piglit_dispatch_glEGLImageTargetRenderbufferStorageOES = stub_glEGLImageTargetRenderbufferStorageOES;

static void*
resolve_glEGLImageTargetTexture2DOES(void)
{
	/* glEGLImageTargetTexture2DOES (GL_OES_EGL_image) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_OES_EGL_image")) {
		return get_ext_proc("glEGLImageTargetTexture2DOES");
	}

	unsupported("glEGLImageTargetTexture2DOES");
	return piglit_dispatch_glEGLImageTargetTexture2DOES;
}

static void APIENTRY
stub_glEGLImageTargetTexture2DOES(GLenum target, GLeglImageOES image)
{
	check_initialized();
	piglit_dispatch_glEGLImageTargetTexture2DOES = resolve_glEGLImageTargetTexture2DOES();
	piglit_dispatch_glEGLImageTargetTexture2DOES(target, image);
}

PFNGLEGLIMAGETARGETTEXTURE2DOESPROC piglit_dispatch_glEGLImageTargetTexture2DOES = stub_glEGLImageTargetTexture2DOES;

static void*
resolve_glEdgeFlag(void)
{
	/* glEdgeFlag (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glEdgeFlag", 10);
	}

	unsupported("glEdgeFlag");
	return piglit_dispatch_glEdgeFlag;
}

static void APIENTRY
stub_glEdgeFlag(GLboolean flag)
{
	check_initialized();
	piglit_dispatch_glEdgeFlag = resolve_glEdgeFlag();
	piglit_dispatch_glEdgeFlag(flag);
}

PFNGLEDGEFLAGPROC piglit_dispatch_glEdgeFlag = stub_glEdgeFlag;

static void*
resolve_glEdgeFlagFormatNV(void)
{
	/* glEdgeFlagFormatNV (GL_NV_vertex_buffer_unified_memory) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_buffer_unified_memory")) {
		return get_ext_proc("glEdgeFlagFormatNV");
	}

	unsupported("glEdgeFlagFormatNV");
	return piglit_dispatch_glEdgeFlagFormatNV;
}

static void APIENTRY
stub_glEdgeFlagFormatNV(GLsizei stride)
{
	check_initialized();
	piglit_dispatch_glEdgeFlagFormatNV = resolve_glEdgeFlagFormatNV();
	piglit_dispatch_glEdgeFlagFormatNV(stride);
}

PFNGLEDGEFLAGFORMATNVPROC piglit_dispatch_glEdgeFlagFormatNV = stub_glEdgeFlagFormatNV;

static void*
resolve_glEdgeFlagPointer(void)
{
	/* glEdgeFlagPointer (GL_VERSION_1_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glEdgeFlagPointer", 11);
	}

	unsupported("glEdgeFlagPointer");
	return piglit_dispatch_glEdgeFlagPointer;
}

static void APIENTRY
stub_glEdgeFlagPointer(GLsizei stride, const void * pointer)
{
	check_initialized();
	piglit_dispatch_glEdgeFlagPointer = resolve_glEdgeFlagPointer();
	piglit_dispatch_glEdgeFlagPointer(stride, pointer);
}

PFNGLEDGEFLAGPOINTERPROC piglit_dispatch_glEdgeFlagPointer = stub_glEdgeFlagPointer;

static void*
resolve_glEdgeFlagPointerEXT(void)
{
	/* glEdgeFlagPointerEXT (GL_EXT_vertex_array) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_array")) {
		return get_ext_proc("glEdgeFlagPointerEXT");
	}

	unsupported("glEdgeFlagPointerEXT");
	return piglit_dispatch_glEdgeFlagPointerEXT;
}

static void APIENTRY
stub_glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean * pointer)
{
	check_initialized();
	piglit_dispatch_glEdgeFlagPointerEXT = resolve_glEdgeFlagPointerEXT();
	piglit_dispatch_glEdgeFlagPointerEXT(stride, count, pointer);
}

PFNGLEDGEFLAGPOINTEREXTPROC piglit_dispatch_glEdgeFlagPointerEXT = stub_glEdgeFlagPointerEXT;

static void*
resolve_glEdgeFlagPointerListIBM(void)
{
	/* glEdgeFlagPointerListIBM (GL_IBM_vertex_array_lists) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_IBM_vertex_array_lists")) {
		return get_ext_proc("glEdgeFlagPointerListIBM");
	}

	unsupported("glEdgeFlagPointerListIBM");
	return piglit_dispatch_glEdgeFlagPointerListIBM;
}

static void APIENTRY
stub_glEdgeFlagPointerListIBM(GLint stride, const GLboolean ** pointer, GLint ptrstride)
{
	check_initialized();
	piglit_dispatch_glEdgeFlagPointerListIBM = resolve_glEdgeFlagPointerListIBM();
	piglit_dispatch_glEdgeFlagPointerListIBM(stride, pointer, ptrstride);
}

PFNGLEDGEFLAGPOINTERLISTIBMPROC piglit_dispatch_glEdgeFlagPointerListIBM = stub_glEdgeFlagPointerListIBM;

static void*
resolve_glEdgeFlagv(void)
{
	/* glEdgeFlagv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glEdgeFlagv", 10);
	}

	unsupported("glEdgeFlagv");
	return piglit_dispatch_glEdgeFlagv;
}

static void APIENTRY
stub_glEdgeFlagv(const GLboolean * flag)
{
	check_initialized();
	piglit_dispatch_glEdgeFlagv = resolve_glEdgeFlagv();
	piglit_dispatch_glEdgeFlagv(flag);
}

PFNGLEDGEFLAGVPROC piglit_dispatch_glEdgeFlagv = stub_glEdgeFlagv;

static void*
resolve_glElementPointerAPPLE(void)
{
	/* glElementPointerAPPLE (GL_APPLE_element_array) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_APPLE_element_array")) {
		return get_ext_proc("glElementPointerAPPLE");
	}

	unsupported("glElementPointerAPPLE");
	return piglit_dispatch_glElementPointerAPPLE;
}

static void APIENTRY
stub_glElementPointerAPPLE(GLenum type, const void * pointer)
{
	check_initialized();
	piglit_dispatch_glElementPointerAPPLE = resolve_glElementPointerAPPLE();
	piglit_dispatch_glElementPointerAPPLE(type, pointer);
}

PFNGLELEMENTPOINTERAPPLEPROC piglit_dispatch_glElementPointerAPPLE = stub_glElementPointerAPPLE;

static void*
resolve_glElementPointerATI(void)
{
	/* glElementPointerATI (GL_ATI_element_array) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_element_array")) {
		return get_ext_proc("glElementPointerATI");
	}

	unsupported("glElementPointerATI");
	return piglit_dispatch_glElementPointerATI;
}

static void APIENTRY
stub_glElementPointerATI(GLenum type, const void * pointer)
{
	check_initialized();
	piglit_dispatch_glElementPointerATI = resolve_glElementPointerATI();
	piglit_dispatch_glElementPointerATI(type, pointer);
}

PFNGLELEMENTPOINTERATIPROC piglit_dispatch_glElementPointerATI = stub_glElementPointerATI;

static void*
resolve_glEnable(void)
{
	/* glEnable (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glEnable", 10);
	}

	/* glEnable (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glEnable", 10);
	}

	/* glEnable (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glEnable", 20);
	}

	unsupported("glEnable");
	return piglit_dispatch_glEnable;
}

static void APIENTRY
stub_glEnable(GLenum cap)
{
	check_initialized();
	piglit_dispatch_glEnable = resolve_glEnable();
	piglit_dispatch_glEnable(cap);
}

PFNGLENABLEPROC piglit_dispatch_glEnable = stub_glEnable;

static void*
resolve_glEnableClientState(void)
{
	/* glEnableClientState (GL_VERSION_1_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glEnableClientState", 11);
	}

	/* glEnableClientState (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glEnableClientState", 10);
	}

	unsupported("glEnableClientState");
	return piglit_dispatch_glEnableClientState;
}

static void APIENTRY
stub_glEnableClientState(GLenum array)
{
	check_initialized();
	piglit_dispatch_glEnableClientState = resolve_glEnableClientState();
	piglit_dispatch_glEnableClientState(array);
}

PFNGLENABLECLIENTSTATEPROC piglit_dispatch_glEnableClientState = stub_glEnableClientState;

static void*
resolve_glEnableClientStateIndexedEXT(void)
{
	/* glEnableClientStateIndexedEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glEnableClientStateIndexedEXT");
	}

	unsupported("glEnableClientStateIndexedEXT");
	return piglit_dispatch_glEnableClientStateIndexedEXT;
}

static void APIENTRY
stub_glEnableClientStateIndexedEXT(GLenum array, GLuint index)
{
	check_initialized();
	piglit_dispatch_glEnableClientStateIndexedEXT = resolve_glEnableClientStateIndexedEXT();
	piglit_dispatch_glEnableClientStateIndexedEXT(array, index);
}

PFNGLENABLECLIENTSTATEINDEXEDEXTPROC piglit_dispatch_glEnableClientStateIndexedEXT = stub_glEnableClientStateIndexedEXT;

static void*
resolve_glEnableClientStateiEXT(void)
{
	/* glEnableClientStateiEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glEnableClientStateiEXT");
	}

	unsupported("glEnableClientStateiEXT");
	return piglit_dispatch_glEnableClientStateiEXT;
}

static void APIENTRY
stub_glEnableClientStateiEXT(GLenum array, GLuint index)
{
	check_initialized();
	piglit_dispatch_glEnableClientStateiEXT = resolve_glEnableClientStateiEXT();
	piglit_dispatch_glEnableClientStateiEXT(array, index);
}

PFNGLENABLECLIENTSTATEIEXTPROC piglit_dispatch_glEnableClientStateiEXT = stub_glEnableClientStateiEXT;

static void*
resolve_glEnableDriverControlQCOM(void)
{
	/* glEnableDriverControlQCOM (GL_QCOM_driver_control) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_QCOM_driver_control")) {
		return get_ext_proc("glEnableDriverControlQCOM");
	}

	unsupported("glEnableDriverControlQCOM");
	return piglit_dispatch_glEnableDriverControlQCOM;
}

static void APIENTRY
stub_glEnableDriverControlQCOM(GLuint driverControl)
{
	check_initialized();
	piglit_dispatch_glEnableDriverControlQCOM = resolve_glEnableDriverControlQCOM();
	piglit_dispatch_glEnableDriverControlQCOM(driverControl);
}

PFNGLENABLEDRIVERCONTROLQCOMPROC piglit_dispatch_glEnableDriverControlQCOM = stub_glEnableDriverControlQCOM;

static void*
resolve_glEnableIndexedEXT(void)
{
	/* glEnablei (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glEnablei", 30);
	}

	/* glEnableIndexedEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glEnableIndexedEXT");
	}

	/* glEnableIndexedEXT (GL_EXT_draw_buffers2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_draw_buffers2")) {
		return get_ext_proc("glEnableIndexedEXT");
	}

	/* glEnableiEXT (GL_EXT_draw_buffers_indexed) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_draw_buffers_indexed")) {
		return get_ext_proc("glEnableiEXT");
	}

	unsupported("glEnableIndexedEXT");
	return piglit_dispatch_glEnableIndexedEXT;
}

static void APIENTRY
stub_glEnableIndexedEXT(GLenum target, GLuint index)
{
	check_initialized();
	piglit_dispatch_glEnableIndexedEXT = resolve_glEnableIndexedEXT();
	piglit_dispatch_glEnableIndexedEXT(target, index);
}

PFNGLENABLEINDEXEDEXTPROC piglit_dispatch_glEnableIndexedEXT = stub_glEnableIndexedEXT;

static void*
resolve_glEnableVariantClientStateEXT(void)
{
	/* glEnableVariantClientStateEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glEnableVariantClientStateEXT");
	}

	unsupported("glEnableVariantClientStateEXT");
	return piglit_dispatch_glEnableVariantClientStateEXT;
}

static void APIENTRY
stub_glEnableVariantClientStateEXT(GLuint id)
{
	check_initialized();
	piglit_dispatch_glEnableVariantClientStateEXT = resolve_glEnableVariantClientStateEXT();
	piglit_dispatch_glEnableVariantClientStateEXT(id);
}

PFNGLENABLEVARIANTCLIENTSTATEEXTPROC piglit_dispatch_glEnableVariantClientStateEXT = stub_glEnableVariantClientStateEXT;

static void*
resolve_glEnableVertexArrayAttribEXT(void)
{
	/* glEnableVertexArrayAttribEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glEnableVertexArrayAttribEXT");
	}

	unsupported("glEnableVertexArrayAttribEXT");
	return piglit_dispatch_glEnableVertexArrayAttribEXT;
}

static void APIENTRY
stub_glEnableVertexArrayAttribEXT(GLuint vaobj, GLuint index)
{
	check_initialized();
	piglit_dispatch_glEnableVertexArrayAttribEXT = resolve_glEnableVertexArrayAttribEXT();
	piglit_dispatch_glEnableVertexArrayAttribEXT(vaobj, index);
}

PFNGLENABLEVERTEXARRAYATTRIBEXTPROC piglit_dispatch_glEnableVertexArrayAttribEXT = stub_glEnableVertexArrayAttribEXT;

static void*
resolve_glEnableVertexArrayEXT(void)
{
	/* glEnableVertexArrayEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glEnableVertexArrayEXT");
	}

	unsupported("glEnableVertexArrayEXT");
	return piglit_dispatch_glEnableVertexArrayEXT;
}

static void APIENTRY
stub_glEnableVertexArrayEXT(GLuint vaobj, GLenum array)
{
	check_initialized();
	piglit_dispatch_glEnableVertexArrayEXT = resolve_glEnableVertexArrayEXT();
	piglit_dispatch_glEnableVertexArrayEXT(vaobj, array);
}

PFNGLENABLEVERTEXARRAYEXTPROC piglit_dispatch_glEnableVertexArrayEXT = stub_glEnableVertexArrayEXT;

static void*
resolve_glEnableVertexAttribAPPLE(void)
{
	/* glEnableVertexAttribAPPLE (GL_APPLE_vertex_program_evaluators) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_APPLE_vertex_program_evaluators")) {
		return get_ext_proc("glEnableVertexAttribAPPLE");
	}

	unsupported("glEnableVertexAttribAPPLE");
	return piglit_dispatch_glEnableVertexAttribAPPLE;
}

static void APIENTRY
stub_glEnableVertexAttribAPPLE(GLuint index, GLenum pname)
{
	check_initialized();
	piglit_dispatch_glEnableVertexAttribAPPLE = resolve_glEnableVertexAttribAPPLE();
	piglit_dispatch_glEnableVertexAttribAPPLE(index, pname);
}

PFNGLENABLEVERTEXATTRIBAPPLEPROC piglit_dispatch_glEnableVertexAttribAPPLE = stub_glEnableVertexAttribAPPLE;

static void*
resolve_glEnableVertexAttribArray(void)
{
	/* glEnableVertexAttribArray (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glEnableVertexAttribArray", 20);
	}

	/* glEnableVertexAttribArray (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glEnableVertexAttribArray", 20);
	}

	/* glEnableVertexAttribArrayARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glEnableVertexAttribArrayARB");
	}

	/* glEnableVertexAttribArrayARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glEnableVertexAttribArrayARB");
	}

	unsupported("glEnableVertexAttribArray");
	return piglit_dispatch_glEnableVertexAttribArray;
}

static void APIENTRY
stub_glEnableVertexAttribArray(GLuint index)
{
	check_initialized();
	piglit_dispatch_glEnableVertexAttribArray = resolve_glEnableVertexAttribArray();
	piglit_dispatch_glEnableVertexAttribArray(index);
}

PFNGLENABLEVERTEXATTRIBARRAYPROC piglit_dispatch_glEnableVertexAttribArray = stub_glEnableVertexAttribArray;

static void*
resolve_glEnd(void)
{
	/* glEnd (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glEnd", 10);
	}

	unsupported("glEnd");
	return piglit_dispatch_glEnd;
}

static void APIENTRY
stub_glEnd()
{
	check_initialized();
	piglit_dispatch_glEnd = resolve_glEnd();
	piglit_dispatch_glEnd();
}

PFNGLENDPROC piglit_dispatch_glEnd = stub_glEnd;

static void*
resolve_glEndConditionalRender(void)
{
	/* glEndConditionalRender (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glEndConditionalRender", 30);
	}

	/* glEndConditionalRenderNVX (GL_NVX_conditional_render) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NVX_conditional_render")) {
		return get_ext_proc("glEndConditionalRenderNVX");
	}

	/* glEndConditionalRenderNV (GL_NV_conditional_render) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_conditional_render")) {
		return get_ext_proc("glEndConditionalRenderNV");
	}

	unsupported("glEndConditionalRender");
	return piglit_dispatch_glEndConditionalRender;
}

static void APIENTRY
stub_glEndConditionalRender()
{
	check_initialized();
	piglit_dispatch_glEndConditionalRender = resolve_glEndConditionalRender();
	piglit_dispatch_glEndConditionalRender();
}

PFNGLENDCONDITIONALRENDERPROC piglit_dispatch_glEndConditionalRender = stub_glEndConditionalRender;

static void*
resolve_glEndFragmentShaderATI(void)
{
	/* glEndFragmentShaderATI (GL_ATI_fragment_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_fragment_shader")) {
		return get_ext_proc("glEndFragmentShaderATI");
	}

	unsupported("glEndFragmentShaderATI");
	return piglit_dispatch_glEndFragmentShaderATI;
}

static void APIENTRY
stub_glEndFragmentShaderATI()
{
	check_initialized();
	piglit_dispatch_glEndFragmentShaderATI = resolve_glEndFragmentShaderATI();
	piglit_dispatch_glEndFragmentShaderATI();
}

PFNGLENDFRAGMENTSHADERATIPROC piglit_dispatch_glEndFragmentShaderATI = stub_glEndFragmentShaderATI;

static void*
resolve_glEndList(void)
{
	/* glEndList (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glEndList", 10);
	}

	unsupported("glEndList");
	return piglit_dispatch_glEndList;
}

static void APIENTRY
stub_glEndList()
{
	check_initialized();
	piglit_dispatch_glEndList = resolve_glEndList();
	piglit_dispatch_glEndList();
}

PFNGLENDLISTPROC piglit_dispatch_glEndList = stub_glEndList;

static void*
resolve_glEndOcclusionQueryNV(void)
{
	/* glEndOcclusionQueryNV (GL_NV_occlusion_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_occlusion_query")) {
		return get_ext_proc("glEndOcclusionQueryNV");
	}

	unsupported("glEndOcclusionQueryNV");
	return piglit_dispatch_glEndOcclusionQueryNV;
}

static void APIENTRY
stub_glEndOcclusionQueryNV()
{
	check_initialized();
	piglit_dispatch_glEndOcclusionQueryNV = resolve_glEndOcclusionQueryNV();
	piglit_dispatch_glEndOcclusionQueryNV();
}

PFNGLENDOCCLUSIONQUERYNVPROC piglit_dispatch_glEndOcclusionQueryNV = stub_glEndOcclusionQueryNV;

static void*
resolve_glEndPerfMonitorAMD(void)
{
	/* glEndPerfMonitorAMD (GL_AMD_performance_monitor) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_AMD_performance_monitor")) {
		return get_ext_proc("glEndPerfMonitorAMD");
	}

	unsupported("glEndPerfMonitorAMD");
	return piglit_dispatch_glEndPerfMonitorAMD;
}

static void APIENTRY
stub_glEndPerfMonitorAMD(GLuint monitor)
{
	check_initialized();
	piglit_dispatch_glEndPerfMonitorAMD = resolve_glEndPerfMonitorAMD();
	piglit_dispatch_glEndPerfMonitorAMD(monitor);
}

PFNGLENDPERFMONITORAMDPROC piglit_dispatch_glEndPerfMonitorAMD = stub_glEndPerfMonitorAMD;

static void*
resolve_glEndPerfQueryINTEL(void)
{
	/* glEndPerfQueryINTEL (GL_INTEL_performance_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_INTEL_performance_query")) {
		return get_ext_proc("glEndPerfQueryINTEL");
	}

	unsupported("glEndPerfQueryINTEL");
	return piglit_dispatch_glEndPerfQueryINTEL;
}

static void APIENTRY
stub_glEndPerfQueryINTEL(GLuint queryHandle)
{
	check_initialized();
	piglit_dispatch_glEndPerfQueryINTEL = resolve_glEndPerfQueryINTEL();
	piglit_dispatch_glEndPerfQueryINTEL(queryHandle);
}

PFNGLENDPERFQUERYINTELPROC piglit_dispatch_glEndPerfQueryINTEL = stub_glEndPerfQueryINTEL;

static void*
resolve_glEndQuery(void)
{
	/* glEndQuery (GL_VERSION_1_5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glEndQuery", 15);
	}

	/* glEndQuery (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glEndQuery", 30);
	}

	/* glEndQueryARB (GL_ARB_occlusion_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_occlusion_query")) {
		return get_ext_proc("glEndQueryARB");
	}

	unsupported("glEndQuery");
	return piglit_dispatch_glEndQuery;
}

static void APIENTRY
stub_glEndQuery(GLenum target)
{
	check_initialized();
	piglit_dispatch_glEndQuery = resolve_glEndQuery();
	piglit_dispatch_glEndQuery(target);
}

PFNGLENDQUERYPROC piglit_dispatch_glEndQuery = stub_glEndQuery;

static void*
resolve_glEndQueryEXT(void)
{
	/* glEndQueryEXT (GL_EXT_disjoint_timer_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_disjoint_timer_query")) {
		return get_ext_proc("glEndQueryEXT");
	}

	/* glEndQueryEXT (GL_EXT_occlusion_query_boolean) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_occlusion_query_boolean")) {
		return get_ext_proc("glEndQueryEXT");
	}

	unsupported("glEndQueryEXT");
	return piglit_dispatch_glEndQueryEXT;
}

static void APIENTRY
stub_glEndQueryEXT(GLenum target)
{
	check_initialized();
	piglit_dispatch_glEndQueryEXT = resolve_glEndQueryEXT();
	piglit_dispatch_glEndQueryEXT(target);
}

PFNGLENDQUERYEXTPROC piglit_dispatch_glEndQueryEXT = stub_glEndQueryEXT;

static void*
resolve_glEndQueryIndexed(void)
{
	/* glEndQueryIndexed (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glEndQueryIndexed", 40);
	}

	/* glEndQueryIndexed (GL_ARB_transform_feedback3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_transform_feedback3")) {
		return get_ext_proc("glEndQueryIndexed");
	}

	unsupported("glEndQueryIndexed");
	return piglit_dispatch_glEndQueryIndexed;
}

static void APIENTRY
stub_glEndQueryIndexed(GLenum target, GLuint index)
{
	check_initialized();
	piglit_dispatch_glEndQueryIndexed = resolve_glEndQueryIndexed();
	piglit_dispatch_glEndQueryIndexed(target, index);
}

PFNGLENDQUERYINDEXEDPROC piglit_dispatch_glEndQueryIndexed = stub_glEndQueryIndexed;

static void*
resolve_glEndTilingQCOM(void)
{
	/* glEndTilingQCOM (GL_QCOM_tiled_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_QCOM_tiled_rendering")) {
		return get_ext_proc("glEndTilingQCOM");
	}

	unsupported("glEndTilingQCOM");
	return piglit_dispatch_glEndTilingQCOM;
}

static void APIENTRY
stub_glEndTilingQCOM(GLbitfield preserveMask)
{
	check_initialized();
	piglit_dispatch_glEndTilingQCOM = resolve_glEndTilingQCOM();
	piglit_dispatch_glEndTilingQCOM(preserveMask);
}

PFNGLENDTILINGQCOMPROC piglit_dispatch_glEndTilingQCOM = stub_glEndTilingQCOM;

static void*
resolve_glEndTransformFeedback(void)
{
	/* glEndTransformFeedback (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glEndTransformFeedback", 30);
	}

	/* glEndTransformFeedback (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glEndTransformFeedback", 30);
	}

	/* glEndTransformFeedbackEXT (GL_EXT_transform_feedback) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_transform_feedback")) {
		return get_ext_proc("glEndTransformFeedbackEXT");
	}

	/* glEndTransformFeedbackNV (GL_NV_transform_feedback) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_transform_feedback")) {
		return get_ext_proc("glEndTransformFeedbackNV");
	}

	unsupported("glEndTransformFeedback");
	return piglit_dispatch_glEndTransformFeedback;
}

static void APIENTRY
stub_glEndTransformFeedback()
{
	check_initialized();
	piglit_dispatch_glEndTransformFeedback = resolve_glEndTransformFeedback();
	piglit_dispatch_glEndTransformFeedback();
}

PFNGLENDTRANSFORMFEEDBACKPROC piglit_dispatch_glEndTransformFeedback = stub_glEndTransformFeedback;

static void*
resolve_glEndVertexShaderEXT(void)
{
	/* glEndVertexShaderEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glEndVertexShaderEXT");
	}

	unsupported("glEndVertexShaderEXT");
	return piglit_dispatch_glEndVertexShaderEXT;
}

static void APIENTRY
stub_glEndVertexShaderEXT()
{
	check_initialized();
	piglit_dispatch_glEndVertexShaderEXT = resolve_glEndVertexShaderEXT();
	piglit_dispatch_glEndVertexShaderEXT();
}

PFNGLENDVERTEXSHADEREXTPROC piglit_dispatch_glEndVertexShaderEXT = stub_glEndVertexShaderEXT;

static void*
resolve_glEndVideoCaptureNV(void)
{
	/* glEndVideoCaptureNV (GL_NV_video_capture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_video_capture")) {
		return get_ext_proc("glEndVideoCaptureNV");
	}

	unsupported("glEndVideoCaptureNV");
	return piglit_dispatch_glEndVideoCaptureNV;
}

static void APIENTRY
stub_glEndVideoCaptureNV(GLuint video_capture_slot)
{
	check_initialized();
	piglit_dispatch_glEndVideoCaptureNV = resolve_glEndVideoCaptureNV();
	piglit_dispatch_glEndVideoCaptureNV(video_capture_slot);
}

PFNGLENDVIDEOCAPTURENVPROC piglit_dispatch_glEndVideoCaptureNV = stub_glEndVideoCaptureNV;

static void*
resolve_glEvalCoord1d(void)
{
	/* glEvalCoord1d (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glEvalCoord1d", 10);
	}

	unsupported("glEvalCoord1d");
	return piglit_dispatch_glEvalCoord1d;
}

static void APIENTRY
stub_glEvalCoord1d(GLdouble u)
{
	check_initialized();
	piglit_dispatch_glEvalCoord1d = resolve_glEvalCoord1d();
	piglit_dispatch_glEvalCoord1d(u);
}

PFNGLEVALCOORD1DPROC piglit_dispatch_glEvalCoord1d = stub_glEvalCoord1d;

static void*
resolve_glEvalCoord1dv(void)
{
	/* glEvalCoord1dv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glEvalCoord1dv", 10);
	}

	unsupported("glEvalCoord1dv");
	return piglit_dispatch_glEvalCoord1dv;
}

static void APIENTRY
stub_glEvalCoord1dv(const GLdouble * u)
{
	check_initialized();
	piglit_dispatch_glEvalCoord1dv = resolve_glEvalCoord1dv();
	piglit_dispatch_glEvalCoord1dv(u);
}

PFNGLEVALCOORD1DVPROC piglit_dispatch_glEvalCoord1dv = stub_glEvalCoord1dv;

static void*
resolve_glEvalCoord1f(void)
{
	/* glEvalCoord1f (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glEvalCoord1f", 10);
	}

	unsupported("glEvalCoord1f");
	return piglit_dispatch_glEvalCoord1f;
}

static void APIENTRY
stub_glEvalCoord1f(GLfloat u)
{
	check_initialized();
	piglit_dispatch_glEvalCoord1f = resolve_glEvalCoord1f();
	piglit_dispatch_glEvalCoord1f(u);
}

PFNGLEVALCOORD1FPROC piglit_dispatch_glEvalCoord1f = stub_glEvalCoord1f;

static void*
resolve_glEvalCoord1fv(void)
{
	/* glEvalCoord1fv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glEvalCoord1fv", 10);
	}

	unsupported("glEvalCoord1fv");
	return piglit_dispatch_glEvalCoord1fv;
}

static void APIENTRY
stub_glEvalCoord1fv(const GLfloat * u)
{
	check_initialized();
	piglit_dispatch_glEvalCoord1fv = resolve_glEvalCoord1fv();
	piglit_dispatch_glEvalCoord1fv(u);
}

PFNGLEVALCOORD1FVPROC piglit_dispatch_glEvalCoord1fv = stub_glEvalCoord1fv;

static void*
resolve_glEvalCoord1xOES(void)
{
	/* glEvalCoord1xOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glEvalCoord1xOES");
	}

	unsupported("glEvalCoord1xOES");
	return piglit_dispatch_glEvalCoord1xOES;
}

static void APIENTRY
stub_glEvalCoord1xOES(GLfixed u)
{
	check_initialized();
	piglit_dispatch_glEvalCoord1xOES = resolve_glEvalCoord1xOES();
	piglit_dispatch_glEvalCoord1xOES(u);
}

PFNGLEVALCOORD1XOESPROC piglit_dispatch_glEvalCoord1xOES = stub_glEvalCoord1xOES;

static void*
resolve_glEvalCoord1xvOES(void)
{
	/* glEvalCoord1xvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glEvalCoord1xvOES");
	}

	unsupported("glEvalCoord1xvOES");
	return piglit_dispatch_glEvalCoord1xvOES;
}

static void APIENTRY
stub_glEvalCoord1xvOES(const GLfixed * coords)
{
	check_initialized();
	piglit_dispatch_glEvalCoord1xvOES = resolve_glEvalCoord1xvOES();
	piglit_dispatch_glEvalCoord1xvOES(coords);
}

PFNGLEVALCOORD1XVOESPROC piglit_dispatch_glEvalCoord1xvOES = stub_glEvalCoord1xvOES;

static void*
resolve_glEvalCoord2d(void)
{
	/* glEvalCoord2d (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glEvalCoord2d", 10);
	}

	unsupported("glEvalCoord2d");
	return piglit_dispatch_glEvalCoord2d;
}

static void APIENTRY
stub_glEvalCoord2d(GLdouble u, GLdouble v)
{
	check_initialized();
	piglit_dispatch_glEvalCoord2d = resolve_glEvalCoord2d();
	piglit_dispatch_glEvalCoord2d(u, v);
}

PFNGLEVALCOORD2DPROC piglit_dispatch_glEvalCoord2d = stub_glEvalCoord2d;

static void*
resolve_glEvalCoord2dv(void)
{
	/* glEvalCoord2dv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glEvalCoord2dv", 10);
	}

	unsupported("glEvalCoord2dv");
	return piglit_dispatch_glEvalCoord2dv;
}

static void APIENTRY
stub_glEvalCoord2dv(const GLdouble * u)
{
	check_initialized();
	piglit_dispatch_glEvalCoord2dv = resolve_glEvalCoord2dv();
	piglit_dispatch_glEvalCoord2dv(u);
}

PFNGLEVALCOORD2DVPROC piglit_dispatch_glEvalCoord2dv = stub_glEvalCoord2dv;

static void*
resolve_glEvalCoord2f(void)
{
	/* glEvalCoord2f (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glEvalCoord2f", 10);
	}

	unsupported("glEvalCoord2f");
	return piglit_dispatch_glEvalCoord2f;
}

static void APIENTRY
stub_glEvalCoord2f(GLfloat u, GLfloat v)
{
	check_initialized();
	piglit_dispatch_glEvalCoord2f = resolve_glEvalCoord2f();
	piglit_dispatch_glEvalCoord2f(u, v);
}

PFNGLEVALCOORD2FPROC piglit_dispatch_glEvalCoord2f = stub_glEvalCoord2f;

static void*
resolve_glEvalCoord2fv(void)
{
	/* glEvalCoord2fv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glEvalCoord2fv", 10);
	}

	unsupported("glEvalCoord2fv");
	return piglit_dispatch_glEvalCoord2fv;
}

static void APIENTRY
stub_glEvalCoord2fv(const GLfloat * u)
{
	check_initialized();
	piglit_dispatch_glEvalCoord2fv = resolve_glEvalCoord2fv();
	piglit_dispatch_glEvalCoord2fv(u);
}

PFNGLEVALCOORD2FVPROC piglit_dispatch_glEvalCoord2fv = stub_glEvalCoord2fv;

static void*
resolve_glEvalCoord2xOES(void)
{
	/* glEvalCoord2xOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glEvalCoord2xOES");
	}

	unsupported("glEvalCoord2xOES");
	return piglit_dispatch_glEvalCoord2xOES;
}

static void APIENTRY
stub_glEvalCoord2xOES(GLfixed u, GLfixed v)
{
	check_initialized();
	piglit_dispatch_glEvalCoord2xOES = resolve_glEvalCoord2xOES();
	piglit_dispatch_glEvalCoord2xOES(u, v);
}

PFNGLEVALCOORD2XOESPROC piglit_dispatch_glEvalCoord2xOES = stub_glEvalCoord2xOES;

static void*
resolve_glEvalCoord2xvOES(void)
{
	/* glEvalCoord2xvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glEvalCoord2xvOES");
	}

	unsupported("glEvalCoord2xvOES");
	return piglit_dispatch_glEvalCoord2xvOES;
}

static void APIENTRY
stub_glEvalCoord2xvOES(const GLfixed * coords)
{
	check_initialized();
	piglit_dispatch_glEvalCoord2xvOES = resolve_glEvalCoord2xvOES();
	piglit_dispatch_glEvalCoord2xvOES(coords);
}

PFNGLEVALCOORD2XVOESPROC piglit_dispatch_glEvalCoord2xvOES = stub_glEvalCoord2xvOES;

static void*
resolve_glEvalMapsNV(void)
{
	/* glEvalMapsNV (GL_NV_evaluators) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_evaluators")) {
		return get_ext_proc("glEvalMapsNV");
	}

	unsupported("glEvalMapsNV");
	return piglit_dispatch_glEvalMapsNV;
}

static void APIENTRY
stub_glEvalMapsNV(GLenum target, GLenum mode)
{
	check_initialized();
	piglit_dispatch_glEvalMapsNV = resolve_glEvalMapsNV();
	piglit_dispatch_glEvalMapsNV(target, mode);
}

PFNGLEVALMAPSNVPROC piglit_dispatch_glEvalMapsNV = stub_glEvalMapsNV;

static void*
resolve_glEvalMesh1(void)
{
	/* glEvalMesh1 (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glEvalMesh1", 10);
	}

	unsupported("glEvalMesh1");
	return piglit_dispatch_glEvalMesh1;
}

static void APIENTRY
stub_glEvalMesh1(GLenum mode, GLint i1, GLint i2)
{
	check_initialized();
	piglit_dispatch_glEvalMesh1 = resolve_glEvalMesh1();
	piglit_dispatch_glEvalMesh1(mode, i1, i2);
}

PFNGLEVALMESH1PROC piglit_dispatch_glEvalMesh1 = stub_glEvalMesh1;

static void*
resolve_glEvalMesh2(void)
{
	/* glEvalMesh2 (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glEvalMesh2", 10);
	}

	unsupported("glEvalMesh2");
	return piglit_dispatch_glEvalMesh2;
}

static void APIENTRY
stub_glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)
{
	check_initialized();
	piglit_dispatch_glEvalMesh2 = resolve_glEvalMesh2();
	piglit_dispatch_glEvalMesh2(mode, i1, i2, j1, j2);
}

PFNGLEVALMESH2PROC piglit_dispatch_glEvalMesh2 = stub_glEvalMesh2;

static void*
resolve_glEvalPoint1(void)
{
	/* glEvalPoint1 (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glEvalPoint1", 10);
	}

	unsupported("glEvalPoint1");
	return piglit_dispatch_glEvalPoint1;
}

static void APIENTRY
stub_glEvalPoint1(GLint i)
{
	check_initialized();
	piglit_dispatch_glEvalPoint1 = resolve_glEvalPoint1();
	piglit_dispatch_glEvalPoint1(i);
}

PFNGLEVALPOINT1PROC piglit_dispatch_glEvalPoint1 = stub_glEvalPoint1;

static void*
resolve_glEvalPoint2(void)
{
	/* glEvalPoint2 (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glEvalPoint2", 10);
	}

	unsupported("glEvalPoint2");
	return piglit_dispatch_glEvalPoint2;
}

static void APIENTRY
stub_glEvalPoint2(GLint i, GLint j)
{
	check_initialized();
	piglit_dispatch_glEvalPoint2 = resolve_glEvalPoint2();
	piglit_dispatch_glEvalPoint2(i, j);
}

PFNGLEVALPOINT2PROC piglit_dispatch_glEvalPoint2 = stub_glEvalPoint2;

static void*
resolve_glExecuteProgramNV(void)
{
	/* glExecuteProgramNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glExecuteProgramNV");
	}

	unsupported("glExecuteProgramNV");
	return piglit_dispatch_glExecuteProgramNV;
}

static void APIENTRY
stub_glExecuteProgramNV(GLenum target, GLuint id, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glExecuteProgramNV = resolve_glExecuteProgramNV();
	piglit_dispatch_glExecuteProgramNV(target, id, params);
}

PFNGLEXECUTEPROGRAMNVPROC piglit_dispatch_glExecuteProgramNV = stub_glExecuteProgramNV;

static void*
resolve_glExtGetBufferPointervQCOM(void)
{
	/* glExtGetBufferPointervQCOM (GL_QCOM_extended_get) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_QCOM_extended_get")) {
		return get_ext_proc("glExtGetBufferPointervQCOM");
	}

	unsupported("glExtGetBufferPointervQCOM");
	return piglit_dispatch_glExtGetBufferPointervQCOM;
}

static void APIENTRY
stub_glExtGetBufferPointervQCOM(GLenum target, void ** params)
{
	check_initialized();
	piglit_dispatch_glExtGetBufferPointervQCOM = resolve_glExtGetBufferPointervQCOM();
	piglit_dispatch_glExtGetBufferPointervQCOM(target, params);
}

PFNGLEXTGETBUFFERPOINTERVQCOMPROC piglit_dispatch_glExtGetBufferPointervQCOM = stub_glExtGetBufferPointervQCOM;

static void*
resolve_glExtGetBuffersQCOM(void)
{
	/* glExtGetBuffersQCOM (GL_QCOM_extended_get) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_QCOM_extended_get")) {
		return get_ext_proc("glExtGetBuffersQCOM");
	}

	unsupported("glExtGetBuffersQCOM");
	return piglit_dispatch_glExtGetBuffersQCOM;
}

static void APIENTRY
stub_glExtGetBuffersQCOM(GLuint * buffers, GLint maxBuffers, GLint * numBuffers)
{
	check_initialized();
	piglit_dispatch_glExtGetBuffersQCOM = resolve_glExtGetBuffersQCOM();
	piglit_dispatch_glExtGetBuffersQCOM(buffers, maxBuffers, numBuffers);
}

PFNGLEXTGETBUFFERSQCOMPROC piglit_dispatch_glExtGetBuffersQCOM = stub_glExtGetBuffersQCOM;

static void*
resolve_glExtGetFramebuffersQCOM(void)
{
	/* glExtGetFramebuffersQCOM (GL_QCOM_extended_get) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_QCOM_extended_get")) {
		return get_ext_proc("glExtGetFramebuffersQCOM");
	}

	unsupported("glExtGetFramebuffersQCOM");
	return piglit_dispatch_glExtGetFramebuffersQCOM;
}

static void APIENTRY
stub_glExtGetFramebuffersQCOM(GLuint * framebuffers, GLint maxFramebuffers, GLint * numFramebuffers)
{
	check_initialized();
	piglit_dispatch_glExtGetFramebuffersQCOM = resolve_glExtGetFramebuffersQCOM();
	piglit_dispatch_glExtGetFramebuffersQCOM(framebuffers, maxFramebuffers, numFramebuffers);
}

PFNGLEXTGETFRAMEBUFFERSQCOMPROC piglit_dispatch_glExtGetFramebuffersQCOM = stub_glExtGetFramebuffersQCOM;

static void*
resolve_glExtGetProgramBinarySourceQCOM(void)
{
	/* glExtGetProgramBinarySourceQCOM (GL_QCOM_extended_get2) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_QCOM_extended_get2")) {
		return get_ext_proc("glExtGetProgramBinarySourceQCOM");
	}

	unsupported("glExtGetProgramBinarySourceQCOM");
	return piglit_dispatch_glExtGetProgramBinarySourceQCOM;
}

static void APIENTRY
stub_glExtGetProgramBinarySourceQCOM(GLuint program, GLenum shadertype, GLchar * source, GLint * length)
{
	check_initialized();
	piglit_dispatch_glExtGetProgramBinarySourceQCOM = resolve_glExtGetProgramBinarySourceQCOM();
	piglit_dispatch_glExtGetProgramBinarySourceQCOM(program, shadertype, source, length);
}

PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC piglit_dispatch_glExtGetProgramBinarySourceQCOM = stub_glExtGetProgramBinarySourceQCOM;

static void*
resolve_glExtGetProgramsQCOM(void)
{
	/* glExtGetProgramsQCOM (GL_QCOM_extended_get2) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_QCOM_extended_get2")) {
		return get_ext_proc("glExtGetProgramsQCOM");
	}

	unsupported("glExtGetProgramsQCOM");
	return piglit_dispatch_glExtGetProgramsQCOM;
}

static void APIENTRY
stub_glExtGetProgramsQCOM(GLuint * programs, GLint maxPrograms, GLint * numPrograms)
{
	check_initialized();
	piglit_dispatch_glExtGetProgramsQCOM = resolve_glExtGetProgramsQCOM();
	piglit_dispatch_glExtGetProgramsQCOM(programs, maxPrograms, numPrograms);
}

PFNGLEXTGETPROGRAMSQCOMPROC piglit_dispatch_glExtGetProgramsQCOM = stub_glExtGetProgramsQCOM;

static void*
resolve_glExtGetRenderbuffersQCOM(void)
{
	/* glExtGetRenderbuffersQCOM (GL_QCOM_extended_get) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_QCOM_extended_get")) {
		return get_ext_proc("glExtGetRenderbuffersQCOM");
	}

	unsupported("glExtGetRenderbuffersQCOM");
	return piglit_dispatch_glExtGetRenderbuffersQCOM;
}

static void APIENTRY
stub_glExtGetRenderbuffersQCOM(GLuint * renderbuffers, GLint maxRenderbuffers, GLint * numRenderbuffers)
{
	check_initialized();
	piglit_dispatch_glExtGetRenderbuffersQCOM = resolve_glExtGetRenderbuffersQCOM();
	piglit_dispatch_glExtGetRenderbuffersQCOM(renderbuffers, maxRenderbuffers, numRenderbuffers);
}

PFNGLEXTGETRENDERBUFFERSQCOMPROC piglit_dispatch_glExtGetRenderbuffersQCOM = stub_glExtGetRenderbuffersQCOM;

static void*
resolve_glExtGetShadersQCOM(void)
{
	/* glExtGetShadersQCOM (GL_QCOM_extended_get2) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_QCOM_extended_get2")) {
		return get_ext_proc("glExtGetShadersQCOM");
	}

	unsupported("glExtGetShadersQCOM");
	return piglit_dispatch_glExtGetShadersQCOM;
}

static void APIENTRY
stub_glExtGetShadersQCOM(GLuint * shaders, GLint maxShaders, GLint * numShaders)
{
	check_initialized();
	piglit_dispatch_glExtGetShadersQCOM = resolve_glExtGetShadersQCOM();
	piglit_dispatch_glExtGetShadersQCOM(shaders, maxShaders, numShaders);
}

PFNGLEXTGETSHADERSQCOMPROC piglit_dispatch_glExtGetShadersQCOM = stub_glExtGetShadersQCOM;

static void*
resolve_glExtGetTexLevelParameterivQCOM(void)
{
	/* glExtGetTexLevelParameterivQCOM (GL_QCOM_extended_get) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_QCOM_extended_get")) {
		return get_ext_proc("glExtGetTexLevelParameterivQCOM");
	}

	unsupported("glExtGetTexLevelParameterivQCOM");
	return piglit_dispatch_glExtGetTexLevelParameterivQCOM;
}

static void APIENTRY
stub_glExtGetTexLevelParameterivQCOM(GLuint texture, GLenum face, GLint level, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glExtGetTexLevelParameterivQCOM = resolve_glExtGetTexLevelParameterivQCOM();
	piglit_dispatch_glExtGetTexLevelParameterivQCOM(texture, face, level, pname, params);
}

PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC piglit_dispatch_glExtGetTexLevelParameterivQCOM = stub_glExtGetTexLevelParameterivQCOM;

static void*
resolve_glExtGetTexSubImageQCOM(void)
{
	/* glExtGetTexSubImageQCOM (GL_QCOM_extended_get) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_QCOM_extended_get")) {
		return get_ext_proc("glExtGetTexSubImageQCOM");
	}

	unsupported("glExtGetTexSubImageQCOM");
	return piglit_dispatch_glExtGetTexSubImageQCOM;
}

static void APIENTRY
stub_glExtGetTexSubImageQCOM(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void * texels)
{
	check_initialized();
	piglit_dispatch_glExtGetTexSubImageQCOM = resolve_glExtGetTexSubImageQCOM();
	piglit_dispatch_glExtGetTexSubImageQCOM(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels);
}

PFNGLEXTGETTEXSUBIMAGEQCOMPROC piglit_dispatch_glExtGetTexSubImageQCOM = stub_glExtGetTexSubImageQCOM;

static void*
resolve_glExtGetTexturesQCOM(void)
{
	/* glExtGetTexturesQCOM (GL_QCOM_extended_get) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_QCOM_extended_get")) {
		return get_ext_proc("glExtGetTexturesQCOM");
	}

	unsupported("glExtGetTexturesQCOM");
	return piglit_dispatch_glExtGetTexturesQCOM;
}

static void APIENTRY
stub_glExtGetTexturesQCOM(GLuint * textures, GLint maxTextures, GLint * numTextures)
{
	check_initialized();
	piglit_dispatch_glExtGetTexturesQCOM = resolve_glExtGetTexturesQCOM();
	piglit_dispatch_glExtGetTexturesQCOM(textures, maxTextures, numTextures);
}

PFNGLEXTGETTEXTURESQCOMPROC piglit_dispatch_glExtGetTexturesQCOM = stub_glExtGetTexturesQCOM;

static void*
resolve_glExtIsProgramBinaryQCOM(void)
{
	/* glExtIsProgramBinaryQCOM (GL_QCOM_extended_get2) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_QCOM_extended_get2")) {
		return get_ext_proc("glExtIsProgramBinaryQCOM");
	}

	unsupported("glExtIsProgramBinaryQCOM");
	return piglit_dispatch_glExtIsProgramBinaryQCOM;
}

static GLboolean APIENTRY
stub_glExtIsProgramBinaryQCOM(GLuint program)
{
	check_initialized();
	piglit_dispatch_glExtIsProgramBinaryQCOM = resolve_glExtIsProgramBinaryQCOM();
	return piglit_dispatch_glExtIsProgramBinaryQCOM(program);
}

PFNGLEXTISPROGRAMBINARYQCOMPROC piglit_dispatch_glExtIsProgramBinaryQCOM = stub_glExtIsProgramBinaryQCOM;

static void*
resolve_glExtTexObjectStateOverrideiQCOM(void)
{
	/* glExtTexObjectStateOverrideiQCOM (GL_QCOM_extended_get) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_QCOM_extended_get")) {
		return get_ext_proc("glExtTexObjectStateOverrideiQCOM");
	}

	unsupported("glExtTexObjectStateOverrideiQCOM");
	return piglit_dispatch_glExtTexObjectStateOverrideiQCOM;
}

static void APIENTRY
stub_glExtTexObjectStateOverrideiQCOM(GLenum target, GLenum pname, GLint param)
{
	check_initialized();
	piglit_dispatch_glExtTexObjectStateOverrideiQCOM = resolve_glExtTexObjectStateOverrideiQCOM();
	piglit_dispatch_glExtTexObjectStateOverrideiQCOM(target, pname, param);
}

PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC piglit_dispatch_glExtTexObjectStateOverrideiQCOM = stub_glExtTexObjectStateOverrideiQCOM;

static void*
resolve_glExtractComponentEXT(void)
{
	/* glExtractComponentEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glExtractComponentEXT");
	}

	unsupported("glExtractComponentEXT");
	return piglit_dispatch_glExtractComponentEXT;
}

static void APIENTRY
stub_glExtractComponentEXT(GLuint res, GLuint src, GLuint num)
{
	check_initialized();
	piglit_dispatch_glExtractComponentEXT = resolve_glExtractComponentEXT();
	piglit_dispatch_glExtractComponentEXT(res, src, num);
}

PFNGLEXTRACTCOMPONENTEXTPROC piglit_dispatch_glExtractComponentEXT = stub_glExtractComponentEXT;

static void*
resolve_glFeedbackBuffer(void)
{
	/* glFeedbackBuffer (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glFeedbackBuffer", 10);
	}

	unsupported("glFeedbackBuffer");
	return piglit_dispatch_glFeedbackBuffer;
}

static void APIENTRY
stub_glFeedbackBuffer(GLsizei size, GLenum type, GLfloat * buffer)
{
	check_initialized();
	piglit_dispatch_glFeedbackBuffer = resolve_glFeedbackBuffer();
	piglit_dispatch_glFeedbackBuffer(size, type, buffer);
}

PFNGLFEEDBACKBUFFERPROC piglit_dispatch_glFeedbackBuffer = stub_glFeedbackBuffer;

static void*
resolve_glFeedbackBufferxOES(void)
{
	/* glFeedbackBufferxOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glFeedbackBufferxOES");
	}

	unsupported("glFeedbackBufferxOES");
	return piglit_dispatch_glFeedbackBufferxOES;
}

static void APIENTRY
stub_glFeedbackBufferxOES(GLsizei n, GLenum type, const GLfixed * buffer)
{
	check_initialized();
	piglit_dispatch_glFeedbackBufferxOES = resolve_glFeedbackBufferxOES();
	piglit_dispatch_glFeedbackBufferxOES(n, type, buffer);
}

PFNGLFEEDBACKBUFFERXOESPROC piglit_dispatch_glFeedbackBufferxOES = stub_glFeedbackBufferxOES;

static void*
resolve_glFenceSync(void)
{
	/* glFenceSync (GL_VERSION_3_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glFenceSync", 32);
	}

	/* glFenceSync (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glFenceSync", 30);
	}

	/* glFenceSync (GL_ARB_sync) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_sync")) {
		return get_ext_proc("glFenceSync");
	}

	/* glFenceSyncAPPLE (GL_APPLE_sync) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_APPLE_sync")) {
		return get_ext_proc("glFenceSyncAPPLE");
	}

	unsupported("glFenceSync");
	return piglit_dispatch_glFenceSync;
}

static GLsync APIENTRY
stub_glFenceSync(GLenum condition, GLbitfield flags)
{
	check_initialized();
	piglit_dispatch_glFenceSync = resolve_glFenceSync();
	return piglit_dispatch_glFenceSync(condition, flags);
}

PFNGLFENCESYNCPROC piglit_dispatch_glFenceSync = stub_glFenceSync;

static void*
resolve_glFinalCombinerInputNV(void)
{
	/* glFinalCombinerInputNV (GL_NV_register_combiners) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_register_combiners")) {
		return get_ext_proc("glFinalCombinerInputNV");
	}

	unsupported("glFinalCombinerInputNV");
	return piglit_dispatch_glFinalCombinerInputNV;
}

static void APIENTRY
stub_glFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
{
	check_initialized();
	piglit_dispatch_glFinalCombinerInputNV = resolve_glFinalCombinerInputNV();
	piglit_dispatch_glFinalCombinerInputNV(variable, input, mapping, componentUsage);
}

PFNGLFINALCOMBINERINPUTNVPROC piglit_dispatch_glFinalCombinerInputNV = stub_glFinalCombinerInputNV;

static void*
resolve_glFinish(void)
{
	/* glFinish (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glFinish", 10);
	}

	/* glFinish (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glFinish", 10);
	}

	/* glFinish (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glFinish", 20);
	}

	unsupported("glFinish");
	return piglit_dispatch_glFinish;
}

static void APIENTRY
stub_glFinish()
{
	check_initialized();
	piglit_dispatch_glFinish = resolve_glFinish();
	piglit_dispatch_glFinish();
}

PFNGLFINISHPROC piglit_dispatch_glFinish = stub_glFinish;

static void*
resolve_glFinishAsyncSGIX(void)
{
	/* glFinishAsyncSGIX (GL_SGIX_async) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_async")) {
		return get_ext_proc("glFinishAsyncSGIX");
	}

	unsupported("glFinishAsyncSGIX");
	return piglit_dispatch_glFinishAsyncSGIX;
}

static GLint APIENTRY
stub_glFinishAsyncSGIX(GLuint * markerp)
{
	check_initialized();
	piglit_dispatch_glFinishAsyncSGIX = resolve_glFinishAsyncSGIX();
	return piglit_dispatch_glFinishAsyncSGIX(markerp);
}

PFNGLFINISHASYNCSGIXPROC piglit_dispatch_glFinishAsyncSGIX = stub_glFinishAsyncSGIX;

static void*
resolve_glFinishFenceAPPLE(void)
{
	/* glFinishFenceAPPLE (GL_APPLE_fence) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_APPLE_fence")) {
		return get_ext_proc("glFinishFenceAPPLE");
	}

	unsupported("glFinishFenceAPPLE");
	return piglit_dispatch_glFinishFenceAPPLE;
}

static void APIENTRY
stub_glFinishFenceAPPLE(GLuint fence)
{
	check_initialized();
	piglit_dispatch_glFinishFenceAPPLE = resolve_glFinishFenceAPPLE();
	piglit_dispatch_glFinishFenceAPPLE(fence);
}

PFNGLFINISHFENCEAPPLEPROC piglit_dispatch_glFinishFenceAPPLE = stub_glFinishFenceAPPLE;

static void*
resolve_glFinishFenceNV(void)
{
	/* glFinishFenceNV (GL_NV_fence) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_NV_fence")) {
		return get_ext_proc("glFinishFenceNV");
	}

	unsupported("glFinishFenceNV");
	return piglit_dispatch_glFinishFenceNV;
}

static void APIENTRY
stub_glFinishFenceNV(GLuint fence)
{
	check_initialized();
	piglit_dispatch_glFinishFenceNV = resolve_glFinishFenceNV();
	piglit_dispatch_glFinishFenceNV(fence);
}

PFNGLFINISHFENCENVPROC piglit_dispatch_glFinishFenceNV = stub_glFinishFenceNV;

static void*
resolve_glFinishObjectAPPLE(void)
{
	/* glFinishObjectAPPLE (GL_APPLE_fence) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_APPLE_fence")) {
		return get_ext_proc("glFinishObjectAPPLE");
	}

	unsupported("glFinishObjectAPPLE");
	return piglit_dispatch_glFinishObjectAPPLE;
}

static void APIENTRY
stub_glFinishObjectAPPLE(GLenum object, GLint name)
{
	check_initialized();
	piglit_dispatch_glFinishObjectAPPLE = resolve_glFinishObjectAPPLE();
	piglit_dispatch_glFinishObjectAPPLE(object, name);
}

PFNGLFINISHOBJECTAPPLEPROC piglit_dispatch_glFinishObjectAPPLE = stub_glFinishObjectAPPLE;

static void*
resolve_glFinishTextureSUNX(void)
{
	/* glFinishTextureSUNX (GL_SUNX_constant_data) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUNX_constant_data")) {
		return get_ext_proc("glFinishTextureSUNX");
	}

	unsupported("glFinishTextureSUNX");
	return piglit_dispatch_glFinishTextureSUNX;
}

static void APIENTRY
stub_glFinishTextureSUNX()
{
	check_initialized();
	piglit_dispatch_glFinishTextureSUNX = resolve_glFinishTextureSUNX();
	piglit_dispatch_glFinishTextureSUNX();
}

PFNGLFINISHTEXTURESUNXPROC piglit_dispatch_glFinishTextureSUNX = stub_glFinishTextureSUNX;

static void*
resolve_glFlush(void)
{
	/* glFlush (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glFlush", 10);
	}

	/* glFlush (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glFlush", 10);
	}

	/* glFlush (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glFlush", 20);
	}

	unsupported("glFlush");
	return piglit_dispatch_glFlush;
}

static void APIENTRY
stub_glFlush()
{
	check_initialized();
	piglit_dispatch_glFlush = resolve_glFlush();
	piglit_dispatch_glFlush();
}

PFNGLFLUSHPROC piglit_dispatch_glFlush = stub_glFlush;

static void*
resolve_glFlushMappedBufferRange(void)
{
	/* glFlushMappedBufferRange (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glFlushMappedBufferRange", 30);
	}

	/* glFlushMappedBufferRange (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glFlushMappedBufferRange", 30);
	}

	/* glFlushMappedBufferRange (GL_ARB_map_buffer_range) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_map_buffer_range")) {
		return get_ext_proc("glFlushMappedBufferRange");
	}

	/* glFlushMappedBufferRangeEXT (GL_EXT_map_buffer_range) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_map_buffer_range")) {
		return get_ext_proc("glFlushMappedBufferRangeEXT");
	}

	/* glFlushMappedBufferRangeAPPLE (GL_APPLE_flush_buffer_range) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_APPLE_flush_buffer_range")) {
		return get_ext_proc("glFlushMappedBufferRangeAPPLE");
	}

	unsupported("glFlushMappedBufferRange");
	return piglit_dispatch_glFlushMappedBufferRange;
}

static void APIENTRY
stub_glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length)
{
	check_initialized();
	piglit_dispatch_glFlushMappedBufferRange = resolve_glFlushMappedBufferRange();
	piglit_dispatch_glFlushMappedBufferRange(target, offset, length);
}

PFNGLFLUSHMAPPEDBUFFERRANGEPROC piglit_dispatch_glFlushMappedBufferRange = stub_glFlushMappedBufferRange;

static void*
resolve_glFlushMappedNamedBufferRangeEXT(void)
{
	/* glFlushMappedNamedBufferRangeEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glFlushMappedNamedBufferRangeEXT");
	}

	unsupported("glFlushMappedNamedBufferRangeEXT");
	return piglit_dispatch_glFlushMappedNamedBufferRangeEXT;
}

static void APIENTRY
stub_glFlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length)
{
	check_initialized();
	piglit_dispatch_glFlushMappedNamedBufferRangeEXT = resolve_glFlushMappedNamedBufferRangeEXT();
	piglit_dispatch_glFlushMappedNamedBufferRangeEXT(buffer, offset, length);
}

PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC piglit_dispatch_glFlushMappedNamedBufferRangeEXT = stub_glFlushMappedNamedBufferRangeEXT;

static void*
resolve_glFlushPixelDataRangeNV(void)
{
	/* glFlushPixelDataRangeNV (GL_NV_pixel_data_range) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_pixel_data_range")) {
		return get_ext_proc("glFlushPixelDataRangeNV");
	}

	unsupported("glFlushPixelDataRangeNV");
	return piglit_dispatch_glFlushPixelDataRangeNV;
}

static void APIENTRY
stub_glFlushPixelDataRangeNV(GLenum target)
{
	check_initialized();
	piglit_dispatch_glFlushPixelDataRangeNV = resolve_glFlushPixelDataRangeNV();
	piglit_dispatch_glFlushPixelDataRangeNV(target);
}

PFNGLFLUSHPIXELDATARANGENVPROC piglit_dispatch_glFlushPixelDataRangeNV = stub_glFlushPixelDataRangeNV;

static void*
resolve_glFlushRasterSGIX(void)
{
	/* glFlushRasterSGIX (GL_SGIX_flush_raster) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_flush_raster")) {
		return get_ext_proc("glFlushRasterSGIX");
	}

	unsupported("glFlushRasterSGIX");
	return piglit_dispatch_glFlushRasterSGIX;
}

static void APIENTRY
stub_glFlushRasterSGIX()
{
	check_initialized();
	piglit_dispatch_glFlushRasterSGIX = resolve_glFlushRasterSGIX();
	piglit_dispatch_glFlushRasterSGIX();
}

PFNGLFLUSHRASTERSGIXPROC piglit_dispatch_glFlushRasterSGIX = stub_glFlushRasterSGIX;

static void*
resolve_glFlushStaticDataIBM(void)
{
	/* glFlushStaticDataIBM (GL_IBM_static_data) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_IBM_static_data")) {
		return get_ext_proc("glFlushStaticDataIBM");
	}

	unsupported("glFlushStaticDataIBM");
	return piglit_dispatch_glFlushStaticDataIBM;
}

static void APIENTRY
stub_glFlushStaticDataIBM(GLenum target)
{
	check_initialized();
	piglit_dispatch_glFlushStaticDataIBM = resolve_glFlushStaticDataIBM();
	piglit_dispatch_glFlushStaticDataIBM(target);
}

PFNGLFLUSHSTATICDATAIBMPROC piglit_dispatch_glFlushStaticDataIBM = stub_glFlushStaticDataIBM;

static void*
resolve_glFlushVertexArrayRangeAPPLE(void)
{
	/* glFlushVertexArrayRangeAPPLE (GL_APPLE_vertex_array_range) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_APPLE_vertex_array_range")) {
		return get_ext_proc("glFlushVertexArrayRangeAPPLE");
	}

	unsupported("glFlushVertexArrayRangeAPPLE");
	return piglit_dispatch_glFlushVertexArrayRangeAPPLE;
}

static void APIENTRY
stub_glFlushVertexArrayRangeAPPLE(GLsizei length, void * pointer)
{
	check_initialized();
	piglit_dispatch_glFlushVertexArrayRangeAPPLE = resolve_glFlushVertexArrayRangeAPPLE();
	piglit_dispatch_glFlushVertexArrayRangeAPPLE(length, pointer);
}

PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC piglit_dispatch_glFlushVertexArrayRangeAPPLE = stub_glFlushVertexArrayRangeAPPLE;

static void*
resolve_glFlushVertexArrayRangeNV(void)
{
	/* glFlushVertexArrayRangeNV (GL_NV_vertex_array_range) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_array_range")) {
		return get_ext_proc("glFlushVertexArrayRangeNV");
	}

	unsupported("glFlushVertexArrayRangeNV");
	return piglit_dispatch_glFlushVertexArrayRangeNV;
}

static void APIENTRY
stub_glFlushVertexArrayRangeNV()
{
	check_initialized();
	piglit_dispatch_glFlushVertexArrayRangeNV = resolve_glFlushVertexArrayRangeNV();
	piglit_dispatch_glFlushVertexArrayRangeNV();
}

PFNGLFLUSHVERTEXARRAYRANGENVPROC piglit_dispatch_glFlushVertexArrayRangeNV = stub_glFlushVertexArrayRangeNV;

static void*
resolve_glFogCoordFormatNV(void)
{
	/* glFogCoordFormatNV (GL_NV_vertex_buffer_unified_memory) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_buffer_unified_memory")) {
		return get_ext_proc("glFogCoordFormatNV");
	}

	unsupported("glFogCoordFormatNV");
	return piglit_dispatch_glFogCoordFormatNV;
}

static void APIENTRY
stub_glFogCoordFormatNV(GLenum type, GLsizei stride)
{
	check_initialized();
	piglit_dispatch_glFogCoordFormatNV = resolve_glFogCoordFormatNV();
	piglit_dispatch_glFogCoordFormatNV(type, stride);
}

PFNGLFOGCOORDFORMATNVPROC piglit_dispatch_glFogCoordFormatNV = stub_glFogCoordFormatNV;

static void*
resolve_glFogCoordPointer(void)
{
	/* glFogCoordPointer (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glFogCoordPointer", 14);
	}

	/* glFogCoordPointerEXT (GL_EXT_fog_coord) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_fog_coord")) {
		return get_ext_proc("glFogCoordPointerEXT");
	}

	unsupported("glFogCoordPointer");
	return piglit_dispatch_glFogCoordPointer;
}

static void APIENTRY
stub_glFogCoordPointer(GLenum type, GLsizei stride, const void * pointer)
{
	check_initialized();
	piglit_dispatch_glFogCoordPointer = resolve_glFogCoordPointer();
	piglit_dispatch_glFogCoordPointer(type, stride, pointer);
}

PFNGLFOGCOORDPOINTERPROC piglit_dispatch_glFogCoordPointer = stub_glFogCoordPointer;

static void*
resolve_glFogCoordPointerListIBM(void)
{
	/* glFogCoordPointerListIBM (GL_IBM_vertex_array_lists) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_IBM_vertex_array_lists")) {
		return get_ext_proc("glFogCoordPointerListIBM");
	}

	unsupported("glFogCoordPointerListIBM");
	return piglit_dispatch_glFogCoordPointerListIBM;
}

static void APIENTRY
stub_glFogCoordPointerListIBM(GLenum type, GLint stride, const void ** pointer, GLint ptrstride)
{
	check_initialized();
	piglit_dispatch_glFogCoordPointerListIBM = resolve_glFogCoordPointerListIBM();
	piglit_dispatch_glFogCoordPointerListIBM(type, stride, pointer, ptrstride);
}

PFNGLFOGCOORDPOINTERLISTIBMPROC piglit_dispatch_glFogCoordPointerListIBM = stub_glFogCoordPointerListIBM;

static void*
resolve_glFogCoordd(void)
{
	/* glFogCoordd (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glFogCoordd", 14);
	}

	/* glFogCoorddEXT (GL_EXT_fog_coord) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_fog_coord")) {
		return get_ext_proc("glFogCoorddEXT");
	}

	unsupported("glFogCoordd");
	return piglit_dispatch_glFogCoordd;
}

static void APIENTRY
stub_glFogCoordd(GLdouble coord)
{
	check_initialized();
	piglit_dispatch_glFogCoordd = resolve_glFogCoordd();
	piglit_dispatch_glFogCoordd(coord);
}

PFNGLFOGCOORDDPROC piglit_dispatch_glFogCoordd = stub_glFogCoordd;

static void*
resolve_glFogCoorddv(void)
{
	/* glFogCoorddv (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glFogCoorddv", 14);
	}

	/* glFogCoorddvEXT (GL_EXT_fog_coord) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_fog_coord")) {
		return get_ext_proc("glFogCoorddvEXT");
	}

	unsupported("glFogCoorddv");
	return piglit_dispatch_glFogCoorddv;
}

static void APIENTRY
stub_glFogCoorddv(const GLdouble * coord)
{
	check_initialized();
	piglit_dispatch_glFogCoorddv = resolve_glFogCoorddv();
	piglit_dispatch_glFogCoorddv(coord);
}

PFNGLFOGCOORDDVPROC piglit_dispatch_glFogCoorddv = stub_glFogCoorddv;

static void*
resolve_glFogCoordf(void)
{
	/* glFogCoordf (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glFogCoordf", 14);
	}

	/* glFogCoordfEXT (GL_EXT_fog_coord) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_fog_coord")) {
		return get_ext_proc("glFogCoordfEXT");
	}

	unsupported("glFogCoordf");
	return piglit_dispatch_glFogCoordf;
}

static void APIENTRY
stub_glFogCoordf(GLfloat coord)
{
	check_initialized();
	piglit_dispatch_glFogCoordf = resolve_glFogCoordf();
	piglit_dispatch_glFogCoordf(coord);
}

PFNGLFOGCOORDFPROC piglit_dispatch_glFogCoordf = stub_glFogCoordf;

static void*
resolve_glFogCoordfv(void)
{
	/* glFogCoordfv (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glFogCoordfv", 14);
	}

	/* glFogCoordfvEXT (GL_EXT_fog_coord) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_fog_coord")) {
		return get_ext_proc("glFogCoordfvEXT");
	}

	unsupported("glFogCoordfv");
	return piglit_dispatch_glFogCoordfv;
}

static void APIENTRY
stub_glFogCoordfv(const GLfloat * coord)
{
	check_initialized();
	piglit_dispatch_glFogCoordfv = resolve_glFogCoordfv();
	piglit_dispatch_glFogCoordfv(coord);
}

PFNGLFOGCOORDFVPROC piglit_dispatch_glFogCoordfv = stub_glFogCoordfv;

static void*
resolve_glFogCoordhNV(void)
{
	/* glFogCoordhNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glFogCoordhNV");
	}

	unsupported("glFogCoordhNV");
	return piglit_dispatch_glFogCoordhNV;
}

static void APIENTRY
stub_glFogCoordhNV(GLhalfNV fog)
{
	check_initialized();
	piglit_dispatch_glFogCoordhNV = resolve_glFogCoordhNV();
	piglit_dispatch_glFogCoordhNV(fog);
}

PFNGLFOGCOORDHNVPROC piglit_dispatch_glFogCoordhNV = stub_glFogCoordhNV;

static void*
resolve_glFogCoordhvNV(void)
{
	/* glFogCoordhvNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glFogCoordhvNV");
	}

	unsupported("glFogCoordhvNV");
	return piglit_dispatch_glFogCoordhvNV;
}

static void APIENTRY
stub_glFogCoordhvNV(const GLhalfNV * fog)
{
	check_initialized();
	piglit_dispatch_glFogCoordhvNV = resolve_glFogCoordhvNV();
	piglit_dispatch_glFogCoordhvNV(fog);
}

PFNGLFOGCOORDHVNVPROC piglit_dispatch_glFogCoordhvNV = stub_glFogCoordhvNV;

static void*
resolve_glFogFuncSGIS(void)
{
	/* glFogFuncSGIS (GL_SGIS_fog_function) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIS_fog_function")) {
		return get_ext_proc("glFogFuncSGIS");
	}

	unsupported("glFogFuncSGIS");
	return piglit_dispatch_glFogFuncSGIS;
}

static void APIENTRY
stub_glFogFuncSGIS(GLsizei n, const GLfloat * points)
{
	check_initialized();
	piglit_dispatch_glFogFuncSGIS = resolve_glFogFuncSGIS();
	piglit_dispatch_glFogFuncSGIS(n, points);
}

PFNGLFOGFUNCSGISPROC piglit_dispatch_glFogFuncSGIS = stub_glFogFuncSGIS;

static void*
resolve_glFogf(void)
{
	/* glFogf (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glFogf", 10);
	}

	/* glFogf (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glFogf", 10);
	}

	unsupported("glFogf");
	return piglit_dispatch_glFogf;
}

static void APIENTRY
stub_glFogf(GLenum pname, GLfloat param)
{
	check_initialized();
	piglit_dispatch_glFogf = resolve_glFogf();
	piglit_dispatch_glFogf(pname, param);
}

PFNGLFOGFPROC piglit_dispatch_glFogf = stub_glFogf;

static void*
resolve_glFogfv(void)
{
	/* glFogfv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glFogfv", 10);
	}

	/* glFogfv (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glFogfv", 10);
	}

	unsupported("glFogfv");
	return piglit_dispatch_glFogfv;
}

static void APIENTRY
stub_glFogfv(GLenum pname, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glFogfv = resolve_glFogfv();
	piglit_dispatch_glFogfv(pname, params);
}

PFNGLFOGFVPROC piglit_dispatch_glFogfv = stub_glFogfv;

static void*
resolve_glFogi(void)
{
	/* glFogi (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glFogi", 10);
	}

	unsupported("glFogi");
	return piglit_dispatch_glFogi;
}

static void APIENTRY
stub_glFogi(GLenum pname, GLint param)
{
	check_initialized();
	piglit_dispatch_glFogi = resolve_glFogi();
	piglit_dispatch_glFogi(pname, param);
}

PFNGLFOGIPROC piglit_dispatch_glFogi = stub_glFogi;

static void*
resolve_glFogiv(void)
{
	/* glFogiv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glFogiv", 10);
	}

	unsupported("glFogiv");
	return piglit_dispatch_glFogiv;
}

static void APIENTRY
stub_glFogiv(GLenum pname, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glFogiv = resolve_glFogiv();
	piglit_dispatch_glFogiv(pname, params);
}

PFNGLFOGIVPROC piglit_dispatch_glFogiv = stub_glFogiv;

static void*
resolve_glFogx(void)
{
	/* glFogx (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glFogx", 10);
	}

	unsupported("glFogx");
	return piglit_dispatch_glFogx;
}

static void APIENTRY
stub_glFogx(GLenum pname, GLfixed param)
{
	check_initialized();
	piglit_dispatch_glFogx = resolve_glFogx();
	piglit_dispatch_glFogx(pname, param);
}

PFNGLFOGXPROC piglit_dispatch_glFogx = stub_glFogx;

static void*
resolve_glFogxOES(void)
{
	/* glFogxOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glFogxOES");
	}

	unsupported("glFogxOES");
	return piglit_dispatch_glFogxOES;
}

static void APIENTRY
stub_glFogxOES(GLenum pname, GLfixed param)
{
	check_initialized();
	piglit_dispatch_glFogxOES = resolve_glFogxOES();
	piglit_dispatch_glFogxOES(pname, param);
}

PFNGLFOGXOESPROC piglit_dispatch_glFogxOES = stub_glFogxOES;

static void*
resolve_glFogxv(void)
{
	/* glFogxv (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glFogxv", 10);
	}

	unsupported("glFogxv");
	return piglit_dispatch_glFogxv;
}

static void APIENTRY
stub_glFogxv(GLenum pname, const GLfixed * param)
{
	check_initialized();
	piglit_dispatch_glFogxv = resolve_glFogxv();
	piglit_dispatch_glFogxv(pname, param);
}

PFNGLFOGXVPROC piglit_dispatch_glFogxv = stub_glFogxv;

static void*
resolve_glFogxvOES(void)
{
	/* glFogxvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glFogxvOES");
	}

	unsupported("glFogxvOES");
	return piglit_dispatch_glFogxvOES;
}

static void APIENTRY
stub_glFogxvOES(GLenum pname, const GLfixed * param)
{
	check_initialized();
	piglit_dispatch_glFogxvOES = resolve_glFogxvOES();
	piglit_dispatch_glFogxvOES(pname, param);
}

PFNGLFOGXVOESPROC piglit_dispatch_glFogxvOES = stub_glFogxvOES;

static void*
resolve_glFragmentColorMaterialSGIX(void)
{
	/* glFragmentColorMaterialSGIX (GL_SGIX_fragment_lighting) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_fragment_lighting")) {
		return get_ext_proc("glFragmentColorMaterialSGIX");
	}

	unsupported("glFragmentColorMaterialSGIX");
	return piglit_dispatch_glFragmentColorMaterialSGIX;
}

static void APIENTRY
stub_glFragmentColorMaterialSGIX(GLenum face, GLenum mode)
{
	check_initialized();
	piglit_dispatch_glFragmentColorMaterialSGIX = resolve_glFragmentColorMaterialSGIX();
	piglit_dispatch_glFragmentColorMaterialSGIX(face, mode);
}

PFNGLFRAGMENTCOLORMATERIALSGIXPROC piglit_dispatch_glFragmentColorMaterialSGIX = stub_glFragmentColorMaterialSGIX;

static void*
resolve_glFragmentLightModelfSGIX(void)
{
	/* glFragmentLightModelfSGIX (GL_SGIX_fragment_lighting) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_fragment_lighting")) {
		return get_ext_proc("glFragmentLightModelfSGIX");
	}

	unsupported("glFragmentLightModelfSGIX");
	return piglit_dispatch_glFragmentLightModelfSGIX;
}

static void APIENTRY
stub_glFragmentLightModelfSGIX(GLenum pname, GLfloat param)
{
	check_initialized();
	piglit_dispatch_glFragmentLightModelfSGIX = resolve_glFragmentLightModelfSGIX();
	piglit_dispatch_glFragmentLightModelfSGIX(pname, param);
}

PFNGLFRAGMENTLIGHTMODELFSGIXPROC piglit_dispatch_glFragmentLightModelfSGIX = stub_glFragmentLightModelfSGIX;

static void*
resolve_glFragmentLightModelfvSGIX(void)
{
	/* glFragmentLightModelfvSGIX (GL_SGIX_fragment_lighting) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_fragment_lighting")) {
		return get_ext_proc("glFragmentLightModelfvSGIX");
	}

	unsupported("glFragmentLightModelfvSGIX");
	return piglit_dispatch_glFragmentLightModelfvSGIX;
}

static void APIENTRY
stub_glFragmentLightModelfvSGIX(GLenum pname, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glFragmentLightModelfvSGIX = resolve_glFragmentLightModelfvSGIX();
	piglit_dispatch_glFragmentLightModelfvSGIX(pname, params);
}

PFNGLFRAGMENTLIGHTMODELFVSGIXPROC piglit_dispatch_glFragmentLightModelfvSGIX = stub_glFragmentLightModelfvSGIX;

static void*
resolve_glFragmentLightModeliSGIX(void)
{
	/* glFragmentLightModeliSGIX (GL_SGIX_fragment_lighting) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_fragment_lighting")) {
		return get_ext_proc("glFragmentLightModeliSGIX");
	}

	unsupported("glFragmentLightModeliSGIX");
	return piglit_dispatch_glFragmentLightModeliSGIX;
}

static void APIENTRY
stub_glFragmentLightModeliSGIX(GLenum pname, GLint param)
{
	check_initialized();
	piglit_dispatch_glFragmentLightModeliSGIX = resolve_glFragmentLightModeliSGIX();
	piglit_dispatch_glFragmentLightModeliSGIX(pname, param);
}

PFNGLFRAGMENTLIGHTMODELISGIXPROC piglit_dispatch_glFragmentLightModeliSGIX = stub_glFragmentLightModeliSGIX;

static void*
resolve_glFragmentLightModelivSGIX(void)
{
	/* glFragmentLightModelivSGIX (GL_SGIX_fragment_lighting) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_fragment_lighting")) {
		return get_ext_proc("glFragmentLightModelivSGIX");
	}

	unsupported("glFragmentLightModelivSGIX");
	return piglit_dispatch_glFragmentLightModelivSGIX;
}

static void APIENTRY
stub_glFragmentLightModelivSGIX(GLenum pname, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glFragmentLightModelivSGIX = resolve_glFragmentLightModelivSGIX();
	piglit_dispatch_glFragmentLightModelivSGIX(pname, params);
}

PFNGLFRAGMENTLIGHTMODELIVSGIXPROC piglit_dispatch_glFragmentLightModelivSGIX = stub_glFragmentLightModelivSGIX;

static void*
resolve_glFragmentLightfSGIX(void)
{
	/* glFragmentLightfSGIX (GL_SGIX_fragment_lighting) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_fragment_lighting")) {
		return get_ext_proc("glFragmentLightfSGIX");
	}

	unsupported("glFragmentLightfSGIX");
	return piglit_dispatch_glFragmentLightfSGIX;
}

static void APIENTRY
stub_glFragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param)
{
	check_initialized();
	piglit_dispatch_glFragmentLightfSGIX = resolve_glFragmentLightfSGIX();
	piglit_dispatch_glFragmentLightfSGIX(light, pname, param);
}

PFNGLFRAGMENTLIGHTFSGIXPROC piglit_dispatch_glFragmentLightfSGIX = stub_glFragmentLightfSGIX;

static void*
resolve_glFragmentLightfvSGIX(void)
{
	/* glFragmentLightfvSGIX (GL_SGIX_fragment_lighting) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_fragment_lighting")) {
		return get_ext_proc("glFragmentLightfvSGIX");
	}

	unsupported("glFragmentLightfvSGIX");
	return piglit_dispatch_glFragmentLightfvSGIX;
}

static void APIENTRY
stub_glFragmentLightfvSGIX(GLenum light, GLenum pname, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glFragmentLightfvSGIX = resolve_glFragmentLightfvSGIX();
	piglit_dispatch_glFragmentLightfvSGIX(light, pname, params);
}

PFNGLFRAGMENTLIGHTFVSGIXPROC piglit_dispatch_glFragmentLightfvSGIX = stub_glFragmentLightfvSGIX;

static void*
resolve_glFragmentLightiSGIX(void)
{
	/* glFragmentLightiSGIX (GL_SGIX_fragment_lighting) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_fragment_lighting")) {
		return get_ext_proc("glFragmentLightiSGIX");
	}

	unsupported("glFragmentLightiSGIX");
	return piglit_dispatch_glFragmentLightiSGIX;
}

static void APIENTRY
stub_glFragmentLightiSGIX(GLenum light, GLenum pname, GLint param)
{
	check_initialized();
	piglit_dispatch_glFragmentLightiSGIX = resolve_glFragmentLightiSGIX();
	piglit_dispatch_glFragmentLightiSGIX(light, pname, param);
}

PFNGLFRAGMENTLIGHTISGIXPROC piglit_dispatch_glFragmentLightiSGIX = stub_glFragmentLightiSGIX;

static void*
resolve_glFragmentLightivSGIX(void)
{
	/* glFragmentLightivSGIX (GL_SGIX_fragment_lighting) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_fragment_lighting")) {
		return get_ext_proc("glFragmentLightivSGIX");
	}

	unsupported("glFragmentLightivSGIX");
	return piglit_dispatch_glFragmentLightivSGIX;
}

static void APIENTRY
stub_glFragmentLightivSGIX(GLenum light, GLenum pname, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glFragmentLightivSGIX = resolve_glFragmentLightivSGIX();
	piglit_dispatch_glFragmentLightivSGIX(light, pname, params);
}

PFNGLFRAGMENTLIGHTIVSGIXPROC piglit_dispatch_glFragmentLightivSGIX = stub_glFragmentLightivSGIX;

static void*
resolve_glFragmentMaterialfSGIX(void)
{
	/* glFragmentMaterialfSGIX (GL_SGIX_fragment_lighting) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_fragment_lighting")) {
		return get_ext_proc("glFragmentMaterialfSGIX");
	}

	unsupported("glFragmentMaterialfSGIX");
	return piglit_dispatch_glFragmentMaterialfSGIX;
}

static void APIENTRY
stub_glFragmentMaterialfSGIX(GLenum face, GLenum pname, GLfloat param)
{
	check_initialized();
	piglit_dispatch_glFragmentMaterialfSGIX = resolve_glFragmentMaterialfSGIX();
	piglit_dispatch_glFragmentMaterialfSGIX(face, pname, param);
}

PFNGLFRAGMENTMATERIALFSGIXPROC piglit_dispatch_glFragmentMaterialfSGIX = stub_glFragmentMaterialfSGIX;

static void*
resolve_glFragmentMaterialfvSGIX(void)
{
	/* glFragmentMaterialfvSGIX (GL_SGIX_fragment_lighting) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_fragment_lighting")) {
		return get_ext_proc("glFragmentMaterialfvSGIX");
	}

	unsupported("glFragmentMaterialfvSGIX");
	return piglit_dispatch_glFragmentMaterialfvSGIX;
}

static void APIENTRY
stub_glFragmentMaterialfvSGIX(GLenum face, GLenum pname, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glFragmentMaterialfvSGIX = resolve_glFragmentMaterialfvSGIX();
	piglit_dispatch_glFragmentMaterialfvSGIX(face, pname, params);
}

PFNGLFRAGMENTMATERIALFVSGIXPROC piglit_dispatch_glFragmentMaterialfvSGIX = stub_glFragmentMaterialfvSGIX;

static void*
resolve_glFragmentMaterialiSGIX(void)
{
	/* glFragmentMaterialiSGIX (GL_SGIX_fragment_lighting) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_fragment_lighting")) {
		return get_ext_proc("glFragmentMaterialiSGIX");
	}

	unsupported("glFragmentMaterialiSGIX");
	return piglit_dispatch_glFragmentMaterialiSGIX;
}

static void APIENTRY
stub_glFragmentMaterialiSGIX(GLenum face, GLenum pname, GLint param)
{
	check_initialized();
	piglit_dispatch_glFragmentMaterialiSGIX = resolve_glFragmentMaterialiSGIX();
	piglit_dispatch_glFragmentMaterialiSGIX(face, pname, param);
}

PFNGLFRAGMENTMATERIALISGIXPROC piglit_dispatch_glFragmentMaterialiSGIX = stub_glFragmentMaterialiSGIX;

static void*
resolve_glFragmentMaterialivSGIX(void)
{
	/* glFragmentMaterialivSGIX (GL_SGIX_fragment_lighting) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_fragment_lighting")) {
		return get_ext_proc("glFragmentMaterialivSGIX");
	}

	unsupported("glFragmentMaterialivSGIX");
	return piglit_dispatch_glFragmentMaterialivSGIX;
}

static void APIENTRY
stub_glFragmentMaterialivSGIX(GLenum face, GLenum pname, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glFragmentMaterialivSGIX = resolve_glFragmentMaterialivSGIX();
	piglit_dispatch_glFragmentMaterialivSGIX(face, pname, params);
}

PFNGLFRAGMENTMATERIALIVSGIXPROC piglit_dispatch_glFragmentMaterialivSGIX = stub_glFragmentMaterialivSGIX;

static void*
resolve_glFrameTerminatorGREMEDY(void)
{
	/* glFrameTerminatorGREMEDY (GL_GREMEDY_frame_terminator) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_GREMEDY_frame_terminator")) {
		return get_ext_proc("glFrameTerminatorGREMEDY");
	}

	unsupported("glFrameTerminatorGREMEDY");
	return piglit_dispatch_glFrameTerminatorGREMEDY;
}

static void APIENTRY
stub_glFrameTerminatorGREMEDY()
{
	check_initialized();
	piglit_dispatch_glFrameTerminatorGREMEDY = resolve_glFrameTerminatorGREMEDY();
	piglit_dispatch_glFrameTerminatorGREMEDY();
}

PFNGLFRAMETERMINATORGREMEDYPROC piglit_dispatch_glFrameTerminatorGREMEDY = stub_glFrameTerminatorGREMEDY;

static void*
resolve_glFrameZoomSGIX(void)
{
	/* glFrameZoomSGIX (GL_SGIX_framezoom) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_framezoom")) {
		return get_ext_proc("glFrameZoomSGIX");
	}

	unsupported("glFrameZoomSGIX");
	return piglit_dispatch_glFrameZoomSGIX;
}

static void APIENTRY
stub_glFrameZoomSGIX(GLint factor)
{
	check_initialized();
	piglit_dispatch_glFrameZoomSGIX = resolve_glFrameZoomSGIX();
	piglit_dispatch_glFrameZoomSGIX(factor);
}

PFNGLFRAMEZOOMSGIXPROC piglit_dispatch_glFrameZoomSGIX = stub_glFrameZoomSGIX;

static void*
resolve_glFramebufferDrawBufferEXT(void)
{
	/* glFramebufferDrawBufferEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glFramebufferDrawBufferEXT");
	}

	unsupported("glFramebufferDrawBufferEXT");
	return piglit_dispatch_glFramebufferDrawBufferEXT;
}

static void APIENTRY
stub_glFramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode)
{
	check_initialized();
	piglit_dispatch_glFramebufferDrawBufferEXT = resolve_glFramebufferDrawBufferEXT();
	piglit_dispatch_glFramebufferDrawBufferEXT(framebuffer, mode);
}

PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC piglit_dispatch_glFramebufferDrawBufferEXT = stub_glFramebufferDrawBufferEXT;

static void*
resolve_glFramebufferDrawBuffersEXT(void)
{
	/* glFramebufferDrawBuffersEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glFramebufferDrawBuffersEXT");
	}

	unsupported("glFramebufferDrawBuffersEXT");
	return piglit_dispatch_glFramebufferDrawBuffersEXT;
}

static void APIENTRY
stub_glFramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum * bufs)
{
	check_initialized();
	piglit_dispatch_glFramebufferDrawBuffersEXT = resolve_glFramebufferDrawBuffersEXT();
	piglit_dispatch_glFramebufferDrawBuffersEXT(framebuffer, n, bufs);
}

PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC piglit_dispatch_glFramebufferDrawBuffersEXT = stub_glFramebufferDrawBuffersEXT;

static void*
resolve_glFramebufferParameteri(void)
{
	/* glFramebufferParameteri (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glFramebufferParameteri", 43);
	}

	/* glFramebufferParameteri (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glFramebufferParameteri", 31);
	}

	/* glFramebufferParameteri (GL_ARB_framebuffer_no_attachments) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_framebuffer_no_attachments")) {
		return get_ext_proc("glFramebufferParameteri");
	}

	unsupported("glFramebufferParameteri");
	return piglit_dispatch_glFramebufferParameteri;
}

static void APIENTRY
stub_glFramebufferParameteri(GLenum target, GLenum pname, GLint param)
{
	check_initialized();
	piglit_dispatch_glFramebufferParameteri = resolve_glFramebufferParameteri();
	piglit_dispatch_glFramebufferParameteri(target, pname, param);
}

PFNGLFRAMEBUFFERPARAMETERIPROC piglit_dispatch_glFramebufferParameteri = stub_glFramebufferParameteri;

static void*
resolve_glFramebufferReadBufferEXT(void)
{
	/* glFramebufferReadBufferEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glFramebufferReadBufferEXT");
	}

	unsupported("glFramebufferReadBufferEXT");
	return piglit_dispatch_glFramebufferReadBufferEXT;
}

static void APIENTRY
stub_glFramebufferReadBufferEXT(GLuint framebuffer, GLenum mode)
{
	check_initialized();
	piglit_dispatch_glFramebufferReadBufferEXT = resolve_glFramebufferReadBufferEXT();
	piglit_dispatch_glFramebufferReadBufferEXT(framebuffer, mode);
}

PFNGLFRAMEBUFFERREADBUFFEREXTPROC piglit_dispatch_glFramebufferReadBufferEXT = stub_glFramebufferReadBufferEXT;

static void*
resolve_glFramebufferRenderbuffer(void)
{
	/* glFramebufferRenderbuffer (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glFramebufferRenderbuffer", 30);
	}

	/* glFramebufferRenderbuffer (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glFramebufferRenderbuffer", 20);
	}

	/* glFramebufferRenderbuffer (GL_ARB_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_framebuffer_object")) {
		return get_ext_proc("glFramebufferRenderbuffer");
	}

	/* glFramebufferRenderbufferEXT (GL_EXT_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_framebuffer_object")) {
		return get_ext_proc("glFramebufferRenderbufferEXT");
	}

	unsupported("glFramebufferRenderbuffer");
	return piglit_dispatch_glFramebufferRenderbuffer;
}

static void APIENTRY
stub_glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
	check_initialized();
	piglit_dispatch_glFramebufferRenderbuffer = resolve_glFramebufferRenderbuffer();
	piglit_dispatch_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
}

PFNGLFRAMEBUFFERRENDERBUFFERPROC piglit_dispatch_glFramebufferRenderbuffer = stub_glFramebufferRenderbuffer;

static void*
resolve_glFramebufferRenderbufferOES(void)
{
	/* glFramebufferRenderbufferOES (GL_OES_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_framebuffer_object")) {
		return get_ext_proc("glFramebufferRenderbufferOES");
	}

	unsupported("glFramebufferRenderbufferOES");
	return piglit_dispatch_glFramebufferRenderbufferOES;
}

static void APIENTRY
stub_glFramebufferRenderbufferOES(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
	check_initialized();
	piglit_dispatch_glFramebufferRenderbufferOES = resolve_glFramebufferRenderbufferOES();
	piglit_dispatch_glFramebufferRenderbufferOES(target, attachment, renderbuffertarget, renderbuffer);
}

PFNGLFRAMEBUFFERRENDERBUFFEROESPROC piglit_dispatch_glFramebufferRenderbufferOES = stub_glFramebufferRenderbufferOES;

static void*
resolve_glFramebufferTexture(void)
{
	/* glFramebufferTexture (GL_VERSION_3_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glFramebufferTexture", 32);
	}

	/* glFramebufferTextureARB (GL_ARB_geometry_shader4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_geometry_shader4")) {
		return get_ext_proc("glFramebufferTextureARB");
	}

	/* glFramebufferTextureEXT (GL_EXT_geometry_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_geometry_shader")) {
		return get_ext_proc("glFramebufferTextureEXT");
	}

	/* glFramebufferTextureEXT (GL_NV_geometry_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_geometry_program4")) {
		return get_ext_proc("glFramebufferTextureEXT");
	}

	unsupported("glFramebufferTexture");
	return piglit_dispatch_glFramebufferTexture;
}

static void APIENTRY
stub_glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level)
{
	check_initialized();
	piglit_dispatch_glFramebufferTexture = resolve_glFramebufferTexture();
	piglit_dispatch_glFramebufferTexture(target, attachment, texture, level);
}

PFNGLFRAMEBUFFERTEXTUREPROC piglit_dispatch_glFramebufferTexture = stub_glFramebufferTexture;

static void*
resolve_glFramebufferTexture1D(void)
{
	/* glFramebufferTexture1D (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glFramebufferTexture1D", 30);
	}

	/* glFramebufferTexture1D (GL_ARB_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_framebuffer_object")) {
		return get_ext_proc("glFramebufferTexture1D");
	}

	/* glFramebufferTexture1DEXT (GL_EXT_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_framebuffer_object")) {
		return get_ext_proc("glFramebufferTexture1DEXT");
	}

	unsupported("glFramebufferTexture1D");
	return piglit_dispatch_glFramebufferTexture1D;
}

static void APIENTRY
stub_glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
	check_initialized();
	piglit_dispatch_glFramebufferTexture1D = resolve_glFramebufferTexture1D();
	piglit_dispatch_glFramebufferTexture1D(target, attachment, textarget, texture, level);
}

PFNGLFRAMEBUFFERTEXTURE1DPROC piglit_dispatch_glFramebufferTexture1D = stub_glFramebufferTexture1D;

static void*
resolve_glFramebufferTexture2D(void)
{
	/* glFramebufferTexture2D (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glFramebufferTexture2D", 30);
	}

	/* glFramebufferTexture2D (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glFramebufferTexture2D", 20);
	}

	/* glFramebufferTexture2D (GL_ARB_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_framebuffer_object")) {
		return get_ext_proc("glFramebufferTexture2D");
	}

	/* glFramebufferTexture2DEXT (GL_EXT_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_framebuffer_object")) {
		return get_ext_proc("glFramebufferTexture2DEXT");
	}

	unsupported("glFramebufferTexture2D");
	return piglit_dispatch_glFramebufferTexture2D;
}

static void APIENTRY
stub_glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
	check_initialized();
	piglit_dispatch_glFramebufferTexture2D = resolve_glFramebufferTexture2D();
	piglit_dispatch_glFramebufferTexture2D(target, attachment, textarget, texture, level);
}

PFNGLFRAMEBUFFERTEXTURE2DPROC piglit_dispatch_glFramebufferTexture2D = stub_glFramebufferTexture2D;

static void*
resolve_glFramebufferTexture2DMultisampleEXT(void)
{
	/* glFramebufferTexture2DMultisampleEXT (GL_EXT_multisampled_render_to_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_multisampled_render_to_texture")) {
		return get_ext_proc("glFramebufferTexture2DMultisampleEXT");
	}

	unsupported("glFramebufferTexture2DMultisampleEXT");
	return piglit_dispatch_glFramebufferTexture2DMultisampleEXT;
}

static void APIENTRY
stub_glFramebufferTexture2DMultisampleEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
{
	check_initialized();
	piglit_dispatch_glFramebufferTexture2DMultisampleEXT = resolve_glFramebufferTexture2DMultisampleEXT();
	piglit_dispatch_glFramebufferTexture2DMultisampleEXT(target, attachment, textarget, texture, level, samples);
}

PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC piglit_dispatch_glFramebufferTexture2DMultisampleEXT = stub_glFramebufferTexture2DMultisampleEXT;

static void*
resolve_glFramebufferTexture2DMultisampleIMG(void)
{
	/* glFramebufferTexture2DMultisampleIMG (GL_IMG_multisampled_render_to_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_IMG_multisampled_render_to_texture")) {
		return get_ext_proc("glFramebufferTexture2DMultisampleIMG");
	}

	unsupported("glFramebufferTexture2DMultisampleIMG");
	return piglit_dispatch_glFramebufferTexture2DMultisampleIMG;
}

static void APIENTRY
stub_glFramebufferTexture2DMultisampleIMG(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
{
	check_initialized();
	piglit_dispatch_glFramebufferTexture2DMultisampleIMG = resolve_glFramebufferTexture2DMultisampleIMG();
	piglit_dispatch_glFramebufferTexture2DMultisampleIMG(target, attachment, textarget, texture, level, samples);
}

PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC piglit_dispatch_glFramebufferTexture2DMultisampleIMG = stub_glFramebufferTexture2DMultisampleIMG;

static void*
resolve_glFramebufferTexture2DOES(void)
{
	/* glFramebufferTexture2DOES (GL_OES_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_framebuffer_object")) {
		return get_ext_proc("glFramebufferTexture2DOES");
	}

	unsupported("glFramebufferTexture2DOES");
	return piglit_dispatch_glFramebufferTexture2DOES;
}

static void APIENTRY
stub_glFramebufferTexture2DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
	check_initialized();
	piglit_dispatch_glFramebufferTexture2DOES = resolve_glFramebufferTexture2DOES();
	piglit_dispatch_glFramebufferTexture2DOES(target, attachment, textarget, texture, level);
}

PFNGLFRAMEBUFFERTEXTURE2DOESPROC piglit_dispatch_glFramebufferTexture2DOES = stub_glFramebufferTexture2DOES;

static void*
resolve_glFramebufferTexture3D(void)
{
	/* glFramebufferTexture3D (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glFramebufferTexture3D", 30);
	}

	/* glFramebufferTexture3D (GL_ARB_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_framebuffer_object")) {
		return get_ext_proc("glFramebufferTexture3D");
	}

	/* glFramebufferTexture3DOES (GL_OES_texture_3D) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_OES_texture_3D")) {
		return get_ext_proc("glFramebufferTexture3DOES");
	}

	/* glFramebufferTexture3DEXT (GL_EXT_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_framebuffer_object")) {
		return get_ext_proc("glFramebufferTexture3DEXT");
	}

	unsupported("glFramebufferTexture3D");
	return piglit_dispatch_glFramebufferTexture3D;
}

static void APIENTRY
stub_glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
	check_initialized();
	piglit_dispatch_glFramebufferTexture3D = resolve_glFramebufferTexture3D();
	piglit_dispatch_glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset);
}

PFNGLFRAMEBUFFERTEXTURE3DPROC piglit_dispatch_glFramebufferTexture3D = stub_glFramebufferTexture3D;

static void*
resolve_glFramebufferTextureFaceARB(void)
{
	/* glFramebufferTextureFaceARB (GL_ARB_geometry_shader4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_geometry_shader4")) {
		return get_ext_proc("glFramebufferTextureFaceARB");
	}

	/* glFramebufferTextureFaceEXT (GL_NV_geometry_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_geometry_program4")) {
		return get_ext_proc("glFramebufferTextureFaceEXT");
	}

	unsupported("glFramebufferTextureFaceARB");
	return piglit_dispatch_glFramebufferTextureFaceARB;
}

static void APIENTRY
stub_glFramebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
	check_initialized();
	piglit_dispatch_glFramebufferTextureFaceARB = resolve_glFramebufferTextureFaceARB();
	piglit_dispatch_glFramebufferTextureFaceARB(target, attachment, texture, level, face);
}

PFNGLFRAMEBUFFERTEXTUREFACEARBPROC piglit_dispatch_glFramebufferTextureFaceARB = stub_glFramebufferTextureFaceARB;

static void*
resolve_glFramebufferTextureLayer(void)
{
	/* glFramebufferTextureLayer (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glFramebufferTextureLayer", 30);
	}

	/* glFramebufferTextureLayer (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glFramebufferTextureLayer", 30);
	}

	/* glFramebufferTextureLayer (GL_ARB_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_framebuffer_object")) {
		return get_ext_proc("glFramebufferTextureLayer");
	}

	/* glFramebufferTextureLayerARB (GL_ARB_geometry_shader4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_geometry_shader4")) {
		return get_ext_proc("glFramebufferTextureLayerARB");
	}

	/* glFramebufferTextureLayerEXT (GL_NV_geometry_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_geometry_program4")) {
		return get_ext_proc("glFramebufferTextureLayerEXT");
	}

	unsupported("glFramebufferTextureLayer");
	return piglit_dispatch_glFramebufferTextureLayer;
}

static void APIENTRY
stub_glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
	check_initialized();
	piglit_dispatch_glFramebufferTextureLayer = resolve_glFramebufferTextureLayer();
	piglit_dispatch_glFramebufferTextureLayer(target, attachment, texture, level, layer);
}

PFNGLFRAMEBUFFERTEXTURELAYERPROC piglit_dispatch_glFramebufferTextureLayer = stub_glFramebufferTextureLayer;

static void*
resolve_glFreeObjectBufferATI(void)
{
	/* glFreeObjectBufferATI (GL_ATI_vertex_array_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_array_object")) {
		return get_ext_proc("glFreeObjectBufferATI");
	}

	unsupported("glFreeObjectBufferATI");
	return piglit_dispatch_glFreeObjectBufferATI;
}

static void APIENTRY
stub_glFreeObjectBufferATI(GLuint buffer)
{
	check_initialized();
	piglit_dispatch_glFreeObjectBufferATI = resolve_glFreeObjectBufferATI();
	piglit_dispatch_glFreeObjectBufferATI(buffer);
}

PFNGLFREEOBJECTBUFFERATIPROC piglit_dispatch_glFreeObjectBufferATI = stub_glFreeObjectBufferATI;

static void*
resolve_glFrontFace(void)
{
	/* glFrontFace (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glFrontFace", 10);
	}

	/* glFrontFace (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glFrontFace", 10);
	}

	/* glFrontFace (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glFrontFace", 20);
	}

	unsupported("glFrontFace");
	return piglit_dispatch_glFrontFace;
}

static void APIENTRY
stub_glFrontFace(GLenum mode)
{
	check_initialized();
	piglit_dispatch_glFrontFace = resolve_glFrontFace();
	piglit_dispatch_glFrontFace(mode);
}

PFNGLFRONTFACEPROC piglit_dispatch_glFrontFace = stub_glFrontFace;

static void*
resolve_glFrustum(void)
{
	/* glFrustum (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glFrustum", 10);
	}

	unsupported("glFrustum");
	return piglit_dispatch_glFrustum;
}

static void APIENTRY
stub_glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
	check_initialized();
	piglit_dispatch_glFrustum = resolve_glFrustum();
	piglit_dispatch_glFrustum(left, right, bottom, top, zNear, zFar);
}

PFNGLFRUSTUMPROC piglit_dispatch_glFrustum = stub_glFrustum;

static void*
resolve_glFrustumf(void)
{
	/* glFrustumf (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glFrustumf", 10);
	}

	unsupported("glFrustumf");
	return piglit_dispatch_glFrustumf;
}

static void APIENTRY
stub_glFrustumf(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
{
	check_initialized();
	piglit_dispatch_glFrustumf = resolve_glFrustumf();
	piglit_dispatch_glFrustumf(l, r, b, t, n, f);
}

PFNGLFRUSTUMFPROC piglit_dispatch_glFrustumf = stub_glFrustumf;

static void*
resolve_glFrustumfOES(void)
{
	/* glFrustumfOES (GL_OES_single_precision) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_single_precision")) {
		return get_ext_proc("glFrustumfOES");
	}

	unsupported("glFrustumfOES");
	return piglit_dispatch_glFrustumfOES;
}

static void APIENTRY
stub_glFrustumfOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
{
	check_initialized();
	piglit_dispatch_glFrustumfOES = resolve_glFrustumfOES();
	piglit_dispatch_glFrustumfOES(l, r, b, t, n, f);
}

PFNGLFRUSTUMFOESPROC piglit_dispatch_glFrustumfOES = stub_glFrustumfOES;

static void*
resolve_glFrustumx(void)
{
	/* glFrustumx (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glFrustumx", 10);
	}

	unsupported("glFrustumx");
	return piglit_dispatch_glFrustumx;
}

static void APIENTRY
stub_glFrustumx(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f)
{
	check_initialized();
	piglit_dispatch_glFrustumx = resolve_glFrustumx();
	piglit_dispatch_glFrustumx(l, r, b, t, n, f);
}

PFNGLFRUSTUMXPROC piglit_dispatch_glFrustumx = stub_glFrustumx;

static void*
resolve_glFrustumxOES(void)
{
	/* glFrustumxOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glFrustumxOES");
	}

	unsupported("glFrustumxOES");
	return piglit_dispatch_glFrustumxOES;
}

static void APIENTRY
stub_glFrustumxOES(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f)
{
	check_initialized();
	piglit_dispatch_glFrustumxOES = resolve_glFrustumxOES();
	piglit_dispatch_glFrustumxOES(l, r, b, t, n, f);
}

PFNGLFRUSTUMXOESPROC piglit_dispatch_glFrustumxOES = stub_glFrustumxOES;

static void*
resolve_glGenAsyncMarkersSGIX(void)
{
	/* glGenAsyncMarkersSGIX (GL_SGIX_async) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_async")) {
		return get_ext_proc("glGenAsyncMarkersSGIX");
	}

	unsupported("glGenAsyncMarkersSGIX");
	return piglit_dispatch_glGenAsyncMarkersSGIX;
}

static GLuint APIENTRY
stub_glGenAsyncMarkersSGIX(GLsizei range)
{
	check_initialized();
	piglit_dispatch_glGenAsyncMarkersSGIX = resolve_glGenAsyncMarkersSGIX();
	return piglit_dispatch_glGenAsyncMarkersSGIX(range);
}

PFNGLGENASYNCMARKERSSGIXPROC piglit_dispatch_glGenAsyncMarkersSGIX = stub_glGenAsyncMarkersSGIX;

static void*
resolve_glGenBuffers(void)
{
	/* glGenBuffers (GL_VERSION_1_5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGenBuffers", 15);
	}

	/* glGenBuffers (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glGenBuffers", 10);
	}

	/* glGenBuffers (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glGenBuffers", 20);
	}

	/* glGenBuffersARB (GL_ARB_vertex_buffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_buffer_object")) {
		return get_ext_proc("glGenBuffersARB");
	}

	unsupported("glGenBuffers");
	return piglit_dispatch_glGenBuffers;
}

static void APIENTRY
stub_glGenBuffers(GLsizei n, GLuint * buffers)
{
	check_initialized();
	piglit_dispatch_glGenBuffers = resolve_glGenBuffers();
	piglit_dispatch_glGenBuffers(n, buffers);
}

PFNGLGENBUFFERSPROC piglit_dispatch_glGenBuffers = stub_glGenBuffers;

static void*
resolve_glGenFencesAPPLE(void)
{
	/* glGenFencesAPPLE (GL_APPLE_fence) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_APPLE_fence")) {
		return get_ext_proc("glGenFencesAPPLE");
	}

	unsupported("glGenFencesAPPLE");
	return piglit_dispatch_glGenFencesAPPLE;
}

static void APIENTRY
stub_glGenFencesAPPLE(GLsizei n, GLuint * fences)
{
	check_initialized();
	piglit_dispatch_glGenFencesAPPLE = resolve_glGenFencesAPPLE();
	piglit_dispatch_glGenFencesAPPLE(n, fences);
}

PFNGLGENFENCESAPPLEPROC piglit_dispatch_glGenFencesAPPLE = stub_glGenFencesAPPLE;

static void*
resolve_glGenFencesNV(void)
{
	/* glGenFencesNV (GL_NV_fence) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_NV_fence")) {
		return get_ext_proc("glGenFencesNV");
	}

	unsupported("glGenFencesNV");
	return piglit_dispatch_glGenFencesNV;
}

static void APIENTRY
stub_glGenFencesNV(GLsizei n, GLuint * fences)
{
	check_initialized();
	piglit_dispatch_glGenFencesNV = resolve_glGenFencesNV();
	piglit_dispatch_glGenFencesNV(n, fences);
}

PFNGLGENFENCESNVPROC piglit_dispatch_glGenFencesNV = stub_glGenFencesNV;

static void*
resolve_glGenFragmentShadersATI(void)
{
	/* glGenFragmentShadersATI (GL_ATI_fragment_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_fragment_shader")) {
		return get_ext_proc("glGenFragmentShadersATI");
	}

	unsupported("glGenFragmentShadersATI");
	return piglit_dispatch_glGenFragmentShadersATI;
}

static GLuint APIENTRY
stub_glGenFragmentShadersATI(GLuint range)
{
	check_initialized();
	piglit_dispatch_glGenFragmentShadersATI = resolve_glGenFragmentShadersATI();
	return piglit_dispatch_glGenFragmentShadersATI(range);
}

PFNGLGENFRAGMENTSHADERSATIPROC piglit_dispatch_glGenFragmentShadersATI = stub_glGenFragmentShadersATI;

static void*
resolve_glGenFramebuffers(void)
{
	/* glGenFramebuffers (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGenFramebuffers", 30);
	}

	/* glGenFramebuffers (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glGenFramebuffers", 20);
	}

	/* glGenFramebuffers (GL_ARB_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_framebuffer_object")) {
		return get_ext_proc("glGenFramebuffers");
	}

	/* glGenFramebuffersEXT (GL_EXT_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_framebuffer_object")) {
		return get_ext_proc("glGenFramebuffersEXT");
	}

	unsupported("glGenFramebuffers");
	return piglit_dispatch_glGenFramebuffers;
}

static void APIENTRY
stub_glGenFramebuffers(GLsizei n, GLuint * framebuffers)
{
	check_initialized();
	piglit_dispatch_glGenFramebuffers = resolve_glGenFramebuffers();
	piglit_dispatch_glGenFramebuffers(n, framebuffers);
}

PFNGLGENFRAMEBUFFERSPROC piglit_dispatch_glGenFramebuffers = stub_glGenFramebuffers;

static void*
resolve_glGenFramebuffersOES(void)
{
	/* glGenFramebuffersOES (GL_OES_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_framebuffer_object")) {
		return get_ext_proc("glGenFramebuffersOES");
	}

	unsupported("glGenFramebuffersOES");
	return piglit_dispatch_glGenFramebuffersOES;
}

static void APIENTRY
stub_glGenFramebuffersOES(GLsizei n, GLuint * framebuffers)
{
	check_initialized();
	piglit_dispatch_glGenFramebuffersOES = resolve_glGenFramebuffersOES();
	piglit_dispatch_glGenFramebuffersOES(n, framebuffers);
}

PFNGLGENFRAMEBUFFERSOESPROC piglit_dispatch_glGenFramebuffersOES = stub_glGenFramebuffersOES;

static void*
resolve_glGenLists(void)
{
	/* glGenLists (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glGenLists", 10);
	}

	unsupported("glGenLists");
	return piglit_dispatch_glGenLists;
}

static GLuint APIENTRY
stub_glGenLists(GLsizei range)
{
	check_initialized();
	piglit_dispatch_glGenLists = resolve_glGenLists();
	return piglit_dispatch_glGenLists(range);
}

PFNGLGENLISTSPROC piglit_dispatch_glGenLists = stub_glGenLists;

static void*
resolve_glGenNamesAMD(void)
{
	/* glGenNamesAMD (GL_AMD_name_gen_delete) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_name_gen_delete")) {
		return get_ext_proc("glGenNamesAMD");
	}

	unsupported("glGenNamesAMD");
	return piglit_dispatch_glGenNamesAMD;
}

static void APIENTRY
stub_glGenNamesAMD(GLenum identifier, GLuint num, GLuint * names)
{
	check_initialized();
	piglit_dispatch_glGenNamesAMD = resolve_glGenNamesAMD();
	piglit_dispatch_glGenNamesAMD(identifier, num, names);
}

PFNGLGENNAMESAMDPROC piglit_dispatch_glGenNamesAMD = stub_glGenNamesAMD;

static void*
resolve_glGenOcclusionQueriesNV(void)
{
	/* glGenOcclusionQueriesNV (GL_NV_occlusion_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_occlusion_query")) {
		return get_ext_proc("glGenOcclusionQueriesNV");
	}

	unsupported("glGenOcclusionQueriesNV");
	return piglit_dispatch_glGenOcclusionQueriesNV;
}

static void APIENTRY
stub_glGenOcclusionQueriesNV(GLsizei n, GLuint * ids)
{
	check_initialized();
	piglit_dispatch_glGenOcclusionQueriesNV = resolve_glGenOcclusionQueriesNV();
	piglit_dispatch_glGenOcclusionQueriesNV(n, ids);
}

PFNGLGENOCCLUSIONQUERIESNVPROC piglit_dispatch_glGenOcclusionQueriesNV = stub_glGenOcclusionQueriesNV;

static void*
resolve_glGenPathsNV(void)
{
	/* glGenPathsNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glGenPathsNV");
	}

	unsupported("glGenPathsNV");
	return piglit_dispatch_glGenPathsNV;
}

static GLuint APIENTRY
stub_glGenPathsNV(GLsizei range)
{
	check_initialized();
	piglit_dispatch_glGenPathsNV = resolve_glGenPathsNV();
	return piglit_dispatch_glGenPathsNV(range);
}

PFNGLGENPATHSNVPROC piglit_dispatch_glGenPathsNV = stub_glGenPathsNV;

static void*
resolve_glGenPerfMonitorsAMD(void)
{
	/* glGenPerfMonitorsAMD (GL_AMD_performance_monitor) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_AMD_performance_monitor")) {
		return get_ext_proc("glGenPerfMonitorsAMD");
	}

	unsupported("glGenPerfMonitorsAMD");
	return piglit_dispatch_glGenPerfMonitorsAMD;
}

static void APIENTRY
stub_glGenPerfMonitorsAMD(GLsizei n, GLuint * monitors)
{
	check_initialized();
	piglit_dispatch_glGenPerfMonitorsAMD = resolve_glGenPerfMonitorsAMD();
	piglit_dispatch_glGenPerfMonitorsAMD(n, monitors);
}

PFNGLGENPERFMONITORSAMDPROC piglit_dispatch_glGenPerfMonitorsAMD = stub_glGenPerfMonitorsAMD;

static void*
resolve_glGenProgramPipelines(void)
{
	/* glGenProgramPipelines (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGenProgramPipelines", 41);
	}

	/* glGenProgramPipelines (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGenProgramPipelines", 31);
	}

	/* glGenProgramPipelines (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glGenProgramPipelines");
	}

	unsupported("glGenProgramPipelines");
	return piglit_dispatch_glGenProgramPipelines;
}

static void APIENTRY
stub_glGenProgramPipelines(GLsizei n, GLuint * pipelines)
{
	check_initialized();
	piglit_dispatch_glGenProgramPipelines = resolve_glGenProgramPipelines();
	piglit_dispatch_glGenProgramPipelines(n, pipelines);
}

PFNGLGENPROGRAMPIPELINESPROC piglit_dispatch_glGenProgramPipelines = stub_glGenProgramPipelines;

static void*
resolve_glGenProgramPipelinesEXT(void)
{
	/* glGenProgramPipelinesEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glGenProgramPipelinesEXT");
	}

	unsupported("glGenProgramPipelinesEXT");
	return piglit_dispatch_glGenProgramPipelinesEXT;
}

static void APIENTRY
stub_glGenProgramPipelinesEXT(GLsizei n, GLuint * pipelines)
{
	check_initialized();
	piglit_dispatch_glGenProgramPipelinesEXT = resolve_glGenProgramPipelinesEXT();
	piglit_dispatch_glGenProgramPipelinesEXT(n, pipelines);
}

PFNGLGENPROGRAMPIPELINESEXTPROC piglit_dispatch_glGenProgramPipelinesEXT = stub_glGenProgramPipelinesEXT;

static void*
resolve_glGenProgramsARB(void)
{
	/* glGenProgramsARB (GL_ARB_fragment_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_fragment_program")) {
		return get_ext_proc("glGenProgramsARB");
	}

	/* glGenProgramsARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glGenProgramsARB");
	}

	/* glGenProgramsNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glGenProgramsNV");
	}

	unsupported("glGenProgramsARB");
	return piglit_dispatch_glGenProgramsARB;
}

static void APIENTRY
stub_glGenProgramsARB(GLsizei n, GLuint * programs)
{
	check_initialized();
	piglit_dispatch_glGenProgramsARB = resolve_glGenProgramsARB();
	piglit_dispatch_glGenProgramsARB(n, programs);
}

PFNGLGENPROGRAMSARBPROC piglit_dispatch_glGenProgramsARB = stub_glGenProgramsARB;

static void*
resolve_glGenQueries(void)
{
	/* glGenQueries (GL_VERSION_1_5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGenQueries", 15);
	}

	/* glGenQueries (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGenQueries", 30);
	}

	/* glGenQueriesARB (GL_ARB_occlusion_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_occlusion_query")) {
		return get_ext_proc("glGenQueriesARB");
	}

	unsupported("glGenQueries");
	return piglit_dispatch_glGenQueries;
}

static void APIENTRY
stub_glGenQueries(GLsizei n, GLuint * ids)
{
	check_initialized();
	piglit_dispatch_glGenQueries = resolve_glGenQueries();
	piglit_dispatch_glGenQueries(n, ids);
}

PFNGLGENQUERIESPROC piglit_dispatch_glGenQueries = stub_glGenQueries;

static void*
resolve_glGenQueriesEXT(void)
{
	/* glGenQueriesEXT (GL_EXT_disjoint_timer_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_disjoint_timer_query")) {
		return get_ext_proc("glGenQueriesEXT");
	}

	/* glGenQueriesEXT (GL_EXT_occlusion_query_boolean) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_occlusion_query_boolean")) {
		return get_ext_proc("glGenQueriesEXT");
	}

	unsupported("glGenQueriesEXT");
	return piglit_dispatch_glGenQueriesEXT;
}

static void APIENTRY
stub_glGenQueriesEXT(GLsizei n, GLuint * ids)
{
	check_initialized();
	piglit_dispatch_glGenQueriesEXT = resolve_glGenQueriesEXT();
	piglit_dispatch_glGenQueriesEXT(n, ids);
}

PFNGLGENQUERIESEXTPROC piglit_dispatch_glGenQueriesEXT = stub_glGenQueriesEXT;

static void*
resolve_glGenRenderbuffers(void)
{
	/* glGenRenderbuffers (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGenRenderbuffers", 30);
	}

	/* glGenRenderbuffers (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glGenRenderbuffers", 20);
	}

	/* glGenRenderbuffers (GL_ARB_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_framebuffer_object")) {
		return get_ext_proc("glGenRenderbuffers");
	}

	/* glGenRenderbuffersEXT (GL_EXT_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_framebuffer_object")) {
		return get_ext_proc("glGenRenderbuffersEXT");
	}

	unsupported("glGenRenderbuffers");
	return piglit_dispatch_glGenRenderbuffers;
}

static void APIENTRY
stub_glGenRenderbuffers(GLsizei n, GLuint * renderbuffers)
{
	check_initialized();
	piglit_dispatch_glGenRenderbuffers = resolve_glGenRenderbuffers();
	piglit_dispatch_glGenRenderbuffers(n, renderbuffers);
}

PFNGLGENRENDERBUFFERSPROC piglit_dispatch_glGenRenderbuffers = stub_glGenRenderbuffers;

static void*
resolve_glGenRenderbuffersOES(void)
{
	/* glGenRenderbuffersOES (GL_OES_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_framebuffer_object")) {
		return get_ext_proc("glGenRenderbuffersOES");
	}

	unsupported("glGenRenderbuffersOES");
	return piglit_dispatch_glGenRenderbuffersOES;
}

static void APIENTRY
stub_glGenRenderbuffersOES(GLsizei n, GLuint * renderbuffers)
{
	check_initialized();
	piglit_dispatch_glGenRenderbuffersOES = resolve_glGenRenderbuffersOES();
	piglit_dispatch_glGenRenderbuffersOES(n, renderbuffers);
}

PFNGLGENRENDERBUFFERSOESPROC piglit_dispatch_glGenRenderbuffersOES = stub_glGenRenderbuffersOES;

static void*
resolve_glGenSamplers(void)
{
	/* glGenSamplers (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGenSamplers", 33);
	}

	/* glGenSamplers (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGenSamplers", 30);
	}

	/* glGenSamplers (GL_ARB_sampler_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_sampler_objects")) {
		return get_ext_proc("glGenSamplers");
	}

	unsupported("glGenSamplers");
	return piglit_dispatch_glGenSamplers;
}

static void APIENTRY
stub_glGenSamplers(GLsizei count, GLuint * samplers)
{
	check_initialized();
	piglit_dispatch_glGenSamplers = resolve_glGenSamplers();
	piglit_dispatch_glGenSamplers(count, samplers);
}

PFNGLGENSAMPLERSPROC piglit_dispatch_glGenSamplers = stub_glGenSamplers;

static void*
resolve_glGenSymbolsEXT(void)
{
	/* glGenSymbolsEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glGenSymbolsEXT");
	}

	unsupported("glGenSymbolsEXT");
	return piglit_dispatch_glGenSymbolsEXT;
}

static GLuint APIENTRY
stub_glGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components)
{
	check_initialized();
	piglit_dispatch_glGenSymbolsEXT = resolve_glGenSymbolsEXT();
	return piglit_dispatch_glGenSymbolsEXT(datatype, storagetype, range, components);
}

PFNGLGENSYMBOLSEXTPROC piglit_dispatch_glGenSymbolsEXT = stub_glGenSymbolsEXT;

static void*
resolve_glGenTextures(void)
{
	/* glGenTextures (GL_VERSION_1_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGenTextures", 11);
	}

	/* glGenTextures (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glGenTextures", 10);
	}

	/* glGenTextures (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glGenTextures", 20);
	}

	unsupported("glGenTextures");
	return piglit_dispatch_glGenTextures;
}

static void APIENTRY
stub_glGenTextures(GLsizei n, GLuint * textures)
{
	check_initialized();
	piglit_dispatch_glGenTextures = resolve_glGenTextures();
	piglit_dispatch_glGenTextures(n, textures);
}

PFNGLGENTEXTURESPROC piglit_dispatch_glGenTextures = stub_glGenTextures;

static void*
resolve_glGenTexturesEXT(void)
{
	/* glGenTexturesEXT (GL_EXT_texture_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_texture_object")) {
		return get_ext_proc("glGenTexturesEXT");
	}

	unsupported("glGenTexturesEXT");
	return piglit_dispatch_glGenTexturesEXT;
}

static void APIENTRY
stub_glGenTexturesEXT(GLsizei n, GLuint * textures)
{
	check_initialized();
	piglit_dispatch_glGenTexturesEXT = resolve_glGenTexturesEXT();
	piglit_dispatch_glGenTexturesEXT(n, textures);
}

PFNGLGENTEXTURESEXTPROC piglit_dispatch_glGenTexturesEXT = stub_glGenTexturesEXT;

static void*
resolve_glGenTransformFeedbacks(void)
{
	/* glGenTransformFeedbacks (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGenTransformFeedbacks", 40);
	}

	/* glGenTransformFeedbacks (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGenTransformFeedbacks", 30);
	}

	/* glGenTransformFeedbacks (GL_ARB_transform_feedback2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_transform_feedback2")) {
		return get_ext_proc("glGenTransformFeedbacks");
	}

	/* glGenTransformFeedbacksNV (GL_NV_transform_feedback2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_transform_feedback2")) {
		return get_ext_proc("glGenTransformFeedbacksNV");
	}

	unsupported("glGenTransformFeedbacks");
	return piglit_dispatch_glGenTransformFeedbacks;
}

static void APIENTRY
stub_glGenTransformFeedbacks(GLsizei n, GLuint * ids)
{
	check_initialized();
	piglit_dispatch_glGenTransformFeedbacks = resolve_glGenTransformFeedbacks();
	piglit_dispatch_glGenTransformFeedbacks(n, ids);
}

PFNGLGENTRANSFORMFEEDBACKSPROC piglit_dispatch_glGenTransformFeedbacks = stub_glGenTransformFeedbacks;

static void*
resolve_glGenVertexArrays(void)
{
	/* glGenVertexArrays (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGenVertexArrays", 30);
	}

	/* glGenVertexArrays (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGenVertexArrays", 30);
	}

	/* glGenVertexArrays (GL_ARB_vertex_array_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_array_object")) {
		return get_ext_proc("glGenVertexArrays");
	}

	/* glGenVertexArraysOES (GL_OES_vertex_array_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_OES_vertex_array_object")) {
		return get_ext_proc("glGenVertexArraysOES");
	}

	/* glGenVertexArraysAPPLE (GL_APPLE_vertex_array_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_APPLE_vertex_array_object")) {
		return get_ext_proc("glGenVertexArraysAPPLE");
	}

	unsupported("glGenVertexArrays");
	return piglit_dispatch_glGenVertexArrays;
}

static void APIENTRY
stub_glGenVertexArrays(GLsizei n, GLuint * arrays)
{
	check_initialized();
	piglit_dispatch_glGenVertexArrays = resolve_glGenVertexArrays();
	piglit_dispatch_glGenVertexArrays(n, arrays);
}

PFNGLGENVERTEXARRAYSPROC piglit_dispatch_glGenVertexArrays = stub_glGenVertexArrays;

static void*
resolve_glGenVertexShadersEXT(void)
{
	/* glGenVertexShadersEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glGenVertexShadersEXT");
	}

	unsupported("glGenVertexShadersEXT");
	return piglit_dispatch_glGenVertexShadersEXT;
}

static GLuint APIENTRY
stub_glGenVertexShadersEXT(GLuint range)
{
	check_initialized();
	piglit_dispatch_glGenVertexShadersEXT = resolve_glGenVertexShadersEXT();
	return piglit_dispatch_glGenVertexShadersEXT(range);
}

PFNGLGENVERTEXSHADERSEXTPROC piglit_dispatch_glGenVertexShadersEXT = stub_glGenVertexShadersEXT;

static void*
resolve_glGenerateMipmap(void)
{
	/* glGenerateMipmap (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGenerateMipmap", 30);
	}

	/* glGenerateMipmap (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glGenerateMipmap", 20);
	}

	/* glGenerateMipmap (GL_ARB_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_framebuffer_object")) {
		return get_ext_proc("glGenerateMipmap");
	}

	/* glGenerateMipmapEXT (GL_EXT_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_framebuffer_object")) {
		return get_ext_proc("glGenerateMipmapEXT");
	}

	unsupported("glGenerateMipmap");
	return piglit_dispatch_glGenerateMipmap;
}

static void APIENTRY
stub_glGenerateMipmap(GLenum target)
{
	check_initialized();
	piglit_dispatch_glGenerateMipmap = resolve_glGenerateMipmap();
	piglit_dispatch_glGenerateMipmap(target);
}

PFNGLGENERATEMIPMAPPROC piglit_dispatch_glGenerateMipmap = stub_glGenerateMipmap;

static void*
resolve_glGenerateMipmapOES(void)
{
	/* glGenerateMipmapOES (GL_OES_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_framebuffer_object")) {
		return get_ext_proc("glGenerateMipmapOES");
	}

	unsupported("glGenerateMipmapOES");
	return piglit_dispatch_glGenerateMipmapOES;
}

static void APIENTRY
stub_glGenerateMipmapOES(GLenum target)
{
	check_initialized();
	piglit_dispatch_glGenerateMipmapOES = resolve_glGenerateMipmapOES();
	piglit_dispatch_glGenerateMipmapOES(target);
}

PFNGLGENERATEMIPMAPOESPROC piglit_dispatch_glGenerateMipmapOES = stub_glGenerateMipmapOES;

static void*
resolve_glGenerateMultiTexMipmapEXT(void)
{
	/* glGenerateMultiTexMipmapEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGenerateMultiTexMipmapEXT");
	}

	unsupported("glGenerateMultiTexMipmapEXT");
	return piglit_dispatch_glGenerateMultiTexMipmapEXT;
}

static void APIENTRY
stub_glGenerateMultiTexMipmapEXT(GLenum texunit, GLenum target)
{
	check_initialized();
	piglit_dispatch_glGenerateMultiTexMipmapEXT = resolve_glGenerateMultiTexMipmapEXT();
	piglit_dispatch_glGenerateMultiTexMipmapEXT(texunit, target);
}

PFNGLGENERATEMULTITEXMIPMAPEXTPROC piglit_dispatch_glGenerateMultiTexMipmapEXT = stub_glGenerateMultiTexMipmapEXT;

static void*
resolve_glGenerateTextureMipmapEXT(void)
{
	/* glGenerateTextureMipmapEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGenerateTextureMipmapEXT");
	}

	unsupported("glGenerateTextureMipmapEXT");
	return piglit_dispatch_glGenerateTextureMipmapEXT;
}

static void APIENTRY
stub_glGenerateTextureMipmapEXT(GLuint texture, GLenum target)
{
	check_initialized();
	piglit_dispatch_glGenerateTextureMipmapEXT = resolve_glGenerateTextureMipmapEXT();
	piglit_dispatch_glGenerateTextureMipmapEXT(texture, target);
}

PFNGLGENERATETEXTUREMIPMAPEXTPROC piglit_dispatch_glGenerateTextureMipmapEXT = stub_glGenerateTextureMipmapEXT;

static void*
resolve_glGetActiveAtomicCounterBufferiv(void)
{
	/* glGetActiveAtomicCounterBufferiv (GL_VERSION_4_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetActiveAtomicCounterBufferiv", 42);
	}

	/* glGetActiveAtomicCounterBufferiv (GL_ARB_shader_atomic_counters) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_atomic_counters")) {
		return get_ext_proc("glGetActiveAtomicCounterBufferiv");
	}

	unsupported("glGetActiveAtomicCounterBufferiv");
	return piglit_dispatch_glGetActiveAtomicCounterBufferiv;
}

static void APIENTRY
stub_glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetActiveAtomicCounterBufferiv = resolve_glGetActiveAtomicCounterBufferiv();
	piglit_dispatch_glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params);
}

PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC piglit_dispatch_glGetActiveAtomicCounterBufferiv = stub_glGetActiveAtomicCounterBufferiv;

static void*
resolve_glGetActiveAttrib(void)
{
	/* glGetActiveAttrib (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetActiveAttrib", 20);
	}

	/* glGetActiveAttrib (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glGetActiveAttrib", 20);
	}

	/* glGetActiveAttribARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glGetActiveAttribARB");
	}

	unsupported("glGetActiveAttrib");
	return piglit_dispatch_glGetActiveAttrib;
}

static void APIENTRY
stub_glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name)
{
	check_initialized();
	piglit_dispatch_glGetActiveAttrib = resolve_glGetActiveAttrib();
	piglit_dispatch_glGetActiveAttrib(program, index, bufSize, length, size, type, name);
}

PFNGLGETACTIVEATTRIBPROC piglit_dispatch_glGetActiveAttrib = stub_glGetActiveAttrib;

static void*
resolve_glGetActiveSubroutineName(void)
{
	/* glGetActiveSubroutineName (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetActiveSubroutineName", 40);
	}

	/* glGetActiveSubroutineName (GL_ARB_shader_subroutine) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_subroutine")) {
		return get_ext_proc("glGetActiveSubroutineName");
	}

	unsupported("glGetActiveSubroutineName");
	return piglit_dispatch_glGetActiveSubroutineName;
}

static void APIENTRY
stub_glGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name)
{
	check_initialized();
	piglit_dispatch_glGetActiveSubroutineName = resolve_glGetActiveSubroutineName();
	piglit_dispatch_glGetActiveSubroutineName(program, shadertype, index, bufsize, length, name);
}

PFNGLGETACTIVESUBROUTINENAMEPROC piglit_dispatch_glGetActiveSubroutineName = stub_glGetActiveSubroutineName;

static void*
resolve_glGetActiveSubroutineUniformName(void)
{
	/* glGetActiveSubroutineUniformName (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetActiveSubroutineUniformName", 40);
	}

	/* glGetActiveSubroutineUniformName (GL_ARB_shader_subroutine) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_subroutine")) {
		return get_ext_proc("glGetActiveSubroutineUniformName");
	}

	unsupported("glGetActiveSubroutineUniformName");
	return piglit_dispatch_glGetActiveSubroutineUniformName;
}

static void APIENTRY
stub_glGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name)
{
	check_initialized();
	piglit_dispatch_glGetActiveSubroutineUniformName = resolve_glGetActiveSubroutineUniformName();
	piglit_dispatch_glGetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, name);
}

PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC piglit_dispatch_glGetActiveSubroutineUniformName = stub_glGetActiveSubroutineUniformName;

static void*
resolve_glGetActiveSubroutineUniformiv(void)
{
	/* glGetActiveSubroutineUniformiv (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetActiveSubroutineUniformiv", 40);
	}

	/* glGetActiveSubroutineUniformiv (GL_ARB_shader_subroutine) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_subroutine")) {
		return get_ext_proc("glGetActiveSubroutineUniformiv");
	}

	unsupported("glGetActiveSubroutineUniformiv");
	return piglit_dispatch_glGetActiveSubroutineUniformiv;
}

static void APIENTRY
stub_glGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values)
{
	check_initialized();
	piglit_dispatch_glGetActiveSubroutineUniformiv = resolve_glGetActiveSubroutineUniformiv();
	piglit_dispatch_glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values);
}

PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC piglit_dispatch_glGetActiveSubroutineUniformiv = stub_glGetActiveSubroutineUniformiv;

static void*
resolve_glGetActiveUniform(void)
{
	/* glGetActiveUniform (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetActiveUniform", 20);
	}

	/* glGetActiveUniform (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glGetActiveUniform", 20);
	}

	/* glGetActiveUniformARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glGetActiveUniformARB");
	}

	unsupported("glGetActiveUniform");
	return piglit_dispatch_glGetActiveUniform;
}

static void APIENTRY
stub_glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name)
{
	check_initialized();
	piglit_dispatch_glGetActiveUniform = resolve_glGetActiveUniform();
	piglit_dispatch_glGetActiveUniform(program, index, bufSize, length, size, type, name);
}

PFNGLGETACTIVEUNIFORMPROC piglit_dispatch_glGetActiveUniform = stub_glGetActiveUniform;

static void*
resolve_glGetActiveUniformBlockName(void)
{
	/* glGetActiveUniformBlockName (GL_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetActiveUniformBlockName", 31);
	}

	/* glGetActiveUniformBlockName (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetActiveUniformBlockName", 30);
	}

	/* glGetActiveUniformBlockName (GL_ARB_uniform_buffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_uniform_buffer_object")) {
		return get_ext_proc("glGetActiveUniformBlockName");
	}

	unsupported("glGetActiveUniformBlockName");
	return piglit_dispatch_glGetActiveUniformBlockName;
}

static void APIENTRY
stub_glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName)
{
	check_initialized();
	piglit_dispatch_glGetActiveUniformBlockName = resolve_glGetActiveUniformBlockName();
	piglit_dispatch_glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName);
}

PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC piglit_dispatch_glGetActiveUniformBlockName = stub_glGetActiveUniformBlockName;

static void*
resolve_glGetActiveUniformBlockiv(void)
{
	/* glGetActiveUniformBlockiv (GL_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetActiveUniformBlockiv", 31);
	}

	/* glGetActiveUniformBlockiv (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetActiveUniformBlockiv", 30);
	}

	/* glGetActiveUniformBlockiv (GL_ARB_uniform_buffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_uniform_buffer_object")) {
		return get_ext_proc("glGetActiveUniformBlockiv");
	}

	unsupported("glGetActiveUniformBlockiv");
	return piglit_dispatch_glGetActiveUniformBlockiv;
}

static void APIENTRY
stub_glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetActiveUniformBlockiv = resolve_glGetActiveUniformBlockiv();
	piglit_dispatch_glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params);
}

PFNGLGETACTIVEUNIFORMBLOCKIVPROC piglit_dispatch_glGetActiveUniformBlockiv = stub_glGetActiveUniformBlockiv;

static void*
resolve_glGetActiveUniformName(void)
{
	/* glGetActiveUniformName (GL_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetActiveUniformName", 31);
	}

	/* glGetActiveUniformName (GL_ARB_uniform_buffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_uniform_buffer_object")) {
		return get_ext_proc("glGetActiveUniformName");
	}

	unsupported("glGetActiveUniformName");
	return piglit_dispatch_glGetActiveUniformName;
}

static void APIENTRY
stub_glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName)
{
	check_initialized();
	piglit_dispatch_glGetActiveUniformName = resolve_glGetActiveUniformName();
	piglit_dispatch_glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName);
}

PFNGLGETACTIVEUNIFORMNAMEPROC piglit_dispatch_glGetActiveUniformName = stub_glGetActiveUniformName;

static void*
resolve_glGetActiveUniformsiv(void)
{
	/* glGetActiveUniformsiv (GL_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetActiveUniformsiv", 31);
	}

	/* glGetActiveUniformsiv (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetActiveUniformsiv", 30);
	}

	/* glGetActiveUniformsiv (GL_ARB_uniform_buffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_uniform_buffer_object")) {
		return get_ext_proc("glGetActiveUniformsiv");
	}

	unsupported("glGetActiveUniformsiv");
	return piglit_dispatch_glGetActiveUniformsiv;
}

static void APIENTRY
stub_glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetActiveUniformsiv = resolve_glGetActiveUniformsiv();
	piglit_dispatch_glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params);
}

PFNGLGETACTIVEUNIFORMSIVPROC piglit_dispatch_glGetActiveUniformsiv = stub_glGetActiveUniformsiv;

static void*
resolve_glGetActiveVaryingNV(void)
{
	/* glGetActiveVaryingNV (GL_NV_transform_feedback) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_transform_feedback")) {
		return get_ext_proc("glGetActiveVaryingNV");
	}

	unsupported("glGetActiveVaryingNV");
	return piglit_dispatch_glGetActiveVaryingNV;
}

static void APIENTRY
stub_glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name)
{
	check_initialized();
	piglit_dispatch_glGetActiveVaryingNV = resolve_glGetActiveVaryingNV();
	piglit_dispatch_glGetActiveVaryingNV(program, index, bufSize, length, size, type, name);
}

PFNGLGETACTIVEVARYINGNVPROC piglit_dispatch_glGetActiveVaryingNV = stub_glGetActiveVaryingNV;

static void*
resolve_glGetArrayObjectfvATI(void)
{
	/* glGetArrayObjectfvATI (GL_ATI_vertex_array_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_array_object")) {
		return get_ext_proc("glGetArrayObjectfvATI");
	}

	unsupported("glGetArrayObjectfvATI");
	return piglit_dispatch_glGetArrayObjectfvATI;
}

static void APIENTRY
stub_glGetArrayObjectfvATI(GLenum array, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetArrayObjectfvATI = resolve_glGetArrayObjectfvATI();
	piglit_dispatch_glGetArrayObjectfvATI(array, pname, params);
}

PFNGLGETARRAYOBJECTFVATIPROC piglit_dispatch_glGetArrayObjectfvATI = stub_glGetArrayObjectfvATI;

static void*
resolve_glGetArrayObjectivATI(void)
{
	/* glGetArrayObjectivATI (GL_ATI_vertex_array_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_array_object")) {
		return get_ext_proc("glGetArrayObjectivATI");
	}

	unsupported("glGetArrayObjectivATI");
	return piglit_dispatch_glGetArrayObjectivATI;
}

static void APIENTRY
stub_glGetArrayObjectivATI(GLenum array, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetArrayObjectivATI = resolve_glGetArrayObjectivATI();
	piglit_dispatch_glGetArrayObjectivATI(array, pname, params);
}

PFNGLGETARRAYOBJECTIVATIPROC piglit_dispatch_glGetArrayObjectivATI = stub_glGetArrayObjectivATI;

static void*
resolve_glGetAttachedObjectsARB(void)
{
	/* glGetAttachedObjectsARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glGetAttachedObjectsARB");
	}

	unsupported("glGetAttachedObjectsARB");
	return piglit_dispatch_glGetAttachedObjectsARB;
}

static void APIENTRY
stub_glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei * count, GLhandleARB * obj)
{
	check_initialized();
	piglit_dispatch_glGetAttachedObjectsARB = resolve_glGetAttachedObjectsARB();
	piglit_dispatch_glGetAttachedObjectsARB(containerObj, maxCount, count, obj);
}

PFNGLGETATTACHEDOBJECTSARBPROC piglit_dispatch_glGetAttachedObjectsARB = stub_glGetAttachedObjectsARB;

static void*
resolve_glGetAttachedShaders(void)
{
	/* glGetAttachedShaders (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetAttachedShaders", 20);
	}

	/* glGetAttachedShaders (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glGetAttachedShaders", 20);
	}

	unsupported("glGetAttachedShaders");
	return piglit_dispatch_glGetAttachedShaders;
}

static void APIENTRY
stub_glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders)
{
	check_initialized();
	piglit_dispatch_glGetAttachedShaders = resolve_glGetAttachedShaders();
	piglit_dispatch_glGetAttachedShaders(program, maxCount, count, shaders);
}

PFNGLGETATTACHEDSHADERSPROC piglit_dispatch_glGetAttachedShaders = stub_glGetAttachedShaders;

static void*
resolve_glGetAttribLocation(void)
{
	/* glGetAttribLocation (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetAttribLocation", 20);
	}

	/* glGetAttribLocation (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glGetAttribLocation", 20);
	}

	/* glGetAttribLocationARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glGetAttribLocationARB");
	}

	unsupported("glGetAttribLocation");
	return piglit_dispatch_glGetAttribLocation;
}

static GLint APIENTRY
stub_glGetAttribLocation(GLuint program, const GLchar * name)
{
	check_initialized();
	piglit_dispatch_glGetAttribLocation = resolve_glGetAttribLocation();
	return piglit_dispatch_glGetAttribLocation(program, name);
}

PFNGLGETATTRIBLOCATIONPROC piglit_dispatch_glGetAttribLocation = stub_glGetAttribLocation;

static void*
resolve_glGetBooleanIndexedvEXT(void)
{
	/* glGetBooleani_v (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetBooleani_v", 30);
	}

	/* glGetBooleani_v (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetBooleani_v", 31);
	}

	/* glGetBooleanIndexedvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetBooleanIndexedvEXT");
	}

	/* glGetBooleanIndexedvEXT (GL_EXT_draw_buffers2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_draw_buffers2")) {
		return get_ext_proc("glGetBooleanIndexedvEXT");
	}

	unsupported("glGetBooleanIndexedvEXT");
	return piglit_dispatch_glGetBooleanIndexedvEXT;
}

static void APIENTRY
stub_glGetBooleanIndexedvEXT(GLenum target, GLuint index, GLboolean * data)
{
	check_initialized();
	piglit_dispatch_glGetBooleanIndexedvEXT = resolve_glGetBooleanIndexedvEXT();
	piglit_dispatch_glGetBooleanIndexedvEXT(target, index, data);
}

PFNGLGETBOOLEANINDEXEDVEXTPROC piglit_dispatch_glGetBooleanIndexedvEXT = stub_glGetBooleanIndexedvEXT;

static void*
resolve_glGetBooleanv(void)
{
	/* glGetBooleanv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glGetBooleanv", 10);
	}

	/* glGetBooleanv (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glGetBooleanv", 10);
	}

	/* glGetBooleanv (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glGetBooleanv", 20);
	}

	unsupported("glGetBooleanv");
	return piglit_dispatch_glGetBooleanv;
}

static void APIENTRY
stub_glGetBooleanv(GLenum pname, GLboolean * data)
{
	check_initialized();
	piglit_dispatch_glGetBooleanv = resolve_glGetBooleanv();
	piglit_dispatch_glGetBooleanv(pname, data);
}

PFNGLGETBOOLEANVPROC piglit_dispatch_glGetBooleanv = stub_glGetBooleanv;

static void*
resolve_glGetBufferParameteri64v(void)
{
	/* glGetBufferParameteri64v (GL_VERSION_3_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetBufferParameteri64v", 32);
	}

	/* glGetBufferParameteri64v (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetBufferParameteri64v", 30);
	}

	unsupported("glGetBufferParameteri64v");
	return piglit_dispatch_glGetBufferParameteri64v;
}

static void APIENTRY
stub_glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 * params)
{
	check_initialized();
	piglit_dispatch_glGetBufferParameteri64v = resolve_glGetBufferParameteri64v();
	piglit_dispatch_glGetBufferParameteri64v(target, pname, params);
}

PFNGLGETBUFFERPARAMETERI64VPROC piglit_dispatch_glGetBufferParameteri64v = stub_glGetBufferParameteri64v;

static void*
resolve_glGetBufferParameteriv(void)
{
	/* glGetBufferParameteriv (GL_VERSION_1_5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetBufferParameteriv", 15);
	}

	/* glGetBufferParameteriv (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glGetBufferParameteriv", 10);
	}

	/* glGetBufferParameteriv (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glGetBufferParameteriv", 20);
	}

	/* glGetBufferParameterivARB (GL_ARB_vertex_buffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_buffer_object")) {
		return get_ext_proc("glGetBufferParameterivARB");
	}

	unsupported("glGetBufferParameteriv");
	return piglit_dispatch_glGetBufferParameteriv;
}

static void APIENTRY
stub_glGetBufferParameteriv(GLenum target, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetBufferParameteriv = resolve_glGetBufferParameteriv();
	piglit_dispatch_glGetBufferParameteriv(target, pname, params);
}

PFNGLGETBUFFERPARAMETERIVPROC piglit_dispatch_glGetBufferParameteriv = stub_glGetBufferParameteriv;

static void*
resolve_glGetBufferParameterui64vNV(void)
{
	/* glGetBufferParameterui64vNV (GL_NV_shader_buffer_load) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_shader_buffer_load")) {
		return get_ext_proc("glGetBufferParameterui64vNV");
	}

	unsupported("glGetBufferParameterui64vNV");
	return piglit_dispatch_glGetBufferParameterui64vNV;
}

static void APIENTRY
stub_glGetBufferParameterui64vNV(GLenum target, GLenum pname, GLuint64EXT * params)
{
	check_initialized();
	piglit_dispatch_glGetBufferParameterui64vNV = resolve_glGetBufferParameterui64vNV();
	piglit_dispatch_glGetBufferParameterui64vNV(target, pname, params);
}

PFNGLGETBUFFERPARAMETERUI64VNVPROC piglit_dispatch_glGetBufferParameterui64vNV = stub_glGetBufferParameterui64vNV;

static void*
resolve_glGetBufferPointerv(void)
{
	/* glGetBufferPointerv (GL_VERSION_1_5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetBufferPointerv", 15);
	}

	/* glGetBufferPointerv (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetBufferPointerv", 30);
	}

	/* glGetBufferPointervARB (GL_ARB_vertex_buffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_buffer_object")) {
		return get_ext_proc("glGetBufferPointervARB");
	}

	/* glGetBufferPointervOES (GL_OES_mapbuffer) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_OES_mapbuffer")) {
		return get_ext_proc("glGetBufferPointervOES");
	}

	unsupported("glGetBufferPointerv");
	return piglit_dispatch_glGetBufferPointerv;
}

static void APIENTRY
stub_glGetBufferPointerv(GLenum target, GLenum pname, void ** params)
{
	check_initialized();
	piglit_dispatch_glGetBufferPointerv = resolve_glGetBufferPointerv();
	piglit_dispatch_glGetBufferPointerv(target, pname, params);
}

PFNGLGETBUFFERPOINTERVPROC piglit_dispatch_glGetBufferPointerv = stub_glGetBufferPointerv;

static void*
resolve_glGetBufferSubData(void)
{
	/* glGetBufferSubData (GL_VERSION_1_5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetBufferSubData", 15);
	}

	/* glGetBufferSubDataARB (GL_ARB_vertex_buffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_buffer_object")) {
		return get_ext_proc("glGetBufferSubDataARB");
	}

	unsupported("glGetBufferSubData");
	return piglit_dispatch_glGetBufferSubData;
}

static void APIENTRY
stub_glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void * data)
{
	check_initialized();
	piglit_dispatch_glGetBufferSubData = resolve_glGetBufferSubData();
	piglit_dispatch_glGetBufferSubData(target, offset, size, data);
}

PFNGLGETBUFFERSUBDATAPROC piglit_dispatch_glGetBufferSubData = stub_glGetBufferSubData;

static void*
resolve_glGetClipPlane(void)
{
	/* glGetClipPlane (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glGetClipPlane", 10);
	}

	unsupported("glGetClipPlane");
	return piglit_dispatch_glGetClipPlane;
}

static void APIENTRY
stub_glGetClipPlane(GLenum plane, GLdouble * equation)
{
	check_initialized();
	piglit_dispatch_glGetClipPlane = resolve_glGetClipPlane();
	piglit_dispatch_glGetClipPlane(plane, equation);
}

PFNGLGETCLIPPLANEPROC piglit_dispatch_glGetClipPlane = stub_glGetClipPlane;

static void*
resolve_glGetClipPlanef(void)
{
	/* glGetClipPlanef (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glGetClipPlanef", 10);
	}

	unsupported("glGetClipPlanef");
	return piglit_dispatch_glGetClipPlanef;
}

static void APIENTRY
stub_glGetClipPlanef(GLenum plane, GLfloat * equation)
{
	check_initialized();
	piglit_dispatch_glGetClipPlanef = resolve_glGetClipPlanef();
	piglit_dispatch_glGetClipPlanef(plane, equation);
}

PFNGLGETCLIPPLANEFPROC piglit_dispatch_glGetClipPlanef = stub_glGetClipPlanef;

static void*
resolve_glGetClipPlanefOES(void)
{
	/* glGetClipPlanefOES (GL_OES_single_precision) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_single_precision")) {
		return get_ext_proc("glGetClipPlanefOES");
	}

	unsupported("glGetClipPlanefOES");
	return piglit_dispatch_glGetClipPlanefOES;
}

static void APIENTRY
stub_glGetClipPlanefOES(GLenum plane, GLfloat * equation)
{
	check_initialized();
	piglit_dispatch_glGetClipPlanefOES = resolve_glGetClipPlanefOES();
	piglit_dispatch_glGetClipPlanefOES(plane, equation);
}

PFNGLGETCLIPPLANEFOESPROC piglit_dispatch_glGetClipPlanefOES = stub_glGetClipPlanefOES;

static void*
resolve_glGetClipPlanex(void)
{
	/* glGetClipPlanex (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glGetClipPlanex", 10);
	}

	unsupported("glGetClipPlanex");
	return piglit_dispatch_glGetClipPlanex;
}

static void APIENTRY
stub_glGetClipPlanex(GLenum plane, GLfixed * equation)
{
	check_initialized();
	piglit_dispatch_glGetClipPlanex = resolve_glGetClipPlanex();
	piglit_dispatch_glGetClipPlanex(plane, equation);
}

PFNGLGETCLIPPLANEXPROC piglit_dispatch_glGetClipPlanex = stub_glGetClipPlanex;

static void*
resolve_glGetClipPlanexOES(void)
{
	/* glGetClipPlanexOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glGetClipPlanexOES");
	}

	unsupported("glGetClipPlanexOES");
	return piglit_dispatch_glGetClipPlanexOES;
}

static void APIENTRY
stub_glGetClipPlanexOES(GLenum plane, GLfixed * equation)
{
	check_initialized();
	piglit_dispatch_glGetClipPlanexOES = resolve_glGetClipPlanexOES();
	piglit_dispatch_glGetClipPlanexOES(plane, equation);
}

PFNGLGETCLIPPLANEXOESPROC piglit_dispatch_glGetClipPlanexOES = stub_glGetClipPlanexOES;

static void*
resolve_glGetColorTable(void)
{
	/* glGetColorTable (GL_ARB_imaging) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_imaging")) {
		return get_ext_proc("glGetColorTable");
	}

	/* glGetColorTableEXT (GL_EXT_paletted_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_paletted_texture")) {
		return get_ext_proc("glGetColorTableEXT");
	}

	unsupported("glGetColorTable");
	return piglit_dispatch_glGetColorTable;
}

static void APIENTRY
stub_glGetColorTable(GLenum target, GLenum format, GLenum type, void * table)
{
	check_initialized();
	piglit_dispatch_glGetColorTable = resolve_glGetColorTable();
	piglit_dispatch_glGetColorTable(target, format, type, table);
}

PFNGLGETCOLORTABLEPROC piglit_dispatch_glGetColorTable = stub_glGetColorTable;

static void*
resolve_glGetColorTableParameterfv(void)
{
	/* glGetColorTableParameterfv (GL_ARB_imaging) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_imaging")) {
		return get_ext_proc("glGetColorTableParameterfv");
	}

	/* glGetColorTableParameterfvEXT (GL_EXT_paletted_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_paletted_texture")) {
		return get_ext_proc("glGetColorTableParameterfvEXT");
	}

	unsupported("glGetColorTableParameterfv");
	return piglit_dispatch_glGetColorTableParameterfv;
}

static void APIENTRY
stub_glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetColorTableParameterfv = resolve_glGetColorTableParameterfv();
	piglit_dispatch_glGetColorTableParameterfv(target, pname, params);
}

PFNGLGETCOLORTABLEPARAMETERFVPROC piglit_dispatch_glGetColorTableParameterfv = stub_glGetColorTableParameterfv;

static void*
resolve_glGetColorTableParameterfvSGI(void)
{
	/* glGetColorTableParameterfvSGI (GL_SGI_color_table) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGI_color_table")) {
		return get_ext_proc("glGetColorTableParameterfvSGI");
	}

	unsupported("glGetColorTableParameterfvSGI");
	return piglit_dispatch_glGetColorTableParameterfvSGI;
}

static void APIENTRY
stub_glGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetColorTableParameterfvSGI = resolve_glGetColorTableParameterfvSGI();
	piglit_dispatch_glGetColorTableParameterfvSGI(target, pname, params);
}

PFNGLGETCOLORTABLEPARAMETERFVSGIPROC piglit_dispatch_glGetColorTableParameterfvSGI = stub_glGetColorTableParameterfvSGI;

static void*
resolve_glGetColorTableParameteriv(void)
{
	/* glGetColorTableParameteriv (GL_ARB_imaging) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_imaging")) {
		return get_ext_proc("glGetColorTableParameteriv");
	}

	/* glGetColorTableParameterivEXT (GL_EXT_paletted_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_paletted_texture")) {
		return get_ext_proc("glGetColorTableParameterivEXT");
	}

	unsupported("glGetColorTableParameteriv");
	return piglit_dispatch_glGetColorTableParameteriv;
}

static void APIENTRY
stub_glGetColorTableParameteriv(GLenum target, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetColorTableParameteriv = resolve_glGetColorTableParameteriv();
	piglit_dispatch_glGetColorTableParameteriv(target, pname, params);
}

PFNGLGETCOLORTABLEPARAMETERIVPROC piglit_dispatch_glGetColorTableParameteriv = stub_glGetColorTableParameteriv;

static void*
resolve_glGetColorTableParameterivSGI(void)
{
	/* glGetColorTableParameterivSGI (GL_SGI_color_table) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGI_color_table")) {
		return get_ext_proc("glGetColorTableParameterivSGI");
	}

	unsupported("glGetColorTableParameterivSGI");
	return piglit_dispatch_glGetColorTableParameterivSGI;
}

static void APIENTRY
stub_glGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetColorTableParameterivSGI = resolve_glGetColorTableParameterivSGI();
	piglit_dispatch_glGetColorTableParameterivSGI(target, pname, params);
}

PFNGLGETCOLORTABLEPARAMETERIVSGIPROC piglit_dispatch_glGetColorTableParameterivSGI = stub_glGetColorTableParameterivSGI;

static void*
resolve_glGetColorTableSGI(void)
{
	/* glGetColorTableSGI (GL_SGI_color_table) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGI_color_table")) {
		return get_ext_proc("glGetColorTableSGI");
	}

	unsupported("glGetColorTableSGI");
	return piglit_dispatch_glGetColorTableSGI;
}

static void APIENTRY
stub_glGetColorTableSGI(GLenum target, GLenum format, GLenum type, void * table)
{
	check_initialized();
	piglit_dispatch_glGetColorTableSGI = resolve_glGetColorTableSGI();
	piglit_dispatch_glGetColorTableSGI(target, format, type, table);
}

PFNGLGETCOLORTABLESGIPROC piglit_dispatch_glGetColorTableSGI = stub_glGetColorTableSGI;

static void*
resolve_glGetCombinerInputParameterfvNV(void)
{
	/* glGetCombinerInputParameterfvNV (GL_NV_register_combiners) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_register_combiners")) {
		return get_ext_proc("glGetCombinerInputParameterfvNV");
	}

	unsupported("glGetCombinerInputParameterfvNV");
	return piglit_dispatch_glGetCombinerInputParameterfvNV;
}

static void APIENTRY
stub_glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetCombinerInputParameterfvNV = resolve_glGetCombinerInputParameterfvNV();
	piglit_dispatch_glGetCombinerInputParameterfvNV(stage, portion, variable, pname, params);
}

PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC piglit_dispatch_glGetCombinerInputParameterfvNV = stub_glGetCombinerInputParameterfvNV;

static void*
resolve_glGetCombinerInputParameterivNV(void)
{
	/* glGetCombinerInputParameterivNV (GL_NV_register_combiners) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_register_combiners")) {
		return get_ext_proc("glGetCombinerInputParameterivNV");
	}

	unsupported("glGetCombinerInputParameterivNV");
	return piglit_dispatch_glGetCombinerInputParameterivNV;
}

static void APIENTRY
stub_glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetCombinerInputParameterivNV = resolve_glGetCombinerInputParameterivNV();
	piglit_dispatch_glGetCombinerInputParameterivNV(stage, portion, variable, pname, params);
}

PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC piglit_dispatch_glGetCombinerInputParameterivNV = stub_glGetCombinerInputParameterivNV;

static void*
resolve_glGetCombinerOutputParameterfvNV(void)
{
	/* glGetCombinerOutputParameterfvNV (GL_NV_register_combiners) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_register_combiners")) {
		return get_ext_proc("glGetCombinerOutputParameterfvNV");
	}

	unsupported("glGetCombinerOutputParameterfvNV");
	return piglit_dispatch_glGetCombinerOutputParameterfvNV;
}

static void APIENTRY
stub_glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetCombinerOutputParameterfvNV = resolve_glGetCombinerOutputParameterfvNV();
	piglit_dispatch_glGetCombinerOutputParameterfvNV(stage, portion, pname, params);
}

PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC piglit_dispatch_glGetCombinerOutputParameterfvNV = stub_glGetCombinerOutputParameterfvNV;

static void*
resolve_glGetCombinerOutputParameterivNV(void)
{
	/* glGetCombinerOutputParameterivNV (GL_NV_register_combiners) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_register_combiners")) {
		return get_ext_proc("glGetCombinerOutputParameterivNV");
	}

	unsupported("glGetCombinerOutputParameterivNV");
	return piglit_dispatch_glGetCombinerOutputParameterivNV;
}

static void APIENTRY
stub_glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetCombinerOutputParameterivNV = resolve_glGetCombinerOutputParameterivNV();
	piglit_dispatch_glGetCombinerOutputParameterivNV(stage, portion, pname, params);
}

PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC piglit_dispatch_glGetCombinerOutputParameterivNV = stub_glGetCombinerOutputParameterivNV;

static void*
resolve_glGetCombinerStageParameterfvNV(void)
{
	/* glGetCombinerStageParameterfvNV (GL_NV_register_combiners2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_register_combiners2")) {
		return get_ext_proc("glGetCombinerStageParameterfvNV");
	}

	unsupported("glGetCombinerStageParameterfvNV");
	return piglit_dispatch_glGetCombinerStageParameterfvNV;
}

static void APIENTRY
stub_glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetCombinerStageParameterfvNV = resolve_glGetCombinerStageParameterfvNV();
	piglit_dispatch_glGetCombinerStageParameterfvNV(stage, pname, params);
}

PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC piglit_dispatch_glGetCombinerStageParameterfvNV = stub_glGetCombinerStageParameterfvNV;

static void*
resolve_glGetCompressedMultiTexImageEXT(void)
{
	/* glGetCompressedMultiTexImageEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetCompressedMultiTexImageEXT");
	}

	unsupported("glGetCompressedMultiTexImageEXT");
	return piglit_dispatch_glGetCompressedMultiTexImageEXT;
}

static void APIENTRY
stub_glGetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint lod, void * img)
{
	check_initialized();
	piglit_dispatch_glGetCompressedMultiTexImageEXT = resolve_glGetCompressedMultiTexImageEXT();
	piglit_dispatch_glGetCompressedMultiTexImageEXT(texunit, target, lod, img);
}

PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC piglit_dispatch_glGetCompressedMultiTexImageEXT = stub_glGetCompressedMultiTexImageEXT;

static void*
resolve_glGetCompressedTexImage(void)
{
	/* glGetCompressedTexImage (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetCompressedTexImage", 13);
	}

	/* glGetCompressedTexImageARB (GL_ARB_texture_compression) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_texture_compression")) {
		return get_ext_proc("glGetCompressedTexImageARB");
	}

	unsupported("glGetCompressedTexImage");
	return piglit_dispatch_glGetCompressedTexImage;
}

static void APIENTRY
stub_glGetCompressedTexImage(GLenum target, GLint level, void * img)
{
	check_initialized();
	piglit_dispatch_glGetCompressedTexImage = resolve_glGetCompressedTexImage();
	piglit_dispatch_glGetCompressedTexImage(target, level, img);
}

PFNGLGETCOMPRESSEDTEXIMAGEPROC piglit_dispatch_glGetCompressedTexImage = stub_glGetCompressedTexImage;

static void*
resolve_glGetCompressedTextureImageEXT(void)
{
	/* glGetCompressedTextureImageEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetCompressedTextureImageEXT");
	}

	unsupported("glGetCompressedTextureImageEXT");
	return piglit_dispatch_glGetCompressedTextureImageEXT;
}

static void APIENTRY
stub_glGetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint lod, void * img)
{
	check_initialized();
	piglit_dispatch_glGetCompressedTextureImageEXT = resolve_glGetCompressedTextureImageEXT();
	piglit_dispatch_glGetCompressedTextureImageEXT(texture, target, lod, img);
}

PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC piglit_dispatch_glGetCompressedTextureImageEXT = stub_glGetCompressedTextureImageEXT;

static void*
resolve_glGetConvolutionFilter(void)
{
	/* glGetConvolutionFilter (GL_ARB_imaging) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_imaging")) {
		return get_ext_proc("glGetConvolutionFilter");
	}

	unsupported("glGetConvolutionFilter");
	return piglit_dispatch_glGetConvolutionFilter;
}

static void APIENTRY
stub_glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, void * image)
{
	check_initialized();
	piglit_dispatch_glGetConvolutionFilter = resolve_glGetConvolutionFilter();
	piglit_dispatch_glGetConvolutionFilter(target, format, type, image);
}

PFNGLGETCONVOLUTIONFILTERPROC piglit_dispatch_glGetConvolutionFilter = stub_glGetConvolutionFilter;

static void*
resolve_glGetConvolutionFilterEXT(void)
{
	/* glGetConvolutionFilterEXT (GL_EXT_convolution) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_convolution")) {
		return get_ext_proc("glGetConvolutionFilterEXT");
	}

	unsupported("glGetConvolutionFilterEXT");
	return piglit_dispatch_glGetConvolutionFilterEXT;
}

static void APIENTRY
stub_glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, void * image)
{
	check_initialized();
	piglit_dispatch_glGetConvolutionFilterEXT = resolve_glGetConvolutionFilterEXT();
	piglit_dispatch_glGetConvolutionFilterEXT(target, format, type, image);
}

PFNGLGETCONVOLUTIONFILTEREXTPROC piglit_dispatch_glGetConvolutionFilterEXT = stub_glGetConvolutionFilterEXT;

static void*
resolve_glGetConvolutionParameterfv(void)
{
	/* glGetConvolutionParameterfv (GL_ARB_imaging) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_imaging")) {
		return get_ext_proc("glGetConvolutionParameterfv");
	}

	unsupported("glGetConvolutionParameterfv");
	return piglit_dispatch_glGetConvolutionParameterfv;
}

static void APIENTRY
stub_glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetConvolutionParameterfv = resolve_glGetConvolutionParameterfv();
	piglit_dispatch_glGetConvolutionParameterfv(target, pname, params);
}

PFNGLGETCONVOLUTIONPARAMETERFVPROC piglit_dispatch_glGetConvolutionParameterfv = stub_glGetConvolutionParameterfv;

static void*
resolve_glGetConvolutionParameterfvEXT(void)
{
	/* glGetConvolutionParameterfvEXT (GL_EXT_convolution) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_convolution")) {
		return get_ext_proc("glGetConvolutionParameterfvEXT");
	}

	unsupported("glGetConvolutionParameterfvEXT");
	return piglit_dispatch_glGetConvolutionParameterfvEXT;
}

static void APIENTRY
stub_glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetConvolutionParameterfvEXT = resolve_glGetConvolutionParameterfvEXT();
	piglit_dispatch_glGetConvolutionParameterfvEXT(target, pname, params);
}

PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC piglit_dispatch_glGetConvolutionParameterfvEXT = stub_glGetConvolutionParameterfvEXT;

static void*
resolve_glGetConvolutionParameteriv(void)
{
	/* glGetConvolutionParameteriv (GL_ARB_imaging) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_imaging")) {
		return get_ext_proc("glGetConvolutionParameteriv");
	}

	unsupported("glGetConvolutionParameteriv");
	return piglit_dispatch_glGetConvolutionParameteriv;
}

static void APIENTRY
stub_glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetConvolutionParameteriv = resolve_glGetConvolutionParameteriv();
	piglit_dispatch_glGetConvolutionParameteriv(target, pname, params);
}

PFNGLGETCONVOLUTIONPARAMETERIVPROC piglit_dispatch_glGetConvolutionParameteriv = stub_glGetConvolutionParameteriv;

static void*
resolve_glGetConvolutionParameterivEXT(void)
{
	/* glGetConvolutionParameterivEXT (GL_EXT_convolution) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_convolution")) {
		return get_ext_proc("glGetConvolutionParameterivEXT");
	}

	unsupported("glGetConvolutionParameterivEXT");
	return piglit_dispatch_glGetConvolutionParameterivEXT;
}

static void APIENTRY
stub_glGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetConvolutionParameterivEXT = resolve_glGetConvolutionParameterivEXT();
	piglit_dispatch_glGetConvolutionParameterivEXT(target, pname, params);
}

PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC piglit_dispatch_glGetConvolutionParameterivEXT = stub_glGetConvolutionParameterivEXT;

static void*
resolve_glGetConvolutionParameterxvOES(void)
{
	/* glGetConvolutionParameterxvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glGetConvolutionParameterxvOES");
	}

	unsupported("glGetConvolutionParameterxvOES");
	return piglit_dispatch_glGetConvolutionParameterxvOES;
}

static void APIENTRY
stub_glGetConvolutionParameterxvOES(GLenum target, GLenum pname, GLfixed * params)
{
	check_initialized();
	piglit_dispatch_glGetConvolutionParameterxvOES = resolve_glGetConvolutionParameterxvOES();
	piglit_dispatch_glGetConvolutionParameterxvOES(target, pname, params);
}

PFNGLGETCONVOLUTIONPARAMETERXVOESPROC piglit_dispatch_glGetConvolutionParameterxvOES = stub_glGetConvolutionParameterxvOES;

static void*
resolve_glGetDebugMessageLog(void)
{
	/* glGetDebugMessageLog (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetDebugMessageLog", 43);
	}

	/* glGetDebugMessageLogARB (GL_ARB_debug_output) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_debug_output")) {
		return get_ext_proc("glGetDebugMessageLogARB");
	}

	/* glGetDebugMessageLog (GL_KHR_debug) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_KHR_debug")) {
		return get_ext_proc("glGetDebugMessageLog");
	}

	/* glGetDebugMessageLogKHR (GL_KHR_debug) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_KHR_debug")) {
		return get_ext_proc("glGetDebugMessageLogKHR");
	}

	unsupported("glGetDebugMessageLog");
	return piglit_dispatch_glGetDebugMessageLog;
}

static GLuint APIENTRY
stub_glGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog)
{
	check_initialized();
	piglit_dispatch_glGetDebugMessageLog = resolve_glGetDebugMessageLog();
	return piglit_dispatch_glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog);
}

PFNGLGETDEBUGMESSAGELOGPROC piglit_dispatch_glGetDebugMessageLog = stub_glGetDebugMessageLog;

static void*
resolve_glGetDebugMessageLogAMD(void)
{
	/* glGetDebugMessageLogAMD (GL_AMD_debug_output) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_debug_output")) {
		return get_ext_proc("glGetDebugMessageLogAMD");
	}

	unsupported("glGetDebugMessageLogAMD");
	return piglit_dispatch_glGetDebugMessageLogAMD;
}

static GLuint APIENTRY
stub_glGetDebugMessageLogAMD(GLuint count, GLsizei bufsize, GLenum * categories, GLuint * severities, GLuint * ids, GLsizei * lengths, GLchar * message)
{
	check_initialized();
	piglit_dispatch_glGetDebugMessageLogAMD = resolve_glGetDebugMessageLogAMD();
	return piglit_dispatch_glGetDebugMessageLogAMD(count, bufsize, categories, severities, ids, lengths, message);
}

PFNGLGETDEBUGMESSAGELOGAMDPROC piglit_dispatch_glGetDebugMessageLogAMD = stub_glGetDebugMessageLogAMD;

static void*
resolve_glGetDetailTexFuncSGIS(void)
{
	/* glGetDetailTexFuncSGIS (GL_SGIS_detail_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIS_detail_texture")) {
		return get_ext_proc("glGetDetailTexFuncSGIS");
	}

	unsupported("glGetDetailTexFuncSGIS");
	return piglit_dispatch_glGetDetailTexFuncSGIS;
}

static void APIENTRY
stub_glGetDetailTexFuncSGIS(GLenum target, GLfloat * points)
{
	check_initialized();
	piglit_dispatch_glGetDetailTexFuncSGIS = resolve_glGetDetailTexFuncSGIS();
	piglit_dispatch_glGetDetailTexFuncSGIS(target, points);
}

PFNGLGETDETAILTEXFUNCSGISPROC piglit_dispatch_glGetDetailTexFuncSGIS = stub_glGetDetailTexFuncSGIS;

static void*
resolve_glGetDoubleIndexedvEXT(void)
{
	/* glGetDoublei_v (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetDoublei_v", 41);
	}

	/* glGetDoublei_v (GL_ARB_viewport_array) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_viewport_array")) {
		return get_ext_proc("glGetDoublei_v");
	}

	/* glGetDoubleIndexedvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetDoubleIndexedvEXT");
	}

	/* glGetDoublei_vEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetDoublei_vEXT");
	}

	unsupported("glGetDoubleIndexedvEXT");
	return piglit_dispatch_glGetDoubleIndexedvEXT;
}

static void APIENTRY
stub_glGetDoubleIndexedvEXT(GLenum target, GLuint index, GLdouble * data)
{
	check_initialized();
	piglit_dispatch_glGetDoubleIndexedvEXT = resolve_glGetDoubleIndexedvEXT();
	piglit_dispatch_glGetDoubleIndexedvEXT(target, index, data);
}

PFNGLGETDOUBLEINDEXEDVEXTPROC piglit_dispatch_glGetDoubleIndexedvEXT = stub_glGetDoubleIndexedvEXT;

static void*
resolve_glGetDoublev(void)
{
	/* glGetDoublev (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glGetDoublev", 10);
	}

	unsupported("glGetDoublev");
	return piglit_dispatch_glGetDoublev;
}

static void APIENTRY
stub_glGetDoublev(GLenum pname, GLdouble * data)
{
	check_initialized();
	piglit_dispatch_glGetDoublev = resolve_glGetDoublev();
	piglit_dispatch_glGetDoublev(pname, data);
}

PFNGLGETDOUBLEVPROC piglit_dispatch_glGetDoublev = stub_glGetDoublev;

static void*
resolve_glGetDriverControlStringQCOM(void)
{
	/* glGetDriverControlStringQCOM (GL_QCOM_driver_control) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_QCOM_driver_control")) {
		return get_ext_proc("glGetDriverControlStringQCOM");
	}

	unsupported("glGetDriverControlStringQCOM");
	return piglit_dispatch_glGetDriverControlStringQCOM;
}

static void APIENTRY
stub_glGetDriverControlStringQCOM(GLuint driverControl, GLsizei bufSize, GLsizei * length, GLchar * driverControlString)
{
	check_initialized();
	piglit_dispatch_glGetDriverControlStringQCOM = resolve_glGetDriverControlStringQCOM();
	piglit_dispatch_glGetDriverControlStringQCOM(driverControl, bufSize, length, driverControlString);
}

PFNGLGETDRIVERCONTROLSTRINGQCOMPROC piglit_dispatch_glGetDriverControlStringQCOM = stub_glGetDriverControlStringQCOM;

static void*
resolve_glGetDriverControlsQCOM(void)
{
	/* glGetDriverControlsQCOM (GL_QCOM_driver_control) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_QCOM_driver_control")) {
		return get_ext_proc("glGetDriverControlsQCOM");
	}

	unsupported("glGetDriverControlsQCOM");
	return piglit_dispatch_glGetDriverControlsQCOM;
}

static void APIENTRY
stub_glGetDriverControlsQCOM(GLint * num, GLsizei size, GLuint * driverControls)
{
	check_initialized();
	piglit_dispatch_glGetDriverControlsQCOM = resolve_glGetDriverControlsQCOM();
	piglit_dispatch_glGetDriverControlsQCOM(num, size, driverControls);
}

PFNGLGETDRIVERCONTROLSQCOMPROC piglit_dispatch_glGetDriverControlsQCOM = stub_glGetDriverControlsQCOM;

static void*
resolve_glGetError(void)
{
	/* glGetError (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glGetError", 10);
	}

	/* glGetError (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glGetError", 10);
	}

	/* glGetError (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glGetError", 20);
	}

	unsupported("glGetError");
	return piglit_dispatch_glGetError;
}

static GLenum APIENTRY
stub_glGetError()
{
	check_initialized();
	piglit_dispatch_glGetError = resolve_glGetError();
	return piglit_dispatch_glGetError();
}

PFNGLGETERRORPROC piglit_dispatch_glGetError = stub_glGetError;

static void*
resolve_glGetFenceivNV(void)
{
	/* glGetFenceivNV (GL_NV_fence) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_NV_fence")) {
		return get_ext_proc("glGetFenceivNV");
	}

	unsupported("glGetFenceivNV");
	return piglit_dispatch_glGetFenceivNV;
}

static void APIENTRY
stub_glGetFenceivNV(GLuint fence, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetFenceivNV = resolve_glGetFenceivNV();
	piglit_dispatch_glGetFenceivNV(fence, pname, params);
}

PFNGLGETFENCEIVNVPROC piglit_dispatch_glGetFenceivNV = stub_glGetFenceivNV;

static void*
resolve_glGetFinalCombinerInputParameterfvNV(void)
{
	/* glGetFinalCombinerInputParameterfvNV (GL_NV_register_combiners) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_register_combiners")) {
		return get_ext_proc("glGetFinalCombinerInputParameterfvNV");
	}

	unsupported("glGetFinalCombinerInputParameterfvNV");
	return piglit_dispatch_glGetFinalCombinerInputParameterfvNV;
}

static void APIENTRY
stub_glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetFinalCombinerInputParameterfvNV = resolve_glGetFinalCombinerInputParameterfvNV();
	piglit_dispatch_glGetFinalCombinerInputParameterfvNV(variable, pname, params);
}

PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC piglit_dispatch_glGetFinalCombinerInputParameterfvNV = stub_glGetFinalCombinerInputParameterfvNV;

static void*
resolve_glGetFinalCombinerInputParameterivNV(void)
{
	/* glGetFinalCombinerInputParameterivNV (GL_NV_register_combiners) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_register_combiners")) {
		return get_ext_proc("glGetFinalCombinerInputParameterivNV");
	}

	unsupported("glGetFinalCombinerInputParameterivNV");
	return piglit_dispatch_glGetFinalCombinerInputParameterivNV;
}

static void APIENTRY
stub_glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetFinalCombinerInputParameterivNV = resolve_glGetFinalCombinerInputParameterivNV();
	piglit_dispatch_glGetFinalCombinerInputParameterivNV(variable, pname, params);
}

PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC piglit_dispatch_glGetFinalCombinerInputParameterivNV = stub_glGetFinalCombinerInputParameterivNV;

static void*
resolve_glGetFirstPerfQueryIdINTEL(void)
{
	/* glGetFirstPerfQueryIdINTEL (GL_INTEL_performance_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_INTEL_performance_query")) {
		return get_ext_proc("glGetFirstPerfQueryIdINTEL");
	}

	unsupported("glGetFirstPerfQueryIdINTEL");
	return piglit_dispatch_glGetFirstPerfQueryIdINTEL;
}

static void APIENTRY
stub_glGetFirstPerfQueryIdINTEL(GLuint * queryId)
{
	check_initialized();
	piglit_dispatch_glGetFirstPerfQueryIdINTEL = resolve_glGetFirstPerfQueryIdINTEL();
	piglit_dispatch_glGetFirstPerfQueryIdINTEL(queryId);
}

PFNGLGETFIRSTPERFQUERYIDINTELPROC piglit_dispatch_glGetFirstPerfQueryIdINTEL = stub_glGetFirstPerfQueryIdINTEL;

static void*
resolve_glGetFixedv(void)
{
	/* glGetFixedv (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glGetFixedv", 10);
	}

	unsupported("glGetFixedv");
	return piglit_dispatch_glGetFixedv;
}

static void APIENTRY
stub_glGetFixedv(GLenum pname, GLfixed * params)
{
	check_initialized();
	piglit_dispatch_glGetFixedv = resolve_glGetFixedv();
	piglit_dispatch_glGetFixedv(pname, params);
}

PFNGLGETFIXEDVPROC piglit_dispatch_glGetFixedv = stub_glGetFixedv;

static void*
resolve_glGetFixedvOES(void)
{
	/* glGetFixedvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glGetFixedvOES");
	}

	unsupported("glGetFixedvOES");
	return piglit_dispatch_glGetFixedvOES;
}

static void APIENTRY
stub_glGetFixedvOES(GLenum pname, GLfixed * params)
{
	check_initialized();
	piglit_dispatch_glGetFixedvOES = resolve_glGetFixedvOES();
	piglit_dispatch_glGetFixedvOES(pname, params);
}

PFNGLGETFIXEDVOESPROC piglit_dispatch_glGetFixedvOES = stub_glGetFixedvOES;

static void*
resolve_glGetFloatIndexedvEXT(void)
{
	/* glGetFloati_v (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetFloati_v", 41);
	}

	/* glGetFloati_v (GL_ARB_viewport_array) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_viewport_array")) {
		return get_ext_proc("glGetFloati_v");
	}

	/* glGetFloatIndexedvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetFloatIndexedvEXT");
	}

	/* glGetFloati_vEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetFloati_vEXT");
	}

	unsupported("glGetFloatIndexedvEXT");
	return piglit_dispatch_glGetFloatIndexedvEXT;
}

static void APIENTRY
stub_glGetFloatIndexedvEXT(GLenum target, GLuint index, GLfloat * data)
{
	check_initialized();
	piglit_dispatch_glGetFloatIndexedvEXT = resolve_glGetFloatIndexedvEXT();
	piglit_dispatch_glGetFloatIndexedvEXT(target, index, data);
}

PFNGLGETFLOATINDEXEDVEXTPROC piglit_dispatch_glGetFloatIndexedvEXT = stub_glGetFloatIndexedvEXT;

static void*
resolve_glGetFloatv(void)
{
	/* glGetFloatv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glGetFloatv", 10);
	}

	/* glGetFloatv (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glGetFloatv", 10);
	}

	/* glGetFloatv (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glGetFloatv", 20);
	}

	unsupported("glGetFloatv");
	return piglit_dispatch_glGetFloatv;
}

static void APIENTRY
stub_glGetFloatv(GLenum pname, GLfloat * data)
{
	check_initialized();
	piglit_dispatch_glGetFloatv = resolve_glGetFloatv();
	piglit_dispatch_glGetFloatv(pname, data);
}

PFNGLGETFLOATVPROC piglit_dispatch_glGetFloatv = stub_glGetFloatv;

static void*
resolve_glGetFogFuncSGIS(void)
{
	/* glGetFogFuncSGIS (GL_SGIS_fog_function) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIS_fog_function")) {
		return get_ext_proc("glGetFogFuncSGIS");
	}

	unsupported("glGetFogFuncSGIS");
	return piglit_dispatch_glGetFogFuncSGIS;
}

static void APIENTRY
stub_glGetFogFuncSGIS(GLfloat * points)
{
	check_initialized();
	piglit_dispatch_glGetFogFuncSGIS = resolve_glGetFogFuncSGIS();
	piglit_dispatch_glGetFogFuncSGIS(points);
}

PFNGLGETFOGFUNCSGISPROC piglit_dispatch_glGetFogFuncSGIS = stub_glGetFogFuncSGIS;

static void*
resolve_glGetFragDataIndex(void)
{
	/* glGetFragDataIndex (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetFragDataIndex", 33);
	}

	/* glGetFragDataIndex (GL_ARB_blend_func_extended) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_blend_func_extended")) {
		return get_ext_proc("glGetFragDataIndex");
	}

	unsupported("glGetFragDataIndex");
	return piglit_dispatch_glGetFragDataIndex;
}

static GLint APIENTRY
stub_glGetFragDataIndex(GLuint program, const GLchar * name)
{
	check_initialized();
	piglit_dispatch_glGetFragDataIndex = resolve_glGetFragDataIndex();
	return piglit_dispatch_glGetFragDataIndex(program, name);
}

PFNGLGETFRAGDATAINDEXPROC piglit_dispatch_glGetFragDataIndex = stub_glGetFragDataIndex;

static void*
resolve_glGetFragDataLocation(void)
{
	/* glGetFragDataLocation (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetFragDataLocation", 30);
	}

	/* glGetFragDataLocation (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetFragDataLocation", 30);
	}

	/* glGetFragDataLocationEXT (GL_EXT_gpu_shader4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_gpu_shader4")) {
		return get_ext_proc("glGetFragDataLocationEXT");
	}

	unsupported("glGetFragDataLocation");
	return piglit_dispatch_glGetFragDataLocation;
}

static GLint APIENTRY
stub_glGetFragDataLocation(GLuint program, const GLchar * name)
{
	check_initialized();
	piglit_dispatch_glGetFragDataLocation = resolve_glGetFragDataLocation();
	return piglit_dispatch_glGetFragDataLocation(program, name);
}

PFNGLGETFRAGDATALOCATIONPROC piglit_dispatch_glGetFragDataLocation = stub_glGetFragDataLocation;

static void*
resolve_glGetFragmentLightfvSGIX(void)
{
	/* glGetFragmentLightfvSGIX (GL_SGIX_fragment_lighting) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_fragment_lighting")) {
		return get_ext_proc("glGetFragmentLightfvSGIX");
	}

	unsupported("glGetFragmentLightfvSGIX");
	return piglit_dispatch_glGetFragmentLightfvSGIX;
}

static void APIENTRY
stub_glGetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetFragmentLightfvSGIX = resolve_glGetFragmentLightfvSGIX();
	piglit_dispatch_glGetFragmentLightfvSGIX(light, pname, params);
}

PFNGLGETFRAGMENTLIGHTFVSGIXPROC piglit_dispatch_glGetFragmentLightfvSGIX = stub_glGetFragmentLightfvSGIX;

static void*
resolve_glGetFragmentLightivSGIX(void)
{
	/* glGetFragmentLightivSGIX (GL_SGIX_fragment_lighting) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_fragment_lighting")) {
		return get_ext_proc("glGetFragmentLightivSGIX");
	}

	unsupported("glGetFragmentLightivSGIX");
	return piglit_dispatch_glGetFragmentLightivSGIX;
}

static void APIENTRY
stub_glGetFragmentLightivSGIX(GLenum light, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetFragmentLightivSGIX = resolve_glGetFragmentLightivSGIX();
	piglit_dispatch_glGetFragmentLightivSGIX(light, pname, params);
}

PFNGLGETFRAGMENTLIGHTIVSGIXPROC piglit_dispatch_glGetFragmentLightivSGIX = stub_glGetFragmentLightivSGIX;

static void*
resolve_glGetFragmentMaterialfvSGIX(void)
{
	/* glGetFragmentMaterialfvSGIX (GL_SGIX_fragment_lighting) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_fragment_lighting")) {
		return get_ext_proc("glGetFragmentMaterialfvSGIX");
	}

	unsupported("glGetFragmentMaterialfvSGIX");
	return piglit_dispatch_glGetFragmentMaterialfvSGIX;
}

static void APIENTRY
stub_glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetFragmentMaterialfvSGIX = resolve_glGetFragmentMaterialfvSGIX();
	piglit_dispatch_glGetFragmentMaterialfvSGIX(face, pname, params);
}

PFNGLGETFRAGMENTMATERIALFVSGIXPROC piglit_dispatch_glGetFragmentMaterialfvSGIX = stub_glGetFragmentMaterialfvSGIX;

static void*
resolve_glGetFragmentMaterialivSGIX(void)
{
	/* glGetFragmentMaterialivSGIX (GL_SGIX_fragment_lighting) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_fragment_lighting")) {
		return get_ext_proc("glGetFragmentMaterialivSGIX");
	}

	unsupported("glGetFragmentMaterialivSGIX");
	return piglit_dispatch_glGetFragmentMaterialivSGIX;
}

static void APIENTRY
stub_glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetFragmentMaterialivSGIX = resolve_glGetFragmentMaterialivSGIX();
	piglit_dispatch_glGetFragmentMaterialivSGIX(face, pname, params);
}

PFNGLGETFRAGMENTMATERIALIVSGIXPROC piglit_dispatch_glGetFragmentMaterialivSGIX = stub_glGetFragmentMaterialivSGIX;

static void*
resolve_glGetFramebufferAttachmentParameteriv(void)
{
	/* glGetFramebufferAttachmentParameteriv (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetFramebufferAttachmentParameteriv", 30);
	}

	/* glGetFramebufferAttachmentParameteriv (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glGetFramebufferAttachmentParameteriv", 20);
	}

	/* glGetFramebufferAttachmentParameteriv (GL_ARB_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_framebuffer_object")) {
		return get_ext_proc("glGetFramebufferAttachmentParameteriv");
	}

	/* glGetFramebufferAttachmentParameterivEXT (GL_EXT_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_framebuffer_object")) {
		return get_ext_proc("glGetFramebufferAttachmentParameterivEXT");
	}

	unsupported("glGetFramebufferAttachmentParameteriv");
	return piglit_dispatch_glGetFramebufferAttachmentParameteriv;
}

static void APIENTRY
stub_glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetFramebufferAttachmentParameteriv = resolve_glGetFramebufferAttachmentParameteriv();
	piglit_dispatch_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params);
}

PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC piglit_dispatch_glGetFramebufferAttachmentParameteriv = stub_glGetFramebufferAttachmentParameteriv;

static void*
resolve_glGetFramebufferAttachmentParameterivOES(void)
{
	/* glGetFramebufferAttachmentParameterivOES (GL_OES_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_framebuffer_object")) {
		return get_ext_proc("glGetFramebufferAttachmentParameterivOES");
	}

	unsupported("glGetFramebufferAttachmentParameterivOES");
	return piglit_dispatch_glGetFramebufferAttachmentParameterivOES;
}

static void APIENTRY
stub_glGetFramebufferAttachmentParameterivOES(GLenum target, GLenum attachment, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetFramebufferAttachmentParameterivOES = resolve_glGetFramebufferAttachmentParameterivOES();
	piglit_dispatch_glGetFramebufferAttachmentParameterivOES(target, attachment, pname, params);
}

PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVOESPROC piglit_dispatch_glGetFramebufferAttachmentParameterivOES = stub_glGetFramebufferAttachmentParameterivOES;

static void*
resolve_glGetFramebufferParameteriv(void)
{
	/* glGetFramebufferParameteriv (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetFramebufferParameteriv", 43);
	}

	/* glGetFramebufferParameteriv (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetFramebufferParameteriv", 31);
	}

	/* glGetFramebufferParameteriv (GL_ARB_framebuffer_no_attachments) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_framebuffer_no_attachments")) {
		return get_ext_proc("glGetFramebufferParameteriv");
	}

	unsupported("glGetFramebufferParameteriv");
	return piglit_dispatch_glGetFramebufferParameteriv;
}

static void APIENTRY
stub_glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetFramebufferParameteriv = resolve_glGetFramebufferParameteriv();
	piglit_dispatch_glGetFramebufferParameteriv(target, pname, params);
}

PFNGLGETFRAMEBUFFERPARAMETERIVPROC piglit_dispatch_glGetFramebufferParameteriv = stub_glGetFramebufferParameteriv;

static void*
resolve_glGetFramebufferParameterivEXT(void)
{
	/* glGetFramebufferParameterivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetFramebufferParameterivEXT");
	}

	unsupported("glGetFramebufferParameterivEXT");
	return piglit_dispatch_glGetFramebufferParameterivEXT;
}

static void APIENTRY
stub_glGetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetFramebufferParameterivEXT = resolve_glGetFramebufferParameterivEXT();
	piglit_dispatch_glGetFramebufferParameterivEXT(framebuffer, pname, params);
}

PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC piglit_dispatch_glGetFramebufferParameterivEXT = stub_glGetFramebufferParameterivEXT;

static void*
resolve_glGetGraphicsResetStatusARB(void)
{
	/* glGetGraphicsResetStatusARB (GL_ARB_robustness) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_robustness")) {
		return get_ext_proc("glGetGraphicsResetStatusARB");
	}

	unsupported("glGetGraphicsResetStatusARB");
	return piglit_dispatch_glGetGraphicsResetStatusARB;
}

static GLenum APIENTRY
stub_glGetGraphicsResetStatusARB()
{
	check_initialized();
	piglit_dispatch_glGetGraphicsResetStatusARB = resolve_glGetGraphicsResetStatusARB();
	return piglit_dispatch_glGetGraphicsResetStatusARB();
}

PFNGLGETGRAPHICSRESETSTATUSARBPROC piglit_dispatch_glGetGraphicsResetStatusARB = stub_glGetGraphicsResetStatusARB;

static void*
resolve_glGetGraphicsResetStatusEXT(void)
{
	/* glGetGraphicsResetStatusEXT (GL_EXT_robustness) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_robustness")) {
		return get_ext_proc("glGetGraphicsResetStatusEXT");
	}

	unsupported("glGetGraphicsResetStatusEXT");
	return piglit_dispatch_glGetGraphicsResetStatusEXT;
}

static GLenum APIENTRY
stub_glGetGraphicsResetStatusEXT()
{
	check_initialized();
	piglit_dispatch_glGetGraphicsResetStatusEXT = resolve_glGetGraphicsResetStatusEXT();
	return piglit_dispatch_glGetGraphicsResetStatusEXT();
}

PFNGLGETGRAPHICSRESETSTATUSEXTPROC piglit_dispatch_glGetGraphicsResetStatusEXT = stub_glGetGraphicsResetStatusEXT;

static void*
resolve_glGetHandleARB(void)
{
	/* glGetHandleARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glGetHandleARB");
	}

	unsupported("glGetHandleARB");
	return piglit_dispatch_glGetHandleARB;
}

static GLhandleARB APIENTRY
stub_glGetHandleARB(GLenum pname)
{
	check_initialized();
	piglit_dispatch_glGetHandleARB = resolve_glGetHandleARB();
	return piglit_dispatch_glGetHandleARB(pname);
}

PFNGLGETHANDLEARBPROC piglit_dispatch_glGetHandleARB = stub_glGetHandleARB;

static void*
resolve_glGetHistogram(void)
{
	/* glGetHistogram (GL_ARB_imaging) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_imaging")) {
		return get_ext_proc("glGetHistogram");
	}

	unsupported("glGetHistogram");
	return piglit_dispatch_glGetHistogram;
}

static void APIENTRY
stub_glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values)
{
	check_initialized();
	piglit_dispatch_glGetHistogram = resolve_glGetHistogram();
	piglit_dispatch_glGetHistogram(target, reset, format, type, values);
}

PFNGLGETHISTOGRAMPROC piglit_dispatch_glGetHistogram = stub_glGetHistogram;

static void*
resolve_glGetHistogramEXT(void)
{
	/* glGetHistogramEXT (GL_EXT_histogram) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_histogram")) {
		return get_ext_proc("glGetHistogramEXT");
	}

	unsupported("glGetHistogramEXT");
	return piglit_dispatch_glGetHistogramEXT;
}

static void APIENTRY
stub_glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values)
{
	check_initialized();
	piglit_dispatch_glGetHistogramEXT = resolve_glGetHistogramEXT();
	piglit_dispatch_glGetHistogramEXT(target, reset, format, type, values);
}

PFNGLGETHISTOGRAMEXTPROC piglit_dispatch_glGetHistogramEXT = stub_glGetHistogramEXT;

static void*
resolve_glGetHistogramParameterfv(void)
{
	/* glGetHistogramParameterfv (GL_ARB_imaging) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_imaging")) {
		return get_ext_proc("glGetHistogramParameterfv");
	}

	unsupported("glGetHistogramParameterfv");
	return piglit_dispatch_glGetHistogramParameterfv;
}

static void APIENTRY
stub_glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetHistogramParameterfv = resolve_glGetHistogramParameterfv();
	piglit_dispatch_glGetHistogramParameterfv(target, pname, params);
}

PFNGLGETHISTOGRAMPARAMETERFVPROC piglit_dispatch_glGetHistogramParameterfv = stub_glGetHistogramParameterfv;

static void*
resolve_glGetHistogramParameterfvEXT(void)
{
	/* glGetHistogramParameterfvEXT (GL_EXT_histogram) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_histogram")) {
		return get_ext_proc("glGetHistogramParameterfvEXT");
	}

	unsupported("glGetHistogramParameterfvEXT");
	return piglit_dispatch_glGetHistogramParameterfvEXT;
}

static void APIENTRY
stub_glGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetHistogramParameterfvEXT = resolve_glGetHistogramParameterfvEXT();
	piglit_dispatch_glGetHistogramParameterfvEXT(target, pname, params);
}

PFNGLGETHISTOGRAMPARAMETERFVEXTPROC piglit_dispatch_glGetHistogramParameterfvEXT = stub_glGetHistogramParameterfvEXT;

static void*
resolve_glGetHistogramParameteriv(void)
{
	/* glGetHistogramParameteriv (GL_ARB_imaging) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_imaging")) {
		return get_ext_proc("glGetHistogramParameteriv");
	}

	unsupported("glGetHistogramParameteriv");
	return piglit_dispatch_glGetHistogramParameteriv;
}

static void APIENTRY
stub_glGetHistogramParameteriv(GLenum target, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetHistogramParameteriv = resolve_glGetHistogramParameteriv();
	piglit_dispatch_glGetHistogramParameteriv(target, pname, params);
}

PFNGLGETHISTOGRAMPARAMETERIVPROC piglit_dispatch_glGetHistogramParameteriv = stub_glGetHistogramParameteriv;

static void*
resolve_glGetHistogramParameterivEXT(void)
{
	/* glGetHistogramParameterivEXT (GL_EXT_histogram) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_histogram")) {
		return get_ext_proc("glGetHistogramParameterivEXT");
	}

	unsupported("glGetHistogramParameterivEXT");
	return piglit_dispatch_glGetHistogramParameterivEXT;
}

static void APIENTRY
stub_glGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetHistogramParameterivEXT = resolve_glGetHistogramParameterivEXT();
	piglit_dispatch_glGetHistogramParameterivEXT(target, pname, params);
}

PFNGLGETHISTOGRAMPARAMETERIVEXTPROC piglit_dispatch_glGetHistogramParameterivEXT = stub_glGetHistogramParameterivEXT;

static void*
resolve_glGetHistogramParameterxvOES(void)
{
	/* glGetHistogramParameterxvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glGetHistogramParameterxvOES");
	}

	unsupported("glGetHistogramParameterxvOES");
	return piglit_dispatch_glGetHistogramParameterxvOES;
}

static void APIENTRY
stub_glGetHistogramParameterxvOES(GLenum target, GLenum pname, GLfixed * params)
{
	check_initialized();
	piglit_dispatch_glGetHistogramParameterxvOES = resolve_glGetHistogramParameterxvOES();
	piglit_dispatch_glGetHistogramParameterxvOES(target, pname, params);
}

PFNGLGETHISTOGRAMPARAMETERXVOESPROC piglit_dispatch_glGetHistogramParameterxvOES = stub_glGetHistogramParameterxvOES;

static void*
resolve_glGetImageHandleARB(void)
{
	/* glGetImageHandleARB (GL_ARB_bindless_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_bindless_texture")) {
		return get_ext_proc("glGetImageHandleARB");
	}

	unsupported("glGetImageHandleARB");
	return piglit_dispatch_glGetImageHandleARB;
}

static GLuint64 APIENTRY
stub_glGetImageHandleARB(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
{
	check_initialized();
	piglit_dispatch_glGetImageHandleARB = resolve_glGetImageHandleARB();
	return piglit_dispatch_glGetImageHandleARB(texture, level, layered, layer, format);
}

PFNGLGETIMAGEHANDLEARBPROC piglit_dispatch_glGetImageHandleARB = stub_glGetImageHandleARB;

static void*
resolve_glGetImageHandleNV(void)
{
	/* glGetImageHandleNV (GL_NV_bindless_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_bindless_texture")) {
		return get_ext_proc("glGetImageHandleNV");
	}

	unsupported("glGetImageHandleNV");
	return piglit_dispatch_glGetImageHandleNV;
}

static GLuint64 APIENTRY
stub_glGetImageHandleNV(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
{
	check_initialized();
	piglit_dispatch_glGetImageHandleNV = resolve_glGetImageHandleNV();
	return piglit_dispatch_glGetImageHandleNV(texture, level, layered, layer, format);
}

PFNGLGETIMAGEHANDLENVPROC piglit_dispatch_glGetImageHandleNV = stub_glGetImageHandleNV;

static void*
resolve_glGetImageTransformParameterfvHP(void)
{
	/* glGetImageTransformParameterfvHP (GL_HP_image_transform) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_HP_image_transform")) {
		return get_ext_proc("glGetImageTransformParameterfvHP");
	}

	unsupported("glGetImageTransformParameterfvHP");
	return piglit_dispatch_glGetImageTransformParameterfvHP;
}

static void APIENTRY
stub_glGetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetImageTransformParameterfvHP = resolve_glGetImageTransformParameterfvHP();
	piglit_dispatch_glGetImageTransformParameterfvHP(target, pname, params);
}

PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC piglit_dispatch_glGetImageTransformParameterfvHP = stub_glGetImageTransformParameterfvHP;

static void*
resolve_glGetImageTransformParameterivHP(void)
{
	/* glGetImageTransformParameterivHP (GL_HP_image_transform) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_HP_image_transform")) {
		return get_ext_proc("glGetImageTransformParameterivHP");
	}

	unsupported("glGetImageTransformParameterivHP");
	return piglit_dispatch_glGetImageTransformParameterivHP;
}

static void APIENTRY
stub_glGetImageTransformParameterivHP(GLenum target, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetImageTransformParameterivHP = resolve_glGetImageTransformParameterivHP();
	piglit_dispatch_glGetImageTransformParameterivHP(target, pname, params);
}

PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC piglit_dispatch_glGetImageTransformParameterivHP = stub_glGetImageTransformParameterivHP;

static void*
resolve_glGetInfoLogARB(void)
{
	/* glGetInfoLogARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glGetInfoLogARB");
	}

	unsupported("glGetInfoLogARB");
	return piglit_dispatch_glGetInfoLogARB;
}

static void APIENTRY
stub_glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * infoLog)
{
	check_initialized();
	piglit_dispatch_glGetInfoLogARB = resolve_glGetInfoLogARB();
	piglit_dispatch_glGetInfoLogARB(obj, maxLength, length, infoLog);
}

PFNGLGETINFOLOGARBPROC piglit_dispatch_glGetInfoLogARB = stub_glGetInfoLogARB;

static void*
resolve_glGetInstrumentsSGIX(void)
{
	/* glGetInstrumentsSGIX (GL_SGIX_instruments) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_instruments")) {
		return get_ext_proc("glGetInstrumentsSGIX");
	}

	unsupported("glGetInstrumentsSGIX");
	return piglit_dispatch_glGetInstrumentsSGIX;
}

static GLint APIENTRY
stub_glGetInstrumentsSGIX()
{
	check_initialized();
	piglit_dispatch_glGetInstrumentsSGIX = resolve_glGetInstrumentsSGIX();
	return piglit_dispatch_glGetInstrumentsSGIX();
}

PFNGLGETINSTRUMENTSSGIXPROC piglit_dispatch_glGetInstrumentsSGIX = stub_glGetInstrumentsSGIX;

static void*
resolve_glGetInteger64i_v(void)
{
	/* glGetInteger64i_v (GL_VERSION_3_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetInteger64i_v", 32);
	}

	/* glGetInteger64i_v (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetInteger64i_v", 30);
	}

	unsupported("glGetInteger64i_v");
	return piglit_dispatch_glGetInteger64i_v;
}

static void APIENTRY
stub_glGetInteger64i_v(GLenum target, GLuint index, GLint64 * data)
{
	check_initialized();
	piglit_dispatch_glGetInteger64i_v = resolve_glGetInteger64i_v();
	piglit_dispatch_glGetInteger64i_v(target, index, data);
}

PFNGLGETINTEGER64I_VPROC piglit_dispatch_glGetInteger64i_v = stub_glGetInteger64i_v;

static void*
resolve_glGetInteger64v(void)
{
	/* glGetInteger64v (GL_VERSION_3_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetInteger64v", 32);
	}

	/* glGetInteger64v (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetInteger64v", 30);
	}

	/* glGetInteger64v (GL_ARB_sync) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_sync")) {
		return get_ext_proc("glGetInteger64v");
	}

	/* glGetInteger64vAPPLE (GL_APPLE_sync) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_APPLE_sync")) {
		return get_ext_proc("glGetInteger64vAPPLE");
	}

	unsupported("glGetInteger64v");
	return piglit_dispatch_glGetInteger64v;
}

static void APIENTRY
stub_glGetInteger64v(GLenum pname, GLint64 * data)
{
	check_initialized();
	piglit_dispatch_glGetInteger64v = resolve_glGetInteger64v();
	piglit_dispatch_glGetInteger64v(pname, data);
}

PFNGLGETINTEGER64VPROC piglit_dispatch_glGetInteger64v = stub_glGetInteger64v;

static void*
resolve_glGetIntegerIndexedvEXT(void)
{
	/* glGetIntegeri_v (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetIntegeri_v", 30);
	}

	/* glGetIntegeri_v (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetIntegeri_v", 30);
	}

	/* glGetIntegerIndexedvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetIntegerIndexedvEXT");
	}

	/* glGetIntegerIndexedvEXT (GL_EXT_draw_buffers2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_draw_buffers2")) {
		return get_ext_proc("glGetIntegerIndexedvEXT");
	}

	unsupported("glGetIntegerIndexedvEXT");
	return piglit_dispatch_glGetIntegerIndexedvEXT;
}

static void APIENTRY
stub_glGetIntegerIndexedvEXT(GLenum target, GLuint index, GLint * data)
{
	check_initialized();
	piglit_dispatch_glGetIntegerIndexedvEXT = resolve_glGetIntegerIndexedvEXT();
	piglit_dispatch_glGetIntegerIndexedvEXT(target, index, data);
}

PFNGLGETINTEGERINDEXEDVEXTPROC piglit_dispatch_glGetIntegerIndexedvEXT = stub_glGetIntegerIndexedvEXT;

static void*
resolve_glGetIntegeri_vEXT(void)
{
	/* glGetIntegeri_vEXT (GL_EXT_multiview_draw_buffers) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_multiview_draw_buffers")) {
		return get_ext_proc("glGetIntegeri_vEXT");
	}

	unsupported("glGetIntegeri_vEXT");
	return piglit_dispatch_glGetIntegeri_vEXT;
}

static void APIENTRY
stub_glGetIntegeri_vEXT(GLenum target, GLuint index, GLint * data)
{
	check_initialized();
	piglit_dispatch_glGetIntegeri_vEXT = resolve_glGetIntegeri_vEXT();
	piglit_dispatch_glGetIntegeri_vEXT(target, index, data);
}

PFNGLGETINTEGERI_VEXTPROC piglit_dispatch_glGetIntegeri_vEXT = stub_glGetIntegeri_vEXT;

static void*
resolve_glGetIntegerui64i_vNV(void)
{
	/* glGetIntegerui64i_vNV (GL_NV_vertex_buffer_unified_memory) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_buffer_unified_memory")) {
		return get_ext_proc("glGetIntegerui64i_vNV");
	}

	unsupported("glGetIntegerui64i_vNV");
	return piglit_dispatch_glGetIntegerui64i_vNV;
}

static void APIENTRY
stub_glGetIntegerui64i_vNV(GLenum value, GLuint index, GLuint64EXT * result)
{
	check_initialized();
	piglit_dispatch_glGetIntegerui64i_vNV = resolve_glGetIntegerui64i_vNV();
	piglit_dispatch_glGetIntegerui64i_vNV(value, index, result);
}

PFNGLGETINTEGERUI64I_VNVPROC piglit_dispatch_glGetIntegerui64i_vNV = stub_glGetIntegerui64i_vNV;

static void*
resolve_glGetIntegerui64vNV(void)
{
	/* glGetIntegerui64vNV (GL_NV_shader_buffer_load) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_shader_buffer_load")) {
		return get_ext_proc("glGetIntegerui64vNV");
	}

	unsupported("glGetIntegerui64vNV");
	return piglit_dispatch_glGetIntegerui64vNV;
}

static void APIENTRY
stub_glGetIntegerui64vNV(GLenum value, GLuint64EXT * result)
{
	check_initialized();
	piglit_dispatch_glGetIntegerui64vNV = resolve_glGetIntegerui64vNV();
	piglit_dispatch_glGetIntegerui64vNV(value, result);
}

PFNGLGETINTEGERUI64VNVPROC piglit_dispatch_glGetIntegerui64vNV = stub_glGetIntegerui64vNV;

static void*
resolve_glGetIntegerv(void)
{
	/* glGetIntegerv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glGetIntegerv", 10);
	}

	/* glGetIntegerv (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glGetIntegerv", 10);
	}

	/* glGetIntegerv (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glGetIntegerv", 20);
	}

	unsupported("glGetIntegerv");
	return piglit_dispatch_glGetIntegerv;
}

static void APIENTRY
stub_glGetIntegerv(GLenum pname, GLint * data)
{
	check_initialized();
	piglit_dispatch_glGetIntegerv = resolve_glGetIntegerv();
	piglit_dispatch_glGetIntegerv(pname, data);
}

PFNGLGETINTEGERVPROC piglit_dispatch_glGetIntegerv = stub_glGetIntegerv;

static void*
resolve_glGetInternalformati64v(void)
{
	/* glGetInternalformati64v (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetInternalformati64v", 43);
	}

	/* glGetInternalformati64v (GL_ARB_internalformat_query2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_internalformat_query2")) {
		return get_ext_proc("glGetInternalformati64v");
	}

	unsupported("glGetInternalformati64v");
	return piglit_dispatch_glGetInternalformati64v;
}

static void APIENTRY
stub_glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 * params)
{
	check_initialized();
	piglit_dispatch_glGetInternalformati64v = resolve_glGetInternalformati64v();
	piglit_dispatch_glGetInternalformati64v(target, internalformat, pname, bufSize, params);
}

PFNGLGETINTERNALFORMATI64VPROC piglit_dispatch_glGetInternalformati64v = stub_glGetInternalformati64v;

static void*
resolve_glGetInternalformativ(void)
{
	/* glGetInternalformativ (GL_VERSION_4_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetInternalformativ", 42);
	}

	/* glGetInternalformativ (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetInternalformativ", 30);
	}

	/* glGetInternalformativ (GL_ARB_internalformat_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_internalformat_query")) {
		return get_ext_proc("glGetInternalformativ");
	}

	unsupported("glGetInternalformativ");
	return piglit_dispatch_glGetInternalformativ;
}

static void APIENTRY
stub_glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetInternalformativ = resolve_glGetInternalformativ();
	piglit_dispatch_glGetInternalformativ(target, internalformat, pname, bufSize, params);
}

PFNGLGETINTERNALFORMATIVPROC piglit_dispatch_glGetInternalformativ = stub_glGetInternalformativ;

static void*
resolve_glGetInvariantBooleanvEXT(void)
{
	/* glGetInvariantBooleanvEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glGetInvariantBooleanvEXT");
	}

	unsupported("glGetInvariantBooleanvEXT");
	return piglit_dispatch_glGetInvariantBooleanvEXT;
}

static void APIENTRY
stub_glGetInvariantBooleanvEXT(GLuint id, GLenum value, GLboolean * data)
{
	check_initialized();
	piglit_dispatch_glGetInvariantBooleanvEXT = resolve_glGetInvariantBooleanvEXT();
	piglit_dispatch_glGetInvariantBooleanvEXT(id, value, data);
}

PFNGLGETINVARIANTBOOLEANVEXTPROC piglit_dispatch_glGetInvariantBooleanvEXT = stub_glGetInvariantBooleanvEXT;

static void*
resolve_glGetInvariantFloatvEXT(void)
{
	/* glGetInvariantFloatvEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glGetInvariantFloatvEXT");
	}

	unsupported("glGetInvariantFloatvEXT");
	return piglit_dispatch_glGetInvariantFloatvEXT;
}

static void APIENTRY
stub_glGetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat * data)
{
	check_initialized();
	piglit_dispatch_glGetInvariantFloatvEXT = resolve_glGetInvariantFloatvEXT();
	piglit_dispatch_glGetInvariantFloatvEXT(id, value, data);
}

PFNGLGETINVARIANTFLOATVEXTPROC piglit_dispatch_glGetInvariantFloatvEXT = stub_glGetInvariantFloatvEXT;

static void*
resolve_glGetInvariantIntegervEXT(void)
{
	/* glGetInvariantIntegervEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glGetInvariantIntegervEXT");
	}

	unsupported("glGetInvariantIntegervEXT");
	return piglit_dispatch_glGetInvariantIntegervEXT;
}

static void APIENTRY
stub_glGetInvariantIntegervEXT(GLuint id, GLenum value, GLint * data)
{
	check_initialized();
	piglit_dispatch_glGetInvariantIntegervEXT = resolve_glGetInvariantIntegervEXT();
	piglit_dispatch_glGetInvariantIntegervEXT(id, value, data);
}

PFNGLGETINVARIANTINTEGERVEXTPROC piglit_dispatch_glGetInvariantIntegervEXT = stub_glGetInvariantIntegervEXT;

static void*
resolve_glGetLightfv(void)
{
	/* glGetLightfv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glGetLightfv", 10);
	}

	/* glGetLightfv (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glGetLightfv", 10);
	}

	unsupported("glGetLightfv");
	return piglit_dispatch_glGetLightfv;
}

static void APIENTRY
stub_glGetLightfv(GLenum light, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetLightfv = resolve_glGetLightfv();
	piglit_dispatch_glGetLightfv(light, pname, params);
}

PFNGLGETLIGHTFVPROC piglit_dispatch_glGetLightfv = stub_glGetLightfv;

static void*
resolve_glGetLightiv(void)
{
	/* glGetLightiv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glGetLightiv", 10);
	}

	unsupported("glGetLightiv");
	return piglit_dispatch_glGetLightiv;
}

static void APIENTRY
stub_glGetLightiv(GLenum light, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetLightiv = resolve_glGetLightiv();
	piglit_dispatch_glGetLightiv(light, pname, params);
}

PFNGLGETLIGHTIVPROC piglit_dispatch_glGetLightiv = stub_glGetLightiv;

static void*
resolve_glGetLightxOES(void)
{
	/* glGetLightxOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glGetLightxOES");
	}

	unsupported("glGetLightxOES");
	return piglit_dispatch_glGetLightxOES;
}

static void APIENTRY
stub_glGetLightxOES(GLenum light, GLenum pname, GLfixed * params)
{
	check_initialized();
	piglit_dispatch_glGetLightxOES = resolve_glGetLightxOES();
	piglit_dispatch_glGetLightxOES(light, pname, params);
}

PFNGLGETLIGHTXOESPROC piglit_dispatch_glGetLightxOES = stub_glGetLightxOES;

static void*
resolve_glGetLightxv(void)
{
	/* glGetLightxv (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glGetLightxv", 10);
	}

	unsupported("glGetLightxv");
	return piglit_dispatch_glGetLightxv;
}

static void APIENTRY
stub_glGetLightxv(GLenum light, GLenum pname, GLfixed * params)
{
	check_initialized();
	piglit_dispatch_glGetLightxv = resolve_glGetLightxv();
	piglit_dispatch_glGetLightxv(light, pname, params);
}

PFNGLGETLIGHTXVPROC piglit_dispatch_glGetLightxv = stub_glGetLightxv;

static void*
resolve_glGetLightxvOES(void)
{
	/* glGetLightxvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glGetLightxvOES");
	}

	unsupported("glGetLightxvOES");
	return piglit_dispatch_glGetLightxvOES;
}

static void APIENTRY
stub_glGetLightxvOES(GLenum light, GLenum pname, GLfixed * params)
{
	check_initialized();
	piglit_dispatch_glGetLightxvOES = resolve_glGetLightxvOES();
	piglit_dispatch_glGetLightxvOES(light, pname, params);
}

PFNGLGETLIGHTXVOESPROC piglit_dispatch_glGetLightxvOES = stub_glGetLightxvOES;

static void*
resolve_glGetListParameterfvSGIX(void)
{
	/* glGetListParameterfvSGIX (GL_SGIX_list_priority) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_list_priority")) {
		return get_ext_proc("glGetListParameterfvSGIX");
	}

	unsupported("glGetListParameterfvSGIX");
	return piglit_dispatch_glGetListParameterfvSGIX;
}

static void APIENTRY
stub_glGetListParameterfvSGIX(GLuint list, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetListParameterfvSGIX = resolve_glGetListParameterfvSGIX();
	piglit_dispatch_glGetListParameterfvSGIX(list, pname, params);
}

PFNGLGETLISTPARAMETERFVSGIXPROC piglit_dispatch_glGetListParameterfvSGIX = stub_glGetListParameterfvSGIX;

static void*
resolve_glGetListParameterivSGIX(void)
{
	/* glGetListParameterivSGIX (GL_SGIX_list_priority) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_list_priority")) {
		return get_ext_proc("glGetListParameterivSGIX");
	}

	unsupported("glGetListParameterivSGIX");
	return piglit_dispatch_glGetListParameterivSGIX;
}

static void APIENTRY
stub_glGetListParameterivSGIX(GLuint list, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetListParameterivSGIX = resolve_glGetListParameterivSGIX();
	piglit_dispatch_glGetListParameterivSGIX(list, pname, params);
}

PFNGLGETLISTPARAMETERIVSGIXPROC piglit_dispatch_glGetListParameterivSGIX = stub_glGetListParameterivSGIX;

static void*
resolve_glGetLocalConstantBooleanvEXT(void)
{
	/* glGetLocalConstantBooleanvEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glGetLocalConstantBooleanvEXT");
	}

	unsupported("glGetLocalConstantBooleanvEXT");
	return piglit_dispatch_glGetLocalConstantBooleanvEXT;
}

static void APIENTRY
stub_glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, GLboolean * data)
{
	check_initialized();
	piglit_dispatch_glGetLocalConstantBooleanvEXT = resolve_glGetLocalConstantBooleanvEXT();
	piglit_dispatch_glGetLocalConstantBooleanvEXT(id, value, data);
}

PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC piglit_dispatch_glGetLocalConstantBooleanvEXT = stub_glGetLocalConstantBooleanvEXT;

static void*
resolve_glGetLocalConstantFloatvEXT(void)
{
	/* glGetLocalConstantFloatvEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glGetLocalConstantFloatvEXT");
	}

	unsupported("glGetLocalConstantFloatvEXT");
	return piglit_dispatch_glGetLocalConstantFloatvEXT;
}

static void APIENTRY
stub_glGetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat * data)
{
	check_initialized();
	piglit_dispatch_glGetLocalConstantFloatvEXT = resolve_glGetLocalConstantFloatvEXT();
	piglit_dispatch_glGetLocalConstantFloatvEXT(id, value, data);
}

PFNGLGETLOCALCONSTANTFLOATVEXTPROC piglit_dispatch_glGetLocalConstantFloatvEXT = stub_glGetLocalConstantFloatvEXT;

static void*
resolve_glGetLocalConstantIntegervEXT(void)
{
	/* glGetLocalConstantIntegervEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glGetLocalConstantIntegervEXT");
	}

	unsupported("glGetLocalConstantIntegervEXT");
	return piglit_dispatch_glGetLocalConstantIntegervEXT;
}

static void APIENTRY
stub_glGetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint * data)
{
	check_initialized();
	piglit_dispatch_glGetLocalConstantIntegervEXT = resolve_glGetLocalConstantIntegervEXT();
	piglit_dispatch_glGetLocalConstantIntegervEXT(id, value, data);
}

PFNGLGETLOCALCONSTANTINTEGERVEXTPROC piglit_dispatch_glGetLocalConstantIntegervEXT = stub_glGetLocalConstantIntegervEXT;

static void*
resolve_glGetMapAttribParameterfvNV(void)
{
	/* glGetMapAttribParameterfvNV (GL_NV_evaluators) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_evaluators")) {
		return get_ext_proc("glGetMapAttribParameterfvNV");
	}

	unsupported("glGetMapAttribParameterfvNV");
	return piglit_dispatch_glGetMapAttribParameterfvNV;
}

static void APIENTRY
stub_glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetMapAttribParameterfvNV = resolve_glGetMapAttribParameterfvNV();
	piglit_dispatch_glGetMapAttribParameterfvNV(target, index, pname, params);
}

PFNGLGETMAPATTRIBPARAMETERFVNVPROC piglit_dispatch_glGetMapAttribParameterfvNV = stub_glGetMapAttribParameterfvNV;

static void*
resolve_glGetMapAttribParameterivNV(void)
{
	/* glGetMapAttribParameterivNV (GL_NV_evaluators) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_evaluators")) {
		return get_ext_proc("glGetMapAttribParameterivNV");
	}

	unsupported("glGetMapAttribParameterivNV");
	return piglit_dispatch_glGetMapAttribParameterivNV;
}

static void APIENTRY
stub_glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetMapAttribParameterivNV = resolve_glGetMapAttribParameterivNV();
	piglit_dispatch_glGetMapAttribParameterivNV(target, index, pname, params);
}

PFNGLGETMAPATTRIBPARAMETERIVNVPROC piglit_dispatch_glGetMapAttribParameterivNV = stub_glGetMapAttribParameterivNV;

static void*
resolve_glGetMapControlPointsNV(void)
{
	/* glGetMapControlPointsNV (GL_NV_evaluators) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_evaluators")) {
		return get_ext_proc("glGetMapControlPointsNV");
	}

	unsupported("glGetMapControlPointsNV");
	return piglit_dispatch_glGetMapControlPointsNV;
}

static void APIENTRY
stub_glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void * points)
{
	check_initialized();
	piglit_dispatch_glGetMapControlPointsNV = resolve_glGetMapControlPointsNV();
	piglit_dispatch_glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, points);
}

PFNGLGETMAPCONTROLPOINTSNVPROC piglit_dispatch_glGetMapControlPointsNV = stub_glGetMapControlPointsNV;

static void*
resolve_glGetMapParameterfvNV(void)
{
	/* glGetMapParameterfvNV (GL_NV_evaluators) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_evaluators")) {
		return get_ext_proc("glGetMapParameterfvNV");
	}

	unsupported("glGetMapParameterfvNV");
	return piglit_dispatch_glGetMapParameterfvNV;
}

static void APIENTRY
stub_glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetMapParameterfvNV = resolve_glGetMapParameterfvNV();
	piglit_dispatch_glGetMapParameterfvNV(target, pname, params);
}

PFNGLGETMAPPARAMETERFVNVPROC piglit_dispatch_glGetMapParameterfvNV = stub_glGetMapParameterfvNV;

static void*
resolve_glGetMapParameterivNV(void)
{
	/* glGetMapParameterivNV (GL_NV_evaluators) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_evaluators")) {
		return get_ext_proc("glGetMapParameterivNV");
	}

	unsupported("glGetMapParameterivNV");
	return piglit_dispatch_glGetMapParameterivNV;
}

static void APIENTRY
stub_glGetMapParameterivNV(GLenum target, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetMapParameterivNV = resolve_glGetMapParameterivNV();
	piglit_dispatch_glGetMapParameterivNV(target, pname, params);
}

PFNGLGETMAPPARAMETERIVNVPROC piglit_dispatch_glGetMapParameterivNV = stub_glGetMapParameterivNV;

static void*
resolve_glGetMapdv(void)
{
	/* glGetMapdv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glGetMapdv", 10);
	}

	unsupported("glGetMapdv");
	return piglit_dispatch_glGetMapdv;
}

static void APIENTRY
stub_glGetMapdv(GLenum target, GLenum query, GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glGetMapdv = resolve_glGetMapdv();
	piglit_dispatch_glGetMapdv(target, query, v);
}

PFNGLGETMAPDVPROC piglit_dispatch_glGetMapdv = stub_glGetMapdv;

static void*
resolve_glGetMapfv(void)
{
	/* glGetMapfv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glGetMapfv", 10);
	}

	unsupported("glGetMapfv");
	return piglit_dispatch_glGetMapfv;
}

static void APIENTRY
stub_glGetMapfv(GLenum target, GLenum query, GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glGetMapfv = resolve_glGetMapfv();
	piglit_dispatch_glGetMapfv(target, query, v);
}

PFNGLGETMAPFVPROC piglit_dispatch_glGetMapfv = stub_glGetMapfv;

static void*
resolve_glGetMapiv(void)
{
	/* glGetMapiv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glGetMapiv", 10);
	}

	unsupported("glGetMapiv");
	return piglit_dispatch_glGetMapiv;
}

static void APIENTRY
stub_glGetMapiv(GLenum target, GLenum query, GLint * v)
{
	check_initialized();
	piglit_dispatch_glGetMapiv = resolve_glGetMapiv();
	piglit_dispatch_glGetMapiv(target, query, v);
}

PFNGLGETMAPIVPROC piglit_dispatch_glGetMapiv = stub_glGetMapiv;

static void*
resolve_glGetMapxvOES(void)
{
	/* glGetMapxvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glGetMapxvOES");
	}

	unsupported("glGetMapxvOES");
	return piglit_dispatch_glGetMapxvOES;
}

static void APIENTRY
stub_glGetMapxvOES(GLenum target, GLenum query, GLfixed * v)
{
	check_initialized();
	piglit_dispatch_glGetMapxvOES = resolve_glGetMapxvOES();
	piglit_dispatch_glGetMapxvOES(target, query, v);
}

PFNGLGETMAPXVOESPROC piglit_dispatch_glGetMapxvOES = stub_glGetMapxvOES;

static void*
resolve_glGetMaterialfv(void)
{
	/* glGetMaterialfv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glGetMaterialfv", 10);
	}

	/* glGetMaterialfv (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glGetMaterialfv", 10);
	}

	unsupported("glGetMaterialfv");
	return piglit_dispatch_glGetMaterialfv;
}

static void APIENTRY
stub_glGetMaterialfv(GLenum face, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetMaterialfv = resolve_glGetMaterialfv();
	piglit_dispatch_glGetMaterialfv(face, pname, params);
}

PFNGLGETMATERIALFVPROC piglit_dispatch_glGetMaterialfv = stub_glGetMaterialfv;

static void*
resolve_glGetMaterialiv(void)
{
	/* glGetMaterialiv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glGetMaterialiv", 10);
	}

	unsupported("glGetMaterialiv");
	return piglit_dispatch_glGetMaterialiv;
}

static void APIENTRY
stub_glGetMaterialiv(GLenum face, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetMaterialiv = resolve_glGetMaterialiv();
	piglit_dispatch_glGetMaterialiv(face, pname, params);
}

PFNGLGETMATERIALIVPROC piglit_dispatch_glGetMaterialiv = stub_glGetMaterialiv;

static void*
resolve_glGetMaterialxOES(void)
{
	/* glGetMaterialxOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glGetMaterialxOES");
	}

	unsupported("glGetMaterialxOES");
	return piglit_dispatch_glGetMaterialxOES;
}

static void APIENTRY
stub_glGetMaterialxOES(GLenum face, GLenum pname, GLfixed param)
{
	check_initialized();
	piglit_dispatch_glGetMaterialxOES = resolve_glGetMaterialxOES();
	piglit_dispatch_glGetMaterialxOES(face, pname, param);
}

PFNGLGETMATERIALXOESPROC piglit_dispatch_glGetMaterialxOES = stub_glGetMaterialxOES;

static void*
resolve_glGetMaterialxv(void)
{
	/* glGetMaterialxv (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glGetMaterialxv", 10);
	}

	unsupported("glGetMaterialxv");
	return piglit_dispatch_glGetMaterialxv;
}

static void APIENTRY
stub_glGetMaterialxv(GLenum face, GLenum pname, GLfixed * params)
{
	check_initialized();
	piglit_dispatch_glGetMaterialxv = resolve_glGetMaterialxv();
	piglit_dispatch_glGetMaterialxv(face, pname, params);
}

PFNGLGETMATERIALXVPROC piglit_dispatch_glGetMaterialxv = stub_glGetMaterialxv;

static void*
resolve_glGetMaterialxvOES(void)
{
	/* glGetMaterialxvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glGetMaterialxvOES");
	}

	unsupported("glGetMaterialxvOES");
	return piglit_dispatch_glGetMaterialxvOES;
}

static void APIENTRY
stub_glGetMaterialxvOES(GLenum face, GLenum pname, GLfixed * params)
{
	check_initialized();
	piglit_dispatch_glGetMaterialxvOES = resolve_glGetMaterialxvOES();
	piglit_dispatch_glGetMaterialxvOES(face, pname, params);
}

PFNGLGETMATERIALXVOESPROC piglit_dispatch_glGetMaterialxvOES = stub_glGetMaterialxvOES;

static void*
resolve_glGetMinmax(void)
{
	/* glGetMinmax (GL_ARB_imaging) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_imaging")) {
		return get_ext_proc("glGetMinmax");
	}

	unsupported("glGetMinmax");
	return piglit_dispatch_glGetMinmax;
}

static void APIENTRY
stub_glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values)
{
	check_initialized();
	piglit_dispatch_glGetMinmax = resolve_glGetMinmax();
	piglit_dispatch_glGetMinmax(target, reset, format, type, values);
}

PFNGLGETMINMAXPROC piglit_dispatch_glGetMinmax = stub_glGetMinmax;

static void*
resolve_glGetMinmaxEXT(void)
{
	/* glGetMinmaxEXT (GL_EXT_histogram) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_histogram")) {
		return get_ext_proc("glGetMinmaxEXT");
	}

	unsupported("glGetMinmaxEXT");
	return piglit_dispatch_glGetMinmaxEXT;
}

static void APIENTRY
stub_glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values)
{
	check_initialized();
	piglit_dispatch_glGetMinmaxEXT = resolve_glGetMinmaxEXT();
	piglit_dispatch_glGetMinmaxEXT(target, reset, format, type, values);
}

PFNGLGETMINMAXEXTPROC piglit_dispatch_glGetMinmaxEXT = stub_glGetMinmaxEXT;

static void*
resolve_glGetMinmaxParameterfv(void)
{
	/* glGetMinmaxParameterfv (GL_ARB_imaging) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_imaging")) {
		return get_ext_proc("glGetMinmaxParameterfv");
	}

	unsupported("glGetMinmaxParameterfv");
	return piglit_dispatch_glGetMinmaxParameterfv;
}

static void APIENTRY
stub_glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetMinmaxParameterfv = resolve_glGetMinmaxParameterfv();
	piglit_dispatch_glGetMinmaxParameterfv(target, pname, params);
}

PFNGLGETMINMAXPARAMETERFVPROC piglit_dispatch_glGetMinmaxParameterfv = stub_glGetMinmaxParameterfv;

static void*
resolve_glGetMinmaxParameterfvEXT(void)
{
	/* glGetMinmaxParameterfvEXT (GL_EXT_histogram) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_histogram")) {
		return get_ext_proc("glGetMinmaxParameterfvEXT");
	}

	unsupported("glGetMinmaxParameterfvEXT");
	return piglit_dispatch_glGetMinmaxParameterfvEXT;
}

static void APIENTRY
stub_glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetMinmaxParameterfvEXT = resolve_glGetMinmaxParameterfvEXT();
	piglit_dispatch_glGetMinmaxParameterfvEXT(target, pname, params);
}

PFNGLGETMINMAXPARAMETERFVEXTPROC piglit_dispatch_glGetMinmaxParameterfvEXT = stub_glGetMinmaxParameterfvEXT;

static void*
resolve_glGetMinmaxParameteriv(void)
{
	/* glGetMinmaxParameteriv (GL_ARB_imaging) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_imaging")) {
		return get_ext_proc("glGetMinmaxParameteriv");
	}

	unsupported("glGetMinmaxParameteriv");
	return piglit_dispatch_glGetMinmaxParameteriv;
}

static void APIENTRY
stub_glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetMinmaxParameteriv = resolve_glGetMinmaxParameteriv();
	piglit_dispatch_glGetMinmaxParameteriv(target, pname, params);
}

PFNGLGETMINMAXPARAMETERIVPROC piglit_dispatch_glGetMinmaxParameteriv = stub_glGetMinmaxParameteriv;

static void*
resolve_glGetMinmaxParameterivEXT(void)
{
	/* glGetMinmaxParameterivEXT (GL_EXT_histogram) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_histogram")) {
		return get_ext_proc("glGetMinmaxParameterivEXT");
	}

	unsupported("glGetMinmaxParameterivEXT");
	return piglit_dispatch_glGetMinmaxParameterivEXT;
}

static void APIENTRY
stub_glGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetMinmaxParameterivEXT = resolve_glGetMinmaxParameterivEXT();
	piglit_dispatch_glGetMinmaxParameterivEXT(target, pname, params);
}

PFNGLGETMINMAXPARAMETERIVEXTPROC piglit_dispatch_glGetMinmaxParameterivEXT = stub_glGetMinmaxParameterivEXT;

static void*
resolve_glGetMultiTexEnvfvEXT(void)
{
	/* glGetMultiTexEnvfvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetMultiTexEnvfvEXT");
	}

	unsupported("glGetMultiTexEnvfvEXT");
	return piglit_dispatch_glGetMultiTexEnvfvEXT;
}

static void APIENTRY
stub_glGetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetMultiTexEnvfvEXT = resolve_glGetMultiTexEnvfvEXT();
	piglit_dispatch_glGetMultiTexEnvfvEXT(texunit, target, pname, params);
}

PFNGLGETMULTITEXENVFVEXTPROC piglit_dispatch_glGetMultiTexEnvfvEXT = stub_glGetMultiTexEnvfvEXT;

static void*
resolve_glGetMultiTexEnvivEXT(void)
{
	/* glGetMultiTexEnvivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetMultiTexEnvivEXT");
	}

	unsupported("glGetMultiTexEnvivEXT");
	return piglit_dispatch_glGetMultiTexEnvivEXT;
}

static void APIENTRY
stub_glGetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetMultiTexEnvivEXT = resolve_glGetMultiTexEnvivEXT();
	piglit_dispatch_glGetMultiTexEnvivEXT(texunit, target, pname, params);
}

PFNGLGETMULTITEXENVIVEXTPROC piglit_dispatch_glGetMultiTexEnvivEXT = stub_glGetMultiTexEnvivEXT;

static void*
resolve_glGetMultiTexGendvEXT(void)
{
	/* glGetMultiTexGendvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetMultiTexGendvEXT");
	}

	unsupported("glGetMultiTexGendvEXT");
	return piglit_dispatch_glGetMultiTexGendvEXT;
}

static void APIENTRY
stub_glGetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble * params)
{
	check_initialized();
	piglit_dispatch_glGetMultiTexGendvEXT = resolve_glGetMultiTexGendvEXT();
	piglit_dispatch_glGetMultiTexGendvEXT(texunit, coord, pname, params);
}

PFNGLGETMULTITEXGENDVEXTPROC piglit_dispatch_glGetMultiTexGendvEXT = stub_glGetMultiTexGendvEXT;

static void*
resolve_glGetMultiTexGenfvEXT(void)
{
	/* glGetMultiTexGenfvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetMultiTexGenfvEXT");
	}

	unsupported("glGetMultiTexGenfvEXT");
	return piglit_dispatch_glGetMultiTexGenfvEXT;
}

static void APIENTRY
stub_glGetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetMultiTexGenfvEXT = resolve_glGetMultiTexGenfvEXT();
	piglit_dispatch_glGetMultiTexGenfvEXT(texunit, coord, pname, params);
}

PFNGLGETMULTITEXGENFVEXTPROC piglit_dispatch_glGetMultiTexGenfvEXT = stub_glGetMultiTexGenfvEXT;

static void*
resolve_glGetMultiTexGenivEXT(void)
{
	/* glGetMultiTexGenivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetMultiTexGenivEXT");
	}

	unsupported("glGetMultiTexGenivEXT");
	return piglit_dispatch_glGetMultiTexGenivEXT;
}

static void APIENTRY
stub_glGetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetMultiTexGenivEXT = resolve_glGetMultiTexGenivEXT();
	piglit_dispatch_glGetMultiTexGenivEXT(texunit, coord, pname, params);
}

PFNGLGETMULTITEXGENIVEXTPROC piglit_dispatch_glGetMultiTexGenivEXT = stub_glGetMultiTexGenivEXT;

static void*
resolve_glGetMultiTexImageEXT(void)
{
	/* glGetMultiTexImageEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetMultiTexImageEXT");
	}

	unsupported("glGetMultiTexImageEXT");
	return piglit_dispatch_glGetMultiTexImageEXT;
}

static void APIENTRY
stub_glGetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void * pixels)
{
	check_initialized();
	piglit_dispatch_glGetMultiTexImageEXT = resolve_glGetMultiTexImageEXT();
	piglit_dispatch_glGetMultiTexImageEXT(texunit, target, level, format, type, pixels);
}

PFNGLGETMULTITEXIMAGEEXTPROC piglit_dispatch_glGetMultiTexImageEXT = stub_glGetMultiTexImageEXT;

static void*
resolve_glGetMultiTexLevelParameterfvEXT(void)
{
	/* glGetMultiTexLevelParameterfvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetMultiTexLevelParameterfvEXT");
	}

	unsupported("glGetMultiTexLevelParameterfvEXT");
	return piglit_dispatch_glGetMultiTexLevelParameterfvEXT;
}

static void APIENTRY
stub_glGetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetMultiTexLevelParameterfvEXT = resolve_glGetMultiTexLevelParameterfvEXT();
	piglit_dispatch_glGetMultiTexLevelParameterfvEXT(texunit, target, level, pname, params);
}

PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC piglit_dispatch_glGetMultiTexLevelParameterfvEXT = stub_glGetMultiTexLevelParameterfvEXT;

static void*
resolve_glGetMultiTexLevelParameterivEXT(void)
{
	/* glGetMultiTexLevelParameterivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetMultiTexLevelParameterivEXT");
	}

	unsupported("glGetMultiTexLevelParameterivEXT");
	return piglit_dispatch_glGetMultiTexLevelParameterivEXT;
}

static void APIENTRY
stub_glGetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetMultiTexLevelParameterivEXT = resolve_glGetMultiTexLevelParameterivEXT();
	piglit_dispatch_glGetMultiTexLevelParameterivEXT(texunit, target, level, pname, params);
}

PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC piglit_dispatch_glGetMultiTexLevelParameterivEXT = stub_glGetMultiTexLevelParameterivEXT;

static void*
resolve_glGetMultiTexParameterIivEXT(void)
{
	/* glGetMultiTexParameterIivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetMultiTexParameterIivEXT");
	}

	unsupported("glGetMultiTexParameterIivEXT");
	return piglit_dispatch_glGetMultiTexParameterIivEXT;
}

static void APIENTRY
stub_glGetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetMultiTexParameterIivEXT = resolve_glGetMultiTexParameterIivEXT();
	piglit_dispatch_glGetMultiTexParameterIivEXT(texunit, target, pname, params);
}

PFNGLGETMULTITEXPARAMETERIIVEXTPROC piglit_dispatch_glGetMultiTexParameterIivEXT = stub_glGetMultiTexParameterIivEXT;

static void*
resolve_glGetMultiTexParameterIuivEXT(void)
{
	/* glGetMultiTexParameterIuivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetMultiTexParameterIuivEXT");
	}

	unsupported("glGetMultiTexParameterIuivEXT");
	return piglit_dispatch_glGetMultiTexParameterIuivEXT;
}

static void APIENTRY
stub_glGetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint * params)
{
	check_initialized();
	piglit_dispatch_glGetMultiTexParameterIuivEXT = resolve_glGetMultiTexParameterIuivEXT();
	piglit_dispatch_glGetMultiTexParameterIuivEXT(texunit, target, pname, params);
}

PFNGLGETMULTITEXPARAMETERIUIVEXTPROC piglit_dispatch_glGetMultiTexParameterIuivEXT = stub_glGetMultiTexParameterIuivEXT;

static void*
resolve_glGetMultiTexParameterfvEXT(void)
{
	/* glGetMultiTexParameterfvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetMultiTexParameterfvEXT");
	}

	unsupported("glGetMultiTexParameterfvEXT");
	return piglit_dispatch_glGetMultiTexParameterfvEXT;
}

static void APIENTRY
stub_glGetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetMultiTexParameterfvEXT = resolve_glGetMultiTexParameterfvEXT();
	piglit_dispatch_glGetMultiTexParameterfvEXT(texunit, target, pname, params);
}

PFNGLGETMULTITEXPARAMETERFVEXTPROC piglit_dispatch_glGetMultiTexParameterfvEXT = stub_glGetMultiTexParameterfvEXT;

static void*
resolve_glGetMultiTexParameterivEXT(void)
{
	/* glGetMultiTexParameterivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetMultiTexParameterivEXT");
	}

	unsupported("glGetMultiTexParameterivEXT");
	return piglit_dispatch_glGetMultiTexParameterivEXT;
}

static void APIENTRY
stub_glGetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetMultiTexParameterivEXT = resolve_glGetMultiTexParameterivEXT();
	piglit_dispatch_glGetMultiTexParameterivEXT(texunit, target, pname, params);
}

PFNGLGETMULTITEXPARAMETERIVEXTPROC piglit_dispatch_glGetMultiTexParameterivEXT = stub_glGetMultiTexParameterivEXT;

static void*
resolve_glGetMultisamplefv(void)
{
	/* glGetMultisamplefv (GL_VERSION_3_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetMultisamplefv", 32);
	}

	/* glGetMultisamplefv (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetMultisamplefv", 31);
	}

	/* glGetMultisamplefv (GL_ARB_texture_multisample) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_texture_multisample")) {
		return get_ext_proc("glGetMultisamplefv");
	}

	/* glGetMultisamplefvNV (GL_NV_explicit_multisample) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_explicit_multisample")) {
		return get_ext_proc("glGetMultisamplefvNV");
	}

	unsupported("glGetMultisamplefv");
	return piglit_dispatch_glGetMultisamplefv;
}

static void APIENTRY
stub_glGetMultisamplefv(GLenum pname, GLuint index, GLfloat * val)
{
	check_initialized();
	piglit_dispatch_glGetMultisamplefv = resolve_glGetMultisamplefv();
	piglit_dispatch_glGetMultisamplefv(pname, index, val);
}

PFNGLGETMULTISAMPLEFVPROC piglit_dispatch_glGetMultisamplefv = stub_glGetMultisamplefv;

static void*
resolve_glGetNamedBufferParameterivEXT(void)
{
	/* glGetNamedBufferParameterivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetNamedBufferParameterivEXT");
	}

	unsupported("glGetNamedBufferParameterivEXT");
	return piglit_dispatch_glGetNamedBufferParameterivEXT;
}

static void APIENTRY
stub_glGetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetNamedBufferParameterivEXT = resolve_glGetNamedBufferParameterivEXT();
	piglit_dispatch_glGetNamedBufferParameterivEXT(buffer, pname, params);
}

PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC piglit_dispatch_glGetNamedBufferParameterivEXT = stub_glGetNamedBufferParameterivEXT;

static void*
resolve_glGetNamedBufferParameterui64vNV(void)
{
	/* glGetNamedBufferParameterui64vNV (GL_NV_shader_buffer_load) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_shader_buffer_load")) {
		return get_ext_proc("glGetNamedBufferParameterui64vNV");
	}

	unsupported("glGetNamedBufferParameterui64vNV");
	return piglit_dispatch_glGetNamedBufferParameterui64vNV;
}

static void APIENTRY
stub_glGetNamedBufferParameterui64vNV(GLuint buffer, GLenum pname, GLuint64EXT * params)
{
	check_initialized();
	piglit_dispatch_glGetNamedBufferParameterui64vNV = resolve_glGetNamedBufferParameterui64vNV();
	piglit_dispatch_glGetNamedBufferParameterui64vNV(buffer, pname, params);
}

PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC piglit_dispatch_glGetNamedBufferParameterui64vNV = stub_glGetNamedBufferParameterui64vNV;

static void*
resolve_glGetNamedBufferPointervEXT(void)
{
	/* glGetNamedBufferPointervEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetNamedBufferPointervEXT");
	}

	unsupported("glGetNamedBufferPointervEXT");
	return piglit_dispatch_glGetNamedBufferPointervEXT;
}

static void APIENTRY
stub_glGetNamedBufferPointervEXT(GLuint buffer, GLenum pname, void ** params)
{
	check_initialized();
	piglit_dispatch_glGetNamedBufferPointervEXT = resolve_glGetNamedBufferPointervEXT();
	piglit_dispatch_glGetNamedBufferPointervEXT(buffer, pname, params);
}

PFNGLGETNAMEDBUFFERPOINTERVEXTPROC piglit_dispatch_glGetNamedBufferPointervEXT = stub_glGetNamedBufferPointervEXT;

static void*
resolve_glGetNamedBufferSubDataEXT(void)
{
	/* glGetNamedBufferSubDataEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetNamedBufferSubDataEXT");
	}

	unsupported("glGetNamedBufferSubDataEXT");
	return piglit_dispatch_glGetNamedBufferSubDataEXT;
}

static void APIENTRY
stub_glGetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, void * data)
{
	check_initialized();
	piglit_dispatch_glGetNamedBufferSubDataEXT = resolve_glGetNamedBufferSubDataEXT();
	piglit_dispatch_glGetNamedBufferSubDataEXT(buffer, offset, size, data);
}

PFNGLGETNAMEDBUFFERSUBDATAEXTPROC piglit_dispatch_glGetNamedBufferSubDataEXT = stub_glGetNamedBufferSubDataEXT;

static void*
resolve_glGetNamedFramebufferAttachmentParameterivEXT(void)
{
	/* glGetNamedFramebufferAttachmentParameterivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetNamedFramebufferAttachmentParameterivEXT");
	}

	unsupported("glGetNamedFramebufferAttachmentParameterivEXT");
	return piglit_dispatch_glGetNamedFramebufferAttachmentParameterivEXT;
}

static void APIENTRY
stub_glGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetNamedFramebufferAttachmentParameterivEXT = resolve_glGetNamedFramebufferAttachmentParameterivEXT();
	piglit_dispatch_glGetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, params);
}

PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC piglit_dispatch_glGetNamedFramebufferAttachmentParameterivEXT = stub_glGetNamedFramebufferAttachmentParameterivEXT;

static void*
resolve_glGetNamedFramebufferParameterivEXT(void)
{
	/* glGetNamedFramebufferParameterivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetNamedFramebufferParameterivEXT");
	}

	unsupported("glGetNamedFramebufferParameterivEXT");
	return piglit_dispatch_glGetNamedFramebufferParameterivEXT;
}

static void APIENTRY
stub_glGetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetNamedFramebufferParameterivEXT = resolve_glGetNamedFramebufferParameterivEXT();
	piglit_dispatch_glGetNamedFramebufferParameterivEXT(framebuffer, pname, params);
}

PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC piglit_dispatch_glGetNamedFramebufferParameterivEXT = stub_glGetNamedFramebufferParameterivEXT;

static void*
resolve_glGetNamedProgramLocalParameterIivEXT(void)
{
	/* glGetNamedProgramLocalParameterIivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetNamedProgramLocalParameterIivEXT");
	}

	unsupported("glGetNamedProgramLocalParameterIivEXT");
	return piglit_dispatch_glGetNamedProgramLocalParameterIivEXT;
}

static void APIENTRY
stub_glGetNamedProgramLocalParameterIivEXT(GLuint program, GLenum target, GLuint index, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetNamedProgramLocalParameterIivEXT = resolve_glGetNamedProgramLocalParameterIivEXT();
	piglit_dispatch_glGetNamedProgramLocalParameterIivEXT(program, target, index, params);
}

PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC piglit_dispatch_glGetNamedProgramLocalParameterIivEXT = stub_glGetNamedProgramLocalParameterIivEXT;

static void*
resolve_glGetNamedProgramLocalParameterIuivEXT(void)
{
	/* glGetNamedProgramLocalParameterIuivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetNamedProgramLocalParameterIuivEXT");
	}

	unsupported("glGetNamedProgramLocalParameterIuivEXT");
	return piglit_dispatch_glGetNamedProgramLocalParameterIuivEXT;
}

static void APIENTRY
stub_glGetNamedProgramLocalParameterIuivEXT(GLuint program, GLenum target, GLuint index, GLuint * params)
{
	check_initialized();
	piglit_dispatch_glGetNamedProgramLocalParameterIuivEXT = resolve_glGetNamedProgramLocalParameterIuivEXT();
	piglit_dispatch_glGetNamedProgramLocalParameterIuivEXT(program, target, index, params);
}

PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC piglit_dispatch_glGetNamedProgramLocalParameterIuivEXT = stub_glGetNamedProgramLocalParameterIuivEXT;

static void*
resolve_glGetNamedProgramLocalParameterdvEXT(void)
{
	/* glGetNamedProgramLocalParameterdvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetNamedProgramLocalParameterdvEXT");
	}

	unsupported("glGetNamedProgramLocalParameterdvEXT");
	return piglit_dispatch_glGetNamedProgramLocalParameterdvEXT;
}

static void APIENTRY
stub_glGetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble * params)
{
	check_initialized();
	piglit_dispatch_glGetNamedProgramLocalParameterdvEXT = resolve_glGetNamedProgramLocalParameterdvEXT();
	piglit_dispatch_glGetNamedProgramLocalParameterdvEXT(program, target, index, params);
}

PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC piglit_dispatch_glGetNamedProgramLocalParameterdvEXT = stub_glGetNamedProgramLocalParameterdvEXT;

static void*
resolve_glGetNamedProgramLocalParameterfvEXT(void)
{
	/* glGetNamedProgramLocalParameterfvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetNamedProgramLocalParameterfvEXT");
	}

	unsupported("glGetNamedProgramLocalParameterfvEXT");
	return piglit_dispatch_glGetNamedProgramLocalParameterfvEXT;
}

static void APIENTRY
stub_glGetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetNamedProgramLocalParameterfvEXT = resolve_glGetNamedProgramLocalParameterfvEXT();
	piglit_dispatch_glGetNamedProgramLocalParameterfvEXT(program, target, index, params);
}

PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC piglit_dispatch_glGetNamedProgramLocalParameterfvEXT = stub_glGetNamedProgramLocalParameterfvEXT;

static void*
resolve_glGetNamedProgramStringEXT(void)
{
	/* glGetNamedProgramStringEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetNamedProgramStringEXT");
	}

	unsupported("glGetNamedProgramStringEXT");
	return piglit_dispatch_glGetNamedProgramStringEXT;
}

static void APIENTRY
stub_glGetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, void * string)
{
	check_initialized();
	piglit_dispatch_glGetNamedProgramStringEXT = resolve_glGetNamedProgramStringEXT();
	piglit_dispatch_glGetNamedProgramStringEXT(program, target, pname, string);
}

PFNGLGETNAMEDPROGRAMSTRINGEXTPROC piglit_dispatch_glGetNamedProgramStringEXT = stub_glGetNamedProgramStringEXT;

static void*
resolve_glGetNamedProgramivEXT(void)
{
	/* glGetNamedProgramivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetNamedProgramivEXT");
	}

	unsupported("glGetNamedProgramivEXT");
	return piglit_dispatch_glGetNamedProgramivEXT;
}

static void APIENTRY
stub_glGetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetNamedProgramivEXT = resolve_glGetNamedProgramivEXT();
	piglit_dispatch_glGetNamedProgramivEXT(program, target, pname, params);
}

PFNGLGETNAMEDPROGRAMIVEXTPROC piglit_dispatch_glGetNamedProgramivEXT = stub_glGetNamedProgramivEXT;

static void*
resolve_glGetNamedRenderbufferParameterivEXT(void)
{
	/* glGetNamedRenderbufferParameterivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetNamedRenderbufferParameterivEXT");
	}

	unsupported("glGetNamedRenderbufferParameterivEXT");
	return piglit_dispatch_glGetNamedRenderbufferParameterivEXT;
}

static void APIENTRY
stub_glGetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetNamedRenderbufferParameterivEXT = resolve_glGetNamedRenderbufferParameterivEXT();
	piglit_dispatch_glGetNamedRenderbufferParameterivEXT(renderbuffer, pname, params);
}

PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC piglit_dispatch_glGetNamedRenderbufferParameterivEXT = stub_glGetNamedRenderbufferParameterivEXT;

static void*
resolve_glGetNamedStringARB(void)
{
	/* glGetNamedStringARB (GL_ARB_shading_language_include) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shading_language_include")) {
		return get_ext_proc("glGetNamedStringARB");
	}

	unsupported("glGetNamedStringARB");
	return piglit_dispatch_glGetNamedStringARB;
}

static void APIENTRY
stub_glGetNamedStringARB(GLint namelen, const GLchar * name, GLsizei bufSize, GLint * stringlen, GLchar * string)
{
	check_initialized();
	piglit_dispatch_glGetNamedStringARB = resolve_glGetNamedStringARB();
	piglit_dispatch_glGetNamedStringARB(namelen, name, bufSize, stringlen, string);
}

PFNGLGETNAMEDSTRINGARBPROC piglit_dispatch_glGetNamedStringARB = stub_glGetNamedStringARB;

static void*
resolve_glGetNamedStringivARB(void)
{
	/* glGetNamedStringivARB (GL_ARB_shading_language_include) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shading_language_include")) {
		return get_ext_proc("glGetNamedStringivARB");
	}

	unsupported("glGetNamedStringivARB");
	return piglit_dispatch_glGetNamedStringivARB;
}

static void APIENTRY
stub_glGetNamedStringivARB(GLint namelen, const GLchar * name, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetNamedStringivARB = resolve_glGetNamedStringivARB();
	piglit_dispatch_glGetNamedStringivARB(namelen, name, pname, params);
}

PFNGLGETNAMEDSTRINGIVARBPROC piglit_dispatch_glGetNamedStringivARB = stub_glGetNamedStringivARB;

static void*
resolve_glGetNextPerfQueryIdINTEL(void)
{
	/* glGetNextPerfQueryIdINTEL (GL_INTEL_performance_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_INTEL_performance_query")) {
		return get_ext_proc("glGetNextPerfQueryIdINTEL");
	}

	unsupported("glGetNextPerfQueryIdINTEL");
	return piglit_dispatch_glGetNextPerfQueryIdINTEL;
}

static void APIENTRY
stub_glGetNextPerfQueryIdINTEL(GLuint queryId, GLuint * nextQueryId)
{
	check_initialized();
	piglit_dispatch_glGetNextPerfQueryIdINTEL = resolve_glGetNextPerfQueryIdINTEL();
	piglit_dispatch_glGetNextPerfQueryIdINTEL(queryId, nextQueryId);
}

PFNGLGETNEXTPERFQUERYIDINTELPROC piglit_dispatch_glGetNextPerfQueryIdINTEL = stub_glGetNextPerfQueryIdINTEL;

static void*
resolve_glGetObjectBufferfvATI(void)
{
	/* glGetObjectBufferfvATI (GL_ATI_vertex_array_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_array_object")) {
		return get_ext_proc("glGetObjectBufferfvATI");
	}

	unsupported("glGetObjectBufferfvATI");
	return piglit_dispatch_glGetObjectBufferfvATI;
}

static void APIENTRY
stub_glGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetObjectBufferfvATI = resolve_glGetObjectBufferfvATI();
	piglit_dispatch_glGetObjectBufferfvATI(buffer, pname, params);
}

PFNGLGETOBJECTBUFFERFVATIPROC piglit_dispatch_glGetObjectBufferfvATI = stub_glGetObjectBufferfvATI;

static void*
resolve_glGetObjectBufferivATI(void)
{
	/* glGetObjectBufferivATI (GL_ATI_vertex_array_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_array_object")) {
		return get_ext_proc("glGetObjectBufferivATI");
	}

	unsupported("glGetObjectBufferivATI");
	return piglit_dispatch_glGetObjectBufferivATI;
}

static void APIENTRY
stub_glGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetObjectBufferivATI = resolve_glGetObjectBufferivATI();
	piglit_dispatch_glGetObjectBufferivATI(buffer, pname, params);
}

PFNGLGETOBJECTBUFFERIVATIPROC piglit_dispatch_glGetObjectBufferivATI = stub_glGetObjectBufferivATI;

static void*
resolve_glGetObjectLabel(void)
{
	/* glGetObjectLabel (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetObjectLabel", 43);
	}

	/* glGetObjectLabel (GL_KHR_debug) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_KHR_debug")) {
		return get_ext_proc("glGetObjectLabel");
	}

	/* glGetObjectLabelKHR (GL_KHR_debug) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_KHR_debug")) {
		return get_ext_proc("glGetObjectLabelKHR");
	}

	unsupported("glGetObjectLabel");
	return piglit_dispatch_glGetObjectLabel;
}

static void APIENTRY
stub_glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label)
{
	check_initialized();
	piglit_dispatch_glGetObjectLabel = resolve_glGetObjectLabel();
	piglit_dispatch_glGetObjectLabel(identifier, name, bufSize, length, label);
}

PFNGLGETOBJECTLABELPROC piglit_dispatch_glGetObjectLabel = stub_glGetObjectLabel;

static void*
resolve_glGetObjectLabelEXT(void)
{
	/* glGetObjectLabelEXT (GL_EXT_debug_label) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_debug_label")) {
		return get_ext_proc("glGetObjectLabelEXT");
	}

	unsupported("glGetObjectLabelEXT");
	return piglit_dispatch_glGetObjectLabelEXT;
}

static void APIENTRY
stub_glGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei * length, GLchar * label)
{
	check_initialized();
	piglit_dispatch_glGetObjectLabelEXT = resolve_glGetObjectLabelEXT();
	piglit_dispatch_glGetObjectLabelEXT(type, object, bufSize, length, label);
}

PFNGLGETOBJECTLABELEXTPROC piglit_dispatch_glGetObjectLabelEXT = stub_glGetObjectLabelEXT;

static void*
resolve_glGetObjectParameterfvARB(void)
{
	/* glGetObjectParameterfvARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glGetObjectParameterfvARB");
	}

	unsupported("glGetObjectParameterfvARB");
	return piglit_dispatch_glGetObjectParameterfvARB;
}

static void APIENTRY
stub_glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetObjectParameterfvARB = resolve_glGetObjectParameterfvARB();
	piglit_dispatch_glGetObjectParameterfvARB(obj, pname, params);
}

PFNGLGETOBJECTPARAMETERFVARBPROC piglit_dispatch_glGetObjectParameterfvARB = stub_glGetObjectParameterfvARB;

static void*
resolve_glGetObjectParameterivAPPLE(void)
{
	/* glGetObjectParameterivAPPLE (GL_APPLE_object_purgeable) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_APPLE_object_purgeable")) {
		return get_ext_proc("glGetObjectParameterivAPPLE");
	}

	unsupported("glGetObjectParameterivAPPLE");
	return piglit_dispatch_glGetObjectParameterivAPPLE;
}

static void APIENTRY
stub_glGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetObjectParameterivAPPLE = resolve_glGetObjectParameterivAPPLE();
	piglit_dispatch_glGetObjectParameterivAPPLE(objectType, name, pname, params);
}

PFNGLGETOBJECTPARAMETERIVAPPLEPROC piglit_dispatch_glGetObjectParameterivAPPLE = stub_glGetObjectParameterivAPPLE;

static void*
resolve_glGetObjectParameterivARB(void)
{
	/* glGetObjectParameterivARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glGetObjectParameterivARB");
	}

	unsupported("glGetObjectParameterivARB");
	return piglit_dispatch_glGetObjectParameterivARB;
}

static void APIENTRY
stub_glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetObjectParameterivARB = resolve_glGetObjectParameterivARB();
	piglit_dispatch_glGetObjectParameterivARB(obj, pname, params);
}

PFNGLGETOBJECTPARAMETERIVARBPROC piglit_dispatch_glGetObjectParameterivARB = stub_glGetObjectParameterivARB;

static void*
resolve_glGetObjectPtrLabel(void)
{
	/* glGetObjectPtrLabel (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetObjectPtrLabel", 43);
	}

	/* glGetObjectPtrLabel (GL_KHR_debug) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_KHR_debug")) {
		return get_ext_proc("glGetObjectPtrLabel");
	}

	/* glGetObjectPtrLabelKHR (GL_KHR_debug) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_KHR_debug")) {
		return get_ext_proc("glGetObjectPtrLabelKHR");
	}

	unsupported("glGetObjectPtrLabel");
	return piglit_dispatch_glGetObjectPtrLabel;
}

static void APIENTRY
stub_glGetObjectPtrLabel(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label)
{
	check_initialized();
	piglit_dispatch_glGetObjectPtrLabel = resolve_glGetObjectPtrLabel();
	piglit_dispatch_glGetObjectPtrLabel(ptr, bufSize, length, label);
}

PFNGLGETOBJECTPTRLABELPROC piglit_dispatch_glGetObjectPtrLabel = stub_glGetObjectPtrLabel;

static void*
resolve_glGetOcclusionQueryivNV(void)
{
	/* glGetOcclusionQueryivNV (GL_NV_occlusion_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_occlusion_query")) {
		return get_ext_proc("glGetOcclusionQueryivNV");
	}

	unsupported("glGetOcclusionQueryivNV");
	return piglit_dispatch_glGetOcclusionQueryivNV;
}

static void APIENTRY
stub_glGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetOcclusionQueryivNV = resolve_glGetOcclusionQueryivNV();
	piglit_dispatch_glGetOcclusionQueryivNV(id, pname, params);
}

PFNGLGETOCCLUSIONQUERYIVNVPROC piglit_dispatch_glGetOcclusionQueryivNV = stub_glGetOcclusionQueryivNV;

static void*
resolve_glGetOcclusionQueryuivNV(void)
{
	/* glGetOcclusionQueryuivNV (GL_NV_occlusion_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_occlusion_query")) {
		return get_ext_proc("glGetOcclusionQueryuivNV");
	}

	unsupported("glGetOcclusionQueryuivNV");
	return piglit_dispatch_glGetOcclusionQueryuivNV;
}

static void APIENTRY
stub_glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint * params)
{
	check_initialized();
	piglit_dispatch_glGetOcclusionQueryuivNV = resolve_glGetOcclusionQueryuivNV();
	piglit_dispatch_glGetOcclusionQueryuivNV(id, pname, params);
}

PFNGLGETOCCLUSIONQUERYUIVNVPROC piglit_dispatch_glGetOcclusionQueryuivNV = stub_glGetOcclusionQueryuivNV;

static void*
resolve_glGetPathColorGenfvNV(void)
{
	/* glGetPathColorGenfvNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glGetPathColorGenfvNV");
	}

	unsupported("glGetPathColorGenfvNV");
	return piglit_dispatch_glGetPathColorGenfvNV;
}

static void APIENTRY
stub_glGetPathColorGenfvNV(GLenum color, GLenum pname, GLfloat * value)
{
	check_initialized();
	piglit_dispatch_glGetPathColorGenfvNV = resolve_glGetPathColorGenfvNV();
	piglit_dispatch_glGetPathColorGenfvNV(color, pname, value);
}

PFNGLGETPATHCOLORGENFVNVPROC piglit_dispatch_glGetPathColorGenfvNV = stub_glGetPathColorGenfvNV;

static void*
resolve_glGetPathColorGenivNV(void)
{
	/* glGetPathColorGenivNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glGetPathColorGenivNV");
	}

	unsupported("glGetPathColorGenivNV");
	return piglit_dispatch_glGetPathColorGenivNV;
}

static void APIENTRY
stub_glGetPathColorGenivNV(GLenum color, GLenum pname, GLint * value)
{
	check_initialized();
	piglit_dispatch_glGetPathColorGenivNV = resolve_glGetPathColorGenivNV();
	piglit_dispatch_glGetPathColorGenivNV(color, pname, value);
}

PFNGLGETPATHCOLORGENIVNVPROC piglit_dispatch_glGetPathColorGenivNV = stub_glGetPathColorGenivNV;

static void*
resolve_glGetPathCommandsNV(void)
{
	/* glGetPathCommandsNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glGetPathCommandsNV");
	}

	unsupported("glGetPathCommandsNV");
	return piglit_dispatch_glGetPathCommandsNV;
}

static void APIENTRY
stub_glGetPathCommandsNV(GLuint path, GLubyte * commands)
{
	check_initialized();
	piglit_dispatch_glGetPathCommandsNV = resolve_glGetPathCommandsNV();
	piglit_dispatch_glGetPathCommandsNV(path, commands);
}

PFNGLGETPATHCOMMANDSNVPROC piglit_dispatch_glGetPathCommandsNV = stub_glGetPathCommandsNV;

static void*
resolve_glGetPathCoordsNV(void)
{
	/* glGetPathCoordsNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glGetPathCoordsNV");
	}

	unsupported("glGetPathCoordsNV");
	return piglit_dispatch_glGetPathCoordsNV;
}

static void APIENTRY
stub_glGetPathCoordsNV(GLuint path, GLfloat * coords)
{
	check_initialized();
	piglit_dispatch_glGetPathCoordsNV = resolve_glGetPathCoordsNV();
	piglit_dispatch_glGetPathCoordsNV(path, coords);
}

PFNGLGETPATHCOORDSNVPROC piglit_dispatch_glGetPathCoordsNV = stub_glGetPathCoordsNV;

static void*
resolve_glGetPathDashArrayNV(void)
{
	/* glGetPathDashArrayNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glGetPathDashArrayNV");
	}

	unsupported("glGetPathDashArrayNV");
	return piglit_dispatch_glGetPathDashArrayNV;
}

static void APIENTRY
stub_glGetPathDashArrayNV(GLuint path, GLfloat * dashArray)
{
	check_initialized();
	piglit_dispatch_glGetPathDashArrayNV = resolve_glGetPathDashArrayNV();
	piglit_dispatch_glGetPathDashArrayNV(path, dashArray);
}

PFNGLGETPATHDASHARRAYNVPROC piglit_dispatch_glGetPathDashArrayNV = stub_glGetPathDashArrayNV;

static void*
resolve_glGetPathLengthNV(void)
{
	/* glGetPathLengthNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glGetPathLengthNV");
	}

	unsupported("glGetPathLengthNV");
	return piglit_dispatch_glGetPathLengthNV;
}

static GLfloat APIENTRY
stub_glGetPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments)
{
	check_initialized();
	piglit_dispatch_glGetPathLengthNV = resolve_glGetPathLengthNV();
	return piglit_dispatch_glGetPathLengthNV(path, startSegment, numSegments);
}

PFNGLGETPATHLENGTHNVPROC piglit_dispatch_glGetPathLengthNV = stub_glGetPathLengthNV;

static void*
resolve_glGetPathMetricRangeNV(void)
{
	/* glGetPathMetricRangeNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glGetPathMetricRangeNV");
	}

	unsupported("glGetPathMetricRangeNV");
	return piglit_dispatch_glGetPathMetricRangeNV;
}

static void APIENTRY
stub_glGetPathMetricRangeNV(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat * metrics)
{
	check_initialized();
	piglit_dispatch_glGetPathMetricRangeNV = resolve_glGetPathMetricRangeNV();
	piglit_dispatch_glGetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics);
}

PFNGLGETPATHMETRICRANGENVPROC piglit_dispatch_glGetPathMetricRangeNV = stub_glGetPathMetricRangeNV;

static void*
resolve_glGetPathMetricsNV(void)
{
	/* glGetPathMetricsNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glGetPathMetricsNV");
	}

	unsupported("glGetPathMetricsNV");
	return piglit_dispatch_glGetPathMetricsNV;
}

static void APIENTRY
stub_glGetPathMetricsNV(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLsizei stride, GLfloat * metrics)
{
	check_initialized();
	piglit_dispatch_glGetPathMetricsNV = resolve_glGetPathMetricsNV();
	piglit_dispatch_glGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
}

PFNGLGETPATHMETRICSNVPROC piglit_dispatch_glGetPathMetricsNV = stub_glGetPathMetricsNV;

static void*
resolve_glGetPathParameterfvNV(void)
{
	/* glGetPathParameterfvNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glGetPathParameterfvNV");
	}

	unsupported("glGetPathParameterfvNV");
	return piglit_dispatch_glGetPathParameterfvNV;
}

static void APIENTRY
stub_glGetPathParameterfvNV(GLuint path, GLenum pname, GLfloat * value)
{
	check_initialized();
	piglit_dispatch_glGetPathParameterfvNV = resolve_glGetPathParameterfvNV();
	piglit_dispatch_glGetPathParameterfvNV(path, pname, value);
}

PFNGLGETPATHPARAMETERFVNVPROC piglit_dispatch_glGetPathParameterfvNV = stub_glGetPathParameterfvNV;

static void*
resolve_glGetPathParameterivNV(void)
{
	/* glGetPathParameterivNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glGetPathParameterivNV");
	}

	unsupported("glGetPathParameterivNV");
	return piglit_dispatch_glGetPathParameterivNV;
}

static void APIENTRY
stub_glGetPathParameterivNV(GLuint path, GLenum pname, GLint * value)
{
	check_initialized();
	piglit_dispatch_glGetPathParameterivNV = resolve_glGetPathParameterivNV();
	piglit_dispatch_glGetPathParameterivNV(path, pname, value);
}

PFNGLGETPATHPARAMETERIVNVPROC piglit_dispatch_glGetPathParameterivNV = stub_glGetPathParameterivNV;

static void*
resolve_glGetPathSpacingNV(void)
{
	/* glGetPathSpacingNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glGetPathSpacingNV");
	}

	unsupported("glGetPathSpacingNV");
	return piglit_dispatch_glGetPathSpacingNV;
}

static void APIENTRY
stub_glGetPathSpacingNV(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat * returnedSpacing)
{
	check_initialized();
	piglit_dispatch_glGetPathSpacingNV = resolve_glGetPathSpacingNV();
	piglit_dispatch_glGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
}

PFNGLGETPATHSPACINGNVPROC piglit_dispatch_glGetPathSpacingNV = stub_glGetPathSpacingNV;

static void*
resolve_glGetPathTexGenfvNV(void)
{
	/* glGetPathTexGenfvNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glGetPathTexGenfvNV");
	}

	unsupported("glGetPathTexGenfvNV");
	return piglit_dispatch_glGetPathTexGenfvNV;
}

static void APIENTRY
stub_glGetPathTexGenfvNV(GLenum texCoordSet, GLenum pname, GLfloat * value)
{
	check_initialized();
	piglit_dispatch_glGetPathTexGenfvNV = resolve_glGetPathTexGenfvNV();
	piglit_dispatch_glGetPathTexGenfvNV(texCoordSet, pname, value);
}

PFNGLGETPATHTEXGENFVNVPROC piglit_dispatch_glGetPathTexGenfvNV = stub_glGetPathTexGenfvNV;

static void*
resolve_glGetPathTexGenivNV(void)
{
	/* glGetPathTexGenivNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glGetPathTexGenivNV");
	}

	unsupported("glGetPathTexGenivNV");
	return piglit_dispatch_glGetPathTexGenivNV;
}

static void APIENTRY
stub_glGetPathTexGenivNV(GLenum texCoordSet, GLenum pname, GLint * value)
{
	check_initialized();
	piglit_dispatch_glGetPathTexGenivNV = resolve_glGetPathTexGenivNV();
	piglit_dispatch_glGetPathTexGenivNV(texCoordSet, pname, value);
}

PFNGLGETPATHTEXGENIVNVPROC piglit_dispatch_glGetPathTexGenivNV = stub_glGetPathTexGenivNV;

static void*
resolve_glGetPerfCounterInfoINTEL(void)
{
	/* glGetPerfCounterInfoINTEL (GL_INTEL_performance_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_INTEL_performance_query")) {
		return get_ext_proc("glGetPerfCounterInfoINTEL");
	}

	unsupported("glGetPerfCounterInfoINTEL");
	return piglit_dispatch_glGetPerfCounterInfoINTEL;
}

static void APIENTRY
stub_glGetPerfCounterInfoINTEL(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar * counterName, GLuint counterDescLength, GLchar * counterDesc, GLuint * counterOffset, GLuint * counterDataSize, GLuint * counterTypeEnum, GLuint * counterDataTypeEnum, GLuint64 * rawCounterMaxValue)
{
	check_initialized();
	piglit_dispatch_glGetPerfCounterInfoINTEL = resolve_glGetPerfCounterInfoINTEL();
	piglit_dispatch_glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
}

PFNGLGETPERFCOUNTERINFOINTELPROC piglit_dispatch_glGetPerfCounterInfoINTEL = stub_glGetPerfCounterInfoINTEL;

static void*
resolve_glGetPerfMonitorCounterDataAMD(void)
{
	/* glGetPerfMonitorCounterDataAMD (GL_AMD_performance_monitor) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_AMD_performance_monitor")) {
		return get_ext_proc("glGetPerfMonitorCounterDataAMD");
	}

	unsupported("glGetPerfMonitorCounterDataAMD");
	return piglit_dispatch_glGetPerfMonitorCounterDataAMD;
}

static void APIENTRY
stub_glGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint * data, GLint * bytesWritten)
{
	check_initialized();
	piglit_dispatch_glGetPerfMonitorCounterDataAMD = resolve_glGetPerfMonitorCounterDataAMD();
	piglit_dispatch_glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten);
}

PFNGLGETPERFMONITORCOUNTERDATAAMDPROC piglit_dispatch_glGetPerfMonitorCounterDataAMD = stub_glGetPerfMonitorCounterDataAMD;

static void*
resolve_glGetPerfMonitorCounterInfoAMD(void)
{
	/* glGetPerfMonitorCounterInfoAMD (GL_AMD_performance_monitor) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_AMD_performance_monitor")) {
		return get_ext_proc("glGetPerfMonitorCounterInfoAMD");
	}

	unsupported("glGetPerfMonitorCounterInfoAMD");
	return piglit_dispatch_glGetPerfMonitorCounterInfoAMD;
}

static void APIENTRY
stub_glGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, void * data)
{
	check_initialized();
	piglit_dispatch_glGetPerfMonitorCounterInfoAMD = resolve_glGetPerfMonitorCounterInfoAMD();
	piglit_dispatch_glGetPerfMonitorCounterInfoAMD(group, counter, pname, data);
}

PFNGLGETPERFMONITORCOUNTERINFOAMDPROC piglit_dispatch_glGetPerfMonitorCounterInfoAMD = stub_glGetPerfMonitorCounterInfoAMD;

static void*
resolve_glGetPerfMonitorCounterStringAMD(void)
{
	/* glGetPerfMonitorCounterStringAMD (GL_AMD_performance_monitor) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_AMD_performance_monitor")) {
		return get_ext_proc("glGetPerfMonitorCounterStringAMD");
	}

	unsupported("glGetPerfMonitorCounterStringAMD");
	return piglit_dispatch_glGetPerfMonitorCounterStringAMD;
}

static void APIENTRY
stub_glGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei * length, GLchar * counterString)
{
	check_initialized();
	piglit_dispatch_glGetPerfMonitorCounterStringAMD = resolve_glGetPerfMonitorCounterStringAMD();
	piglit_dispatch_glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString);
}

PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC piglit_dispatch_glGetPerfMonitorCounterStringAMD = stub_glGetPerfMonitorCounterStringAMD;

static void*
resolve_glGetPerfMonitorCountersAMD(void)
{
	/* glGetPerfMonitorCountersAMD (GL_AMD_performance_monitor) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_AMD_performance_monitor")) {
		return get_ext_proc("glGetPerfMonitorCountersAMD");
	}

	unsupported("glGetPerfMonitorCountersAMD");
	return piglit_dispatch_glGetPerfMonitorCountersAMD;
}

static void APIENTRY
stub_glGetPerfMonitorCountersAMD(GLuint group, GLint * numCounters, GLint * maxActiveCounters, GLsizei counterSize, GLuint * counters)
{
	check_initialized();
	piglit_dispatch_glGetPerfMonitorCountersAMD = resolve_glGetPerfMonitorCountersAMD();
	piglit_dispatch_glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters);
}

PFNGLGETPERFMONITORCOUNTERSAMDPROC piglit_dispatch_glGetPerfMonitorCountersAMD = stub_glGetPerfMonitorCountersAMD;

static void*
resolve_glGetPerfMonitorGroupStringAMD(void)
{
	/* glGetPerfMonitorGroupStringAMD (GL_AMD_performance_monitor) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_AMD_performance_monitor")) {
		return get_ext_proc("glGetPerfMonitorGroupStringAMD");
	}

	unsupported("glGetPerfMonitorGroupStringAMD");
	return piglit_dispatch_glGetPerfMonitorGroupStringAMD;
}

static void APIENTRY
stub_glGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei * length, GLchar * groupString)
{
	check_initialized();
	piglit_dispatch_glGetPerfMonitorGroupStringAMD = resolve_glGetPerfMonitorGroupStringAMD();
	piglit_dispatch_glGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString);
}

PFNGLGETPERFMONITORGROUPSTRINGAMDPROC piglit_dispatch_glGetPerfMonitorGroupStringAMD = stub_glGetPerfMonitorGroupStringAMD;

static void*
resolve_glGetPerfMonitorGroupsAMD(void)
{
	/* glGetPerfMonitorGroupsAMD (GL_AMD_performance_monitor) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_AMD_performance_monitor")) {
		return get_ext_proc("glGetPerfMonitorGroupsAMD");
	}

	unsupported("glGetPerfMonitorGroupsAMD");
	return piglit_dispatch_glGetPerfMonitorGroupsAMD;
}

static void APIENTRY
stub_glGetPerfMonitorGroupsAMD(GLint * numGroups, GLsizei groupsSize, GLuint * groups)
{
	check_initialized();
	piglit_dispatch_glGetPerfMonitorGroupsAMD = resolve_glGetPerfMonitorGroupsAMD();
	piglit_dispatch_glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups);
}

PFNGLGETPERFMONITORGROUPSAMDPROC piglit_dispatch_glGetPerfMonitorGroupsAMD = stub_glGetPerfMonitorGroupsAMD;

static void*
resolve_glGetPerfQueryDataINTEL(void)
{
	/* glGetPerfQueryDataINTEL (GL_INTEL_performance_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_INTEL_performance_query")) {
		return get_ext_proc("glGetPerfQueryDataINTEL");
	}

	unsupported("glGetPerfQueryDataINTEL");
	return piglit_dispatch_glGetPerfQueryDataINTEL;
}

static void APIENTRY
stub_glGetPerfQueryDataINTEL(GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid * data, GLuint * bytesWritten)
{
	check_initialized();
	piglit_dispatch_glGetPerfQueryDataINTEL = resolve_glGetPerfQueryDataINTEL();
	piglit_dispatch_glGetPerfQueryDataINTEL(queryHandle, flags, dataSize, data, bytesWritten);
}

PFNGLGETPERFQUERYDATAINTELPROC piglit_dispatch_glGetPerfQueryDataINTEL = stub_glGetPerfQueryDataINTEL;

static void*
resolve_glGetPerfQueryIdByNameINTEL(void)
{
	/* glGetPerfQueryIdByNameINTEL (GL_INTEL_performance_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_INTEL_performance_query")) {
		return get_ext_proc("glGetPerfQueryIdByNameINTEL");
	}

	unsupported("glGetPerfQueryIdByNameINTEL");
	return piglit_dispatch_glGetPerfQueryIdByNameINTEL;
}

static void APIENTRY
stub_glGetPerfQueryIdByNameINTEL(GLchar * queryName, GLuint * queryId)
{
	check_initialized();
	piglit_dispatch_glGetPerfQueryIdByNameINTEL = resolve_glGetPerfQueryIdByNameINTEL();
	piglit_dispatch_glGetPerfQueryIdByNameINTEL(queryName, queryId);
}

PFNGLGETPERFQUERYIDBYNAMEINTELPROC piglit_dispatch_glGetPerfQueryIdByNameINTEL = stub_glGetPerfQueryIdByNameINTEL;

static void*
resolve_glGetPerfQueryInfoINTEL(void)
{
	/* glGetPerfQueryInfoINTEL (GL_INTEL_performance_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_INTEL_performance_query")) {
		return get_ext_proc("glGetPerfQueryInfoINTEL");
	}

	unsupported("glGetPerfQueryInfoINTEL");
	return piglit_dispatch_glGetPerfQueryInfoINTEL;
}

static void APIENTRY
stub_glGetPerfQueryInfoINTEL(GLuint queryId, GLuint queryNameLength, GLchar * queryName, GLuint * dataSize, GLuint * noCounters, GLuint * noInstances, GLuint * capsMask)
{
	check_initialized();
	piglit_dispatch_glGetPerfQueryInfoINTEL = resolve_glGetPerfQueryInfoINTEL();
	piglit_dispatch_glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);
}

PFNGLGETPERFQUERYINFOINTELPROC piglit_dispatch_glGetPerfQueryInfoINTEL = stub_glGetPerfQueryInfoINTEL;

static void*
resolve_glGetPixelMapfv(void)
{
	/* glGetPixelMapfv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glGetPixelMapfv", 10);
	}

	unsupported("glGetPixelMapfv");
	return piglit_dispatch_glGetPixelMapfv;
}

static void APIENTRY
stub_glGetPixelMapfv(GLenum map, GLfloat * values)
{
	check_initialized();
	piglit_dispatch_glGetPixelMapfv = resolve_glGetPixelMapfv();
	piglit_dispatch_glGetPixelMapfv(map, values);
}

PFNGLGETPIXELMAPFVPROC piglit_dispatch_glGetPixelMapfv = stub_glGetPixelMapfv;

static void*
resolve_glGetPixelMapuiv(void)
{
	/* glGetPixelMapuiv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glGetPixelMapuiv", 10);
	}

	unsupported("glGetPixelMapuiv");
	return piglit_dispatch_glGetPixelMapuiv;
}

static void APIENTRY
stub_glGetPixelMapuiv(GLenum map, GLuint * values)
{
	check_initialized();
	piglit_dispatch_glGetPixelMapuiv = resolve_glGetPixelMapuiv();
	piglit_dispatch_glGetPixelMapuiv(map, values);
}

PFNGLGETPIXELMAPUIVPROC piglit_dispatch_glGetPixelMapuiv = stub_glGetPixelMapuiv;

static void*
resolve_glGetPixelMapusv(void)
{
	/* glGetPixelMapusv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glGetPixelMapusv", 10);
	}

	unsupported("glGetPixelMapusv");
	return piglit_dispatch_glGetPixelMapusv;
}

static void APIENTRY
stub_glGetPixelMapusv(GLenum map, GLushort * values)
{
	check_initialized();
	piglit_dispatch_glGetPixelMapusv = resolve_glGetPixelMapusv();
	piglit_dispatch_glGetPixelMapusv(map, values);
}

PFNGLGETPIXELMAPUSVPROC piglit_dispatch_glGetPixelMapusv = stub_glGetPixelMapusv;

static void*
resolve_glGetPixelMapxv(void)
{
	/* glGetPixelMapxv (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glGetPixelMapxv");
	}

	unsupported("glGetPixelMapxv");
	return piglit_dispatch_glGetPixelMapxv;
}

static void APIENTRY
stub_glGetPixelMapxv(GLenum map, GLint size, GLfixed * values)
{
	check_initialized();
	piglit_dispatch_glGetPixelMapxv = resolve_glGetPixelMapxv();
	piglit_dispatch_glGetPixelMapxv(map, size, values);
}

PFNGLGETPIXELMAPXVPROC piglit_dispatch_glGetPixelMapxv = stub_glGetPixelMapxv;

static void*
resolve_glGetPixelTexGenParameterfvSGIS(void)
{
	/* glGetPixelTexGenParameterfvSGIS (GL_SGIS_pixel_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIS_pixel_texture")) {
		return get_ext_proc("glGetPixelTexGenParameterfvSGIS");
	}

	unsupported("glGetPixelTexGenParameterfvSGIS");
	return piglit_dispatch_glGetPixelTexGenParameterfvSGIS;
}

static void APIENTRY
stub_glGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetPixelTexGenParameterfvSGIS = resolve_glGetPixelTexGenParameterfvSGIS();
	piglit_dispatch_glGetPixelTexGenParameterfvSGIS(pname, params);
}

PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC piglit_dispatch_glGetPixelTexGenParameterfvSGIS = stub_glGetPixelTexGenParameterfvSGIS;

static void*
resolve_glGetPixelTexGenParameterivSGIS(void)
{
	/* glGetPixelTexGenParameterivSGIS (GL_SGIS_pixel_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIS_pixel_texture")) {
		return get_ext_proc("glGetPixelTexGenParameterivSGIS");
	}

	unsupported("glGetPixelTexGenParameterivSGIS");
	return piglit_dispatch_glGetPixelTexGenParameterivSGIS;
}

static void APIENTRY
stub_glGetPixelTexGenParameterivSGIS(GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetPixelTexGenParameterivSGIS = resolve_glGetPixelTexGenParameterivSGIS();
	piglit_dispatch_glGetPixelTexGenParameterivSGIS(pname, params);
}

PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC piglit_dispatch_glGetPixelTexGenParameterivSGIS = stub_glGetPixelTexGenParameterivSGIS;

static void*
resolve_glGetPixelTransformParameterfvEXT(void)
{
	/* glGetPixelTransformParameterfvEXT (GL_EXT_pixel_transform) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_pixel_transform")) {
		return get_ext_proc("glGetPixelTransformParameterfvEXT");
	}

	unsupported("glGetPixelTransformParameterfvEXT");
	return piglit_dispatch_glGetPixelTransformParameterfvEXT;
}

static void APIENTRY
stub_glGetPixelTransformParameterfvEXT(GLenum target, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetPixelTransformParameterfvEXT = resolve_glGetPixelTransformParameterfvEXT();
	piglit_dispatch_glGetPixelTransformParameterfvEXT(target, pname, params);
}

PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC piglit_dispatch_glGetPixelTransformParameterfvEXT = stub_glGetPixelTransformParameterfvEXT;

static void*
resolve_glGetPixelTransformParameterivEXT(void)
{
	/* glGetPixelTransformParameterivEXT (GL_EXT_pixel_transform) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_pixel_transform")) {
		return get_ext_proc("glGetPixelTransformParameterivEXT");
	}

	unsupported("glGetPixelTransformParameterivEXT");
	return piglit_dispatch_glGetPixelTransformParameterivEXT;
}

static void APIENTRY
stub_glGetPixelTransformParameterivEXT(GLenum target, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetPixelTransformParameterivEXT = resolve_glGetPixelTransformParameterivEXT();
	piglit_dispatch_glGetPixelTransformParameterivEXT(target, pname, params);
}

PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC piglit_dispatch_glGetPixelTransformParameterivEXT = stub_glGetPixelTransformParameterivEXT;

static void*
resolve_glGetPointerIndexedvEXT(void)
{
	/* glGetPointerIndexedvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetPointerIndexedvEXT");
	}

	unsupported("glGetPointerIndexedvEXT");
	return piglit_dispatch_glGetPointerIndexedvEXT;
}

static void APIENTRY
stub_glGetPointerIndexedvEXT(GLenum target, GLuint index, void ** data)
{
	check_initialized();
	piglit_dispatch_glGetPointerIndexedvEXT = resolve_glGetPointerIndexedvEXT();
	piglit_dispatch_glGetPointerIndexedvEXT(target, index, data);
}

PFNGLGETPOINTERINDEXEDVEXTPROC piglit_dispatch_glGetPointerIndexedvEXT = stub_glGetPointerIndexedvEXT;

static void*
resolve_glGetPointeri_vEXT(void)
{
	/* glGetPointeri_vEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetPointeri_vEXT");
	}

	unsupported("glGetPointeri_vEXT");
	return piglit_dispatch_glGetPointeri_vEXT;
}

static void APIENTRY
stub_glGetPointeri_vEXT(GLenum pname, GLuint index, void ** params)
{
	check_initialized();
	piglit_dispatch_glGetPointeri_vEXT = resolve_glGetPointeri_vEXT();
	piglit_dispatch_glGetPointeri_vEXT(pname, index, params);
}

PFNGLGETPOINTERI_VEXTPROC piglit_dispatch_glGetPointeri_vEXT = stub_glGetPointeri_vEXT;

static void*
resolve_glGetPointerv(void)
{
	/* glGetPointerv (GL_VERSION_1_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetPointerv", 11);
	}

	/* glGetPointerv (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetPointerv", 43);
	}

	/* glGetPointerv (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetPointerv", 43);
	}

	/* glGetPointerv (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glGetPointerv", 10);
	}

	/* glGetPointerv (GL_KHR_debug) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_KHR_debug")) {
		return get_ext_proc("glGetPointerv");
	}

	/* glGetPointervKHR (GL_KHR_debug) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_KHR_debug")) {
		return get_ext_proc("glGetPointervKHR");
	}

	/* glGetPointervEXT (GL_EXT_vertex_array) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_array")) {
		return get_ext_proc("glGetPointervEXT");
	}

	unsupported("glGetPointerv");
	return piglit_dispatch_glGetPointerv;
}

static void APIENTRY
stub_glGetPointerv(GLenum pname, void ** params)
{
	check_initialized();
	piglit_dispatch_glGetPointerv = resolve_glGetPointerv();
	piglit_dispatch_glGetPointerv(pname, params);
}

PFNGLGETPOINTERVPROC piglit_dispatch_glGetPointerv = stub_glGetPointerv;

static void*
resolve_glGetPolygonStipple(void)
{
	/* glGetPolygonStipple (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glGetPolygonStipple", 10);
	}

	unsupported("glGetPolygonStipple");
	return piglit_dispatch_glGetPolygonStipple;
}

static void APIENTRY
stub_glGetPolygonStipple(GLubyte * mask)
{
	check_initialized();
	piglit_dispatch_glGetPolygonStipple = resolve_glGetPolygonStipple();
	piglit_dispatch_glGetPolygonStipple(mask);
}

PFNGLGETPOLYGONSTIPPLEPROC piglit_dispatch_glGetPolygonStipple = stub_glGetPolygonStipple;

static void*
resolve_glGetProgramBinary(void)
{
	/* glGetProgramBinary (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetProgramBinary", 41);
	}

	/* glGetProgramBinary (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetProgramBinary", 30);
	}

	/* glGetProgramBinary (GL_ARB_get_program_binary) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_get_program_binary")) {
		return get_ext_proc("glGetProgramBinary");
	}

	/* glGetProgramBinaryOES (GL_OES_get_program_binary) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_OES_get_program_binary")) {
		return get_ext_proc("glGetProgramBinaryOES");
	}

	unsupported("glGetProgramBinary");
	return piglit_dispatch_glGetProgramBinary;
}

static void APIENTRY
stub_glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary)
{
	check_initialized();
	piglit_dispatch_glGetProgramBinary = resolve_glGetProgramBinary();
	piglit_dispatch_glGetProgramBinary(program, bufSize, length, binaryFormat, binary);
}

PFNGLGETPROGRAMBINARYPROC piglit_dispatch_glGetProgramBinary = stub_glGetProgramBinary;

static void*
resolve_glGetProgramEnvParameterIivNV(void)
{
	/* glGetProgramEnvParameterIivNV (GL_NV_gpu_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_program4")) {
		return get_ext_proc("glGetProgramEnvParameterIivNV");
	}

	unsupported("glGetProgramEnvParameterIivNV");
	return piglit_dispatch_glGetProgramEnvParameterIivNV;
}

static void APIENTRY
stub_glGetProgramEnvParameterIivNV(GLenum target, GLuint index, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetProgramEnvParameterIivNV = resolve_glGetProgramEnvParameterIivNV();
	piglit_dispatch_glGetProgramEnvParameterIivNV(target, index, params);
}

PFNGLGETPROGRAMENVPARAMETERIIVNVPROC piglit_dispatch_glGetProgramEnvParameterIivNV = stub_glGetProgramEnvParameterIivNV;

static void*
resolve_glGetProgramEnvParameterIuivNV(void)
{
	/* glGetProgramEnvParameterIuivNV (GL_NV_gpu_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_program4")) {
		return get_ext_proc("glGetProgramEnvParameterIuivNV");
	}

	unsupported("glGetProgramEnvParameterIuivNV");
	return piglit_dispatch_glGetProgramEnvParameterIuivNV;
}

static void APIENTRY
stub_glGetProgramEnvParameterIuivNV(GLenum target, GLuint index, GLuint * params)
{
	check_initialized();
	piglit_dispatch_glGetProgramEnvParameterIuivNV = resolve_glGetProgramEnvParameterIuivNV();
	piglit_dispatch_glGetProgramEnvParameterIuivNV(target, index, params);
}

PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC piglit_dispatch_glGetProgramEnvParameterIuivNV = stub_glGetProgramEnvParameterIuivNV;

static void*
resolve_glGetProgramEnvParameterdvARB(void)
{
	/* glGetProgramEnvParameterdvARB (GL_ARB_fragment_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_fragment_program")) {
		return get_ext_proc("glGetProgramEnvParameterdvARB");
	}

	/* glGetProgramEnvParameterdvARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glGetProgramEnvParameterdvARB");
	}

	unsupported("glGetProgramEnvParameterdvARB");
	return piglit_dispatch_glGetProgramEnvParameterdvARB;
}

static void APIENTRY
stub_glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble * params)
{
	check_initialized();
	piglit_dispatch_glGetProgramEnvParameterdvARB = resolve_glGetProgramEnvParameterdvARB();
	piglit_dispatch_glGetProgramEnvParameterdvARB(target, index, params);
}

PFNGLGETPROGRAMENVPARAMETERDVARBPROC piglit_dispatch_glGetProgramEnvParameterdvARB = stub_glGetProgramEnvParameterdvARB;

static void*
resolve_glGetProgramEnvParameterfvARB(void)
{
	/* glGetProgramEnvParameterfvARB (GL_ARB_fragment_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_fragment_program")) {
		return get_ext_proc("glGetProgramEnvParameterfvARB");
	}

	/* glGetProgramEnvParameterfvARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glGetProgramEnvParameterfvARB");
	}

	unsupported("glGetProgramEnvParameterfvARB");
	return piglit_dispatch_glGetProgramEnvParameterfvARB;
}

static void APIENTRY
stub_glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetProgramEnvParameterfvARB = resolve_glGetProgramEnvParameterfvARB();
	piglit_dispatch_glGetProgramEnvParameterfvARB(target, index, params);
}

PFNGLGETPROGRAMENVPARAMETERFVARBPROC piglit_dispatch_glGetProgramEnvParameterfvARB = stub_glGetProgramEnvParameterfvARB;

static void*
resolve_glGetProgramInfoLog(void)
{
	/* glGetProgramInfoLog (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetProgramInfoLog", 20);
	}

	/* glGetProgramInfoLog (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glGetProgramInfoLog", 20);
	}

	unsupported("glGetProgramInfoLog");
	return piglit_dispatch_glGetProgramInfoLog;
}

static void APIENTRY
stub_glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog)
{
	check_initialized();
	piglit_dispatch_glGetProgramInfoLog = resolve_glGetProgramInfoLog();
	piglit_dispatch_glGetProgramInfoLog(program, bufSize, length, infoLog);
}

PFNGLGETPROGRAMINFOLOGPROC piglit_dispatch_glGetProgramInfoLog = stub_glGetProgramInfoLog;

static void*
resolve_glGetProgramInterfaceiv(void)
{
	/* glGetProgramInterfaceiv (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetProgramInterfaceiv", 43);
	}

	/* glGetProgramInterfaceiv (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetProgramInterfaceiv", 31);
	}

	/* glGetProgramInterfaceiv (GL_ARB_program_interface_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_program_interface_query")) {
		return get_ext_proc("glGetProgramInterfaceiv");
	}

	unsupported("glGetProgramInterfaceiv");
	return piglit_dispatch_glGetProgramInterfaceiv;
}

static void APIENTRY
stub_glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetProgramInterfaceiv = resolve_glGetProgramInterfaceiv();
	piglit_dispatch_glGetProgramInterfaceiv(program, programInterface, pname, params);
}

PFNGLGETPROGRAMINTERFACEIVPROC piglit_dispatch_glGetProgramInterfaceiv = stub_glGetProgramInterfaceiv;

static void*
resolve_glGetProgramLocalParameterIivNV(void)
{
	/* glGetProgramLocalParameterIivNV (GL_NV_gpu_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_program4")) {
		return get_ext_proc("glGetProgramLocalParameterIivNV");
	}

	unsupported("glGetProgramLocalParameterIivNV");
	return piglit_dispatch_glGetProgramLocalParameterIivNV;
}

static void APIENTRY
stub_glGetProgramLocalParameterIivNV(GLenum target, GLuint index, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetProgramLocalParameterIivNV = resolve_glGetProgramLocalParameterIivNV();
	piglit_dispatch_glGetProgramLocalParameterIivNV(target, index, params);
}

PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC piglit_dispatch_glGetProgramLocalParameterIivNV = stub_glGetProgramLocalParameterIivNV;

static void*
resolve_glGetProgramLocalParameterIuivNV(void)
{
	/* glGetProgramLocalParameterIuivNV (GL_NV_gpu_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_program4")) {
		return get_ext_proc("glGetProgramLocalParameterIuivNV");
	}

	unsupported("glGetProgramLocalParameterIuivNV");
	return piglit_dispatch_glGetProgramLocalParameterIuivNV;
}

static void APIENTRY
stub_glGetProgramLocalParameterIuivNV(GLenum target, GLuint index, GLuint * params)
{
	check_initialized();
	piglit_dispatch_glGetProgramLocalParameterIuivNV = resolve_glGetProgramLocalParameterIuivNV();
	piglit_dispatch_glGetProgramLocalParameterIuivNV(target, index, params);
}

PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC piglit_dispatch_glGetProgramLocalParameterIuivNV = stub_glGetProgramLocalParameterIuivNV;

static void*
resolve_glGetProgramLocalParameterdvARB(void)
{
	/* glGetProgramLocalParameterdvARB (GL_ARB_fragment_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_fragment_program")) {
		return get_ext_proc("glGetProgramLocalParameterdvARB");
	}

	/* glGetProgramLocalParameterdvARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glGetProgramLocalParameterdvARB");
	}

	unsupported("glGetProgramLocalParameterdvARB");
	return piglit_dispatch_glGetProgramLocalParameterdvARB;
}

static void APIENTRY
stub_glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble * params)
{
	check_initialized();
	piglit_dispatch_glGetProgramLocalParameterdvARB = resolve_glGetProgramLocalParameterdvARB();
	piglit_dispatch_glGetProgramLocalParameterdvARB(target, index, params);
}

PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC piglit_dispatch_glGetProgramLocalParameterdvARB = stub_glGetProgramLocalParameterdvARB;

static void*
resolve_glGetProgramLocalParameterfvARB(void)
{
	/* glGetProgramLocalParameterfvARB (GL_ARB_fragment_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_fragment_program")) {
		return get_ext_proc("glGetProgramLocalParameterfvARB");
	}

	/* glGetProgramLocalParameterfvARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glGetProgramLocalParameterfvARB");
	}

	unsupported("glGetProgramLocalParameterfvARB");
	return piglit_dispatch_glGetProgramLocalParameterfvARB;
}

static void APIENTRY
stub_glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetProgramLocalParameterfvARB = resolve_glGetProgramLocalParameterfvARB();
	piglit_dispatch_glGetProgramLocalParameterfvARB(target, index, params);
}

PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC piglit_dispatch_glGetProgramLocalParameterfvARB = stub_glGetProgramLocalParameterfvARB;

static void*
resolve_glGetProgramNamedParameterdvNV(void)
{
	/* glGetProgramNamedParameterdvNV (GL_NV_fragment_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_fragment_program")) {
		return get_ext_proc("glGetProgramNamedParameterdvNV");
	}

	unsupported("glGetProgramNamedParameterdvNV");
	return piglit_dispatch_glGetProgramNamedParameterdvNV;
}

static void APIENTRY
stub_glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte * name, GLdouble * params)
{
	check_initialized();
	piglit_dispatch_glGetProgramNamedParameterdvNV = resolve_glGetProgramNamedParameterdvNV();
	piglit_dispatch_glGetProgramNamedParameterdvNV(id, len, name, params);
}

PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC piglit_dispatch_glGetProgramNamedParameterdvNV = stub_glGetProgramNamedParameterdvNV;

static void*
resolve_glGetProgramNamedParameterfvNV(void)
{
	/* glGetProgramNamedParameterfvNV (GL_NV_fragment_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_fragment_program")) {
		return get_ext_proc("glGetProgramNamedParameterfvNV");
	}

	unsupported("glGetProgramNamedParameterfvNV");
	return piglit_dispatch_glGetProgramNamedParameterfvNV;
}

static void APIENTRY
stub_glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte * name, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetProgramNamedParameterfvNV = resolve_glGetProgramNamedParameterfvNV();
	piglit_dispatch_glGetProgramNamedParameterfvNV(id, len, name, params);
}

PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC piglit_dispatch_glGetProgramNamedParameterfvNV = stub_glGetProgramNamedParameterfvNV;

static void*
resolve_glGetProgramParameterdvNV(void)
{
	/* glGetProgramParameterdvNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glGetProgramParameterdvNV");
	}

	unsupported("glGetProgramParameterdvNV");
	return piglit_dispatch_glGetProgramParameterdvNV;
}

static void APIENTRY
stub_glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble * params)
{
	check_initialized();
	piglit_dispatch_glGetProgramParameterdvNV = resolve_glGetProgramParameterdvNV();
	piglit_dispatch_glGetProgramParameterdvNV(target, index, pname, params);
}

PFNGLGETPROGRAMPARAMETERDVNVPROC piglit_dispatch_glGetProgramParameterdvNV = stub_glGetProgramParameterdvNV;

static void*
resolve_glGetProgramParameterfvNV(void)
{
	/* glGetProgramParameterfvNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glGetProgramParameterfvNV");
	}

	unsupported("glGetProgramParameterfvNV");
	return piglit_dispatch_glGetProgramParameterfvNV;
}

static void APIENTRY
stub_glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetProgramParameterfvNV = resolve_glGetProgramParameterfvNV();
	piglit_dispatch_glGetProgramParameterfvNV(target, index, pname, params);
}

PFNGLGETPROGRAMPARAMETERFVNVPROC piglit_dispatch_glGetProgramParameterfvNV = stub_glGetProgramParameterfvNV;

static void*
resolve_glGetProgramPipelineInfoLog(void)
{
	/* glGetProgramPipelineInfoLog (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetProgramPipelineInfoLog", 41);
	}

	/* glGetProgramPipelineInfoLog (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetProgramPipelineInfoLog", 31);
	}

	/* glGetProgramPipelineInfoLog (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glGetProgramPipelineInfoLog");
	}

	unsupported("glGetProgramPipelineInfoLog");
	return piglit_dispatch_glGetProgramPipelineInfoLog;
}

static void APIENTRY
stub_glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog)
{
	check_initialized();
	piglit_dispatch_glGetProgramPipelineInfoLog = resolve_glGetProgramPipelineInfoLog();
	piglit_dispatch_glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog);
}

PFNGLGETPROGRAMPIPELINEINFOLOGPROC piglit_dispatch_glGetProgramPipelineInfoLog = stub_glGetProgramPipelineInfoLog;

static void*
resolve_glGetProgramPipelineInfoLogEXT(void)
{
	/* glGetProgramPipelineInfoLogEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glGetProgramPipelineInfoLogEXT");
	}

	unsupported("glGetProgramPipelineInfoLogEXT");
	return piglit_dispatch_glGetProgramPipelineInfoLogEXT;
}

static void APIENTRY
stub_glGetProgramPipelineInfoLogEXT(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog)
{
	check_initialized();
	piglit_dispatch_glGetProgramPipelineInfoLogEXT = resolve_glGetProgramPipelineInfoLogEXT();
	piglit_dispatch_glGetProgramPipelineInfoLogEXT(pipeline, bufSize, length, infoLog);
}

PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC piglit_dispatch_glGetProgramPipelineInfoLogEXT = stub_glGetProgramPipelineInfoLogEXT;

static void*
resolve_glGetProgramPipelineiv(void)
{
	/* glGetProgramPipelineiv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetProgramPipelineiv", 41);
	}

	/* glGetProgramPipelineiv (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetProgramPipelineiv", 31);
	}

	/* glGetProgramPipelineiv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glGetProgramPipelineiv");
	}

	unsupported("glGetProgramPipelineiv");
	return piglit_dispatch_glGetProgramPipelineiv;
}

static void APIENTRY
stub_glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetProgramPipelineiv = resolve_glGetProgramPipelineiv();
	piglit_dispatch_glGetProgramPipelineiv(pipeline, pname, params);
}

PFNGLGETPROGRAMPIPELINEIVPROC piglit_dispatch_glGetProgramPipelineiv = stub_glGetProgramPipelineiv;

static void*
resolve_glGetProgramPipelineivEXT(void)
{
	/* glGetProgramPipelineivEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glGetProgramPipelineivEXT");
	}

	unsupported("glGetProgramPipelineivEXT");
	return piglit_dispatch_glGetProgramPipelineivEXT;
}

static void APIENTRY
stub_glGetProgramPipelineivEXT(GLuint pipeline, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetProgramPipelineivEXT = resolve_glGetProgramPipelineivEXT();
	piglit_dispatch_glGetProgramPipelineivEXT(pipeline, pname, params);
}

PFNGLGETPROGRAMPIPELINEIVEXTPROC piglit_dispatch_glGetProgramPipelineivEXT = stub_glGetProgramPipelineivEXT;

static void*
resolve_glGetProgramResourceIndex(void)
{
	/* glGetProgramResourceIndex (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetProgramResourceIndex", 43);
	}

	/* glGetProgramResourceIndex (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetProgramResourceIndex", 31);
	}

	/* glGetProgramResourceIndex (GL_ARB_program_interface_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_program_interface_query")) {
		return get_ext_proc("glGetProgramResourceIndex");
	}

	unsupported("glGetProgramResourceIndex");
	return piglit_dispatch_glGetProgramResourceIndex;
}

static GLuint APIENTRY
stub_glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar * name)
{
	check_initialized();
	piglit_dispatch_glGetProgramResourceIndex = resolve_glGetProgramResourceIndex();
	return piglit_dispatch_glGetProgramResourceIndex(program, programInterface, name);
}

PFNGLGETPROGRAMRESOURCEINDEXPROC piglit_dispatch_glGetProgramResourceIndex = stub_glGetProgramResourceIndex;

static void*
resolve_glGetProgramResourceLocation(void)
{
	/* glGetProgramResourceLocation (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetProgramResourceLocation", 43);
	}

	/* glGetProgramResourceLocation (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetProgramResourceLocation", 31);
	}

	/* glGetProgramResourceLocation (GL_ARB_program_interface_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_program_interface_query")) {
		return get_ext_proc("glGetProgramResourceLocation");
	}

	unsupported("glGetProgramResourceLocation");
	return piglit_dispatch_glGetProgramResourceLocation;
}

static GLint APIENTRY
stub_glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar * name)
{
	check_initialized();
	piglit_dispatch_glGetProgramResourceLocation = resolve_glGetProgramResourceLocation();
	return piglit_dispatch_glGetProgramResourceLocation(program, programInterface, name);
}

PFNGLGETPROGRAMRESOURCELOCATIONPROC piglit_dispatch_glGetProgramResourceLocation = stub_glGetProgramResourceLocation;

static void*
resolve_glGetProgramResourceLocationIndex(void)
{
	/* glGetProgramResourceLocationIndex (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetProgramResourceLocationIndex", 43);
	}

	/* glGetProgramResourceLocationIndex (GL_ARB_program_interface_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_program_interface_query")) {
		return get_ext_proc("glGetProgramResourceLocationIndex");
	}

	unsupported("glGetProgramResourceLocationIndex");
	return piglit_dispatch_glGetProgramResourceLocationIndex;
}

static GLint APIENTRY
stub_glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar * name)
{
	check_initialized();
	piglit_dispatch_glGetProgramResourceLocationIndex = resolve_glGetProgramResourceLocationIndex();
	return piglit_dispatch_glGetProgramResourceLocationIndex(program, programInterface, name);
}

PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC piglit_dispatch_glGetProgramResourceLocationIndex = stub_glGetProgramResourceLocationIndex;

static void*
resolve_glGetProgramResourceName(void)
{
	/* glGetProgramResourceName (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetProgramResourceName", 43);
	}

	/* glGetProgramResourceName (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetProgramResourceName", 31);
	}

	/* glGetProgramResourceName (GL_ARB_program_interface_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_program_interface_query")) {
		return get_ext_proc("glGetProgramResourceName");
	}

	unsupported("glGetProgramResourceName");
	return piglit_dispatch_glGetProgramResourceName;
}

static void APIENTRY
stub_glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name)
{
	check_initialized();
	piglit_dispatch_glGetProgramResourceName = resolve_glGetProgramResourceName();
	piglit_dispatch_glGetProgramResourceName(program, programInterface, index, bufSize, length, name);
}

PFNGLGETPROGRAMRESOURCENAMEPROC piglit_dispatch_glGetProgramResourceName = stub_glGetProgramResourceName;

static void*
resolve_glGetProgramResourceiv(void)
{
	/* glGetProgramResourceiv (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetProgramResourceiv", 43);
	}

	/* glGetProgramResourceiv (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetProgramResourceiv", 31);
	}

	/* glGetProgramResourceiv (GL_ARB_program_interface_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_program_interface_query")) {
		return get_ext_proc("glGetProgramResourceiv");
	}

	unsupported("glGetProgramResourceiv");
	return piglit_dispatch_glGetProgramResourceiv;
}

static void APIENTRY
stub_glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetProgramResourceiv = resolve_glGetProgramResourceiv();
	piglit_dispatch_glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params);
}

PFNGLGETPROGRAMRESOURCEIVPROC piglit_dispatch_glGetProgramResourceiv = stub_glGetProgramResourceiv;

static void*
resolve_glGetProgramStageiv(void)
{
	/* glGetProgramStageiv (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetProgramStageiv", 40);
	}

	/* glGetProgramStageiv (GL_ARB_shader_subroutine) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_subroutine")) {
		return get_ext_proc("glGetProgramStageiv");
	}

	unsupported("glGetProgramStageiv");
	return piglit_dispatch_glGetProgramStageiv;
}

static void APIENTRY
stub_glGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint * values)
{
	check_initialized();
	piglit_dispatch_glGetProgramStageiv = resolve_glGetProgramStageiv();
	piglit_dispatch_glGetProgramStageiv(program, shadertype, pname, values);
}

PFNGLGETPROGRAMSTAGEIVPROC piglit_dispatch_glGetProgramStageiv = stub_glGetProgramStageiv;

static void*
resolve_glGetProgramStringARB(void)
{
	/* glGetProgramStringARB (GL_ARB_fragment_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_fragment_program")) {
		return get_ext_proc("glGetProgramStringARB");
	}

	/* glGetProgramStringARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glGetProgramStringARB");
	}

	unsupported("glGetProgramStringARB");
	return piglit_dispatch_glGetProgramStringARB;
}

static void APIENTRY
stub_glGetProgramStringARB(GLenum target, GLenum pname, void * string)
{
	check_initialized();
	piglit_dispatch_glGetProgramStringARB = resolve_glGetProgramStringARB();
	piglit_dispatch_glGetProgramStringARB(target, pname, string);
}

PFNGLGETPROGRAMSTRINGARBPROC piglit_dispatch_glGetProgramStringARB = stub_glGetProgramStringARB;

static void*
resolve_glGetProgramStringNV(void)
{
	/* glGetProgramStringNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glGetProgramStringNV");
	}

	unsupported("glGetProgramStringNV");
	return piglit_dispatch_glGetProgramStringNV;
}

static void APIENTRY
stub_glGetProgramStringNV(GLuint id, GLenum pname, GLubyte * program)
{
	check_initialized();
	piglit_dispatch_glGetProgramStringNV = resolve_glGetProgramStringNV();
	piglit_dispatch_glGetProgramStringNV(id, pname, program);
}

PFNGLGETPROGRAMSTRINGNVPROC piglit_dispatch_glGetProgramStringNV = stub_glGetProgramStringNV;

static void*
resolve_glGetProgramSubroutineParameteruivNV(void)
{
	/* glGetProgramSubroutineParameteruivNV (GL_NV_gpu_program5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_program5")) {
		return get_ext_proc("glGetProgramSubroutineParameteruivNV");
	}

	unsupported("glGetProgramSubroutineParameteruivNV");
	return piglit_dispatch_glGetProgramSubroutineParameteruivNV;
}

static void APIENTRY
stub_glGetProgramSubroutineParameteruivNV(GLenum target, GLuint index, GLuint * param)
{
	check_initialized();
	piglit_dispatch_glGetProgramSubroutineParameteruivNV = resolve_glGetProgramSubroutineParameteruivNV();
	piglit_dispatch_glGetProgramSubroutineParameteruivNV(target, index, param);
}

PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC piglit_dispatch_glGetProgramSubroutineParameteruivNV = stub_glGetProgramSubroutineParameteruivNV;

static void*
resolve_glGetProgramiv(void)
{
	/* glGetProgramiv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetProgramiv", 20);
	}

	/* glGetProgramiv (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glGetProgramiv", 20);
	}

	unsupported("glGetProgramiv");
	return piglit_dispatch_glGetProgramiv;
}

static void APIENTRY
stub_glGetProgramiv(GLuint program, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetProgramiv = resolve_glGetProgramiv();
	piglit_dispatch_glGetProgramiv(program, pname, params);
}

PFNGLGETPROGRAMIVPROC piglit_dispatch_glGetProgramiv = stub_glGetProgramiv;

static void*
resolve_glGetProgramivARB(void)
{
	/* glGetProgramivARB (GL_ARB_fragment_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_fragment_program")) {
		return get_ext_proc("glGetProgramivARB");
	}

	/* glGetProgramivARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glGetProgramivARB");
	}

	unsupported("glGetProgramivARB");
	return piglit_dispatch_glGetProgramivARB;
}

static void APIENTRY
stub_glGetProgramivARB(GLenum target, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetProgramivARB = resolve_glGetProgramivARB();
	piglit_dispatch_glGetProgramivARB(target, pname, params);
}

PFNGLGETPROGRAMIVARBPROC piglit_dispatch_glGetProgramivARB = stub_glGetProgramivARB;

static void*
resolve_glGetProgramivNV(void)
{
	/* glGetProgramivNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glGetProgramivNV");
	}

	unsupported("glGetProgramivNV");
	return piglit_dispatch_glGetProgramivNV;
}

static void APIENTRY
stub_glGetProgramivNV(GLuint id, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetProgramivNV = resolve_glGetProgramivNV();
	piglit_dispatch_glGetProgramivNV(id, pname, params);
}

PFNGLGETPROGRAMIVNVPROC piglit_dispatch_glGetProgramivNV = stub_glGetProgramivNV;

static void*
resolve_glGetQueryIndexediv(void)
{
	/* glGetQueryIndexediv (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetQueryIndexediv", 40);
	}

	/* glGetQueryIndexediv (GL_ARB_transform_feedback3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_transform_feedback3")) {
		return get_ext_proc("glGetQueryIndexediv");
	}

	unsupported("glGetQueryIndexediv");
	return piglit_dispatch_glGetQueryIndexediv;
}

static void APIENTRY
stub_glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetQueryIndexediv = resolve_glGetQueryIndexediv();
	piglit_dispatch_glGetQueryIndexediv(target, index, pname, params);
}

PFNGLGETQUERYINDEXEDIVPROC piglit_dispatch_glGetQueryIndexediv = stub_glGetQueryIndexediv;

static void*
resolve_glGetQueryObjecti64v(void)
{
	/* glGetQueryObjecti64v (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetQueryObjecti64v", 33);
	}

	/* glGetQueryObjecti64v (GL_ARB_timer_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_timer_query")) {
		return get_ext_proc("glGetQueryObjecti64v");
	}

	/* glGetQueryObjecti64vEXT (GL_EXT_disjoint_timer_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_disjoint_timer_query")) {
		return get_ext_proc("glGetQueryObjecti64vEXT");
	}

	/* glGetQueryObjecti64vEXT (GL_EXT_timer_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_timer_query")) {
		return get_ext_proc("glGetQueryObjecti64vEXT");
	}

	unsupported("glGetQueryObjecti64v");
	return piglit_dispatch_glGetQueryObjecti64v;
}

static void APIENTRY
stub_glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 * params)
{
	check_initialized();
	piglit_dispatch_glGetQueryObjecti64v = resolve_glGetQueryObjecti64v();
	piglit_dispatch_glGetQueryObjecti64v(id, pname, params);
}

PFNGLGETQUERYOBJECTI64VPROC piglit_dispatch_glGetQueryObjecti64v = stub_glGetQueryObjecti64v;

static void*
resolve_glGetQueryObjectiv(void)
{
	/* glGetQueryObjectiv (GL_VERSION_1_5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetQueryObjectiv", 15);
	}

	/* glGetQueryObjectivARB (GL_ARB_occlusion_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_occlusion_query")) {
		return get_ext_proc("glGetQueryObjectivARB");
	}

	/* glGetQueryObjectivEXT (GL_EXT_disjoint_timer_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_disjoint_timer_query")) {
		return get_ext_proc("glGetQueryObjectivEXT");
	}

	unsupported("glGetQueryObjectiv");
	return piglit_dispatch_glGetQueryObjectiv;
}

static void APIENTRY
stub_glGetQueryObjectiv(GLuint id, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetQueryObjectiv = resolve_glGetQueryObjectiv();
	piglit_dispatch_glGetQueryObjectiv(id, pname, params);
}

PFNGLGETQUERYOBJECTIVPROC piglit_dispatch_glGetQueryObjectiv = stub_glGetQueryObjectiv;

static void*
resolve_glGetQueryObjectui64v(void)
{
	/* glGetQueryObjectui64v (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetQueryObjectui64v", 33);
	}

	/* glGetQueryObjectui64v (GL_ARB_timer_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_timer_query")) {
		return get_ext_proc("glGetQueryObjectui64v");
	}

	/* glGetQueryObjectui64vEXT (GL_EXT_disjoint_timer_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_disjoint_timer_query")) {
		return get_ext_proc("glGetQueryObjectui64vEXT");
	}

	/* glGetQueryObjectui64vEXT (GL_EXT_timer_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_timer_query")) {
		return get_ext_proc("glGetQueryObjectui64vEXT");
	}

	unsupported("glGetQueryObjectui64v");
	return piglit_dispatch_glGetQueryObjectui64v;
}

static void APIENTRY
stub_glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 * params)
{
	check_initialized();
	piglit_dispatch_glGetQueryObjectui64v = resolve_glGetQueryObjectui64v();
	piglit_dispatch_glGetQueryObjectui64v(id, pname, params);
}

PFNGLGETQUERYOBJECTUI64VPROC piglit_dispatch_glGetQueryObjectui64v = stub_glGetQueryObjectui64v;

static void*
resolve_glGetQueryObjectuiv(void)
{
	/* glGetQueryObjectuiv (GL_VERSION_1_5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetQueryObjectuiv", 15);
	}

	/* glGetQueryObjectuiv (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetQueryObjectuiv", 30);
	}

	/* glGetQueryObjectuivARB (GL_ARB_occlusion_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_occlusion_query")) {
		return get_ext_proc("glGetQueryObjectuivARB");
	}

	unsupported("glGetQueryObjectuiv");
	return piglit_dispatch_glGetQueryObjectuiv;
}

static void APIENTRY
stub_glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint * params)
{
	check_initialized();
	piglit_dispatch_glGetQueryObjectuiv = resolve_glGetQueryObjectuiv();
	piglit_dispatch_glGetQueryObjectuiv(id, pname, params);
}

PFNGLGETQUERYOBJECTUIVPROC piglit_dispatch_glGetQueryObjectuiv = stub_glGetQueryObjectuiv;

static void*
resolve_glGetQueryObjectuivEXT(void)
{
	/* glGetQueryObjectuivEXT (GL_EXT_disjoint_timer_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_disjoint_timer_query")) {
		return get_ext_proc("glGetQueryObjectuivEXT");
	}

	/* glGetQueryObjectuivEXT (GL_EXT_occlusion_query_boolean) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_occlusion_query_boolean")) {
		return get_ext_proc("glGetQueryObjectuivEXT");
	}

	unsupported("glGetQueryObjectuivEXT");
	return piglit_dispatch_glGetQueryObjectuivEXT;
}

static void APIENTRY
stub_glGetQueryObjectuivEXT(GLuint id, GLenum pname, GLuint * params)
{
	check_initialized();
	piglit_dispatch_glGetQueryObjectuivEXT = resolve_glGetQueryObjectuivEXT();
	piglit_dispatch_glGetQueryObjectuivEXT(id, pname, params);
}

PFNGLGETQUERYOBJECTUIVEXTPROC piglit_dispatch_glGetQueryObjectuivEXT = stub_glGetQueryObjectuivEXT;

static void*
resolve_glGetQueryiv(void)
{
	/* glGetQueryiv (GL_VERSION_1_5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetQueryiv", 15);
	}

	/* glGetQueryiv (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetQueryiv", 30);
	}

	/* glGetQueryivARB (GL_ARB_occlusion_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_occlusion_query")) {
		return get_ext_proc("glGetQueryivARB");
	}

	unsupported("glGetQueryiv");
	return piglit_dispatch_glGetQueryiv;
}

static void APIENTRY
stub_glGetQueryiv(GLenum target, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetQueryiv = resolve_glGetQueryiv();
	piglit_dispatch_glGetQueryiv(target, pname, params);
}

PFNGLGETQUERYIVPROC piglit_dispatch_glGetQueryiv = stub_glGetQueryiv;

static void*
resolve_glGetQueryivEXT(void)
{
	/* glGetQueryivEXT (GL_EXT_disjoint_timer_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_disjoint_timer_query")) {
		return get_ext_proc("glGetQueryivEXT");
	}

	/* glGetQueryivEXT (GL_EXT_occlusion_query_boolean) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_occlusion_query_boolean")) {
		return get_ext_proc("glGetQueryivEXT");
	}

	unsupported("glGetQueryivEXT");
	return piglit_dispatch_glGetQueryivEXT;
}

static void APIENTRY
stub_glGetQueryivEXT(GLenum target, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetQueryivEXT = resolve_glGetQueryivEXT();
	piglit_dispatch_glGetQueryivEXT(target, pname, params);
}

PFNGLGETQUERYIVEXTPROC piglit_dispatch_glGetQueryivEXT = stub_glGetQueryivEXT;

static void*
resolve_glGetRenderbufferParameteriv(void)
{
	/* glGetRenderbufferParameteriv (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetRenderbufferParameteriv", 30);
	}

	/* glGetRenderbufferParameteriv (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glGetRenderbufferParameteriv", 20);
	}

	/* glGetRenderbufferParameteriv (GL_ARB_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_framebuffer_object")) {
		return get_ext_proc("glGetRenderbufferParameteriv");
	}

	/* glGetRenderbufferParameterivEXT (GL_EXT_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_framebuffer_object")) {
		return get_ext_proc("glGetRenderbufferParameterivEXT");
	}

	unsupported("glGetRenderbufferParameteriv");
	return piglit_dispatch_glGetRenderbufferParameteriv;
}

static void APIENTRY
stub_glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetRenderbufferParameteriv = resolve_glGetRenderbufferParameteriv();
	piglit_dispatch_glGetRenderbufferParameteriv(target, pname, params);
}

PFNGLGETRENDERBUFFERPARAMETERIVPROC piglit_dispatch_glGetRenderbufferParameteriv = stub_glGetRenderbufferParameteriv;

static void*
resolve_glGetRenderbufferParameterivOES(void)
{
	/* glGetRenderbufferParameterivOES (GL_OES_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_framebuffer_object")) {
		return get_ext_proc("glGetRenderbufferParameterivOES");
	}

	unsupported("glGetRenderbufferParameterivOES");
	return piglit_dispatch_glGetRenderbufferParameterivOES;
}

static void APIENTRY
stub_glGetRenderbufferParameterivOES(GLenum target, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetRenderbufferParameterivOES = resolve_glGetRenderbufferParameterivOES();
	piglit_dispatch_glGetRenderbufferParameterivOES(target, pname, params);
}

PFNGLGETRENDERBUFFERPARAMETERIVOESPROC piglit_dispatch_glGetRenderbufferParameterivOES = stub_glGetRenderbufferParameterivOES;

static void*
resolve_glGetSamplerParameterIiv(void)
{
	/* glGetSamplerParameterIiv (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetSamplerParameterIiv", 33);
	}

	/* glGetSamplerParameterIiv (GL_ARB_sampler_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_sampler_objects")) {
		return get_ext_proc("glGetSamplerParameterIiv");
	}

	/* glGetSamplerParameterIivEXT (GL_EXT_texture_border_clamp) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_texture_border_clamp")) {
		return get_ext_proc("glGetSamplerParameterIivEXT");
	}

	unsupported("glGetSamplerParameterIiv");
	return piglit_dispatch_glGetSamplerParameterIiv;
}

static void APIENTRY
stub_glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetSamplerParameterIiv = resolve_glGetSamplerParameterIiv();
	piglit_dispatch_glGetSamplerParameterIiv(sampler, pname, params);
}

PFNGLGETSAMPLERPARAMETERIIVPROC piglit_dispatch_glGetSamplerParameterIiv = stub_glGetSamplerParameterIiv;

static void*
resolve_glGetSamplerParameterIuiv(void)
{
	/* glGetSamplerParameterIuiv (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetSamplerParameterIuiv", 33);
	}

	/* glGetSamplerParameterIuiv (GL_ARB_sampler_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_sampler_objects")) {
		return get_ext_proc("glGetSamplerParameterIuiv");
	}

	/* glGetSamplerParameterIuivEXT (GL_EXT_texture_border_clamp) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_texture_border_clamp")) {
		return get_ext_proc("glGetSamplerParameterIuivEXT");
	}

	unsupported("glGetSamplerParameterIuiv");
	return piglit_dispatch_glGetSamplerParameterIuiv;
}

static void APIENTRY
stub_glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint * params)
{
	check_initialized();
	piglit_dispatch_glGetSamplerParameterIuiv = resolve_glGetSamplerParameterIuiv();
	piglit_dispatch_glGetSamplerParameterIuiv(sampler, pname, params);
}

PFNGLGETSAMPLERPARAMETERIUIVPROC piglit_dispatch_glGetSamplerParameterIuiv = stub_glGetSamplerParameterIuiv;

static void*
resolve_glGetSamplerParameterfv(void)
{
	/* glGetSamplerParameterfv (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetSamplerParameterfv", 33);
	}

	/* glGetSamplerParameterfv (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetSamplerParameterfv", 30);
	}

	/* glGetSamplerParameterfv (GL_ARB_sampler_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_sampler_objects")) {
		return get_ext_proc("glGetSamplerParameterfv");
	}

	unsupported("glGetSamplerParameterfv");
	return piglit_dispatch_glGetSamplerParameterfv;
}

static void APIENTRY
stub_glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetSamplerParameterfv = resolve_glGetSamplerParameterfv();
	piglit_dispatch_glGetSamplerParameterfv(sampler, pname, params);
}

PFNGLGETSAMPLERPARAMETERFVPROC piglit_dispatch_glGetSamplerParameterfv = stub_glGetSamplerParameterfv;

static void*
resolve_glGetSamplerParameteriv(void)
{
	/* glGetSamplerParameteriv (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetSamplerParameteriv", 33);
	}

	/* glGetSamplerParameteriv (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetSamplerParameteriv", 30);
	}

	/* glGetSamplerParameteriv (GL_ARB_sampler_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_sampler_objects")) {
		return get_ext_proc("glGetSamplerParameteriv");
	}

	unsupported("glGetSamplerParameteriv");
	return piglit_dispatch_glGetSamplerParameteriv;
}

static void APIENTRY
stub_glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetSamplerParameteriv = resolve_glGetSamplerParameteriv();
	piglit_dispatch_glGetSamplerParameteriv(sampler, pname, params);
}

PFNGLGETSAMPLERPARAMETERIVPROC piglit_dispatch_glGetSamplerParameteriv = stub_glGetSamplerParameteriv;

static void*
resolve_glGetSeparableFilter(void)
{
	/* glGetSeparableFilter (GL_ARB_imaging) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_imaging")) {
		return get_ext_proc("glGetSeparableFilter");
	}

	unsupported("glGetSeparableFilter");
	return piglit_dispatch_glGetSeparableFilter;
}

static void APIENTRY
stub_glGetSeparableFilter(GLenum target, GLenum format, GLenum type, void * row, void * column, void * span)
{
	check_initialized();
	piglit_dispatch_glGetSeparableFilter = resolve_glGetSeparableFilter();
	piglit_dispatch_glGetSeparableFilter(target, format, type, row, column, span);
}

PFNGLGETSEPARABLEFILTERPROC piglit_dispatch_glGetSeparableFilter = stub_glGetSeparableFilter;

static void*
resolve_glGetSeparableFilterEXT(void)
{
	/* glGetSeparableFilterEXT (GL_EXT_convolution) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_convolution")) {
		return get_ext_proc("glGetSeparableFilterEXT");
	}

	unsupported("glGetSeparableFilterEXT");
	return piglit_dispatch_glGetSeparableFilterEXT;
}

static void APIENTRY
stub_glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, void * row, void * column, void * span)
{
	check_initialized();
	piglit_dispatch_glGetSeparableFilterEXT = resolve_glGetSeparableFilterEXT();
	piglit_dispatch_glGetSeparableFilterEXT(target, format, type, row, column, span);
}

PFNGLGETSEPARABLEFILTEREXTPROC piglit_dispatch_glGetSeparableFilterEXT = stub_glGetSeparableFilterEXT;

static void*
resolve_glGetShaderInfoLog(void)
{
	/* glGetShaderInfoLog (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetShaderInfoLog", 20);
	}

	/* glGetShaderInfoLog (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glGetShaderInfoLog", 20);
	}

	unsupported("glGetShaderInfoLog");
	return piglit_dispatch_glGetShaderInfoLog;
}

static void APIENTRY
stub_glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog)
{
	check_initialized();
	piglit_dispatch_glGetShaderInfoLog = resolve_glGetShaderInfoLog();
	piglit_dispatch_glGetShaderInfoLog(shader, bufSize, length, infoLog);
}

PFNGLGETSHADERINFOLOGPROC piglit_dispatch_glGetShaderInfoLog = stub_glGetShaderInfoLog;

static void*
resolve_glGetShaderPrecisionFormat(void)
{
	/* glGetShaderPrecisionFormat (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetShaderPrecisionFormat", 41);
	}

	/* glGetShaderPrecisionFormat (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glGetShaderPrecisionFormat", 20);
	}

	/* glGetShaderPrecisionFormat (GL_ARB_ES2_compatibility) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_ES2_compatibility")) {
		return get_ext_proc("glGetShaderPrecisionFormat");
	}

	unsupported("glGetShaderPrecisionFormat");
	return piglit_dispatch_glGetShaderPrecisionFormat;
}

static void APIENTRY
stub_glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision)
{
	check_initialized();
	piglit_dispatch_glGetShaderPrecisionFormat = resolve_glGetShaderPrecisionFormat();
	piglit_dispatch_glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision);
}

PFNGLGETSHADERPRECISIONFORMATPROC piglit_dispatch_glGetShaderPrecisionFormat = stub_glGetShaderPrecisionFormat;

static void*
resolve_glGetShaderSource(void)
{
	/* glGetShaderSource (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetShaderSource", 20);
	}

	/* glGetShaderSource (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glGetShaderSource", 20);
	}

	/* glGetShaderSourceARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glGetShaderSourceARB");
	}

	unsupported("glGetShaderSource");
	return piglit_dispatch_glGetShaderSource;
}

static void APIENTRY
stub_glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source)
{
	check_initialized();
	piglit_dispatch_glGetShaderSource = resolve_glGetShaderSource();
	piglit_dispatch_glGetShaderSource(shader, bufSize, length, source);
}

PFNGLGETSHADERSOURCEPROC piglit_dispatch_glGetShaderSource = stub_glGetShaderSource;

static void*
resolve_glGetShaderiv(void)
{
	/* glGetShaderiv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetShaderiv", 20);
	}

	/* glGetShaderiv (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glGetShaderiv", 20);
	}

	unsupported("glGetShaderiv");
	return piglit_dispatch_glGetShaderiv;
}

static void APIENTRY
stub_glGetShaderiv(GLuint shader, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetShaderiv = resolve_glGetShaderiv();
	piglit_dispatch_glGetShaderiv(shader, pname, params);
}

PFNGLGETSHADERIVPROC piglit_dispatch_glGetShaderiv = stub_glGetShaderiv;

static void*
resolve_glGetSharpenTexFuncSGIS(void)
{
	/* glGetSharpenTexFuncSGIS (GL_SGIS_sharpen_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIS_sharpen_texture")) {
		return get_ext_proc("glGetSharpenTexFuncSGIS");
	}

	unsupported("glGetSharpenTexFuncSGIS");
	return piglit_dispatch_glGetSharpenTexFuncSGIS;
}

static void APIENTRY
stub_glGetSharpenTexFuncSGIS(GLenum target, GLfloat * points)
{
	check_initialized();
	piglit_dispatch_glGetSharpenTexFuncSGIS = resolve_glGetSharpenTexFuncSGIS();
	piglit_dispatch_glGetSharpenTexFuncSGIS(target, points);
}

PFNGLGETSHARPENTEXFUNCSGISPROC piglit_dispatch_glGetSharpenTexFuncSGIS = stub_glGetSharpenTexFuncSGIS;

static void*
resolve_glGetString(void)
{
	/* glGetString (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glGetString", 10);
	}

	/* glGetString (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glGetString", 10);
	}

	/* glGetString (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glGetString", 20);
	}

	unsupported("glGetString");
	return piglit_dispatch_glGetString;
}

static const GLubyte * APIENTRY
stub_glGetString(GLenum name)
{
	check_initialized();
	piglit_dispatch_glGetString = resolve_glGetString();
	return piglit_dispatch_glGetString(name);
}

PFNGLGETSTRINGPROC piglit_dispatch_glGetString = stub_glGetString;

static void*
resolve_glGetStringi(void)
{
	/* glGetStringi (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetStringi", 30);
	}

	/* glGetStringi (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetStringi", 30);
	}

	unsupported("glGetStringi");
	return piglit_dispatch_glGetStringi;
}

static const GLubyte * APIENTRY
stub_glGetStringi(GLenum name, GLuint index)
{
	check_initialized();
	piglit_dispatch_glGetStringi = resolve_glGetStringi();
	return piglit_dispatch_glGetStringi(name, index);
}

PFNGLGETSTRINGIPROC piglit_dispatch_glGetStringi = stub_glGetStringi;

static void*
resolve_glGetSubroutineIndex(void)
{
	/* glGetSubroutineIndex (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetSubroutineIndex", 40);
	}

	/* glGetSubroutineIndex (GL_ARB_shader_subroutine) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_subroutine")) {
		return get_ext_proc("glGetSubroutineIndex");
	}

	unsupported("glGetSubroutineIndex");
	return piglit_dispatch_glGetSubroutineIndex;
}

static GLuint APIENTRY
stub_glGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar * name)
{
	check_initialized();
	piglit_dispatch_glGetSubroutineIndex = resolve_glGetSubroutineIndex();
	return piglit_dispatch_glGetSubroutineIndex(program, shadertype, name);
}

PFNGLGETSUBROUTINEINDEXPROC piglit_dispatch_glGetSubroutineIndex = stub_glGetSubroutineIndex;

static void*
resolve_glGetSubroutineUniformLocation(void)
{
	/* glGetSubroutineUniformLocation (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetSubroutineUniformLocation", 40);
	}

	/* glGetSubroutineUniformLocation (GL_ARB_shader_subroutine) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_subroutine")) {
		return get_ext_proc("glGetSubroutineUniformLocation");
	}

	unsupported("glGetSubroutineUniformLocation");
	return piglit_dispatch_glGetSubroutineUniformLocation;
}

static GLint APIENTRY
stub_glGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar * name)
{
	check_initialized();
	piglit_dispatch_glGetSubroutineUniformLocation = resolve_glGetSubroutineUniformLocation();
	return piglit_dispatch_glGetSubroutineUniformLocation(program, shadertype, name);
}

PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC piglit_dispatch_glGetSubroutineUniformLocation = stub_glGetSubroutineUniformLocation;

static void*
resolve_glGetSynciv(void)
{
	/* glGetSynciv (GL_VERSION_3_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetSynciv", 32);
	}

	/* glGetSynciv (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetSynciv", 30);
	}

	/* glGetSynciv (GL_ARB_sync) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_sync")) {
		return get_ext_proc("glGetSynciv");
	}

	/* glGetSyncivAPPLE (GL_APPLE_sync) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_APPLE_sync")) {
		return get_ext_proc("glGetSyncivAPPLE");
	}

	unsupported("glGetSynciv");
	return piglit_dispatch_glGetSynciv;
}

static void APIENTRY
stub_glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values)
{
	check_initialized();
	piglit_dispatch_glGetSynciv = resolve_glGetSynciv();
	piglit_dispatch_glGetSynciv(sync, pname, bufSize, length, values);
}

PFNGLGETSYNCIVPROC piglit_dispatch_glGetSynciv = stub_glGetSynciv;

static void*
resolve_glGetTexBumpParameterfvATI(void)
{
	/* glGetTexBumpParameterfvATI (GL_ATI_envmap_bumpmap) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_envmap_bumpmap")) {
		return get_ext_proc("glGetTexBumpParameterfvATI");
	}

	unsupported("glGetTexBumpParameterfvATI");
	return piglit_dispatch_glGetTexBumpParameterfvATI;
}

static void APIENTRY
stub_glGetTexBumpParameterfvATI(GLenum pname, GLfloat * param)
{
	check_initialized();
	piglit_dispatch_glGetTexBumpParameterfvATI = resolve_glGetTexBumpParameterfvATI();
	piglit_dispatch_glGetTexBumpParameterfvATI(pname, param);
}

PFNGLGETTEXBUMPPARAMETERFVATIPROC piglit_dispatch_glGetTexBumpParameterfvATI = stub_glGetTexBumpParameterfvATI;

static void*
resolve_glGetTexBumpParameterivATI(void)
{
	/* glGetTexBumpParameterivATI (GL_ATI_envmap_bumpmap) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_envmap_bumpmap")) {
		return get_ext_proc("glGetTexBumpParameterivATI");
	}

	unsupported("glGetTexBumpParameterivATI");
	return piglit_dispatch_glGetTexBumpParameterivATI;
}

static void APIENTRY
stub_glGetTexBumpParameterivATI(GLenum pname, GLint * param)
{
	check_initialized();
	piglit_dispatch_glGetTexBumpParameterivATI = resolve_glGetTexBumpParameterivATI();
	piglit_dispatch_glGetTexBumpParameterivATI(pname, param);
}

PFNGLGETTEXBUMPPARAMETERIVATIPROC piglit_dispatch_glGetTexBumpParameterivATI = stub_glGetTexBumpParameterivATI;

static void*
resolve_glGetTexEnvfv(void)
{
	/* glGetTexEnvfv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glGetTexEnvfv", 10);
	}

	/* glGetTexEnvfv (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glGetTexEnvfv", 10);
	}

	unsupported("glGetTexEnvfv");
	return piglit_dispatch_glGetTexEnvfv;
}

static void APIENTRY
stub_glGetTexEnvfv(GLenum target, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetTexEnvfv = resolve_glGetTexEnvfv();
	piglit_dispatch_glGetTexEnvfv(target, pname, params);
}

PFNGLGETTEXENVFVPROC piglit_dispatch_glGetTexEnvfv = stub_glGetTexEnvfv;

static void*
resolve_glGetTexEnviv(void)
{
	/* glGetTexEnviv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glGetTexEnviv", 10);
	}

	/* glGetTexEnviv (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glGetTexEnviv", 10);
	}

	unsupported("glGetTexEnviv");
	return piglit_dispatch_glGetTexEnviv;
}

static void APIENTRY
stub_glGetTexEnviv(GLenum target, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetTexEnviv = resolve_glGetTexEnviv();
	piglit_dispatch_glGetTexEnviv(target, pname, params);
}

PFNGLGETTEXENVIVPROC piglit_dispatch_glGetTexEnviv = stub_glGetTexEnviv;

static void*
resolve_glGetTexEnvxv(void)
{
	/* glGetTexEnvxv (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glGetTexEnvxv", 10);
	}

	unsupported("glGetTexEnvxv");
	return piglit_dispatch_glGetTexEnvxv;
}

static void APIENTRY
stub_glGetTexEnvxv(GLenum target, GLenum pname, GLfixed * params)
{
	check_initialized();
	piglit_dispatch_glGetTexEnvxv = resolve_glGetTexEnvxv();
	piglit_dispatch_glGetTexEnvxv(target, pname, params);
}

PFNGLGETTEXENVXVPROC piglit_dispatch_glGetTexEnvxv = stub_glGetTexEnvxv;

static void*
resolve_glGetTexEnvxvOES(void)
{
	/* glGetTexEnvxvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glGetTexEnvxvOES");
	}

	unsupported("glGetTexEnvxvOES");
	return piglit_dispatch_glGetTexEnvxvOES;
}

static void APIENTRY
stub_glGetTexEnvxvOES(GLenum target, GLenum pname, GLfixed * params)
{
	check_initialized();
	piglit_dispatch_glGetTexEnvxvOES = resolve_glGetTexEnvxvOES();
	piglit_dispatch_glGetTexEnvxvOES(target, pname, params);
}

PFNGLGETTEXENVXVOESPROC piglit_dispatch_glGetTexEnvxvOES = stub_glGetTexEnvxvOES;

static void*
resolve_glGetTexFilterFuncSGIS(void)
{
	/* glGetTexFilterFuncSGIS (GL_SGIS_texture_filter4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIS_texture_filter4")) {
		return get_ext_proc("glGetTexFilterFuncSGIS");
	}

	unsupported("glGetTexFilterFuncSGIS");
	return piglit_dispatch_glGetTexFilterFuncSGIS;
}

static void APIENTRY
stub_glGetTexFilterFuncSGIS(GLenum target, GLenum filter, GLfloat * weights)
{
	check_initialized();
	piglit_dispatch_glGetTexFilterFuncSGIS = resolve_glGetTexFilterFuncSGIS();
	piglit_dispatch_glGetTexFilterFuncSGIS(target, filter, weights);
}

PFNGLGETTEXFILTERFUNCSGISPROC piglit_dispatch_glGetTexFilterFuncSGIS = stub_glGetTexFilterFuncSGIS;

static void*
resolve_glGetTexGendv(void)
{
	/* glGetTexGendv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glGetTexGendv", 10);
	}

	unsupported("glGetTexGendv");
	return piglit_dispatch_glGetTexGendv;
}

static void APIENTRY
stub_glGetTexGendv(GLenum coord, GLenum pname, GLdouble * params)
{
	check_initialized();
	piglit_dispatch_glGetTexGendv = resolve_glGetTexGendv();
	piglit_dispatch_glGetTexGendv(coord, pname, params);
}

PFNGLGETTEXGENDVPROC piglit_dispatch_glGetTexGendv = stub_glGetTexGendv;

static void*
resolve_glGetTexGenfv(void)
{
	/* glGetTexGenfv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glGetTexGenfv", 10);
	}

	unsupported("glGetTexGenfv");
	return piglit_dispatch_glGetTexGenfv;
}

static void APIENTRY
stub_glGetTexGenfv(GLenum coord, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetTexGenfv = resolve_glGetTexGenfv();
	piglit_dispatch_glGetTexGenfv(coord, pname, params);
}

PFNGLGETTEXGENFVPROC piglit_dispatch_glGetTexGenfv = stub_glGetTexGenfv;

static void*
resolve_glGetTexGenfvOES(void)
{
	/* glGetTexGenfvOES (GL_OES_texture_cube_map) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_texture_cube_map")) {
		return get_ext_proc("glGetTexGenfvOES");
	}

	unsupported("glGetTexGenfvOES");
	return piglit_dispatch_glGetTexGenfvOES;
}

static void APIENTRY
stub_glGetTexGenfvOES(GLenum coord, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetTexGenfvOES = resolve_glGetTexGenfvOES();
	piglit_dispatch_glGetTexGenfvOES(coord, pname, params);
}

PFNGLGETTEXGENFVOESPROC piglit_dispatch_glGetTexGenfvOES = stub_glGetTexGenfvOES;

static void*
resolve_glGetTexGeniv(void)
{
	/* glGetTexGeniv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glGetTexGeniv", 10);
	}

	unsupported("glGetTexGeniv");
	return piglit_dispatch_glGetTexGeniv;
}

static void APIENTRY
stub_glGetTexGeniv(GLenum coord, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetTexGeniv = resolve_glGetTexGeniv();
	piglit_dispatch_glGetTexGeniv(coord, pname, params);
}

PFNGLGETTEXGENIVPROC piglit_dispatch_glGetTexGeniv = stub_glGetTexGeniv;

static void*
resolve_glGetTexGenivOES(void)
{
	/* glGetTexGenivOES (GL_OES_texture_cube_map) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_texture_cube_map")) {
		return get_ext_proc("glGetTexGenivOES");
	}

	unsupported("glGetTexGenivOES");
	return piglit_dispatch_glGetTexGenivOES;
}

static void APIENTRY
stub_glGetTexGenivOES(GLenum coord, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetTexGenivOES = resolve_glGetTexGenivOES();
	piglit_dispatch_glGetTexGenivOES(coord, pname, params);
}

PFNGLGETTEXGENIVOESPROC piglit_dispatch_glGetTexGenivOES = stub_glGetTexGenivOES;

static void*
resolve_glGetTexGenxvOES(void)
{
	/* glGetTexGenxvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glGetTexGenxvOES");
	}

	/* glGetTexGenxvOES (GL_OES_texture_cube_map) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_texture_cube_map")) {
		return get_ext_proc("glGetTexGenxvOES");
	}

	unsupported("glGetTexGenxvOES");
	return piglit_dispatch_glGetTexGenxvOES;
}

static void APIENTRY
stub_glGetTexGenxvOES(GLenum coord, GLenum pname, GLfixed * params)
{
	check_initialized();
	piglit_dispatch_glGetTexGenxvOES = resolve_glGetTexGenxvOES();
	piglit_dispatch_glGetTexGenxvOES(coord, pname, params);
}

PFNGLGETTEXGENXVOESPROC piglit_dispatch_glGetTexGenxvOES = stub_glGetTexGenxvOES;

static void*
resolve_glGetTexImage(void)
{
	/* glGetTexImage (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glGetTexImage", 10);
	}

	unsupported("glGetTexImage");
	return piglit_dispatch_glGetTexImage;
}

static void APIENTRY
stub_glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, void * pixels)
{
	check_initialized();
	piglit_dispatch_glGetTexImage = resolve_glGetTexImage();
	piglit_dispatch_glGetTexImage(target, level, format, type, pixels);
}

PFNGLGETTEXIMAGEPROC piglit_dispatch_glGetTexImage = stub_glGetTexImage;

static void*
resolve_glGetTexLevelParameterfv(void)
{
	/* glGetTexLevelParameterfv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glGetTexLevelParameterfv", 10);
	}

	/* glGetTexLevelParameterfv (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetTexLevelParameterfv", 31);
	}

	unsupported("glGetTexLevelParameterfv");
	return piglit_dispatch_glGetTexLevelParameterfv;
}

static void APIENTRY
stub_glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetTexLevelParameterfv = resolve_glGetTexLevelParameterfv();
	piglit_dispatch_glGetTexLevelParameterfv(target, level, pname, params);
}

PFNGLGETTEXLEVELPARAMETERFVPROC piglit_dispatch_glGetTexLevelParameterfv = stub_glGetTexLevelParameterfv;

static void*
resolve_glGetTexLevelParameteriv(void)
{
	/* glGetTexLevelParameteriv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glGetTexLevelParameteriv", 10);
	}

	/* glGetTexLevelParameteriv (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetTexLevelParameteriv", 31);
	}

	unsupported("glGetTexLevelParameteriv");
	return piglit_dispatch_glGetTexLevelParameteriv;
}

static void APIENTRY
stub_glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetTexLevelParameteriv = resolve_glGetTexLevelParameteriv();
	piglit_dispatch_glGetTexLevelParameteriv(target, level, pname, params);
}

PFNGLGETTEXLEVELPARAMETERIVPROC piglit_dispatch_glGetTexLevelParameteriv = stub_glGetTexLevelParameteriv;

static void*
resolve_glGetTexLevelParameterxvOES(void)
{
	/* glGetTexLevelParameterxvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glGetTexLevelParameterxvOES");
	}

	unsupported("glGetTexLevelParameterxvOES");
	return piglit_dispatch_glGetTexLevelParameterxvOES;
}

static void APIENTRY
stub_glGetTexLevelParameterxvOES(GLenum target, GLint level, GLenum pname, GLfixed * params)
{
	check_initialized();
	piglit_dispatch_glGetTexLevelParameterxvOES = resolve_glGetTexLevelParameterxvOES();
	piglit_dispatch_glGetTexLevelParameterxvOES(target, level, pname, params);
}

PFNGLGETTEXLEVELPARAMETERXVOESPROC piglit_dispatch_glGetTexLevelParameterxvOES = stub_glGetTexLevelParameterxvOES;

static void*
resolve_glGetTexParameterIiv(void)
{
	/* glGetTexParameterIiv (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetTexParameterIiv", 30);
	}

	/* glGetTexParameterIivEXT (GL_EXT_texture_border_clamp) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_texture_border_clamp")) {
		return get_ext_proc("glGetTexParameterIivEXT");
	}

	/* glGetTexParameterIivEXT (GL_EXT_texture_integer) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_texture_integer")) {
		return get_ext_proc("glGetTexParameterIivEXT");
	}

	unsupported("glGetTexParameterIiv");
	return piglit_dispatch_glGetTexParameterIiv;
}

static void APIENTRY
stub_glGetTexParameterIiv(GLenum target, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetTexParameterIiv = resolve_glGetTexParameterIiv();
	piglit_dispatch_glGetTexParameterIiv(target, pname, params);
}

PFNGLGETTEXPARAMETERIIVPROC piglit_dispatch_glGetTexParameterIiv = stub_glGetTexParameterIiv;

static void*
resolve_glGetTexParameterIuiv(void)
{
	/* glGetTexParameterIuiv (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetTexParameterIuiv", 30);
	}

	/* glGetTexParameterIuivEXT (GL_EXT_texture_border_clamp) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_texture_border_clamp")) {
		return get_ext_proc("glGetTexParameterIuivEXT");
	}

	/* glGetTexParameterIuivEXT (GL_EXT_texture_integer) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_texture_integer")) {
		return get_ext_proc("glGetTexParameterIuivEXT");
	}

	unsupported("glGetTexParameterIuiv");
	return piglit_dispatch_glGetTexParameterIuiv;
}

static void APIENTRY
stub_glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint * params)
{
	check_initialized();
	piglit_dispatch_glGetTexParameterIuiv = resolve_glGetTexParameterIuiv();
	piglit_dispatch_glGetTexParameterIuiv(target, pname, params);
}

PFNGLGETTEXPARAMETERIUIVPROC piglit_dispatch_glGetTexParameterIuiv = stub_glGetTexParameterIuiv;

static void*
resolve_glGetTexParameterPointervAPPLE(void)
{
	/* glGetTexParameterPointervAPPLE (GL_APPLE_texture_range) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_APPLE_texture_range")) {
		return get_ext_proc("glGetTexParameterPointervAPPLE");
	}

	unsupported("glGetTexParameterPointervAPPLE");
	return piglit_dispatch_glGetTexParameterPointervAPPLE;
}

static void APIENTRY
stub_glGetTexParameterPointervAPPLE(GLenum target, GLenum pname, void ** params)
{
	check_initialized();
	piglit_dispatch_glGetTexParameterPointervAPPLE = resolve_glGetTexParameterPointervAPPLE();
	piglit_dispatch_glGetTexParameterPointervAPPLE(target, pname, params);
}

PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC piglit_dispatch_glGetTexParameterPointervAPPLE = stub_glGetTexParameterPointervAPPLE;

static void*
resolve_glGetTexParameterfv(void)
{
	/* glGetTexParameterfv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glGetTexParameterfv", 10);
	}

	/* glGetTexParameterfv (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glGetTexParameterfv", 10);
	}

	/* glGetTexParameterfv (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glGetTexParameterfv", 20);
	}

	unsupported("glGetTexParameterfv");
	return piglit_dispatch_glGetTexParameterfv;
}

static void APIENTRY
stub_glGetTexParameterfv(GLenum target, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetTexParameterfv = resolve_glGetTexParameterfv();
	piglit_dispatch_glGetTexParameterfv(target, pname, params);
}

PFNGLGETTEXPARAMETERFVPROC piglit_dispatch_glGetTexParameterfv = stub_glGetTexParameterfv;

static void*
resolve_glGetTexParameteriv(void)
{
	/* glGetTexParameteriv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glGetTexParameteriv", 10);
	}

	/* glGetTexParameteriv (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glGetTexParameteriv", 10);
	}

	/* glGetTexParameteriv (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glGetTexParameteriv", 20);
	}

	unsupported("glGetTexParameteriv");
	return piglit_dispatch_glGetTexParameteriv;
}

static void APIENTRY
stub_glGetTexParameteriv(GLenum target, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetTexParameteriv = resolve_glGetTexParameteriv();
	piglit_dispatch_glGetTexParameteriv(target, pname, params);
}

PFNGLGETTEXPARAMETERIVPROC piglit_dispatch_glGetTexParameteriv = stub_glGetTexParameteriv;

static void*
resolve_glGetTexParameterxv(void)
{
	/* glGetTexParameterxv (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glGetTexParameterxv", 10);
	}

	unsupported("glGetTexParameterxv");
	return piglit_dispatch_glGetTexParameterxv;
}

static void APIENTRY
stub_glGetTexParameterxv(GLenum target, GLenum pname, GLfixed * params)
{
	check_initialized();
	piglit_dispatch_glGetTexParameterxv = resolve_glGetTexParameterxv();
	piglit_dispatch_glGetTexParameterxv(target, pname, params);
}

PFNGLGETTEXPARAMETERXVPROC piglit_dispatch_glGetTexParameterxv = stub_glGetTexParameterxv;

static void*
resolve_glGetTexParameterxvOES(void)
{
	/* glGetTexParameterxvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glGetTexParameterxvOES");
	}

	unsupported("glGetTexParameterxvOES");
	return piglit_dispatch_glGetTexParameterxvOES;
}

static void APIENTRY
stub_glGetTexParameterxvOES(GLenum target, GLenum pname, GLfixed * params)
{
	check_initialized();
	piglit_dispatch_glGetTexParameterxvOES = resolve_glGetTexParameterxvOES();
	piglit_dispatch_glGetTexParameterxvOES(target, pname, params);
}

PFNGLGETTEXPARAMETERXVOESPROC piglit_dispatch_glGetTexParameterxvOES = stub_glGetTexParameterxvOES;

static void*
resolve_glGetTextureHandleARB(void)
{
	/* glGetTextureHandleARB (GL_ARB_bindless_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_bindless_texture")) {
		return get_ext_proc("glGetTextureHandleARB");
	}

	unsupported("glGetTextureHandleARB");
	return piglit_dispatch_glGetTextureHandleARB;
}

static GLuint64 APIENTRY
stub_glGetTextureHandleARB(GLuint texture)
{
	check_initialized();
	piglit_dispatch_glGetTextureHandleARB = resolve_glGetTextureHandleARB();
	return piglit_dispatch_glGetTextureHandleARB(texture);
}

PFNGLGETTEXTUREHANDLEARBPROC piglit_dispatch_glGetTextureHandleARB = stub_glGetTextureHandleARB;

static void*
resolve_glGetTextureHandleNV(void)
{
	/* glGetTextureHandleNV (GL_NV_bindless_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_bindless_texture")) {
		return get_ext_proc("glGetTextureHandleNV");
	}

	unsupported("glGetTextureHandleNV");
	return piglit_dispatch_glGetTextureHandleNV;
}

static GLuint64 APIENTRY
stub_glGetTextureHandleNV(GLuint texture)
{
	check_initialized();
	piglit_dispatch_glGetTextureHandleNV = resolve_glGetTextureHandleNV();
	return piglit_dispatch_glGetTextureHandleNV(texture);
}

PFNGLGETTEXTUREHANDLENVPROC piglit_dispatch_glGetTextureHandleNV = stub_glGetTextureHandleNV;

static void*
resolve_glGetTextureImageEXT(void)
{
	/* glGetTextureImageEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetTextureImageEXT");
	}

	unsupported("glGetTextureImageEXT");
	return piglit_dispatch_glGetTextureImageEXT;
}

static void APIENTRY
stub_glGetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void * pixels)
{
	check_initialized();
	piglit_dispatch_glGetTextureImageEXT = resolve_glGetTextureImageEXT();
	piglit_dispatch_glGetTextureImageEXT(texture, target, level, format, type, pixels);
}

PFNGLGETTEXTUREIMAGEEXTPROC piglit_dispatch_glGetTextureImageEXT = stub_glGetTextureImageEXT;

static void*
resolve_glGetTextureLevelParameterfvEXT(void)
{
	/* glGetTextureLevelParameterfvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetTextureLevelParameterfvEXT");
	}

	unsupported("glGetTextureLevelParameterfvEXT");
	return piglit_dispatch_glGetTextureLevelParameterfvEXT;
}

static void APIENTRY
stub_glGetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetTextureLevelParameterfvEXT = resolve_glGetTextureLevelParameterfvEXT();
	piglit_dispatch_glGetTextureLevelParameterfvEXT(texture, target, level, pname, params);
}

PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC piglit_dispatch_glGetTextureLevelParameterfvEXT = stub_glGetTextureLevelParameterfvEXT;

static void*
resolve_glGetTextureLevelParameterivEXT(void)
{
	/* glGetTextureLevelParameterivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetTextureLevelParameterivEXT");
	}

	unsupported("glGetTextureLevelParameterivEXT");
	return piglit_dispatch_glGetTextureLevelParameterivEXT;
}

static void APIENTRY
stub_glGetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetTextureLevelParameterivEXT = resolve_glGetTextureLevelParameterivEXT();
	piglit_dispatch_glGetTextureLevelParameterivEXT(texture, target, level, pname, params);
}

PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC piglit_dispatch_glGetTextureLevelParameterivEXT = stub_glGetTextureLevelParameterivEXT;

static void*
resolve_glGetTextureParameterIivEXT(void)
{
	/* glGetTextureParameterIivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetTextureParameterIivEXT");
	}

	unsupported("glGetTextureParameterIivEXT");
	return piglit_dispatch_glGetTextureParameterIivEXT;
}

static void APIENTRY
stub_glGetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetTextureParameterIivEXT = resolve_glGetTextureParameterIivEXT();
	piglit_dispatch_glGetTextureParameterIivEXT(texture, target, pname, params);
}

PFNGLGETTEXTUREPARAMETERIIVEXTPROC piglit_dispatch_glGetTextureParameterIivEXT = stub_glGetTextureParameterIivEXT;

static void*
resolve_glGetTextureParameterIuivEXT(void)
{
	/* glGetTextureParameterIuivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetTextureParameterIuivEXT");
	}

	unsupported("glGetTextureParameterIuivEXT");
	return piglit_dispatch_glGetTextureParameterIuivEXT;
}

static void APIENTRY
stub_glGetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint * params)
{
	check_initialized();
	piglit_dispatch_glGetTextureParameterIuivEXT = resolve_glGetTextureParameterIuivEXT();
	piglit_dispatch_glGetTextureParameterIuivEXT(texture, target, pname, params);
}

PFNGLGETTEXTUREPARAMETERIUIVEXTPROC piglit_dispatch_glGetTextureParameterIuivEXT = stub_glGetTextureParameterIuivEXT;

static void*
resolve_glGetTextureParameterfvEXT(void)
{
	/* glGetTextureParameterfvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetTextureParameterfvEXT");
	}

	unsupported("glGetTextureParameterfvEXT");
	return piglit_dispatch_glGetTextureParameterfvEXT;
}

static void APIENTRY
stub_glGetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetTextureParameterfvEXT = resolve_glGetTextureParameterfvEXT();
	piglit_dispatch_glGetTextureParameterfvEXT(texture, target, pname, params);
}

PFNGLGETTEXTUREPARAMETERFVEXTPROC piglit_dispatch_glGetTextureParameterfvEXT = stub_glGetTextureParameterfvEXT;

static void*
resolve_glGetTextureParameterivEXT(void)
{
	/* glGetTextureParameterivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetTextureParameterivEXT");
	}

	unsupported("glGetTextureParameterivEXT");
	return piglit_dispatch_glGetTextureParameterivEXT;
}

static void APIENTRY
stub_glGetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetTextureParameterivEXT = resolve_glGetTextureParameterivEXT();
	piglit_dispatch_glGetTextureParameterivEXT(texture, target, pname, params);
}

PFNGLGETTEXTUREPARAMETERIVEXTPROC piglit_dispatch_glGetTextureParameterivEXT = stub_glGetTextureParameterivEXT;

static void*
resolve_glGetTextureSamplerHandleARB(void)
{
	/* glGetTextureSamplerHandleARB (GL_ARB_bindless_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_bindless_texture")) {
		return get_ext_proc("glGetTextureSamplerHandleARB");
	}

	unsupported("glGetTextureSamplerHandleARB");
	return piglit_dispatch_glGetTextureSamplerHandleARB;
}

static GLuint64 APIENTRY
stub_glGetTextureSamplerHandleARB(GLuint texture, GLuint sampler)
{
	check_initialized();
	piglit_dispatch_glGetTextureSamplerHandleARB = resolve_glGetTextureSamplerHandleARB();
	return piglit_dispatch_glGetTextureSamplerHandleARB(texture, sampler);
}

PFNGLGETTEXTURESAMPLERHANDLEARBPROC piglit_dispatch_glGetTextureSamplerHandleARB = stub_glGetTextureSamplerHandleARB;

static void*
resolve_glGetTextureSamplerHandleNV(void)
{
	/* glGetTextureSamplerHandleNV (GL_NV_bindless_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_bindless_texture")) {
		return get_ext_proc("glGetTextureSamplerHandleNV");
	}

	unsupported("glGetTextureSamplerHandleNV");
	return piglit_dispatch_glGetTextureSamplerHandleNV;
}

static GLuint64 APIENTRY
stub_glGetTextureSamplerHandleNV(GLuint texture, GLuint sampler)
{
	check_initialized();
	piglit_dispatch_glGetTextureSamplerHandleNV = resolve_glGetTextureSamplerHandleNV();
	return piglit_dispatch_glGetTextureSamplerHandleNV(texture, sampler);
}

PFNGLGETTEXTURESAMPLERHANDLENVPROC piglit_dispatch_glGetTextureSamplerHandleNV = stub_glGetTextureSamplerHandleNV;

static void*
resolve_glGetTrackMatrixivNV(void)
{
	/* glGetTrackMatrixivNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glGetTrackMatrixivNV");
	}

	unsupported("glGetTrackMatrixivNV");
	return piglit_dispatch_glGetTrackMatrixivNV;
}

static void APIENTRY
stub_glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetTrackMatrixivNV = resolve_glGetTrackMatrixivNV();
	piglit_dispatch_glGetTrackMatrixivNV(target, address, pname, params);
}

PFNGLGETTRACKMATRIXIVNVPROC piglit_dispatch_glGetTrackMatrixivNV = stub_glGetTrackMatrixivNV;

static void*
resolve_glGetTransformFeedbackVarying(void)
{
	/* glGetTransformFeedbackVarying (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetTransformFeedbackVarying", 30);
	}

	/* glGetTransformFeedbackVarying (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetTransformFeedbackVarying", 30);
	}

	/* glGetTransformFeedbackVaryingEXT (GL_EXT_transform_feedback) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_transform_feedback")) {
		return get_ext_proc("glGetTransformFeedbackVaryingEXT");
	}

	unsupported("glGetTransformFeedbackVarying");
	return piglit_dispatch_glGetTransformFeedbackVarying;
}

static void APIENTRY
stub_glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name)
{
	check_initialized();
	piglit_dispatch_glGetTransformFeedbackVarying = resolve_glGetTransformFeedbackVarying();
	piglit_dispatch_glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name);
}

PFNGLGETTRANSFORMFEEDBACKVARYINGPROC piglit_dispatch_glGetTransformFeedbackVarying = stub_glGetTransformFeedbackVarying;

static void*
resolve_glGetTransformFeedbackVaryingNV(void)
{
	/* glGetTransformFeedbackVaryingNV (GL_NV_transform_feedback) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_transform_feedback")) {
		return get_ext_proc("glGetTransformFeedbackVaryingNV");
	}

	unsupported("glGetTransformFeedbackVaryingNV");
	return piglit_dispatch_glGetTransformFeedbackVaryingNV;
}

static void APIENTRY
stub_glGetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint * location)
{
	check_initialized();
	piglit_dispatch_glGetTransformFeedbackVaryingNV = resolve_glGetTransformFeedbackVaryingNV();
	piglit_dispatch_glGetTransformFeedbackVaryingNV(program, index, location);
}

PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC piglit_dispatch_glGetTransformFeedbackVaryingNV = stub_glGetTransformFeedbackVaryingNV;

static void*
resolve_glGetTranslatedShaderSourceANGLE(void)
{
	/* glGetTranslatedShaderSourceANGLE (GL_ANGLE_translated_shader_source) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_ANGLE_translated_shader_source")) {
		return get_ext_proc("glGetTranslatedShaderSourceANGLE");
	}

	unsupported("glGetTranslatedShaderSourceANGLE");
	return piglit_dispatch_glGetTranslatedShaderSourceANGLE;
}

static void APIENTRY
stub_glGetTranslatedShaderSourceANGLE(GLuint shader, GLsizei bufsize, GLsizei * length, GLchar * source)
{
	check_initialized();
	piglit_dispatch_glGetTranslatedShaderSourceANGLE = resolve_glGetTranslatedShaderSourceANGLE();
	piglit_dispatch_glGetTranslatedShaderSourceANGLE(shader, bufsize, length, source);
}

PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC piglit_dispatch_glGetTranslatedShaderSourceANGLE = stub_glGetTranslatedShaderSourceANGLE;

static void*
resolve_glGetUniformBlockIndex(void)
{
	/* glGetUniformBlockIndex (GL_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetUniformBlockIndex", 31);
	}

	/* glGetUniformBlockIndex (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetUniformBlockIndex", 30);
	}

	/* glGetUniformBlockIndex (GL_ARB_uniform_buffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_uniform_buffer_object")) {
		return get_ext_proc("glGetUniformBlockIndex");
	}

	unsupported("glGetUniformBlockIndex");
	return piglit_dispatch_glGetUniformBlockIndex;
}

static GLuint APIENTRY
stub_glGetUniformBlockIndex(GLuint program, const GLchar * uniformBlockName)
{
	check_initialized();
	piglit_dispatch_glGetUniformBlockIndex = resolve_glGetUniformBlockIndex();
	return piglit_dispatch_glGetUniformBlockIndex(program, uniformBlockName);
}

PFNGLGETUNIFORMBLOCKINDEXPROC piglit_dispatch_glGetUniformBlockIndex = stub_glGetUniformBlockIndex;

static void*
resolve_glGetUniformBufferSizeEXT(void)
{
	/* glGetUniformBufferSizeEXT (GL_EXT_bindable_uniform) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_bindable_uniform")) {
		return get_ext_proc("glGetUniformBufferSizeEXT");
	}

	unsupported("glGetUniformBufferSizeEXT");
	return piglit_dispatch_glGetUniformBufferSizeEXT;
}

static GLint APIENTRY
stub_glGetUniformBufferSizeEXT(GLuint program, GLint location)
{
	check_initialized();
	piglit_dispatch_glGetUniformBufferSizeEXT = resolve_glGetUniformBufferSizeEXT();
	return piglit_dispatch_glGetUniformBufferSizeEXT(program, location);
}

PFNGLGETUNIFORMBUFFERSIZEEXTPROC piglit_dispatch_glGetUniformBufferSizeEXT = stub_glGetUniformBufferSizeEXT;

static void*
resolve_glGetUniformIndices(void)
{
	/* glGetUniformIndices (GL_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetUniformIndices", 31);
	}

	/* glGetUniformIndices (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetUniformIndices", 30);
	}

	/* glGetUniformIndices (GL_ARB_uniform_buffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_uniform_buffer_object")) {
		return get_ext_proc("glGetUniformIndices");
	}

	unsupported("glGetUniformIndices");
	return piglit_dispatch_glGetUniformIndices;
}

static void APIENTRY
stub_glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices)
{
	check_initialized();
	piglit_dispatch_glGetUniformIndices = resolve_glGetUniformIndices();
	piglit_dispatch_glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices);
}

PFNGLGETUNIFORMINDICESPROC piglit_dispatch_glGetUniformIndices = stub_glGetUniformIndices;

static void*
resolve_glGetUniformLocation(void)
{
	/* glGetUniformLocation (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetUniformLocation", 20);
	}

	/* glGetUniformLocation (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glGetUniformLocation", 20);
	}

	/* glGetUniformLocationARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glGetUniformLocationARB");
	}

	unsupported("glGetUniformLocation");
	return piglit_dispatch_glGetUniformLocation;
}

static GLint APIENTRY
stub_glGetUniformLocation(GLuint program, const GLchar * name)
{
	check_initialized();
	piglit_dispatch_glGetUniformLocation = resolve_glGetUniformLocation();
	return piglit_dispatch_glGetUniformLocation(program, name);
}

PFNGLGETUNIFORMLOCATIONPROC piglit_dispatch_glGetUniformLocation = stub_glGetUniformLocation;

static void*
resolve_glGetUniformOffsetEXT(void)
{
	/* glGetUniformOffsetEXT (GL_EXT_bindable_uniform) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_bindable_uniform")) {
		return get_ext_proc("glGetUniformOffsetEXT");
	}

	unsupported("glGetUniformOffsetEXT");
	return piglit_dispatch_glGetUniformOffsetEXT;
}

static GLintptr APIENTRY
stub_glGetUniformOffsetEXT(GLuint program, GLint location)
{
	check_initialized();
	piglit_dispatch_glGetUniformOffsetEXT = resolve_glGetUniformOffsetEXT();
	return piglit_dispatch_glGetUniformOffsetEXT(program, location);
}

PFNGLGETUNIFORMOFFSETEXTPROC piglit_dispatch_glGetUniformOffsetEXT = stub_glGetUniformOffsetEXT;

static void*
resolve_glGetUniformSubroutineuiv(void)
{
	/* glGetUniformSubroutineuiv (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetUniformSubroutineuiv", 40);
	}

	/* glGetUniformSubroutineuiv (GL_ARB_shader_subroutine) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_subroutine")) {
		return get_ext_proc("glGetUniformSubroutineuiv");
	}

	unsupported("glGetUniformSubroutineuiv");
	return piglit_dispatch_glGetUniformSubroutineuiv;
}

static void APIENTRY
stub_glGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint * params)
{
	check_initialized();
	piglit_dispatch_glGetUniformSubroutineuiv = resolve_glGetUniformSubroutineuiv();
	piglit_dispatch_glGetUniformSubroutineuiv(shadertype, location, params);
}

PFNGLGETUNIFORMSUBROUTINEUIVPROC piglit_dispatch_glGetUniformSubroutineuiv = stub_glGetUniformSubroutineuiv;

static void*
resolve_glGetUniformdv(void)
{
	/* glGetUniformdv (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetUniformdv", 40);
	}

	/* glGetUniformdv (GL_ARB_gpu_shader_fp64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_gpu_shader_fp64")) {
		return get_ext_proc("glGetUniformdv");
	}

	unsupported("glGetUniformdv");
	return piglit_dispatch_glGetUniformdv;
}

static void APIENTRY
stub_glGetUniformdv(GLuint program, GLint location, GLdouble * params)
{
	check_initialized();
	piglit_dispatch_glGetUniformdv = resolve_glGetUniformdv();
	piglit_dispatch_glGetUniformdv(program, location, params);
}

PFNGLGETUNIFORMDVPROC piglit_dispatch_glGetUniformdv = stub_glGetUniformdv;

static void*
resolve_glGetUniformfv(void)
{
	/* glGetUniformfv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetUniformfv", 20);
	}

	/* glGetUniformfv (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glGetUniformfv", 20);
	}

	/* glGetUniformfvARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glGetUniformfvARB");
	}

	unsupported("glGetUniformfv");
	return piglit_dispatch_glGetUniformfv;
}

static void APIENTRY
stub_glGetUniformfv(GLuint program, GLint location, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetUniformfv = resolve_glGetUniformfv();
	piglit_dispatch_glGetUniformfv(program, location, params);
}

PFNGLGETUNIFORMFVPROC piglit_dispatch_glGetUniformfv = stub_glGetUniformfv;

static void*
resolve_glGetUniformi64vNV(void)
{
	/* glGetUniformi64vNV (GL_AMD_gpu_shader_int64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_gpu_shader_int64")) {
		return get_ext_proc("glGetUniformi64vNV");
	}

	/* glGetUniformi64vNV (GL_NV_gpu_shader5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_shader5")) {
		return get_ext_proc("glGetUniformi64vNV");
	}

	unsupported("glGetUniformi64vNV");
	return piglit_dispatch_glGetUniformi64vNV;
}

static void APIENTRY
stub_glGetUniformi64vNV(GLuint program, GLint location, GLint64EXT * params)
{
	check_initialized();
	piglit_dispatch_glGetUniformi64vNV = resolve_glGetUniformi64vNV();
	piglit_dispatch_glGetUniformi64vNV(program, location, params);
}

PFNGLGETUNIFORMI64VNVPROC piglit_dispatch_glGetUniformi64vNV = stub_glGetUniformi64vNV;

static void*
resolve_glGetUniformiv(void)
{
	/* glGetUniformiv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetUniformiv", 20);
	}

	/* glGetUniformiv (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glGetUniformiv", 20);
	}

	/* glGetUniformivARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glGetUniformivARB");
	}

	unsupported("glGetUniformiv");
	return piglit_dispatch_glGetUniformiv;
}

static void APIENTRY
stub_glGetUniformiv(GLuint program, GLint location, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetUniformiv = resolve_glGetUniformiv();
	piglit_dispatch_glGetUniformiv(program, location, params);
}

PFNGLGETUNIFORMIVPROC piglit_dispatch_glGetUniformiv = stub_glGetUniformiv;

static void*
resolve_glGetUniformui64vNV(void)
{
	/* glGetUniformui64vNV (GL_AMD_gpu_shader_int64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_gpu_shader_int64")) {
		return get_ext_proc("glGetUniformui64vNV");
	}

	/* glGetUniformui64vNV (GL_NV_shader_buffer_load) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_shader_buffer_load")) {
		return get_ext_proc("glGetUniformui64vNV");
	}

	unsupported("glGetUniformui64vNV");
	return piglit_dispatch_glGetUniformui64vNV;
}

static void APIENTRY
stub_glGetUniformui64vNV(GLuint program, GLint location, GLuint64EXT * params)
{
	check_initialized();
	piglit_dispatch_glGetUniformui64vNV = resolve_glGetUniformui64vNV();
	piglit_dispatch_glGetUniformui64vNV(program, location, params);
}

PFNGLGETUNIFORMUI64VNVPROC piglit_dispatch_glGetUniformui64vNV = stub_glGetUniformui64vNV;

static void*
resolve_glGetUniformuiv(void)
{
	/* glGetUniformuiv (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetUniformuiv", 30);
	}

	/* glGetUniformuiv (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetUniformuiv", 30);
	}

	/* glGetUniformuivEXT (GL_EXT_gpu_shader4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_gpu_shader4")) {
		return get_ext_proc("glGetUniformuivEXT");
	}

	unsupported("glGetUniformuiv");
	return piglit_dispatch_glGetUniformuiv;
}

static void APIENTRY
stub_glGetUniformuiv(GLuint program, GLint location, GLuint * params)
{
	check_initialized();
	piglit_dispatch_glGetUniformuiv = resolve_glGetUniformuiv();
	piglit_dispatch_glGetUniformuiv(program, location, params);
}

PFNGLGETUNIFORMUIVPROC piglit_dispatch_glGetUniformuiv = stub_glGetUniformuiv;

static void*
resolve_glGetVariantArrayObjectfvATI(void)
{
	/* glGetVariantArrayObjectfvATI (GL_ATI_vertex_array_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_array_object")) {
		return get_ext_proc("glGetVariantArrayObjectfvATI");
	}

	unsupported("glGetVariantArrayObjectfvATI");
	return piglit_dispatch_glGetVariantArrayObjectfvATI;
}

static void APIENTRY
stub_glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetVariantArrayObjectfvATI = resolve_glGetVariantArrayObjectfvATI();
	piglit_dispatch_glGetVariantArrayObjectfvATI(id, pname, params);
}

PFNGLGETVARIANTARRAYOBJECTFVATIPROC piglit_dispatch_glGetVariantArrayObjectfvATI = stub_glGetVariantArrayObjectfvATI;

static void*
resolve_glGetVariantArrayObjectivATI(void)
{
	/* glGetVariantArrayObjectivATI (GL_ATI_vertex_array_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_array_object")) {
		return get_ext_proc("glGetVariantArrayObjectivATI");
	}

	unsupported("glGetVariantArrayObjectivATI");
	return piglit_dispatch_glGetVariantArrayObjectivATI;
}

static void APIENTRY
stub_glGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetVariantArrayObjectivATI = resolve_glGetVariantArrayObjectivATI();
	piglit_dispatch_glGetVariantArrayObjectivATI(id, pname, params);
}

PFNGLGETVARIANTARRAYOBJECTIVATIPROC piglit_dispatch_glGetVariantArrayObjectivATI = stub_glGetVariantArrayObjectivATI;

static void*
resolve_glGetVariantBooleanvEXT(void)
{
	/* glGetVariantBooleanvEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glGetVariantBooleanvEXT");
	}

	unsupported("glGetVariantBooleanvEXT");
	return piglit_dispatch_glGetVariantBooleanvEXT;
}

static void APIENTRY
stub_glGetVariantBooleanvEXT(GLuint id, GLenum value, GLboolean * data)
{
	check_initialized();
	piglit_dispatch_glGetVariantBooleanvEXT = resolve_glGetVariantBooleanvEXT();
	piglit_dispatch_glGetVariantBooleanvEXT(id, value, data);
}

PFNGLGETVARIANTBOOLEANVEXTPROC piglit_dispatch_glGetVariantBooleanvEXT = stub_glGetVariantBooleanvEXT;

static void*
resolve_glGetVariantFloatvEXT(void)
{
	/* glGetVariantFloatvEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glGetVariantFloatvEXT");
	}

	unsupported("glGetVariantFloatvEXT");
	return piglit_dispatch_glGetVariantFloatvEXT;
}

static void APIENTRY
stub_glGetVariantFloatvEXT(GLuint id, GLenum value, GLfloat * data)
{
	check_initialized();
	piglit_dispatch_glGetVariantFloatvEXT = resolve_glGetVariantFloatvEXT();
	piglit_dispatch_glGetVariantFloatvEXT(id, value, data);
}

PFNGLGETVARIANTFLOATVEXTPROC piglit_dispatch_glGetVariantFloatvEXT = stub_glGetVariantFloatvEXT;

static void*
resolve_glGetVariantIntegervEXT(void)
{
	/* glGetVariantIntegervEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glGetVariantIntegervEXT");
	}

	unsupported("glGetVariantIntegervEXT");
	return piglit_dispatch_glGetVariantIntegervEXT;
}

static void APIENTRY
stub_glGetVariantIntegervEXT(GLuint id, GLenum value, GLint * data)
{
	check_initialized();
	piglit_dispatch_glGetVariantIntegervEXT = resolve_glGetVariantIntegervEXT();
	piglit_dispatch_glGetVariantIntegervEXT(id, value, data);
}

PFNGLGETVARIANTINTEGERVEXTPROC piglit_dispatch_glGetVariantIntegervEXT = stub_glGetVariantIntegervEXT;

static void*
resolve_glGetVariantPointervEXT(void)
{
	/* glGetVariantPointervEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glGetVariantPointervEXT");
	}

	unsupported("glGetVariantPointervEXT");
	return piglit_dispatch_glGetVariantPointervEXT;
}

static void APIENTRY
stub_glGetVariantPointervEXT(GLuint id, GLenum value, void ** data)
{
	check_initialized();
	piglit_dispatch_glGetVariantPointervEXT = resolve_glGetVariantPointervEXT();
	piglit_dispatch_glGetVariantPointervEXT(id, value, data);
}

PFNGLGETVARIANTPOINTERVEXTPROC piglit_dispatch_glGetVariantPointervEXT = stub_glGetVariantPointervEXT;

static void*
resolve_glGetVaryingLocationNV(void)
{
	/* glGetVaryingLocationNV (GL_NV_transform_feedback) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_transform_feedback")) {
		return get_ext_proc("glGetVaryingLocationNV");
	}

	unsupported("glGetVaryingLocationNV");
	return piglit_dispatch_glGetVaryingLocationNV;
}

static GLint APIENTRY
stub_glGetVaryingLocationNV(GLuint program, const GLchar * name)
{
	check_initialized();
	piglit_dispatch_glGetVaryingLocationNV = resolve_glGetVaryingLocationNV();
	return piglit_dispatch_glGetVaryingLocationNV(program, name);
}

PFNGLGETVARYINGLOCATIONNVPROC piglit_dispatch_glGetVaryingLocationNV = stub_glGetVaryingLocationNV;

static void*
resolve_glGetVertexArrayIntegeri_vEXT(void)
{
	/* glGetVertexArrayIntegeri_vEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetVertexArrayIntegeri_vEXT");
	}

	unsupported("glGetVertexArrayIntegeri_vEXT");
	return piglit_dispatch_glGetVertexArrayIntegeri_vEXT;
}

static void APIENTRY
stub_glGetVertexArrayIntegeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLint * param)
{
	check_initialized();
	piglit_dispatch_glGetVertexArrayIntegeri_vEXT = resolve_glGetVertexArrayIntegeri_vEXT();
	piglit_dispatch_glGetVertexArrayIntegeri_vEXT(vaobj, index, pname, param);
}

PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC piglit_dispatch_glGetVertexArrayIntegeri_vEXT = stub_glGetVertexArrayIntegeri_vEXT;

static void*
resolve_glGetVertexArrayIntegervEXT(void)
{
	/* glGetVertexArrayIntegervEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetVertexArrayIntegervEXT");
	}

	unsupported("glGetVertexArrayIntegervEXT");
	return piglit_dispatch_glGetVertexArrayIntegervEXT;
}

static void APIENTRY
stub_glGetVertexArrayIntegervEXT(GLuint vaobj, GLenum pname, GLint * param)
{
	check_initialized();
	piglit_dispatch_glGetVertexArrayIntegervEXT = resolve_glGetVertexArrayIntegervEXT();
	piglit_dispatch_glGetVertexArrayIntegervEXT(vaobj, pname, param);
}

PFNGLGETVERTEXARRAYINTEGERVEXTPROC piglit_dispatch_glGetVertexArrayIntegervEXT = stub_glGetVertexArrayIntegervEXT;

static void*
resolve_glGetVertexArrayPointeri_vEXT(void)
{
	/* glGetVertexArrayPointeri_vEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetVertexArrayPointeri_vEXT");
	}

	unsupported("glGetVertexArrayPointeri_vEXT");
	return piglit_dispatch_glGetVertexArrayPointeri_vEXT;
}

static void APIENTRY
stub_glGetVertexArrayPointeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, void ** param)
{
	check_initialized();
	piglit_dispatch_glGetVertexArrayPointeri_vEXT = resolve_glGetVertexArrayPointeri_vEXT();
	piglit_dispatch_glGetVertexArrayPointeri_vEXT(vaobj, index, pname, param);
}

PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC piglit_dispatch_glGetVertexArrayPointeri_vEXT = stub_glGetVertexArrayPointeri_vEXT;

static void*
resolve_glGetVertexArrayPointervEXT(void)
{
	/* glGetVertexArrayPointervEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glGetVertexArrayPointervEXT");
	}

	unsupported("glGetVertexArrayPointervEXT");
	return piglit_dispatch_glGetVertexArrayPointervEXT;
}

static void APIENTRY
stub_glGetVertexArrayPointervEXT(GLuint vaobj, GLenum pname, void ** param)
{
	check_initialized();
	piglit_dispatch_glGetVertexArrayPointervEXT = resolve_glGetVertexArrayPointervEXT();
	piglit_dispatch_glGetVertexArrayPointervEXT(vaobj, pname, param);
}

PFNGLGETVERTEXARRAYPOINTERVEXTPROC piglit_dispatch_glGetVertexArrayPointervEXT = stub_glGetVertexArrayPointervEXT;

static void*
resolve_glGetVertexAttribArrayObjectfvATI(void)
{
	/* glGetVertexAttribArrayObjectfvATI (GL_ATI_vertex_attrib_array_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_attrib_array_object")) {
		return get_ext_proc("glGetVertexAttribArrayObjectfvATI");
	}

	unsupported("glGetVertexAttribArrayObjectfvATI");
	return piglit_dispatch_glGetVertexAttribArrayObjectfvATI;
}

static void APIENTRY
stub_glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetVertexAttribArrayObjectfvATI = resolve_glGetVertexAttribArrayObjectfvATI();
	piglit_dispatch_glGetVertexAttribArrayObjectfvATI(index, pname, params);
}

PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC piglit_dispatch_glGetVertexAttribArrayObjectfvATI = stub_glGetVertexAttribArrayObjectfvATI;

static void*
resolve_glGetVertexAttribArrayObjectivATI(void)
{
	/* glGetVertexAttribArrayObjectivATI (GL_ATI_vertex_attrib_array_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_attrib_array_object")) {
		return get_ext_proc("glGetVertexAttribArrayObjectivATI");
	}

	unsupported("glGetVertexAttribArrayObjectivATI");
	return piglit_dispatch_glGetVertexAttribArrayObjectivATI;
}

static void APIENTRY
stub_glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetVertexAttribArrayObjectivATI = resolve_glGetVertexAttribArrayObjectivATI();
	piglit_dispatch_glGetVertexAttribArrayObjectivATI(index, pname, params);
}

PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC piglit_dispatch_glGetVertexAttribArrayObjectivATI = stub_glGetVertexAttribArrayObjectivATI;

static void*
resolve_glGetVertexAttribIiv(void)
{
	/* glGetVertexAttribIiv (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetVertexAttribIiv", 30);
	}

	/* glGetVertexAttribIiv (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetVertexAttribIiv", 30);
	}

	/* glGetVertexAttribIivEXT (GL_NV_vertex_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program4")) {
		return get_ext_proc("glGetVertexAttribIivEXT");
	}

	unsupported("glGetVertexAttribIiv");
	return piglit_dispatch_glGetVertexAttribIiv;
}

static void APIENTRY
stub_glGetVertexAttribIiv(GLuint index, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetVertexAttribIiv = resolve_glGetVertexAttribIiv();
	piglit_dispatch_glGetVertexAttribIiv(index, pname, params);
}

PFNGLGETVERTEXATTRIBIIVPROC piglit_dispatch_glGetVertexAttribIiv = stub_glGetVertexAttribIiv;

static void*
resolve_glGetVertexAttribIuiv(void)
{
	/* glGetVertexAttribIuiv (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetVertexAttribIuiv", 30);
	}

	/* glGetVertexAttribIuiv (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glGetVertexAttribIuiv", 30);
	}

	/* glGetVertexAttribIuivEXT (GL_NV_vertex_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program4")) {
		return get_ext_proc("glGetVertexAttribIuivEXT");
	}

	unsupported("glGetVertexAttribIuiv");
	return piglit_dispatch_glGetVertexAttribIuiv;
}

static void APIENTRY
stub_glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint * params)
{
	check_initialized();
	piglit_dispatch_glGetVertexAttribIuiv = resolve_glGetVertexAttribIuiv();
	piglit_dispatch_glGetVertexAttribIuiv(index, pname, params);
}

PFNGLGETVERTEXATTRIBIUIVPROC piglit_dispatch_glGetVertexAttribIuiv = stub_glGetVertexAttribIuiv;

static void*
resolve_glGetVertexAttribLdv(void)
{
	/* glGetVertexAttribLdv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetVertexAttribLdv", 41);
	}

	/* glGetVertexAttribLdv (GL_ARB_vertex_attrib_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_attrib_64bit")) {
		return get_ext_proc("glGetVertexAttribLdv");
	}

	/* glGetVertexAttribLdvEXT (GL_EXT_vertex_attrib_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_attrib_64bit")) {
		return get_ext_proc("glGetVertexAttribLdvEXT");
	}

	unsupported("glGetVertexAttribLdv");
	return piglit_dispatch_glGetVertexAttribLdv;
}

static void APIENTRY
stub_glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble * params)
{
	check_initialized();
	piglit_dispatch_glGetVertexAttribLdv = resolve_glGetVertexAttribLdv();
	piglit_dispatch_glGetVertexAttribLdv(index, pname, params);
}

PFNGLGETVERTEXATTRIBLDVPROC piglit_dispatch_glGetVertexAttribLdv = stub_glGetVertexAttribLdv;

static void*
resolve_glGetVertexAttribLi64vNV(void)
{
	/* glGetVertexAttribLi64vNV (GL_NV_vertex_attrib_integer_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_attrib_integer_64bit")) {
		return get_ext_proc("glGetVertexAttribLi64vNV");
	}

	unsupported("glGetVertexAttribLi64vNV");
	return piglit_dispatch_glGetVertexAttribLi64vNV;
}

static void APIENTRY
stub_glGetVertexAttribLi64vNV(GLuint index, GLenum pname, GLint64EXT * params)
{
	check_initialized();
	piglit_dispatch_glGetVertexAttribLi64vNV = resolve_glGetVertexAttribLi64vNV();
	piglit_dispatch_glGetVertexAttribLi64vNV(index, pname, params);
}

PFNGLGETVERTEXATTRIBLI64VNVPROC piglit_dispatch_glGetVertexAttribLi64vNV = stub_glGetVertexAttribLi64vNV;

static void*
resolve_glGetVertexAttribLui64vARB(void)
{
	/* glGetVertexAttribLui64vARB (GL_ARB_bindless_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_bindless_texture")) {
		return get_ext_proc("glGetVertexAttribLui64vARB");
	}

	unsupported("glGetVertexAttribLui64vARB");
	return piglit_dispatch_glGetVertexAttribLui64vARB;
}

static void APIENTRY
stub_glGetVertexAttribLui64vARB(GLuint index, GLenum pname, GLuint64EXT * params)
{
	check_initialized();
	piglit_dispatch_glGetVertexAttribLui64vARB = resolve_glGetVertexAttribLui64vARB();
	piglit_dispatch_glGetVertexAttribLui64vARB(index, pname, params);
}

PFNGLGETVERTEXATTRIBLUI64VARBPROC piglit_dispatch_glGetVertexAttribLui64vARB = stub_glGetVertexAttribLui64vARB;

static void*
resolve_glGetVertexAttribLui64vNV(void)
{
	/* glGetVertexAttribLui64vNV (GL_NV_vertex_attrib_integer_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_attrib_integer_64bit")) {
		return get_ext_proc("glGetVertexAttribLui64vNV");
	}

	unsupported("glGetVertexAttribLui64vNV");
	return piglit_dispatch_glGetVertexAttribLui64vNV;
}

static void APIENTRY
stub_glGetVertexAttribLui64vNV(GLuint index, GLenum pname, GLuint64EXT * params)
{
	check_initialized();
	piglit_dispatch_glGetVertexAttribLui64vNV = resolve_glGetVertexAttribLui64vNV();
	piglit_dispatch_glGetVertexAttribLui64vNV(index, pname, params);
}

PFNGLGETVERTEXATTRIBLUI64VNVPROC piglit_dispatch_glGetVertexAttribLui64vNV = stub_glGetVertexAttribLui64vNV;

static void*
resolve_glGetVertexAttribPointerv(void)
{
	/* glGetVertexAttribPointerv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetVertexAttribPointerv", 20);
	}

	/* glGetVertexAttribPointerv (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glGetVertexAttribPointerv", 20);
	}

	/* glGetVertexAttribPointervARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glGetVertexAttribPointervARB");
	}

	/* glGetVertexAttribPointervARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glGetVertexAttribPointervARB");
	}

	/* glGetVertexAttribPointervNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glGetVertexAttribPointervNV");
	}

	unsupported("glGetVertexAttribPointerv");
	return piglit_dispatch_glGetVertexAttribPointerv;
}

static void APIENTRY
stub_glGetVertexAttribPointerv(GLuint index, GLenum pname, void ** pointer)
{
	check_initialized();
	piglit_dispatch_glGetVertexAttribPointerv = resolve_glGetVertexAttribPointerv();
	piglit_dispatch_glGetVertexAttribPointerv(index, pname, pointer);
}

PFNGLGETVERTEXATTRIBPOINTERVPROC piglit_dispatch_glGetVertexAttribPointerv = stub_glGetVertexAttribPointerv;

static void*
resolve_glGetVertexAttribdv(void)
{
	/* glGetVertexAttribdv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetVertexAttribdv", 20);
	}

	/* glGetVertexAttribdvARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glGetVertexAttribdvARB");
	}

	/* glGetVertexAttribdvARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glGetVertexAttribdvARB");
	}

	/* glGetVertexAttribdvNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glGetVertexAttribdvNV");
	}

	unsupported("glGetVertexAttribdv");
	return piglit_dispatch_glGetVertexAttribdv;
}

static void APIENTRY
stub_glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble * params)
{
	check_initialized();
	piglit_dispatch_glGetVertexAttribdv = resolve_glGetVertexAttribdv();
	piglit_dispatch_glGetVertexAttribdv(index, pname, params);
}

PFNGLGETVERTEXATTRIBDVPROC piglit_dispatch_glGetVertexAttribdv = stub_glGetVertexAttribdv;

static void*
resolve_glGetVertexAttribfv(void)
{
	/* glGetVertexAttribfv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetVertexAttribfv", 20);
	}

	/* glGetVertexAttribfv (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glGetVertexAttribfv", 20);
	}

	/* glGetVertexAttribfvARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glGetVertexAttribfvARB");
	}

	/* glGetVertexAttribfvARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glGetVertexAttribfvARB");
	}

	/* glGetVertexAttribfvNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glGetVertexAttribfvNV");
	}

	unsupported("glGetVertexAttribfv");
	return piglit_dispatch_glGetVertexAttribfv;
}

static void APIENTRY
stub_glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetVertexAttribfv = resolve_glGetVertexAttribfv();
	piglit_dispatch_glGetVertexAttribfv(index, pname, params);
}

PFNGLGETVERTEXATTRIBFVPROC piglit_dispatch_glGetVertexAttribfv = stub_glGetVertexAttribfv;

static void*
resolve_glGetVertexAttribiv(void)
{
	/* glGetVertexAttribiv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glGetVertexAttribiv", 20);
	}

	/* glGetVertexAttribiv (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glGetVertexAttribiv", 20);
	}

	/* glGetVertexAttribivARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glGetVertexAttribivARB");
	}

	/* glGetVertexAttribivARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glGetVertexAttribivARB");
	}

	/* glGetVertexAttribivNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glGetVertexAttribivNV");
	}

	unsupported("glGetVertexAttribiv");
	return piglit_dispatch_glGetVertexAttribiv;
}

static void APIENTRY
stub_glGetVertexAttribiv(GLuint index, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetVertexAttribiv = resolve_glGetVertexAttribiv();
	piglit_dispatch_glGetVertexAttribiv(index, pname, params);
}

PFNGLGETVERTEXATTRIBIVPROC piglit_dispatch_glGetVertexAttribiv = stub_glGetVertexAttribiv;

static void*
resolve_glGetVideoCaptureStreamdvNV(void)
{
	/* glGetVideoCaptureStreamdvNV (GL_NV_video_capture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_video_capture")) {
		return get_ext_proc("glGetVideoCaptureStreamdvNV");
	}

	unsupported("glGetVideoCaptureStreamdvNV");
	return piglit_dispatch_glGetVideoCaptureStreamdvNV;
}

static void APIENTRY
stub_glGetVideoCaptureStreamdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble * params)
{
	check_initialized();
	piglit_dispatch_glGetVideoCaptureStreamdvNV = resolve_glGetVideoCaptureStreamdvNV();
	piglit_dispatch_glGetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, params);
}

PFNGLGETVIDEOCAPTURESTREAMDVNVPROC piglit_dispatch_glGetVideoCaptureStreamdvNV = stub_glGetVideoCaptureStreamdvNV;

static void*
resolve_glGetVideoCaptureStreamfvNV(void)
{
	/* glGetVideoCaptureStreamfvNV (GL_NV_video_capture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_video_capture")) {
		return get_ext_proc("glGetVideoCaptureStreamfvNV");
	}

	unsupported("glGetVideoCaptureStreamfvNV");
	return piglit_dispatch_glGetVideoCaptureStreamfvNV;
}

static void APIENTRY
stub_glGetVideoCaptureStreamfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetVideoCaptureStreamfvNV = resolve_glGetVideoCaptureStreamfvNV();
	piglit_dispatch_glGetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, params);
}

PFNGLGETVIDEOCAPTURESTREAMFVNVPROC piglit_dispatch_glGetVideoCaptureStreamfvNV = stub_glGetVideoCaptureStreamfvNV;

static void*
resolve_glGetVideoCaptureStreamivNV(void)
{
	/* glGetVideoCaptureStreamivNV (GL_NV_video_capture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_video_capture")) {
		return get_ext_proc("glGetVideoCaptureStreamivNV");
	}

	unsupported("glGetVideoCaptureStreamivNV");
	return piglit_dispatch_glGetVideoCaptureStreamivNV;
}

static void APIENTRY
stub_glGetVideoCaptureStreamivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetVideoCaptureStreamivNV = resolve_glGetVideoCaptureStreamivNV();
	piglit_dispatch_glGetVideoCaptureStreamivNV(video_capture_slot, stream, pname, params);
}

PFNGLGETVIDEOCAPTURESTREAMIVNVPROC piglit_dispatch_glGetVideoCaptureStreamivNV = stub_glGetVideoCaptureStreamivNV;

static void*
resolve_glGetVideoCaptureivNV(void)
{
	/* glGetVideoCaptureivNV (GL_NV_video_capture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_video_capture")) {
		return get_ext_proc("glGetVideoCaptureivNV");
	}

	unsupported("glGetVideoCaptureivNV");
	return piglit_dispatch_glGetVideoCaptureivNV;
}

static void APIENTRY
stub_glGetVideoCaptureivNV(GLuint video_capture_slot, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetVideoCaptureivNV = resolve_glGetVideoCaptureivNV();
	piglit_dispatch_glGetVideoCaptureivNV(video_capture_slot, pname, params);
}

PFNGLGETVIDEOCAPTUREIVNVPROC piglit_dispatch_glGetVideoCaptureivNV = stub_glGetVideoCaptureivNV;

static void*
resolve_glGetVideoi64vNV(void)
{
	/* glGetVideoi64vNV (GL_NV_present_video) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_present_video")) {
		return get_ext_proc("glGetVideoi64vNV");
	}

	unsupported("glGetVideoi64vNV");
	return piglit_dispatch_glGetVideoi64vNV;
}

static void APIENTRY
stub_glGetVideoi64vNV(GLuint video_slot, GLenum pname, GLint64EXT * params)
{
	check_initialized();
	piglit_dispatch_glGetVideoi64vNV = resolve_glGetVideoi64vNV();
	piglit_dispatch_glGetVideoi64vNV(video_slot, pname, params);
}

PFNGLGETVIDEOI64VNVPROC piglit_dispatch_glGetVideoi64vNV = stub_glGetVideoi64vNV;

static void*
resolve_glGetVideoivNV(void)
{
	/* glGetVideoivNV (GL_NV_present_video) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_present_video")) {
		return get_ext_proc("glGetVideoivNV");
	}

	unsupported("glGetVideoivNV");
	return piglit_dispatch_glGetVideoivNV;
}

static void APIENTRY
stub_glGetVideoivNV(GLuint video_slot, GLenum pname, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetVideoivNV = resolve_glGetVideoivNV();
	piglit_dispatch_glGetVideoivNV(video_slot, pname, params);
}

PFNGLGETVIDEOIVNVPROC piglit_dispatch_glGetVideoivNV = stub_glGetVideoivNV;

static void*
resolve_glGetVideoui64vNV(void)
{
	/* glGetVideoui64vNV (GL_NV_present_video) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_present_video")) {
		return get_ext_proc("glGetVideoui64vNV");
	}

	unsupported("glGetVideoui64vNV");
	return piglit_dispatch_glGetVideoui64vNV;
}

static void APIENTRY
stub_glGetVideoui64vNV(GLuint video_slot, GLenum pname, GLuint64EXT * params)
{
	check_initialized();
	piglit_dispatch_glGetVideoui64vNV = resolve_glGetVideoui64vNV();
	piglit_dispatch_glGetVideoui64vNV(video_slot, pname, params);
}

PFNGLGETVIDEOUI64VNVPROC piglit_dispatch_glGetVideoui64vNV = stub_glGetVideoui64vNV;

static void*
resolve_glGetVideouivNV(void)
{
	/* glGetVideouivNV (GL_NV_present_video) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_present_video")) {
		return get_ext_proc("glGetVideouivNV");
	}

	unsupported("glGetVideouivNV");
	return piglit_dispatch_glGetVideouivNV;
}

static void APIENTRY
stub_glGetVideouivNV(GLuint video_slot, GLenum pname, GLuint * params)
{
	check_initialized();
	piglit_dispatch_glGetVideouivNV = resolve_glGetVideouivNV();
	piglit_dispatch_glGetVideouivNV(video_slot, pname, params);
}

PFNGLGETVIDEOUIVNVPROC piglit_dispatch_glGetVideouivNV = stub_glGetVideouivNV;

static void*
resolve_glGetnColorTableARB(void)
{
	/* glGetnColorTableARB (GL_ARB_robustness) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_robustness")) {
		return get_ext_proc("glGetnColorTableARB");
	}

	unsupported("glGetnColorTableARB");
	return piglit_dispatch_glGetnColorTableARB;
}

static void APIENTRY
stub_glGetnColorTableARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table)
{
	check_initialized();
	piglit_dispatch_glGetnColorTableARB = resolve_glGetnColorTableARB();
	piglit_dispatch_glGetnColorTableARB(target, format, type, bufSize, table);
}

PFNGLGETNCOLORTABLEARBPROC piglit_dispatch_glGetnColorTableARB = stub_glGetnColorTableARB;

static void*
resolve_glGetnCompressedTexImageARB(void)
{
	/* glGetnCompressedTexImageARB (GL_ARB_robustness) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_robustness")) {
		return get_ext_proc("glGetnCompressedTexImageARB");
	}

	unsupported("glGetnCompressedTexImageARB");
	return piglit_dispatch_glGetnCompressedTexImageARB;
}

static void APIENTRY
stub_glGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, void * img)
{
	check_initialized();
	piglit_dispatch_glGetnCompressedTexImageARB = resolve_glGetnCompressedTexImageARB();
	piglit_dispatch_glGetnCompressedTexImageARB(target, lod, bufSize, img);
}

PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC piglit_dispatch_glGetnCompressedTexImageARB = stub_glGetnCompressedTexImageARB;

static void*
resolve_glGetnConvolutionFilterARB(void)
{
	/* glGetnConvolutionFilterARB (GL_ARB_robustness) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_robustness")) {
		return get_ext_proc("glGetnConvolutionFilterARB");
	}

	unsupported("glGetnConvolutionFilterARB");
	return piglit_dispatch_glGetnConvolutionFilterARB;
}

static void APIENTRY
stub_glGetnConvolutionFilterARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image)
{
	check_initialized();
	piglit_dispatch_glGetnConvolutionFilterARB = resolve_glGetnConvolutionFilterARB();
	piglit_dispatch_glGetnConvolutionFilterARB(target, format, type, bufSize, image);
}

PFNGLGETNCONVOLUTIONFILTERARBPROC piglit_dispatch_glGetnConvolutionFilterARB = stub_glGetnConvolutionFilterARB;

static void*
resolve_glGetnHistogramARB(void)
{
	/* glGetnHistogramARB (GL_ARB_robustness) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_robustness")) {
		return get_ext_proc("glGetnHistogramARB");
	}

	unsupported("glGetnHistogramARB");
	return piglit_dispatch_glGetnHistogramARB;
}

static void APIENTRY
stub_glGetnHistogramARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values)
{
	check_initialized();
	piglit_dispatch_glGetnHistogramARB = resolve_glGetnHistogramARB();
	piglit_dispatch_glGetnHistogramARB(target, reset, format, type, bufSize, values);
}

PFNGLGETNHISTOGRAMARBPROC piglit_dispatch_glGetnHistogramARB = stub_glGetnHistogramARB;

static void*
resolve_glGetnMapdvARB(void)
{
	/* glGetnMapdvARB (GL_ARB_robustness) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_robustness")) {
		return get_ext_proc("glGetnMapdvARB");
	}

	unsupported("glGetnMapdvARB");
	return piglit_dispatch_glGetnMapdvARB;
}

static void APIENTRY
stub_glGetnMapdvARB(GLenum target, GLenum query, GLsizei bufSize, GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glGetnMapdvARB = resolve_glGetnMapdvARB();
	piglit_dispatch_glGetnMapdvARB(target, query, bufSize, v);
}

PFNGLGETNMAPDVARBPROC piglit_dispatch_glGetnMapdvARB = stub_glGetnMapdvARB;

static void*
resolve_glGetnMapfvARB(void)
{
	/* glGetnMapfvARB (GL_ARB_robustness) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_robustness")) {
		return get_ext_proc("glGetnMapfvARB");
	}

	unsupported("glGetnMapfvARB");
	return piglit_dispatch_glGetnMapfvARB;
}

static void APIENTRY
stub_glGetnMapfvARB(GLenum target, GLenum query, GLsizei bufSize, GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glGetnMapfvARB = resolve_glGetnMapfvARB();
	piglit_dispatch_glGetnMapfvARB(target, query, bufSize, v);
}

PFNGLGETNMAPFVARBPROC piglit_dispatch_glGetnMapfvARB = stub_glGetnMapfvARB;

static void*
resolve_glGetnMapivARB(void)
{
	/* glGetnMapivARB (GL_ARB_robustness) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_robustness")) {
		return get_ext_proc("glGetnMapivARB");
	}

	unsupported("glGetnMapivARB");
	return piglit_dispatch_glGetnMapivARB;
}

static void APIENTRY
stub_glGetnMapivARB(GLenum target, GLenum query, GLsizei bufSize, GLint * v)
{
	check_initialized();
	piglit_dispatch_glGetnMapivARB = resolve_glGetnMapivARB();
	piglit_dispatch_glGetnMapivARB(target, query, bufSize, v);
}

PFNGLGETNMAPIVARBPROC piglit_dispatch_glGetnMapivARB = stub_glGetnMapivARB;

static void*
resolve_glGetnMinmaxARB(void)
{
	/* glGetnMinmaxARB (GL_ARB_robustness) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_robustness")) {
		return get_ext_proc("glGetnMinmaxARB");
	}

	unsupported("glGetnMinmaxARB");
	return piglit_dispatch_glGetnMinmaxARB;
}

static void APIENTRY
stub_glGetnMinmaxARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values)
{
	check_initialized();
	piglit_dispatch_glGetnMinmaxARB = resolve_glGetnMinmaxARB();
	piglit_dispatch_glGetnMinmaxARB(target, reset, format, type, bufSize, values);
}

PFNGLGETNMINMAXARBPROC piglit_dispatch_glGetnMinmaxARB = stub_glGetnMinmaxARB;

static void*
resolve_glGetnPixelMapfvARB(void)
{
	/* glGetnPixelMapfvARB (GL_ARB_robustness) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_robustness")) {
		return get_ext_proc("glGetnPixelMapfvARB");
	}

	unsupported("glGetnPixelMapfvARB");
	return piglit_dispatch_glGetnPixelMapfvARB;
}

static void APIENTRY
stub_glGetnPixelMapfvARB(GLenum map, GLsizei bufSize, GLfloat * values)
{
	check_initialized();
	piglit_dispatch_glGetnPixelMapfvARB = resolve_glGetnPixelMapfvARB();
	piglit_dispatch_glGetnPixelMapfvARB(map, bufSize, values);
}

PFNGLGETNPIXELMAPFVARBPROC piglit_dispatch_glGetnPixelMapfvARB = stub_glGetnPixelMapfvARB;

static void*
resolve_glGetnPixelMapuivARB(void)
{
	/* glGetnPixelMapuivARB (GL_ARB_robustness) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_robustness")) {
		return get_ext_proc("glGetnPixelMapuivARB");
	}

	unsupported("glGetnPixelMapuivARB");
	return piglit_dispatch_glGetnPixelMapuivARB;
}

static void APIENTRY
stub_glGetnPixelMapuivARB(GLenum map, GLsizei bufSize, GLuint * values)
{
	check_initialized();
	piglit_dispatch_glGetnPixelMapuivARB = resolve_glGetnPixelMapuivARB();
	piglit_dispatch_glGetnPixelMapuivARB(map, bufSize, values);
}

PFNGLGETNPIXELMAPUIVARBPROC piglit_dispatch_glGetnPixelMapuivARB = stub_glGetnPixelMapuivARB;

static void*
resolve_glGetnPixelMapusvARB(void)
{
	/* glGetnPixelMapusvARB (GL_ARB_robustness) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_robustness")) {
		return get_ext_proc("glGetnPixelMapusvARB");
	}

	unsupported("glGetnPixelMapusvARB");
	return piglit_dispatch_glGetnPixelMapusvARB;
}

static void APIENTRY
stub_glGetnPixelMapusvARB(GLenum map, GLsizei bufSize, GLushort * values)
{
	check_initialized();
	piglit_dispatch_glGetnPixelMapusvARB = resolve_glGetnPixelMapusvARB();
	piglit_dispatch_glGetnPixelMapusvARB(map, bufSize, values);
}

PFNGLGETNPIXELMAPUSVARBPROC piglit_dispatch_glGetnPixelMapusvARB = stub_glGetnPixelMapusvARB;

static void*
resolve_glGetnPolygonStippleARB(void)
{
	/* glGetnPolygonStippleARB (GL_ARB_robustness) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_robustness")) {
		return get_ext_proc("glGetnPolygonStippleARB");
	}

	unsupported("glGetnPolygonStippleARB");
	return piglit_dispatch_glGetnPolygonStippleARB;
}

static void APIENTRY
stub_glGetnPolygonStippleARB(GLsizei bufSize, GLubyte * pattern)
{
	check_initialized();
	piglit_dispatch_glGetnPolygonStippleARB = resolve_glGetnPolygonStippleARB();
	piglit_dispatch_glGetnPolygonStippleARB(bufSize, pattern);
}

PFNGLGETNPOLYGONSTIPPLEARBPROC piglit_dispatch_glGetnPolygonStippleARB = stub_glGetnPolygonStippleARB;

static void*
resolve_glGetnSeparableFilterARB(void)
{
	/* glGetnSeparableFilterARB (GL_ARB_robustness) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_robustness")) {
		return get_ext_proc("glGetnSeparableFilterARB");
	}

	unsupported("glGetnSeparableFilterARB");
	return piglit_dispatch_glGetnSeparableFilterARB;
}

static void APIENTRY
stub_glGetnSeparableFilterARB(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span)
{
	check_initialized();
	piglit_dispatch_glGetnSeparableFilterARB = resolve_glGetnSeparableFilterARB();
	piglit_dispatch_glGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, span);
}

PFNGLGETNSEPARABLEFILTERARBPROC piglit_dispatch_glGetnSeparableFilterARB = stub_glGetnSeparableFilterARB;

static void*
resolve_glGetnTexImageARB(void)
{
	/* glGetnTexImageARB (GL_ARB_robustness) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_robustness")) {
		return get_ext_proc("glGetnTexImageARB");
	}

	unsupported("glGetnTexImageARB");
	return piglit_dispatch_glGetnTexImageARB;
}

static void APIENTRY
stub_glGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * img)
{
	check_initialized();
	piglit_dispatch_glGetnTexImageARB = resolve_glGetnTexImageARB();
	piglit_dispatch_glGetnTexImageARB(target, level, format, type, bufSize, img);
}

PFNGLGETNTEXIMAGEARBPROC piglit_dispatch_glGetnTexImageARB = stub_glGetnTexImageARB;

static void*
resolve_glGetnUniformdvARB(void)
{
	/* glGetnUniformdvARB (GL_ARB_robustness) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_robustness")) {
		return get_ext_proc("glGetnUniformdvARB");
	}

	unsupported("glGetnUniformdvARB");
	return piglit_dispatch_glGetnUniformdvARB;
}

static void APIENTRY
stub_glGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble * params)
{
	check_initialized();
	piglit_dispatch_glGetnUniformdvARB = resolve_glGetnUniformdvARB();
	piglit_dispatch_glGetnUniformdvARB(program, location, bufSize, params);
}

PFNGLGETNUNIFORMDVARBPROC piglit_dispatch_glGetnUniformdvARB = stub_glGetnUniformdvARB;

static void*
resolve_glGetnUniformfvARB(void)
{
	/* glGetnUniformfvARB (GL_ARB_robustness) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_robustness")) {
		return get_ext_proc("glGetnUniformfvARB");
	}

	unsupported("glGetnUniformfvARB");
	return piglit_dispatch_glGetnUniformfvARB;
}

static void APIENTRY
stub_glGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetnUniformfvARB = resolve_glGetnUniformfvARB();
	piglit_dispatch_glGetnUniformfvARB(program, location, bufSize, params);
}

PFNGLGETNUNIFORMFVARBPROC piglit_dispatch_glGetnUniformfvARB = stub_glGetnUniformfvARB;

static void*
resolve_glGetnUniformfvEXT(void)
{
	/* glGetnUniformfvEXT (GL_EXT_robustness) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_robustness")) {
		return get_ext_proc("glGetnUniformfvEXT");
	}

	unsupported("glGetnUniformfvEXT");
	return piglit_dispatch_glGetnUniformfvEXT;
}

static void APIENTRY
stub_glGetnUniformfvEXT(GLuint program, GLint location, GLsizei bufSize, GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glGetnUniformfvEXT = resolve_glGetnUniformfvEXT();
	piglit_dispatch_glGetnUniformfvEXT(program, location, bufSize, params);
}

PFNGLGETNUNIFORMFVEXTPROC piglit_dispatch_glGetnUniformfvEXT = stub_glGetnUniformfvEXT;

static void*
resolve_glGetnUniformivARB(void)
{
	/* glGetnUniformivARB (GL_ARB_robustness) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_robustness")) {
		return get_ext_proc("glGetnUniformivARB");
	}

	unsupported("glGetnUniformivARB");
	return piglit_dispatch_glGetnUniformivARB;
}

static void APIENTRY
stub_glGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetnUniformivARB = resolve_glGetnUniformivARB();
	piglit_dispatch_glGetnUniformivARB(program, location, bufSize, params);
}

PFNGLGETNUNIFORMIVARBPROC piglit_dispatch_glGetnUniformivARB = stub_glGetnUniformivARB;

static void*
resolve_glGetnUniformivEXT(void)
{
	/* glGetnUniformivEXT (GL_EXT_robustness) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_robustness")) {
		return get_ext_proc("glGetnUniformivEXT");
	}

	unsupported("glGetnUniformivEXT");
	return piglit_dispatch_glGetnUniformivEXT;
}

static void APIENTRY
stub_glGetnUniformivEXT(GLuint program, GLint location, GLsizei bufSize, GLint * params)
{
	check_initialized();
	piglit_dispatch_glGetnUniformivEXT = resolve_glGetnUniformivEXT();
	piglit_dispatch_glGetnUniformivEXT(program, location, bufSize, params);
}

PFNGLGETNUNIFORMIVEXTPROC piglit_dispatch_glGetnUniformivEXT = stub_glGetnUniformivEXT;

static void*
resolve_glGetnUniformuivARB(void)
{
	/* glGetnUniformuivARB (GL_ARB_robustness) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_robustness")) {
		return get_ext_proc("glGetnUniformuivARB");
	}

	unsupported("glGetnUniformuivARB");
	return piglit_dispatch_glGetnUniformuivARB;
}

static void APIENTRY
stub_glGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint * params)
{
	check_initialized();
	piglit_dispatch_glGetnUniformuivARB = resolve_glGetnUniformuivARB();
	piglit_dispatch_glGetnUniformuivARB(program, location, bufSize, params);
}

PFNGLGETNUNIFORMUIVARBPROC piglit_dispatch_glGetnUniformuivARB = stub_glGetnUniformuivARB;

static void*
resolve_glGlobalAlphaFactorbSUN(void)
{
	/* glGlobalAlphaFactorbSUN (GL_SUN_global_alpha) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_global_alpha")) {
		return get_ext_proc("glGlobalAlphaFactorbSUN");
	}

	unsupported("glGlobalAlphaFactorbSUN");
	return piglit_dispatch_glGlobalAlphaFactorbSUN;
}

static void APIENTRY
stub_glGlobalAlphaFactorbSUN(GLbyte factor)
{
	check_initialized();
	piglit_dispatch_glGlobalAlphaFactorbSUN = resolve_glGlobalAlphaFactorbSUN();
	piglit_dispatch_glGlobalAlphaFactorbSUN(factor);
}

PFNGLGLOBALALPHAFACTORBSUNPROC piglit_dispatch_glGlobalAlphaFactorbSUN = stub_glGlobalAlphaFactorbSUN;

static void*
resolve_glGlobalAlphaFactordSUN(void)
{
	/* glGlobalAlphaFactordSUN (GL_SUN_global_alpha) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_global_alpha")) {
		return get_ext_proc("glGlobalAlphaFactordSUN");
	}

	unsupported("glGlobalAlphaFactordSUN");
	return piglit_dispatch_glGlobalAlphaFactordSUN;
}

static void APIENTRY
stub_glGlobalAlphaFactordSUN(GLdouble factor)
{
	check_initialized();
	piglit_dispatch_glGlobalAlphaFactordSUN = resolve_glGlobalAlphaFactordSUN();
	piglit_dispatch_glGlobalAlphaFactordSUN(factor);
}

PFNGLGLOBALALPHAFACTORDSUNPROC piglit_dispatch_glGlobalAlphaFactordSUN = stub_glGlobalAlphaFactordSUN;

static void*
resolve_glGlobalAlphaFactorfSUN(void)
{
	/* glGlobalAlphaFactorfSUN (GL_SUN_global_alpha) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_global_alpha")) {
		return get_ext_proc("glGlobalAlphaFactorfSUN");
	}

	unsupported("glGlobalAlphaFactorfSUN");
	return piglit_dispatch_glGlobalAlphaFactorfSUN;
}

static void APIENTRY
stub_glGlobalAlphaFactorfSUN(GLfloat factor)
{
	check_initialized();
	piglit_dispatch_glGlobalAlphaFactorfSUN = resolve_glGlobalAlphaFactorfSUN();
	piglit_dispatch_glGlobalAlphaFactorfSUN(factor);
}

PFNGLGLOBALALPHAFACTORFSUNPROC piglit_dispatch_glGlobalAlphaFactorfSUN = stub_glGlobalAlphaFactorfSUN;

static void*
resolve_glGlobalAlphaFactoriSUN(void)
{
	/* glGlobalAlphaFactoriSUN (GL_SUN_global_alpha) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_global_alpha")) {
		return get_ext_proc("glGlobalAlphaFactoriSUN");
	}

	unsupported("glGlobalAlphaFactoriSUN");
	return piglit_dispatch_glGlobalAlphaFactoriSUN;
}

static void APIENTRY
stub_glGlobalAlphaFactoriSUN(GLint factor)
{
	check_initialized();
	piglit_dispatch_glGlobalAlphaFactoriSUN = resolve_glGlobalAlphaFactoriSUN();
	piglit_dispatch_glGlobalAlphaFactoriSUN(factor);
}

PFNGLGLOBALALPHAFACTORISUNPROC piglit_dispatch_glGlobalAlphaFactoriSUN = stub_glGlobalAlphaFactoriSUN;

static void*
resolve_glGlobalAlphaFactorsSUN(void)
{
	/* glGlobalAlphaFactorsSUN (GL_SUN_global_alpha) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_global_alpha")) {
		return get_ext_proc("glGlobalAlphaFactorsSUN");
	}

	unsupported("glGlobalAlphaFactorsSUN");
	return piglit_dispatch_glGlobalAlphaFactorsSUN;
}

static void APIENTRY
stub_glGlobalAlphaFactorsSUN(GLshort factor)
{
	check_initialized();
	piglit_dispatch_glGlobalAlphaFactorsSUN = resolve_glGlobalAlphaFactorsSUN();
	piglit_dispatch_glGlobalAlphaFactorsSUN(factor);
}

PFNGLGLOBALALPHAFACTORSSUNPROC piglit_dispatch_glGlobalAlphaFactorsSUN = stub_glGlobalAlphaFactorsSUN;

static void*
resolve_glGlobalAlphaFactorubSUN(void)
{
	/* glGlobalAlphaFactorubSUN (GL_SUN_global_alpha) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_global_alpha")) {
		return get_ext_proc("glGlobalAlphaFactorubSUN");
	}

	unsupported("glGlobalAlphaFactorubSUN");
	return piglit_dispatch_glGlobalAlphaFactorubSUN;
}

static void APIENTRY
stub_glGlobalAlphaFactorubSUN(GLubyte factor)
{
	check_initialized();
	piglit_dispatch_glGlobalAlphaFactorubSUN = resolve_glGlobalAlphaFactorubSUN();
	piglit_dispatch_glGlobalAlphaFactorubSUN(factor);
}

PFNGLGLOBALALPHAFACTORUBSUNPROC piglit_dispatch_glGlobalAlphaFactorubSUN = stub_glGlobalAlphaFactorubSUN;

static void*
resolve_glGlobalAlphaFactoruiSUN(void)
{
	/* glGlobalAlphaFactoruiSUN (GL_SUN_global_alpha) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_global_alpha")) {
		return get_ext_proc("glGlobalAlphaFactoruiSUN");
	}

	unsupported("glGlobalAlphaFactoruiSUN");
	return piglit_dispatch_glGlobalAlphaFactoruiSUN;
}

static void APIENTRY
stub_glGlobalAlphaFactoruiSUN(GLuint factor)
{
	check_initialized();
	piglit_dispatch_glGlobalAlphaFactoruiSUN = resolve_glGlobalAlphaFactoruiSUN();
	piglit_dispatch_glGlobalAlphaFactoruiSUN(factor);
}

PFNGLGLOBALALPHAFACTORUISUNPROC piglit_dispatch_glGlobalAlphaFactoruiSUN = stub_glGlobalAlphaFactoruiSUN;

static void*
resolve_glGlobalAlphaFactorusSUN(void)
{
	/* glGlobalAlphaFactorusSUN (GL_SUN_global_alpha) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_global_alpha")) {
		return get_ext_proc("glGlobalAlphaFactorusSUN");
	}

	unsupported("glGlobalAlphaFactorusSUN");
	return piglit_dispatch_glGlobalAlphaFactorusSUN;
}

static void APIENTRY
stub_glGlobalAlphaFactorusSUN(GLushort factor)
{
	check_initialized();
	piglit_dispatch_glGlobalAlphaFactorusSUN = resolve_glGlobalAlphaFactorusSUN();
	piglit_dispatch_glGlobalAlphaFactorusSUN(factor);
}

PFNGLGLOBALALPHAFACTORUSSUNPROC piglit_dispatch_glGlobalAlphaFactorusSUN = stub_glGlobalAlphaFactorusSUN;

static void*
resolve_glHint(void)
{
	/* glHint (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glHint", 10);
	}

	/* glHint (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glHint", 10);
	}

	/* glHint (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glHint", 20);
	}

	unsupported("glHint");
	return piglit_dispatch_glHint;
}

static void APIENTRY
stub_glHint(GLenum target, GLenum mode)
{
	check_initialized();
	piglit_dispatch_glHint = resolve_glHint();
	piglit_dispatch_glHint(target, mode);
}

PFNGLHINTPROC piglit_dispatch_glHint = stub_glHint;

static void*
resolve_glHintPGI(void)
{
	/* glHintPGI (GL_PGI_misc_hints) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_PGI_misc_hints")) {
		return get_ext_proc("glHintPGI");
	}

	unsupported("glHintPGI");
	return piglit_dispatch_glHintPGI;
}

static void APIENTRY
stub_glHintPGI(GLenum target, GLint mode)
{
	check_initialized();
	piglit_dispatch_glHintPGI = resolve_glHintPGI();
	piglit_dispatch_glHintPGI(target, mode);
}

PFNGLHINTPGIPROC piglit_dispatch_glHintPGI = stub_glHintPGI;

static void*
resolve_glHistogram(void)
{
	/* glHistogram (GL_ARB_imaging) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_imaging")) {
		return get_ext_proc("glHistogram");
	}

	/* glHistogramEXT (GL_EXT_histogram) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_histogram")) {
		return get_ext_proc("glHistogramEXT");
	}

	unsupported("glHistogram");
	return piglit_dispatch_glHistogram;
}

static void APIENTRY
stub_glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
{
	check_initialized();
	piglit_dispatch_glHistogram = resolve_glHistogram();
	piglit_dispatch_glHistogram(target, width, internalformat, sink);
}

PFNGLHISTOGRAMPROC piglit_dispatch_glHistogram = stub_glHistogram;

static void*
resolve_glIglooInterfaceSGIX(void)
{
	/* glIglooInterfaceSGIX (GL_SGIX_igloo_interface) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_igloo_interface")) {
		return get_ext_proc("glIglooInterfaceSGIX");
	}

	unsupported("glIglooInterfaceSGIX");
	return piglit_dispatch_glIglooInterfaceSGIX;
}

static void APIENTRY
stub_glIglooInterfaceSGIX(GLenum pname, const void * params)
{
	check_initialized();
	piglit_dispatch_glIglooInterfaceSGIX = resolve_glIglooInterfaceSGIX();
	piglit_dispatch_glIglooInterfaceSGIX(pname, params);
}

PFNGLIGLOOINTERFACESGIXPROC piglit_dispatch_glIglooInterfaceSGIX = stub_glIglooInterfaceSGIX;

static void*
resolve_glImageTransformParameterfHP(void)
{
	/* glImageTransformParameterfHP (GL_HP_image_transform) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_HP_image_transform")) {
		return get_ext_proc("glImageTransformParameterfHP");
	}

	unsupported("glImageTransformParameterfHP");
	return piglit_dispatch_glImageTransformParameterfHP;
}

static void APIENTRY
stub_glImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param)
{
	check_initialized();
	piglit_dispatch_glImageTransformParameterfHP = resolve_glImageTransformParameterfHP();
	piglit_dispatch_glImageTransformParameterfHP(target, pname, param);
}

PFNGLIMAGETRANSFORMPARAMETERFHPPROC piglit_dispatch_glImageTransformParameterfHP = stub_glImageTransformParameterfHP;

static void*
resolve_glImageTransformParameterfvHP(void)
{
	/* glImageTransformParameterfvHP (GL_HP_image_transform) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_HP_image_transform")) {
		return get_ext_proc("glImageTransformParameterfvHP");
	}

	unsupported("glImageTransformParameterfvHP");
	return piglit_dispatch_glImageTransformParameterfvHP;
}

static void APIENTRY
stub_glImageTransformParameterfvHP(GLenum target, GLenum pname, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glImageTransformParameterfvHP = resolve_glImageTransformParameterfvHP();
	piglit_dispatch_glImageTransformParameterfvHP(target, pname, params);
}

PFNGLIMAGETRANSFORMPARAMETERFVHPPROC piglit_dispatch_glImageTransformParameterfvHP = stub_glImageTransformParameterfvHP;

static void*
resolve_glImageTransformParameteriHP(void)
{
	/* glImageTransformParameteriHP (GL_HP_image_transform) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_HP_image_transform")) {
		return get_ext_proc("glImageTransformParameteriHP");
	}

	unsupported("glImageTransformParameteriHP");
	return piglit_dispatch_glImageTransformParameteriHP;
}

static void APIENTRY
stub_glImageTransformParameteriHP(GLenum target, GLenum pname, GLint param)
{
	check_initialized();
	piglit_dispatch_glImageTransformParameteriHP = resolve_glImageTransformParameteriHP();
	piglit_dispatch_glImageTransformParameteriHP(target, pname, param);
}

PFNGLIMAGETRANSFORMPARAMETERIHPPROC piglit_dispatch_glImageTransformParameteriHP = stub_glImageTransformParameteriHP;

static void*
resolve_glImageTransformParameterivHP(void)
{
	/* glImageTransformParameterivHP (GL_HP_image_transform) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_HP_image_transform")) {
		return get_ext_proc("glImageTransformParameterivHP");
	}

	unsupported("glImageTransformParameterivHP");
	return piglit_dispatch_glImageTransformParameterivHP;
}

static void APIENTRY
stub_glImageTransformParameterivHP(GLenum target, GLenum pname, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glImageTransformParameterivHP = resolve_glImageTransformParameterivHP();
	piglit_dispatch_glImageTransformParameterivHP(target, pname, params);
}

PFNGLIMAGETRANSFORMPARAMETERIVHPPROC piglit_dispatch_glImageTransformParameterivHP = stub_glImageTransformParameterivHP;

static void*
resolve_glImportSyncEXT(void)
{
	/* glImportSyncEXT (GL_EXT_x11_sync_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_x11_sync_object")) {
		return get_ext_proc("glImportSyncEXT");
	}

	unsupported("glImportSyncEXT");
	return piglit_dispatch_glImportSyncEXT;
}

static GLsync APIENTRY
stub_glImportSyncEXT(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags)
{
	check_initialized();
	piglit_dispatch_glImportSyncEXT = resolve_glImportSyncEXT();
	return piglit_dispatch_glImportSyncEXT(external_sync_type, external_sync, flags);
}

PFNGLIMPORTSYNCEXTPROC piglit_dispatch_glImportSyncEXT = stub_glImportSyncEXT;

static void*
resolve_glIndexFormatNV(void)
{
	/* glIndexFormatNV (GL_NV_vertex_buffer_unified_memory) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_buffer_unified_memory")) {
		return get_ext_proc("glIndexFormatNV");
	}

	unsupported("glIndexFormatNV");
	return piglit_dispatch_glIndexFormatNV;
}

static void APIENTRY
stub_glIndexFormatNV(GLenum type, GLsizei stride)
{
	check_initialized();
	piglit_dispatch_glIndexFormatNV = resolve_glIndexFormatNV();
	piglit_dispatch_glIndexFormatNV(type, stride);
}

PFNGLINDEXFORMATNVPROC piglit_dispatch_glIndexFormatNV = stub_glIndexFormatNV;

static void*
resolve_glIndexFuncEXT(void)
{
	/* glIndexFuncEXT (GL_EXT_index_func) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_index_func")) {
		return get_ext_proc("glIndexFuncEXT");
	}

	unsupported("glIndexFuncEXT");
	return piglit_dispatch_glIndexFuncEXT;
}

static void APIENTRY
stub_glIndexFuncEXT(GLenum func, GLclampf ref)
{
	check_initialized();
	piglit_dispatch_glIndexFuncEXT = resolve_glIndexFuncEXT();
	piglit_dispatch_glIndexFuncEXT(func, ref);
}

PFNGLINDEXFUNCEXTPROC piglit_dispatch_glIndexFuncEXT = stub_glIndexFuncEXT;

static void*
resolve_glIndexMask(void)
{
	/* glIndexMask (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glIndexMask", 10);
	}

	unsupported("glIndexMask");
	return piglit_dispatch_glIndexMask;
}

static void APIENTRY
stub_glIndexMask(GLuint mask)
{
	check_initialized();
	piglit_dispatch_glIndexMask = resolve_glIndexMask();
	piglit_dispatch_glIndexMask(mask);
}

PFNGLINDEXMASKPROC piglit_dispatch_glIndexMask = stub_glIndexMask;

static void*
resolve_glIndexMaterialEXT(void)
{
	/* glIndexMaterialEXT (GL_EXT_index_material) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_index_material")) {
		return get_ext_proc("glIndexMaterialEXT");
	}

	unsupported("glIndexMaterialEXT");
	return piglit_dispatch_glIndexMaterialEXT;
}

static void APIENTRY
stub_glIndexMaterialEXT(GLenum face, GLenum mode)
{
	check_initialized();
	piglit_dispatch_glIndexMaterialEXT = resolve_glIndexMaterialEXT();
	piglit_dispatch_glIndexMaterialEXT(face, mode);
}

PFNGLINDEXMATERIALEXTPROC piglit_dispatch_glIndexMaterialEXT = stub_glIndexMaterialEXT;

static void*
resolve_glIndexPointer(void)
{
	/* glIndexPointer (GL_VERSION_1_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glIndexPointer", 11);
	}

	unsupported("glIndexPointer");
	return piglit_dispatch_glIndexPointer;
}

static void APIENTRY
stub_glIndexPointer(GLenum type, GLsizei stride, const void * pointer)
{
	check_initialized();
	piglit_dispatch_glIndexPointer = resolve_glIndexPointer();
	piglit_dispatch_glIndexPointer(type, stride, pointer);
}

PFNGLINDEXPOINTERPROC piglit_dispatch_glIndexPointer = stub_glIndexPointer;

static void*
resolve_glIndexPointerEXT(void)
{
	/* glIndexPointerEXT (GL_EXT_vertex_array) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_array")) {
		return get_ext_proc("glIndexPointerEXT");
	}

	unsupported("glIndexPointerEXT");
	return piglit_dispatch_glIndexPointerEXT;
}

static void APIENTRY
stub_glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void * pointer)
{
	check_initialized();
	piglit_dispatch_glIndexPointerEXT = resolve_glIndexPointerEXT();
	piglit_dispatch_glIndexPointerEXT(type, stride, count, pointer);
}

PFNGLINDEXPOINTEREXTPROC piglit_dispatch_glIndexPointerEXT = stub_glIndexPointerEXT;

static void*
resolve_glIndexPointerListIBM(void)
{
	/* glIndexPointerListIBM (GL_IBM_vertex_array_lists) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_IBM_vertex_array_lists")) {
		return get_ext_proc("glIndexPointerListIBM");
	}

	unsupported("glIndexPointerListIBM");
	return piglit_dispatch_glIndexPointerListIBM;
}

static void APIENTRY
stub_glIndexPointerListIBM(GLenum type, GLint stride, const void ** pointer, GLint ptrstride)
{
	check_initialized();
	piglit_dispatch_glIndexPointerListIBM = resolve_glIndexPointerListIBM();
	piglit_dispatch_glIndexPointerListIBM(type, stride, pointer, ptrstride);
}

PFNGLINDEXPOINTERLISTIBMPROC piglit_dispatch_glIndexPointerListIBM = stub_glIndexPointerListIBM;

static void*
resolve_glIndexd(void)
{
	/* glIndexd (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glIndexd", 10);
	}

	unsupported("glIndexd");
	return piglit_dispatch_glIndexd;
}

static void APIENTRY
stub_glIndexd(GLdouble c)
{
	check_initialized();
	piglit_dispatch_glIndexd = resolve_glIndexd();
	piglit_dispatch_glIndexd(c);
}

PFNGLINDEXDPROC piglit_dispatch_glIndexd = stub_glIndexd;

static void*
resolve_glIndexdv(void)
{
	/* glIndexdv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glIndexdv", 10);
	}

	unsupported("glIndexdv");
	return piglit_dispatch_glIndexdv;
}

static void APIENTRY
stub_glIndexdv(const GLdouble * c)
{
	check_initialized();
	piglit_dispatch_glIndexdv = resolve_glIndexdv();
	piglit_dispatch_glIndexdv(c);
}

PFNGLINDEXDVPROC piglit_dispatch_glIndexdv = stub_glIndexdv;

static void*
resolve_glIndexf(void)
{
	/* glIndexf (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glIndexf", 10);
	}

	unsupported("glIndexf");
	return piglit_dispatch_glIndexf;
}

static void APIENTRY
stub_glIndexf(GLfloat c)
{
	check_initialized();
	piglit_dispatch_glIndexf = resolve_glIndexf();
	piglit_dispatch_glIndexf(c);
}

PFNGLINDEXFPROC piglit_dispatch_glIndexf = stub_glIndexf;

static void*
resolve_glIndexfv(void)
{
	/* glIndexfv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glIndexfv", 10);
	}

	unsupported("glIndexfv");
	return piglit_dispatch_glIndexfv;
}

static void APIENTRY
stub_glIndexfv(const GLfloat * c)
{
	check_initialized();
	piglit_dispatch_glIndexfv = resolve_glIndexfv();
	piglit_dispatch_glIndexfv(c);
}

PFNGLINDEXFVPROC piglit_dispatch_glIndexfv = stub_glIndexfv;

static void*
resolve_glIndexi(void)
{
	/* glIndexi (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glIndexi", 10);
	}

	unsupported("glIndexi");
	return piglit_dispatch_glIndexi;
}

static void APIENTRY
stub_glIndexi(GLint c)
{
	check_initialized();
	piglit_dispatch_glIndexi = resolve_glIndexi();
	piglit_dispatch_glIndexi(c);
}

PFNGLINDEXIPROC piglit_dispatch_glIndexi = stub_glIndexi;

static void*
resolve_glIndexiv(void)
{
	/* glIndexiv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glIndexiv", 10);
	}

	unsupported("glIndexiv");
	return piglit_dispatch_glIndexiv;
}

static void APIENTRY
stub_glIndexiv(const GLint * c)
{
	check_initialized();
	piglit_dispatch_glIndexiv = resolve_glIndexiv();
	piglit_dispatch_glIndexiv(c);
}

PFNGLINDEXIVPROC piglit_dispatch_glIndexiv = stub_glIndexiv;

static void*
resolve_glIndexs(void)
{
	/* glIndexs (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glIndexs", 10);
	}

	unsupported("glIndexs");
	return piglit_dispatch_glIndexs;
}

static void APIENTRY
stub_glIndexs(GLshort c)
{
	check_initialized();
	piglit_dispatch_glIndexs = resolve_glIndexs();
	piglit_dispatch_glIndexs(c);
}

PFNGLINDEXSPROC piglit_dispatch_glIndexs = stub_glIndexs;

static void*
resolve_glIndexsv(void)
{
	/* glIndexsv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glIndexsv", 10);
	}

	unsupported("glIndexsv");
	return piglit_dispatch_glIndexsv;
}

static void APIENTRY
stub_glIndexsv(const GLshort * c)
{
	check_initialized();
	piglit_dispatch_glIndexsv = resolve_glIndexsv();
	piglit_dispatch_glIndexsv(c);
}

PFNGLINDEXSVPROC piglit_dispatch_glIndexsv = stub_glIndexsv;

static void*
resolve_glIndexub(void)
{
	/* glIndexub (GL_VERSION_1_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glIndexub", 11);
	}

	unsupported("glIndexub");
	return piglit_dispatch_glIndexub;
}

static void APIENTRY
stub_glIndexub(GLubyte c)
{
	check_initialized();
	piglit_dispatch_glIndexub = resolve_glIndexub();
	piglit_dispatch_glIndexub(c);
}

PFNGLINDEXUBPROC piglit_dispatch_glIndexub = stub_glIndexub;

static void*
resolve_glIndexubv(void)
{
	/* glIndexubv (GL_VERSION_1_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glIndexubv", 11);
	}

	unsupported("glIndexubv");
	return piglit_dispatch_glIndexubv;
}

static void APIENTRY
stub_glIndexubv(const GLubyte * c)
{
	check_initialized();
	piglit_dispatch_glIndexubv = resolve_glIndexubv();
	piglit_dispatch_glIndexubv(c);
}

PFNGLINDEXUBVPROC piglit_dispatch_glIndexubv = stub_glIndexubv;

static void*
resolve_glIndexxOES(void)
{
	/* glIndexxOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glIndexxOES");
	}

	unsupported("glIndexxOES");
	return piglit_dispatch_glIndexxOES;
}

static void APIENTRY
stub_glIndexxOES(GLfixed component)
{
	check_initialized();
	piglit_dispatch_glIndexxOES = resolve_glIndexxOES();
	piglit_dispatch_glIndexxOES(component);
}

PFNGLINDEXXOESPROC piglit_dispatch_glIndexxOES = stub_glIndexxOES;

static void*
resolve_glIndexxvOES(void)
{
	/* glIndexxvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glIndexxvOES");
	}

	unsupported("glIndexxvOES");
	return piglit_dispatch_glIndexxvOES;
}

static void APIENTRY
stub_glIndexxvOES(const GLfixed * component)
{
	check_initialized();
	piglit_dispatch_glIndexxvOES = resolve_glIndexxvOES();
	piglit_dispatch_glIndexxvOES(component);
}

PFNGLINDEXXVOESPROC piglit_dispatch_glIndexxvOES = stub_glIndexxvOES;

static void*
resolve_glInitNames(void)
{
	/* glInitNames (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glInitNames", 10);
	}

	unsupported("glInitNames");
	return piglit_dispatch_glInitNames;
}

static void APIENTRY
stub_glInitNames()
{
	check_initialized();
	piglit_dispatch_glInitNames = resolve_glInitNames();
	piglit_dispatch_glInitNames();
}

PFNGLINITNAMESPROC piglit_dispatch_glInitNames = stub_glInitNames;

static void*
resolve_glInsertComponentEXT(void)
{
	/* glInsertComponentEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glInsertComponentEXT");
	}

	unsupported("glInsertComponentEXT");
	return piglit_dispatch_glInsertComponentEXT;
}

static void APIENTRY
stub_glInsertComponentEXT(GLuint res, GLuint src, GLuint num)
{
	check_initialized();
	piglit_dispatch_glInsertComponentEXT = resolve_glInsertComponentEXT();
	piglit_dispatch_glInsertComponentEXT(res, src, num);
}

PFNGLINSERTCOMPONENTEXTPROC piglit_dispatch_glInsertComponentEXT = stub_glInsertComponentEXT;

static void*
resolve_glInsertEventMarkerEXT(void)
{
	/* glInsertEventMarkerEXT (GL_EXT_debug_marker) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_debug_marker")) {
		return get_ext_proc("glInsertEventMarkerEXT");
	}

	unsupported("glInsertEventMarkerEXT");
	return piglit_dispatch_glInsertEventMarkerEXT;
}

static void APIENTRY
stub_glInsertEventMarkerEXT(GLsizei length, const GLchar * marker)
{
	check_initialized();
	piglit_dispatch_glInsertEventMarkerEXT = resolve_glInsertEventMarkerEXT();
	piglit_dispatch_glInsertEventMarkerEXT(length, marker);
}

PFNGLINSERTEVENTMARKEREXTPROC piglit_dispatch_glInsertEventMarkerEXT = stub_glInsertEventMarkerEXT;

static void*
resolve_glInstrumentsBufferSGIX(void)
{
	/* glInstrumentsBufferSGIX (GL_SGIX_instruments) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_instruments")) {
		return get_ext_proc("glInstrumentsBufferSGIX");
	}

	unsupported("glInstrumentsBufferSGIX");
	return piglit_dispatch_glInstrumentsBufferSGIX;
}

static void APIENTRY
stub_glInstrumentsBufferSGIX(GLsizei size, GLint * buffer)
{
	check_initialized();
	piglit_dispatch_glInstrumentsBufferSGIX = resolve_glInstrumentsBufferSGIX();
	piglit_dispatch_glInstrumentsBufferSGIX(size, buffer);
}

PFNGLINSTRUMENTSBUFFERSGIXPROC piglit_dispatch_glInstrumentsBufferSGIX = stub_glInstrumentsBufferSGIX;

static void*
resolve_glInterleavedArrays(void)
{
	/* glInterleavedArrays (GL_VERSION_1_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glInterleavedArrays", 11);
	}

	unsupported("glInterleavedArrays");
	return piglit_dispatch_glInterleavedArrays;
}

static void APIENTRY
stub_glInterleavedArrays(GLenum format, GLsizei stride, const void * pointer)
{
	check_initialized();
	piglit_dispatch_glInterleavedArrays = resolve_glInterleavedArrays();
	piglit_dispatch_glInterleavedArrays(format, stride, pointer);
}

PFNGLINTERLEAVEDARRAYSPROC piglit_dispatch_glInterleavedArrays = stub_glInterleavedArrays;

static void*
resolve_glInterpolatePathsNV(void)
{
	/* glInterpolatePathsNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glInterpolatePathsNV");
	}

	unsupported("glInterpolatePathsNV");
	return piglit_dispatch_glInterpolatePathsNV;
}

static void APIENTRY
stub_glInterpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight)
{
	check_initialized();
	piglit_dispatch_glInterpolatePathsNV = resolve_glInterpolatePathsNV();
	piglit_dispatch_glInterpolatePathsNV(resultPath, pathA, pathB, weight);
}

PFNGLINTERPOLATEPATHSNVPROC piglit_dispatch_glInterpolatePathsNV = stub_glInterpolatePathsNV;

static void*
resolve_glInvalidateBufferData(void)
{
	/* glInvalidateBufferData (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glInvalidateBufferData", 43);
	}

	/* glInvalidateBufferData (GL_ARB_invalidate_subdata) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_invalidate_subdata")) {
		return get_ext_proc("glInvalidateBufferData");
	}

	unsupported("glInvalidateBufferData");
	return piglit_dispatch_glInvalidateBufferData;
}

static void APIENTRY
stub_glInvalidateBufferData(GLuint buffer)
{
	check_initialized();
	piglit_dispatch_glInvalidateBufferData = resolve_glInvalidateBufferData();
	piglit_dispatch_glInvalidateBufferData(buffer);
}

PFNGLINVALIDATEBUFFERDATAPROC piglit_dispatch_glInvalidateBufferData = stub_glInvalidateBufferData;

static void*
resolve_glInvalidateBufferSubData(void)
{
	/* glInvalidateBufferSubData (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glInvalidateBufferSubData", 43);
	}

	/* glInvalidateBufferSubData (GL_ARB_invalidate_subdata) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_invalidate_subdata")) {
		return get_ext_proc("glInvalidateBufferSubData");
	}

	unsupported("glInvalidateBufferSubData");
	return piglit_dispatch_glInvalidateBufferSubData;
}

static void APIENTRY
stub_glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length)
{
	check_initialized();
	piglit_dispatch_glInvalidateBufferSubData = resolve_glInvalidateBufferSubData();
	piglit_dispatch_glInvalidateBufferSubData(buffer, offset, length);
}

PFNGLINVALIDATEBUFFERSUBDATAPROC piglit_dispatch_glInvalidateBufferSubData = stub_glInvalidateBufferSubData;

static void*
resolve_glInvalidateFramebuffer(void)
{
	/* glInvalidateFramebuffer (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glInvalidateFramebuffer", 43);
	}

	/* glInvalidateFramebuffer (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glInvalidateFramebuffer", 30);
	}

	/* glInvalidateFramebuffer (GL_ARB_invalidate_subdata) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_invalidate_subdata")) {
		return get_ext_proc("glInvalidateFramebuffer");
	}

	unsupported("glInvalidateFramebuffer");
	return piglit_dispatch_glInvalidateFramebuffer;
}

static void APIENTRY
stub_glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum * attachments)
{
	check_initialized();
	piglit_dispatch_glInvalidateFramebuffer = resolve_glInvalidateFramebuffer();
	piglit_dispatch_glInvalidateFramebuffer(target, numAttachments, attachments);
}

PFNGLINVALIDATEFRAMEBUFFERPROC piglit_dispatch_glInvalidateFramebuffer = stub_glInvalidateFramebuffer;

static void*
resolve_glInvalidateSubFramebuffer(void)
{
	/* glInvalidateSubFramebuffer (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glInvalidateSubFramebuffer", 43);
	}

	/* glInvalidateSubFramebuffer (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glInvalidateSubFramebuffer", 30);
	}

	/* glInvalidateSubFramebuffer (GL_ARB_invalidate_subdata) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_invalidate_subdata")) {
		return get_ext_proc("glInvalidateSubFramebuffer");
	}

	unsupported("glInvalidateSubFramebuffer");
	return piglit_dispatch_glInvalidateSubFramebuffer;
}

static void APIENTRY
stub_glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height)
{
	check_initialized();
	piglit_dispatch_glInvalidateSubFramebuffer = resolve_glInvalidateSubFramebuffer();
	piglit_dispatch_glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height);
}

PFNGLINVALIDATESUBFRAMEBUFFERPROC piglit_dispatch_glInvalidateSubFramebuffer = stub_glInvalidateSubFramebuffer;

static void*
resolve_glInvalidateTexImage(void)
{
	/* glInvalidateTexImage (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glInvalidateTexImage", 43);
	}

	/* glInvalidateTexImage (GL_ARB_invalidate_subdata) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_invalidate_subdata")) {
		return get_ext_proc("glInvalidateTexImage");
	}

	unsupported("glInvalidateTexImage");
	return piglit_dispatch_glInvalidateTexImage;
}

static void APIENTRY
stub_glInvalidateTexImage(GLuint texture, GLint level)
{
	check_initialized();
	piglit_dispatch_glInvalidateTexImage = resolve_glInvalidateTexImage();
	piglit_dispatch_glInvalidateTexImage(texture, level);
}

PFNGLINVALIDATETEXIMAGEPROC piglit_dispatch_glInvalidateTexImage = stub_glInvalidateTexImage;

static void*
resolve_glInvalidateTexSubImage(void)
{
	/* glInvalidateTexSubImage (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glInvalidateTexSubImage", 43);
	}

	/* glInvalidateTexSubImage (GL_ARB_invalidate_subdata) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_invalidate_subdata")) {
		return get_ext_proc("glInvalidateTexSubImage");
	}

	unsupported("glInvalidateTexSubImage");
	return piglit_dispatch_glInvalidateTexSubImage;
}

static void APIENTRY
stub_glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)
{
	check_initialized();
	piglit_dispatch_glInvalidateTexSubImage = resolve_glInvalidateTexSubImage();
	piglit_dispatch_glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth);
}

PFNGLINVALIDATETEXSUBIMAGEPROC piglit_dispatch_glInvalidateTexSubImage = stub_glInvalidateTexSubImage;

static void*
resolve_glIsAsyncMarkerSGIX(void)
{
	/* glIsAsyncMarkerSGIX (GL_SGIX_async) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_async")) {
		return get_ext_proc("glIsAsyncMarkerSGIX");
	}

	unsupported("glIsAsyncMarkerSGIX");
	return piglit_dispatch_glIsAsyncMarkerSGIX;
}

static GLboolean APIENTRY
stub_glIsAsyncMarkerSGIX(GLuint marker)
{
	check_initialized();
	piglit_dispatch_glIsAsyncMarkerSGIX = resolve_glIsAsyncMarkerSGIX();
	return piglit_dispatch_glIsAsyncMarkerSGIX(marker);
}

PFNGLISASYNCMARKERSGIXPROC piglit_dispatch_glIsAsyncMarkerSGIX = stub_glIsAsyncMarkerSGIX;

static void*
resolve_glIsBuffer(void)
{
	/* glIsBuffer (GL_VERSION_1_5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glIsBuffer", 15);
	}

	/* glIsBuffer (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glIsBuffer", 10);
	}

	/* glIsBuffer (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glIsBuffer", 20);
	}

	/* glIsBufferARB (GL_ARB_vertex_buffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_buffer_object")) {
		return get_ext_proc("glIsBufferARB");
	}

	unsupported("glIsBuffer");
	return piglit_dispatch_glIsBuffer;
}

static GLboolean APIENTRY
stub_glIsBuffer(GLuint buffer)
{
	check_initialized();
	piglit_dispatch_glIsBuffer = resolve_glIsBuffer();
	return piglit_dispatch_glIsBuffer(buffer);
}

PFNGLISBUFFERPROC piglit_dispatch_glIsBuffer = stub_glIsBuffer;

static void*
resolve_glIsBufferResidentNV(void)
{
	/* glIsBufferResidentNV (GL_NV_shader_buffer_load) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_shader_buffer_load")) {
		return get_ext_proc("glIsBufferResidentNV");
	}

	unsupported("glIsBufferResidentNV");
	return piglit_dispatch_glIsBufferResidentNV;
}

static GLboolean APIENTRY
stub_glIsBufferResidentNV(GLenum target)
{
	check_initialized();
	piglit_dispatch_glIsBufferResidentNV = resolve_glIsBufferResidentNV();
	return piglit_dispatch_glIsBufferResidentNV(target);
}

PFNGLISBUFFERRESIDENTNVPROC piglit_dispatch_glIsBufferResidentNV = stub_glIsBufferResidentNV;

static void*
resolve_glIsEnabled(void)
{
	/* glIsEnabled (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glIsEnabled", 10);
	}

	/* glIsEnabled (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glIsEnabled", 10);
	}

	/* glIsEnabled (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glIsEnabled", 20);
	}

	unsupported("glIsEnabled");
	return piglit_dispatch_glIsEnabled;
}

static GLboolean APIENTRY
stub_glIsEnabled(GLenum cap)
{
	check_initialized();
	piglit_dispatch_glIsEnabled = resolve_glIsEnabled();
	return piglit_dispatch_glIsEnabled(cap);
}

PFNGLISENABLEDPROC piglit_dispatch_glIsEnabled = stub_glIsEnabled;

static void*
resolve_glIsEnabledIndexedEXT(void)
{
	/* glIsEnabledi (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glIsEnabledi", 30);
	}

	/* glIsEnabledIndexedEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glIsEnabledIndexedEXT");
	}

	/* glIsEnabledIndexedEXT (GL_EXT_draw_buffers2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_draw_buffers2")) {
		return get_ext_proc("glIsEnabledIndexedEXT");
	}

	/* glIsEnablediEXT (GL_EXT_draw_buffers_indexed) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_draw_buffers_indexed")) {
		return get_ext_proc("glIsEnablediEXT");
	}

	unsupported("glIsEnabledIndexedEXT");
	return piglit_dispatch_glIsEnabledIndexedEXT;
}

static GLboolean APIENTRY
stub_glIsEnabledIndexedEXT(GLenum target, GLuint index)
{
	check_initialized();
	piglit_dispatch_glIsEnabledIndexedEXT = resolve_glIsEnabledIndexedEXT();
	return piglit_dispatch_glIsEnabledIndexedEXT(target, index);
}

PFNGLISENABLEDINDEXEDEXTPROC piglit_dispatch_glIsEnabledIndexedEXT = stub_glIsEnabledIndexedEXT;

static void*
resolve_glIsFenceAPPLE(void)
{
	/* glIsFenceAPPLE (GL_APPLE_fence) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_APPLE_fence")) {
		return get_ext_proc("glIsFenceAPPLE");
	}

	unsupported("glIsFenceAPPLE");
	return piglit_dispatch_glIsFenceAPPLE;
}

static GLboolean APIENTRY
stub_glIsFenceAPPLE(GLuint fence)
{
	check_initialized();
	piglit_dispatch_glIsFenceAPPLE = resolve_glIsFenceAPPLE();
	return piglit_dispatch_glIsFenceAPPLE(fence);
}

PFNGLISFENCEAPPLEPROC piglit_dispatch_glIsFenceAPPLE = stub_glIsFenceAPPLE;

static void*
resolve_glIsFenceNV(void)
{
	/* glIsFenceNV (GL_NV_fence) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_NV_fence")) {
		return get_ext_proc("glIsFenceNV");
	}

	unsupported("glIsFenceNV");
	return piglit_dispatch_glIsFenceNV;
}

static GLboolean APIENTRY
stub_glIsFenceNV(GLuint fence)
{
	check_initialized();
	piglit_dispatch_glIsFenceNV = resolve_glIsFenceNV();
	return piglit_dispatch_glIsFenceNV(fence);
}

PFNGLISFENCENVPROC piglit_dispatch_glIsFenceNV = stub_glIsFenceNV;

static void*
resolve_glIsFramebuffer(void)
{
	/* glIsFramebuffer (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glIsFramebuffer", 30);
	}

	/* glIsFramebuffer (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glIsFramebuffer", 20);
	}

	/* glIsFramebuffer (GL_ARB_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_framebuffer_object")) {
		return get_ext_proc("glIsFramebuffer");
	}

	/* glIsFramebufferEXT (GL_EXT_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_framebuffer_object")) {
		return get_ext_proc("glIsFramebufferEXT");
	}

	unsupported("glIsFramebuffer");
	return piglit_dispatch_glIsFramebuffer;
}

static GLboolean APIENTRY
stub_glIsFramebuffer(GLuint framebuffer)
{
	check_initialized();
	piglit_dispatch_glIsFramebuffer = resolve_glIsFramebuffer();
	return piglit_dispatch_glIsFramebuffer(framebuffer);
}

PFNGLISFRAMEBUFFERPROC piglit_dispatch_glIsFramebuffer = stub_glIsFramebuffer;

static void*
resolve_glIsFramebufferOES(void)
{
	/* glIsFramebufferOES (GL_OES_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_framebuffer_object")) {
		return get_ext_proc("glIsFramebufferOES");
	}

	unsupported("glIsFramebufferOES");
	return piglit_dispatch_glIsFramebufferOES;
}

static GLboolean APIENTRY
stub_glIsFramebufferOES(GLuint framebuffer)
{
	check_initialized();
	piglit_dispatch_glIsFramebufferOES = resolve_glIsFramebufferOES();
	return piglit_dispatch_glIsFramebufferOES(framebuffer);
}

PFNGLISFRAMEBUFFEROESPROC piglit_dispatch_glIsFramebufferOES = stub_glIsFramebufferOES;

static void*
resolve_glIsImageHandleResidentARB(void)
{
	/* glIsImageHandleResidentARB (GL_ARB_bindless_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_bindless_texture")) {
		return get_ext_proc("glIsImageHandleResidentARB");
	}

	unsupported("glIsImageHandleResidentARB");
	return piglit_dispatch_glIsImageHandleResidentARB;
}

static GLboolean APIENTRY
stub_glIsImageHandleResidentARB(GLuint64 handle)
{
	check_initialized();
	piglit_dispatch_glIsImageHandleResidentARB = resolve_glIsImageHandleResidentARB();
	return piglit_dispatch_glIsImageHandleResidentARB(handle);
}

PFNGLISIMAGEHANDLERESIDENTARBPROC piglit_dispatch_glIsImageHandleResidentARB = stub_glIsImageHandleResidentARB;

static void*
resolve_glIsImageHandleResidentNV(void)
{
	/* glIsImageHandleResidentNV (GL_NV_bindless_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_bindless_texture")) {
		return get_ext_proc("glIsImageHandleResidentNV");
	}

	unsupported("glIsImageHandleResidentNV");
	return piglit_dispatch_glIsImageHandleResidentNV;
}

static GLboolean APIENTRY
stub_glIsImageHandleResidentNV(GLuint64 handle)
{
	check_initialized();
	piglit_dispatch_glIsImageHandleResidentNV = resolve_glIsImageHandleResidentNV();
	return piglit_dispatch_glIsImageHandleResidentNV(handle);
}

PFNGLISIMAGEHANDLERESIDENTNVPROC piglit_dispatch_glIsImageHandleResidentNV = stub_glIsImageHandleResidentNV;

static void*
resolve_glIsList(void)
{
	/* glIsList (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glIsList", 10);
	}

	unsupported("glIsList");
	return piglit_dispatch_glIsList;
}

static GLboolean APIENTRY
stub_glIsList(GLuint list)
{
	check_initialized();
	piglit_dispatch_glIsList = resolve_glIsList();
	return piglit_dispatch_glIsList(list);
}

PFNGLISLISTPROC piglit_dispatch_glIsList = stub_glIsList;

static void*
resolve_glIsNameAMD(void)
{
	/* glIsNameAMD (GL_AMD_name_gen_delete) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_name_gen_delete")) {
		return get_ext_proc("glIsNameAMD");
	}

	unsupported("glIsNameAMD");
	return piglit_dispatch_glIsNameAMD;
}

static GLboolean APIENTRY
stub_glIsNameAMD(GLenum identifier, GLuint name)
{
	check_initialized();
	piglit_dispatch_glIsNameAMD = resolve_glIsNameAMD();
	return piglit_dispatch_glIsNameAMD(identifier, name);
}

PFNGLISNAMEAMDPROC piglit_dispatch_glIsNameAMD = stub_glIsNameAMD;

static void*
resolve_glIsNamedBufferResidentNV(void)
{
	/* glIsNamedBufferResidentNV (GL_NV_shader_buffer_load) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_shader_buffer_load")) {
		return get_ext_proc("glIsNamedBufferResidentNV");
	}

	unsupported("glIsNamedBufferResidentNV");
	return piglit_dispatch_glIsNamedBufferResidentNV;
}

static GLboolean APIENTRY
stub_glIsNamedBufferResidentNV(GLuint buffer)
{
	check_initialized();
	piglit_dispatch_glIsNamedBufferResidentNV = resolve_glIsNamedBufferResidentNV();
	return piglit_dispatch_glIsNamedBufferResidentNV(buffer);
}

PFNGLISNAMEDBUFFERRESIDENTNVPROC piglit_dispatch_glIsNamedBufferResidentNV = stub_glIsNamedBufferResidentNV;

static void*
resolve_glIsNamedStringARB(void)
{
	/* glIsNamedStringARB (GL_ARB_shading_language_include) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shading_language_include")) {
		return get_ext_proc("glIsNamedStringARB");
	}

	unsupported("glIsNamedStringARB");
	return piglit_dispatch_glIsNamedStringARB;
}

static GLboolean APIENTRY
stub_glIsNamedStringARB(GLint namelen, const GLchar * name)
{
	check_initialized();
	piglit_dispatch_glIsNamedStringARB = resolve_glIsNamedStringARB();
	return piglit_dispatch_glIsNamedStringARB(namelen, name);
}

PFNGLISNAMEDSTRINGARBPROC piglit_dispatch_glIsNamedStringARB = stub_glIsNamedStringARB;

static void*
resolve_glIsObjectBufferATI(void)
{
	/* glIsObjectBufferATI (GL_ATI_vertex_array_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_array_object")) {
		return get_ext_proc("glIsObjectBufferATI");
	}

	unsupported("glIsObjectBufferATI");
	return piglit_dispatch_glIsObjectBufferATI;
}

static GLboolean APIENTRY
stub_glIsObjectBufferATI(GLuint buffer)
{
	check_initialized();
	piglit_dispatch_glIsObjectBufferATI = resolve_glIsObjectBufferATI();
	return piglit_dispatch_glIsObjectBufferATI(buffer);
}

PFNGLISOBJECTBUFFERATIPROC piglit_dispatch_glIsObjectBufferATI = stub_glIsObjectBufferATI;

static void*
resolve_glIsOcclusionQueryNV(void)
{
	/* glIsOcclusionQueryNV (GL_NV_occlusion_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_occlusion_query")) {
		return get_ext_proc("glIsOcclusionQueryNV");
	}

	unsupported("glIsOcclusionQueryNV");
	return piglit_dispatch_glIsOcclusionQueryNV;
}

static GLboolean APIENTRY
stub_glIsOcclusionQueryNV(GLuint id)
{
	check_initialized();
	piglit_dispatch_glIsOcclusionQueryNV = resolve_glIsOcclusionQueryNV();
	return piglit_dispatch_glIsOcclusionQueryNV(id);
}

PFNGLISOCCLUSIONQUERYNVPROC piglit_dispatch_glIsOcclusionQueryNV = stub_glIsOcclusionQueryNV;

static void*
resolve_glIsPathNV(void)
{
	/* glIsPathNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glIsPathNV");
	}

	unsupported("glIsPathNV");
	return piglit_dispatch_glIsPathNV;
}

static GLboolean APIENTRY
stub_glIsPathNV(GLuint path)
{
	check_initialized();
	piglit_dispatch_glIsPathNV = resolve_glIsPathNV();
	return piglit_dispatch_glIsPathNV(path);
}

PFNGLISPATHNVPROC piglit_dispatch_glIsPathNV = stub_glIsPathNV;

static void*
resolve_glIsPointInFillPathNV(void)
{
	/* glIsPointInFillPathNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glIsPointInFillPathNV");
	}

	unsupported("glIsPointInFillPathNV");
	return piglit_dispatch_glIsPointInFillPathNV;
}

static GLboolean APIENTRY
stub_glIsPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y)
{
	check_initialized();
	piglit_dispatch_glIsPointInFillPathNV = resolve_glIsPointInFillPathNV();
	return piglit_dispatch_glIsPointInFillPathNV(path, mask, x, y);
}

PFNGLISPOINTINFILLPATHNVPROC piglit_dispatch_glIsPointInFillPathNV = stub_glIsPointInFillPathNV;

static void*
resolve_glIsPointInStrokePathNV(void)
{
	/* glIsPointInStrokePathNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glIsPointInStrokePathNV");
	}

	unsupported("glIsPointInStrokePathNV");
	return piglit_dispatch_glIsPointInStrokePathNV;
}

static GLboolean APIENTRY
stub_glIsPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y)
{
	check_initialized();
	piglit_dispatch_glIsPointInStrokePathNV = resolve_glIsPointInStrokePathNV();
	return piglit_dispatch_glIsPointInStrokePathNV(path, x, y);
}

PFNGLISPOINTINSTROKEPATHNVPROC piglit_dispatch_glIsPointInStrokePathNV = stub_glIsPointInStrokePathNV;

static void*
resolve_glIsProgram(void)
{
	/* glIsProgram (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glIsProgram", 20);
	}

	/* glIsProgram (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glIsProgram", 20);
	}

	unsupported("glIsProgram");
	return piglit_dispatch_glIsProgram;
}

static GLboolean APIENTRY
stub_glIsProgram(GLuint program)
{
	check_initialized();
	piglit_dispatch_glIsProgram = resolve_glIsProgram();
	return piglit_dispatch_glIsProgram(program);
}

PFNGLISPROGRAMPROC piglit_dispatch_glIsProgram = stub_glIsProgram;

static void*
resolve_glIsProgramARB(void)
{
	/* glIsProgramARB (GL_ARB_fragment_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_fragment_program")) {
		return get_ext_proc("glIsProgramARB");
	}

	/* glIsProgramARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glIsProgramARB");
	}

	/* glIsProgramNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glIsProgramNV");
	}

	unsupported("glIsProgramARB");
	return piglit_dispatch_glIsProgramARB;
}

static GLboolean APIENTRY
stub_glIsProgramARB(GLuint program)
{
	check_initialized();
	piglit_dispatch_glIsProgramARB = resolve_glIsProgramARB();
	return piglit_dispatch_glIsProgramARB(program);
}

PFNGLISPROGRAMARBPROC piglit_dispatch_glIsProgramARB = stub_glIsProgramARB;

static void*
resolve_glIsProgramPipeline(void)
{
	/* glIsProgramPipeline (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glIsProgramPipeline", 41);
	}

	/* glIsProgramPipeline (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glIsProgramPipeline", 31);
	}

	/* glIsProgramPipeline (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glIsProgramPipeline");
	}

	unsupported("glIsProgramPipeline");
	return piglit_dispatch_glIsProgramPipeline;
}

static GLboolean APIENTRY
stub_glIsProgramPipeline(GLuint pipeline)
{
	check_initialized();
	piglit_dispatch_glIsProgramPipeline = resolve_glIsProgramPipeline();
	return piglit_dispatch_glIsProgramPipeline(pipeline);
}

PFNGLISPROGRAMPIPELINEPROC piglit_dispatch_glIsProgramPipeline = stub_glIsProgramPipeline;

static void*
resolve_glIsProgramPipelineEXT(void)
{
	/* glIsProgramPipelineEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glIsProgramPipelineEXT");
	}

	unsupported("glIsProgramPipelineEXT");
	return piglit_dispatch_glIsProgramPipelineEXT;
}

static GLboolean APIENTRY
stub_glIsProgramPipelineEXT(GLuint pipeline)
{
	check_initialized();
	piglit_dispatch_glIsProgramPipelineEXT = resolve_glIsProgramPipelineEXT();
	return piglit_dispatch_glIsProgramPipelineEXT(pipeline);
}

PFNGLISPROGRAMPIPELINEEXTPROC piglit_dispatch_glIsProgramPipelineEXT = stub_glIsProgramPipelineEXT;

static void*
resolve_glIsQuery(void)
{
	/* glIsQuery (GL_VERSION_1_5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glIsQuery", 15);
	}

	/* glIsQuery (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glIsQuery", 30);
	}

	/* glIsQueryARB (GL_ARB_occlusion_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_occlusion_query")) {
		return get_ext_proc("glIsQueryARB");
	}

	unsupported("glIsQuery");
	return piglit_dispatch_glIsQuery;
}

static GLboolean APIENTRY
stub_glIsQuery(GLuint id)
{
	check_initialized();
	piglit_dispatch_glIsQuery = resolve_glIsQuery();
	return piglit_dispatch_glIsQuery(id);
}

PFNGLISQUERYPROC piglit_dispatch_glIsQuery = stub_glIsQuery;

static void*
resolve_glIsQueryEXT(void)
{
	/* glIsQueryEXT (GL_EXT_disjoint_timer_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_disjoint_timer_query")) {
		return get_ext_proc("glIsQueryEXT");
	}

	/* glIsQueryEXT (GL_EXT_occlusion_query_boolean) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_occlusion_query_boolean")) {
		return get_ext_proc("glIsQueryEXT");
	}

	unsupported("glIsQueryEXT");
	return piglit_dispatch_glIsQueryEXT;
}

static GLboolean APIENTRY
stub_glIsQueryEXT(GLuint id)
{
	check_initialized();
	piglit_dispatch_glIsQueryEXT = resolve_glIsQueryEXT();
	return piglit_dispatch_glIsQueryEXT(id);
}

PFNGLISQUERYEXTPROC piglit_dispatch_glIsQueryEXT = stub_glIsQueryEXT;

static void*
resolve_glIsRenderbuffer(void)
{
	/* glIsRenderbuffer (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glIsRenderbuffer", 30);
	}

	/* glIsRenderbuffer (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glIsRenderbuffer", 20);
	}

	/* glIsRenderbuffer (GL_ARB_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_framebuffer_object")) {
		return get_ext_proc("glIsRenderbuffer");
	}

	/* glIsRenderbufferEXT (GL_EXT_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_framebuffer_object")) {
		return get_ext_proc("glIsRenderbufferEXT");
	}

	unsupported("glIsRenderbuffer");
	return piglit_dispatch_glIsRenderbuffer;
}

static GLboolean APIENTRY
stub_glIsRenderbuffer(GLuint renderbuffer)
{
	check_initialized();
	piglit_dispatch_glIsRenderbuffer = resolve_glIsRenderbuffer();
	return piglit_dispatch_glIsRenderbuffer(renderbuffer);
}

PFNGLISRENDERBUFFERPROC piglit_dispatch_glIsRenderbuffer = stub_glIsRenderbuffer;

static void*
resolve_glIsRenderbufferOES(void)
{
	/* glIsRenderbufferOES (GL_OES_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_framebuffer_object")) {
		return get_ext_proc("glIsRenderbufferOES");
	}

	unsupported("glIsRenderbufferOES");
	return piglit_dispatch_glIsRenderbufferOES;
}

static GLboolean APIENTRY
stub_glIsRenderbufferOES(GLuint renderbuffer)
{
	check_initialized();
	piglit_dispatch_glIsRenderbufferOES = resolve_glIsRenderbufferOES();
	return piglit_dispatch_glIsRenderbufferOES(renderbuffer);
}

PFNGLISRENDERBUFFEROESPROC piglit_dispatch_glIsRenderbufferOES = stub_glIsRenderbufferOES;

static void*
resolve_glIsSampler(void)
{
	/* glIsSampler (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glIsSampler", 33);
	}

	/* glIsSampler (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glIsSampler", 30);
	}

	/* glIsSampler (GL_ARB_sampler_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_sampler_objects")) {
		return get_ext_proc("glIsSampler");
	}

	unsupported("glIsSampler");
	return piglit_dispatch_glIsSampler;
}

static GLboolean APIENTRY
stub_glIsSampler(GLuint sampler)
{
	check_initialized();
	piglit_dispatch_glIsSampler = resolve_glIsSampler();
	return piglit_dispatch_glIsSampler(sampler);
}

PFNGLISSAMPLERPROC piglit_dispatch_glIsSampler = stub_glIsSampler;

static void*
resolve_glIsShader(void)
{
	/* glIsShader (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glIsShader", 20);
	}

	/* glIsShader (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glIsShader", 20);
	}

	unsupported("glIsShader");
	return piglit_dispatch_glIsShader;
}

static GLboolean APIENTRY
stub_glIsShader(GLuint shader)
{
	check_initialized();
	piglit_dispatch_glIsShader = resolve_glIsShader();
	return piglit_dispatch_glIsShader(shader);
}

PFNGLISSHADERPROC piglit_dispatch_glIsShader = stub_glIsShader;

static void*
resolve_glIsSync(void)
{
	/* glIsSync (GL_VERSION_3_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glIsSync", 32);
	}

	/* glIsSync (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glIsSync", 30);
	}

	/* glIsSync (GL_ARB_sync) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_sync")) {
		return get_ext_proc("glIsSync");
	}

	/* glIsSyncAPPLE (GL_APPLE_sync) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_APPLE_sync")) {
		return get_ext_proc("glIsSyncAPPLE");
	}

	unsupported("glIsSync");
	return piglit_dispatch_glIsSync;
}

static GLboolean APIENTRY
stub_glIsSync(GLsync sync)
{
	check_initialized();
	piglit_dispatch_glIsSync = resolve_glIsSync();
	return piglit_dispatch_glIsSync(sync);
}

PFNGLISSYNCPROC piglit_dispatch_glIsSync = stub_glIsSync;

static void*
resolve_glIsTexture(void)
{
	/* glIsTexture (GL_VERSION_1_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glIsTexture", 11);
	}

	/* glIsTexture (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glIsTexture", 10);
	}

	/* glIsTexture (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glIsTexture", 20);
	}

	unsupported("glIsTexture");
	return piglit_dispatch_glIsTexture;
}

static GLboolean APIENTRY
stub_glIsTexture(GLuint texture)
{
	check_initialized();
	piglit_dispatch_glIsTexture = resolve_glIsTexture();
	return piglit_dispatch_glIsTexture(texture);
}

PFNGLISTEXTUREPROC piglit_dispatch_glIsTexture = stub_glIsTexture;

static void*
resolve_glIsTextureEXT(void)
{
	/* glIsTextureEXT (GL_EXT_texture_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_texture_object")) {
		return get_ext_proc("glIsTextureEXT");
	}

	unsupported("glIsTextureEXT");
	return piglit_dispatch_glIsTextureEXT;
}

static GLboolean APIENTRY
stub_glIsTextureEXT(GLuint texture)
{
	check_initialized();
	piglit_dispatch_glIsTextureEXT = resolve_glIsTextureEXT();
	return piglit_dispatch_glIsTextureEXT(texture);
}

PFNGLISTEXTUREEXTPROC piglit_dispatch_glIsTextureEXT = stub_glIsTextureEXT;

static void*
resolve_glIsTextureHandleResidentARB(void)
{
	/* glIsTextureHandleResidentARB (GL_ARB_bindless_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_bindless_texture")) {
		return get_ext_proc("glIsTextureHandleResidentARB");
	}

	unsupported("glIsTextureHandleResidentARB");
	return piglit_dispatch_glIsTextureHandleResidentARB;
}

static GLboolean APIENTRY
stub_glIsTextureHandleResidentARB(GLuint64 handle)
{
	check_initialized();
	piglit_dispatch_glIsTextureHandleResidentARB = resolve_glIsTextureHandleResidentARB();
	return piglit_dispatch_glIsTextureHandleResidentARB(handle);
}

PFNGLISTEXTUREHANDLERESIDENTARBPROC piglit_dispatch_glIsTextureHandleResidentARB = stub_glIsTextureHandleResidentARB;

static void*
resolve_glIsTextureHandleResidentNV(void)
{
	/* glIsTextureHandleResidentNV (GL_NV_bindless_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_bindless_texture")) {
		return get_ext_proc("glIsTextureHandleResidentNV");
	}

	unsupported("glIsTextureHandleResidentNV");
	return piglit_dispatch_glIsTextureHandleResidentNV;
}

static GLboolean APIENTRY
stub_glIsTextureHandleResidentNV(GLuint64 handle)
{
	check_initialized();
	piglit_dispatch_glIsTextureHandleResidentNV = resolve_glIsTextureHandleResidentNV();
	return piglit_dispatch_glIsTextureHandleResidentNV(handle);
}

PFNGLISTEXTUREHANDLERESIDENTNVPROC piglit_dispatch_glIsTextureHandleResidentNV = stub_glIsTextureHandleResidentNV;

static void*
resolve_glIsTransformFeedback(void)
{
	/* glIsTransformFeedback (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glIsTransformFeedback", 40);
	}

	/* glIsTransformFeedback (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glIsTransformFeedback", 30);
	}

	/* glIsTransformFeedback (GL_ARB_transform_feedback2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_transform_feedback2")) {
		return get_ext_proc("glIsTransformFeedback");
	}

	/* glIsTransformFeedbackNV (GL_NV_transform_feedback2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_transform_feedback2")) {
		return get_ext_proc("glIsTransformFeedbackNV");
	}

	unsupported("glIsTransformFeedback");
	return piglit_dispatch_glIsTransformFeedback;
}

static GLboolean APIENTRY
stub_glIsTransformFeedback(GLuint id)
{
	check_initialized();
	piglit_dispatch_glIsTransformFeedback = resolve_glIsTransformFeedback();
	return piglit_dispatch_glIsTransformFeedback(id);
}

PFNGLISTRANSFORMFEEDBACKPROC piglit_dispatch_glIsTransformFeedback = stub_glIsTransformFeedback;

static void*
resolve_glIsVariantEnabledEXT(void)
{
	/* glIsVariantEnabledEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glIsVariantEnabledEXT");
	}

	unsupported("glIsVariantEnabledEXT");
	return piglit_dispatch_glIsVariantEnabledEXT;
}

static GLboolean APIENTRY
stub_glIsVariantEnabledEXT(GLuint id, GLenum cap)
{
	check_initialized();
	piglit_dispatch_glIsVariantEnabledEXT = resolve_glIsVariantEnabledEXT();
	return piglit_dispatch_glIsVariantEnabledEXT(id, cap);
}

PFNGLISVARIANTENABLEDEXTPROC piglit_dispatch_glIsVariantEnabledEXT = stub_glIsVariantEnabledEXT;

static void*
resolve_glIsVertexArray(void)
{
	/* glIsVertexArray (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glIsVertexArray", 30);
	}

	/* glIsVertexArray (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glIsVertexArray", 30);
	}

	/* glIsVertexArray (GL_ARB_vertex_array_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_array_object")) {
		return get_ext_proc("glIsVertexArray");
	}

	/* glIsVertexArrayOES (GL_OES_vertex_array_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_OES_vertex_array_object")) {
		return get_ext_proc("glIsVertexArrayOES");
	}

	/* glIsVertexArrayAPPLE (GL_APPLE_vertex_array_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_APPLE_vertex_array_object")) {
		return get_ext_proc("glIsVertexArrayAPPLE");
	}

	unsupported("glIsVertexArray");
	return piglit_dispatch_glIsVertexArray;
}

static GLboolean APIENTRY
stub_glIsVertexArray(GLuint array)
{
	check_initialized();
	piglit_dispatch_glIsVertexArray = resolve_glIsVertexArray();
	return piglit_dispatch_glIsVertexArray(array);
}

PFNGLISVERTEXARRAYPROC piglit_dispatch_glIsVertexArray = stub_glIsVertexArray;

static void*
resolve_glIsVertexAttribEnabledAPPLE(void)
{
	/* glIsVertexAttribEnabledAPPLE (GL_APPLE_vertex_program_evaluators) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_APPLE_vertex_program_evaluators")) {
		return get_ext_proc("glIsVertexAttribEnabledAPPLE");
	}

	unsupported("glIsVertexAttribEnabledAPPLE");
	return piglit_dispatch_glIsVertexAttribEnabledAPPLE;
}

static GLboolean APIENTRY
stub_glIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname)
{
	check_initialized();
	piglit_dispatch_glIsVertexAttribEnabledAPPLE = resolve_glIsVertexAttribEnabledAPPLE();
	return piglit_dispatch_glIsVertexAttribEnabledAPPLE(index, pname);
}

PFNGLISVERTEXATTRIBENABLEDAPPLEPROC piglit_dispatch_glIsVertexAttribEnabledAPPLE = stub_glIsVertexAttribEnabledAPPLE;

static void*
resolve_glLabelObjectEXT(void)
{
	/* glLabelObjectEXT (GL_EXT_debug_label) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_debug_label")) {
		return get_ext_proc("glLabelObjectEXT");
	}

	unsupported("glLabelObjectEXT");
	return piglit_dispatch_glLabelObjectEXT;
}

static void APIENTRY
stub_glLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar * label)
{
	check_initialized();
	piglit_dispatch_glLabelObjectEXT = resolve_glLabelObjectEXT();
	piglit_dispatch_glLabelObjectEXT(type, object, length, label);
}

PFNGLLABELOBJECTEXTPROC piglit_dispatch_glLabelObjectEXT = stub_glLabelObjectEXT;

static void*
resolve_glLightEnviSGIX(void)
{
	/* glLightEnviSGIX (GL_SGIX_fragment_lighting) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_fragment_lighting")) {
		return get_ext_proc("glLightEnviSGIX");
	}

	unsupported("glLightEnviSGIX");
	return piglit_dispatch_glLightEnviSGIX;
}

static void APIENTRY
stub_glLightEnviSGIX(GLenum pname, GLint param)
{
	check_initialized();
	piglit_dispatch_glLightEnviSGIX = resolve_glLightEnviSGIX();
	piglit_dispatch_glLightEnviSGIX(pname, param);
}

PFNGLLIGHTENVISGIXPROC piglit_dispatch_glLightEnviSGIX = stub_glLightEnviSGIX;

static void*
resolve_glLightModelf(void)
{
	/* glLightModelf (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glLightModelf", 10);
	}

	/* glLightModelf (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glLightModelf", 10);
	}

	unsupported("glLightModelf");
	return piglit_dispatch_glLightModelf;
}

static void APIENTRY
stub_glLightModelf(GLenum pname, GLfloat param)
{
	check_initialized();
	piglit_dispatch_glLightModelf = resolve_glLightModelf();
	piglit_dispatch_glLightModelf(pname, param);
}

PFNGLLIGHTMODELFPROC piglit_dispatch_glLightModelf = stub_glLightModelf;

static void*
resolve_glLightModelfv(void)
{
	/* glLightModelfv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glLightModelfv", 10);
	}

	/* glLightModelfv (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glLightModelfv", 10);
	}

	unsupported("glLightModelfv");
	return piglit_dispatch_glLightModelfv;
}

static void APIENTRY
stub_glLightModelfv(GLenum pname, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glLightModelfv = resolve_glLightModelfv();
	piglit_dispatch_glLightModelfv(pname, params);
}

PFNGLLIGHTMODELFVPROC piglit_dispatch_glLightModelfv = stub_glLightModelfv;

static void*
resolve_glLightModeli(void)
{
	/* glLightModeli (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glLightModeli", 10);
	}

	unsupported("glLightModeli");
	return piglit_dispatch_glLightModeli;
}

static void APIENTRY
stub_glLightModeli(GLenum pname, GLint param)
{
	check_initialized();
	piglit_dispatch_glLightModeli = resolve_glLightModeli();
	piglit_dispatch_glLightModeli(pname, param);
}

PFNGLLIGHTMODELIPROC piglit_dispatch_glLightModeli = stub_glLightModeli;

static void*
resolve_glLightModeliv(void)
{
	/* glLightModeliv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glLightModeliv", 10);
	}

	unsupported("glLightModeliv");
	return piglit_dispatch_glLightModeliv;
}

static void APIENTRY
stub_glLightModeliv(GLenum pname, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glLightModeliv = resolve_glLightModeliv();
	piglit_dispatch_glLightModeliv(pname, params);
}

PFNGLLIGHTMODELIVPROC piglit_dispatch_glLightModeliv = stub_glLightModeliv;

static void*
resolve_glLightModelx(void)
{
	/* glLightModelx (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glLightModelx", 10);
	}

	unsupported("glLightModelx");
	return piglit_dispatch_glLightModelx;
}

static void APIENTRY
stub_glLightModelx(GLenum pname, GLfixed param)
{
	check_initialized();
	piglit_dispatch_glLightModelx = resolve_glLightModelx();
	piglit_dispatch_glLightModelx(pname, param);
}

PFNGLLIGHTMODELXPROC piglit_dispatch_glLightModelx = stub_glLightModelx;

static void*
resolve_glLightModelxOES(void)
{
	/* glLightModelxOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glLightModelxOES");
	}

	unsupported("glLightModelxOES");
	return piglit_dispatch_glLightModelxOES;
}

static void APIENTRY
stub_glLightModelxOES(GLenum pname, GLfixed param)
{
	check_initialized();
	piglit_dispatch_glLightModelxOES = resolve_glLightModelxOES();
	piglit_dispatch_glLightModelxOES(pname, param);
}

PFNGLLIGHTMODELXOESPROC piglit_dispatch_glLightModelxOES = stub_glLightModelxOES;

static void*
resolve_glLightModelxv(void)
{
	/* glLightModelxv (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glLightModelxv", 10);
	}

	unsupported("glLightModelxv");
	return piglit_dispatch_glLightModelxv;
}

static void APIENTRY
stub_glLightModelxv(GLenum pname, const GLfixed * param)
{
	check_initialized();
	piglit_dispatch_glLightModelxv = resolve_glLightModelxv();
	piglit_dispatch_glLightModelxv(pname, param);
}

PFNGLLIGHTMODELXVPROC piglit_dispatch_glLightModelxv = stub_glLightModelxv;

static void*
resolve_glLightModelxvOES(void)
{
	/* glLightModelxvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glLightModelxvOES");
	}

	unsupported("glLightModelxvOES");
	return piglit_dispatch_glLightModelxvOES;
}

static void APIENTRY
stub_glLightModelxvOES(GLenum pname, const GLfixed * param)
{
	check_initialized();
	piglit_dispatch_glLightModelxvOES = resolve_glLightModelxvOES();
	piglit_dispatch_glLightModelxvOES(pname, param);
}

PFNGLLIGHTMODELXVOESPROC piglit_dispatch_glLightModelxvOES = stub_glLightModelxvOES;

static void*
resolve_glLightf(void)
{
	/* glLightf (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glLightf", 10);
	}

	/* glLightf (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glLightf", 10);
	}

	unsupported("glLightf");
	return piglit_dispatch_glLightf;
}

static void APIENTRY
stub_glLightf(GLenum light, GLenum pname, GLfloat param)
{
	check_initialized();
	piglit_dispatch_glLightf = resolve_glLightf();
	piglit_dispatch_glLightf(light, pname, param);
}

PFNGLLIGHTFPROC piglit_dispatch_glLightf = stub_glLightf;

static void*
resolve_glLightfv(void)
{
	/* glLightfv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glLightfv", 10);
	}

	/* glLightfv (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glLightfv", 10);
	}

	unsupported("glLightfv");
	return piglit_dispatch_glLightfv;
}

static void APIENTRY
stub_glLightfv(GLenum light, GLenum pname, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glLightfv = resolve_glLightfv();
	piglit_dispatch_glLightfv(light, pname, params);
}

PFNGLLIGHTFVPROC piglit_dispatch_glLightfv = stub_glLightfv;

static void*
resolve_glLighti(void)
{
	/* glLighti (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glLighti", 10);
	}

	unsupported("glLighti");
	return piglit_dispatch_glLighti;
}

static void APIENTRY
stub_glLighti(GLenum light, GLenum pname, GLint param)
{
	check_initialized();
	piglit_dispatch_glLighti = resolve_glLighti();
	piglit_dispatch_glLighti(light, pname, param);
}

PFNGLLIGHTIPROC piglit_dispatch_glLighti = stub_glLighti;

static void*
resolve_glLightiv(void)
{
	/* glLightiv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glLightiv", 10);
	}

	unsupported("glLightiv");
	return piglit_dispatch_glLightiv;
}

static void APIENTRY
stub_glLightiv(GLenum light, GLenum pname, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glLightiv = resolve_glLightiv();
	piglit_dispatch_glLightiv(light, pname, params);
}

PFNGLLIGHTIVPROC piglit_dispatch_glLightiv = stub_glLightiv;

static void*
resolve_glLightx(void)
{
	/* glLightx (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glLightx", 10);
	}

	unsupported("glLightx");
	return piglit_dispatch_glLightx;
}

static void APIENTRY
stub_glLightx(GLenum light, GLenum pname, GLfixed param)
{
	check_initialized();
	piglit_dispatch_glLightx = resolve_glLightx();
	piglit_dispatch_glLightx(light, pname, param);
}

PFNGLLIGHTXPROC piglit_dispatch_glLightx = stub_glLightx;

static void*
resolve_glLightxOES(void)
{
	/* glLightxOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glLightxOES");
	}

	unsupported("glLightxOES");
	return piglit_dispatch_glLightxOES;
}

static void APIENTRY
stub_glLightxOES(GLenum light, GLenum pname, GLfixed param)
{
	check_initialized();
	piglit_dispatch_glLightxOES = resolve_glLightxOES();
	piglit_dispatch_glLightxOES(light, pname, param);
}

PFNGLLIGHTXOESPROC piglit_dispatch_glLightxOES = stub_glLightxOES;

static void*
resolve_glLightxv(void)
{
	/* glLightxv (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glLightxv", 10);
	}

	unsupported("glLightxv");
	return piglit_dispatch_glLightxv;
}

static void APIENTRY
stub_glLightxv(GLenum light, GLenum pname, const GLfixed * params)
{
	check_initialized();
	piglit_dispatch_glLightxv = resolve_glLightxv();
	piglit_dispatch_glLightxv(light, pname, params);
}

PFNGLLIGHTXVPROC piglit_dispatch_glLightxv = stub_glLightxv;

static void*
resolve_glLightxvOES(void)
{
	/* glLightxvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glLightxvOES");
	}

	unsupported("glLightxvOES");
	return piglit_dispatch_glLightxvOES;
}

static void APIENTRY
stub_glLightxvOES(GLenum light, GLenum pname, const GLfixed * params)
{
	check_initialized();
	piglit_dispatch_glLightxvOES = resolve_glLightxvOES();
	piglit_dispatch_glLightxvOES(light, pname, params);
}

PFNGLLIGHTXVOESPROC piglit_dispatch_glLightxvOES = stub_glLightxvOES;

static void*
resolve_glLineStipple(void)
{
	/* glLineStipple (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glLineStipple", 10);
	}

	unsupported("glLineStipple");
	return piglit_dispatch_glLineStipple;
}

static void APIENTRY
stub_glLineStipple(GLint factor, GLushort pattern)
{
	check_initialized();
	piglit_dispatch_glLineStipple = resolve_glLineStipple();
	piglit_dispatch_glLineStipple(factor, pattern);
}

PFNGLLINESTIPPLEPROC piglit_dispatch_glLineStipple = stub_glLineStipple;

static void*
resolve_glLineWidth(void)
{
	/* glLineWidth (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glLineWidth", 10);
	}

	/* glLineWidth (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glLineWidth", 10);
	}

	/* glLineWidth (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glLineWidth", 20);
	}

	unsupported("glLineWidth");
	return piglit_dispatch_glLineWidth;
}

static void APIENTRY
stub_glLineWidth(GLfloat width)
{
	check_initialized();
	piglit_dispatch_glLineWidth = resolve_glLineWidth();
	piglit_dispatch_glLineWidth(width);
}

PFNGLLINEWIDTHPROC piglit_dispatch_glLineWidth = stub_glLineWidth;

static void*
resolve_glLineWidthx(void)
{
	/* glLineWidthx (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glLineWidthx", 10);
	}

	unsupported("glLineWidthx");
	return piglit_dispatch_glLineWidthx;
}

static void APIENTRY
stub_glLineWidthx(GLfixed width)
{
	check_initialized();
	piglit_dispatch_glLineWidthx = resolve_glLineWidthx();
	piglit_dispatch_glLineWidthx(width);
}

PFNGLLINEWIDTHXPROC piglit_dispatch_glLineWidthx = stub_glLineWidthx;

static void*
resolve_glLineWidthxOES(void)
{
	/* glLineWidthxOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glLineWidthxOES");
	}

	unsupported("glLineWidthxOES");
	return piglit_dispatch_glLineWidthxOES;
}

static void APIENTRY
stub_glLineWidthxOES(GLfixed width)
{
	check_initialized();
	piglit_dispatch_glLineWidthxOES = resolve_glLineWidthxOES();
	piglit_dispatch_glLineWidthxOES(width);
}

PFNGLLINEWIDTHXOESPROC piglit_dispatch_glLineWidthxOES = stub_glLineWidthxOES;

static void*
resolve_glLinkProgram(void)
{
	/* glLinkProgram (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glLinkProgram", 20);
	}

	/* glLinkProgram (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glLinkProgram", 20);
	}

	/* glLinkProgramARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glLinkProgramARB");
	}

	unsupported("glLinkProgram");
	return piglit_dispatch_glLinkProgram;
}

static void APIENTRY
stub_glLinkProgram(GLuint program)
{
	check_initialized();
	piglit_dispatch_glLinkProgram = resolve_glLinkProgram();
	piglit_dispatch_glLinkProgram(program);
}

PFNGLLINKPROGRAMPROC piglit_dispatch_glLinkProgram = stub_glLinkProgram;

static void*
resolve_glListBase(void)
{
	/* glListBase (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glListBase", 10);
	}

	unsupported("glListBase");
	return piglit_dispatch_glListBase;
}

static void APIENTRY
stub_glListBase(GLuint base)
{
	check_initialized();
	piglit_dispatch_glListBase = resolve_glListBase();
	piglit_dispatch_glListBase(base);
}

PFNGLLISTBASEPROC piglit_dispatch_glListBase = stub_glListBase;

static void*
resolve_glListParameterfSGIX(void)
{
	/* glListParameterfSGIX (GL_SGIX_list_priority) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_list_priority")) {
		return get_ext_proc("glListParameterfSGIX");
	}

	unsupported("glListParameterfSGIX");
	return piglit_dispatch_glListParameterfSGIX;
}

static void APIENTRY
stub_glListParameterfSGIX(GLuint list, GLenum pname, GLfloat param)
{
	check_initialized();
	piglit_dispatch_glListParameterfSGIX = resolve_glListParameterfSGIX();
	piglit_dispatch_glListParameterfSGIX(list, pname, param);
}

PFNGLLISTPARAMETERFSGIXPROC piglit_dispatch_glListParameterfSGIX = stub_glListParameterfSGIX;

static void*
resolve_glListParameterfvSGIX(void)
{
	/* glListParameterfvSGIX (GL_SGIX_list_priority) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_list_priority")) {
		return get_ext_proc("glListParameterfvSGIX");
	}

	unsupported("glListParameterfvSGIX");
	return piglit_dispatch_glListParameterfvSGIX;
}

static void APIENTRY
stub_glListParameterfvSGIX(GLuint list, GLenum pname, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glListParameterfvSGIX = resolve_glListParameterfvSGIX();
	piglit_dispatch_glListParameterfvSGIX(list, pname, params);
}

PFNGLLISTPARAMETERFVSGIXPROC piglit_dispatch_glListParameterfvSGIX = stub_glListParameterfvSGIX;

static void*
resolve_glListParameteriSGIX(void)
{
	/* glListParameteriSGIX (GL_SGIX_list_priority) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_list_priority")) {
		return get_ext_proc("glListParameteriSGIX");
	}

	unsupported("glListParameteriSGIX");
	return piglit_dispatch_glListParameteriSGIX;
}

static void APIENTRY
stub_glListParameteriSGIX(GLuint list, GLenum pname, GLint param)
{
	check_initialized();
	piglit_dispatch_glListParameteriSGIX = resolve_glListParameteriSGIX();
	piglit_dispatch_glListParameteriSGIX(list, pname, param);
}

PFNGLLISTPARAMETERISGIXPROC piglit_dispatch_glListParameteriSGIX = stub_glListParameteriSGIX;

static void*
resolve_glListParameterivSGIX(void)
{
	/* glListParameterivSGIX (GL_SGIX_list_priority) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_list_priority")) {
		return get_ext_proc("glListParameterivSGIX");
	}

	unsupported("glListParameterivSGIX");
	return piglit_dispatch_glListParameterivSGIX;
}

static void APIENTRY
stub_glListParameterivSGIX(GLuint list, GLenum pname, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glListParameterivSGIX = resolve_glListParameterivSGIX();
	piglit_dispatch_glListParameterivSGIX(list, pname, params);
}

PFNGLLISTPARAMETERIVSGIXPROC piglit_dispatch_glListParameterivSGIX = stub_glListParameterivSGIX;

static void*
resolve_glLoadIdentity(void)
{
	/* glLoadIdentity (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glLoadIdentity", 10);
	}

	/* glLoadIdentity (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glLoadIdentity", 10);
	}

	unsupported("glLoadIdentity");
	return piglit_dispatch_glLoadIdentity;
}

static void APIENTRY
stub_glLoadIdentity()
{
	check_initialized();
	piglit_dispatch_glLoadIdentity = resolve_glLoadIdentity();
	piglit_dispatch_glLoadIdentity();
}

PFNGLLOADIDENTITYPROC piglit_dispatch_glLoadIdentity = stub_glLoadIdentity;

static void*
resolve_glLoadIdentityDeformationMapSGIX(void)
{
	/* glLoadIdentityDeformationMapSGIX (GL_SGIX_polynomial_ffd) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_polynomial_ffd")) {
		return get_ext_proc("glLoadIdentityDeformationMapSGIX");
	}

	unsupported("glLoadIdentityDeformationMapSGIX");
	return piglit_dispatch_glLoadIdentityDeformationMapSGIX;
}

static void APIENTRY
stub_glLoadIdentityDeformationMapSGIX(GLbitfield mask)
{
	check_initialized();
	piglit_dispatch_glLoadIdentityDeformationMapSGIX = resolve_glLoadIdentityDeformationMapSGIX();
	piglit_dispatch_glLoadIdentityDeformationMapSGIX(mask);
}

PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC piglit_dispatch_glLoadIdentityDeformationMapSGIX = stub_glLoadIdentityDeformationMapSGIX;

static void*
resolve_glLoadMatrixd(void)
{
	/* glLoadMatrixd (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glLoadMatrixd", 10);
	}

	unsupported("glLoadMatrixd");
	return piglit_dispatch_glLoadMatrixd;
}

static void APIENTRY
stub_glLoadMatrixd(const GLdouble * m)
{
	check_initialized();
	piglit_dispatch_glLoadMatrixd = resolve_glLoadMatrixd();
	piglit_dispatch_glLoadMatrixd(m);
}

PFNGLLOADMATRIXDPROC piglit_dispatch_glLoadMatrixd = stub_glLoadMatrixd;

static void*
resolve_glLoadMatrixf(void)
{
	/* glLoadMatrixf (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glLoadMatrixf", 10);
	}

	/* glLoadMatrixf (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glLoadMatrixf", 10);
	}

	unsupported("glLoadMatrixf");
	return piglit_dispatch_glLoadMatrixf;
}

static void APIENTRY
stub_glLoadMatrixf(const GLfloat * m)
{
	check_initialized();
	piglit_dispatch_glLoadMatrixf = resolve_glLoadMatrixf();
	piglit_dispatch_glLoadMatrixf(m);
}

PFNGLLOADMATRIXFPROC piglit_dispatch_glLoadMatrixf = stub_glLoadMatrixf;

static void*
resolve_glLoadMatrixx(void)
{
	/* glLoadMatrixx (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glLoadMatrixx", 10);
	}

	unsupported("glLoadMatrixx");
	return piglit_dispatch_glLoadMatrixx;
}

static void APIENTRY
stub_glLoadMatrixx(const GLfixed * m)
{
	check_initialized();
	piglit_dispatch_glLoadMatrixx = resolve_glLoadMatrixx();
	piglit_dispatch_glLoadMatrixx(m);
}

PFNGLLOADMATRIXXPROC piglit_dispatch_glLoadMatrixx = stub_glLoadMatrixx;

static void*
resolve_glLoadMatrixxOES(void)
{
	/* glLoadMatrixxOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glLoadMatrixxOES");
	}

	unsupported("glLoadMatrixxOES");
	return piglit_dispatch_glLoadMatrixxOES;
}

static void APIENTRY
stub_glLoadMatrixxOES(const GLfixed * m)
{
	check_initialized();
	piglit_dispatch_glLoadMatrixxOES = resolve_glLoadMatrixxOES();
	piglit_dispatch_glLoadMatrixxOES(m);
}

PFNGLLOADMATRIXXOESPROC piglit_dispatch_glLoadMatrixxOES = stub_glLoadMatrixxOES;

static void*
resolve_glLoadName(void)
{
	/* glLoadName (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glLoadName", 10);
	}

	unsupported("glLoadName");
	return piglit_dispatch_glLoadName;
}

static void APIENTRY
stub_glLoadName(GLuint name)
{
	check_initialized();
	piglit_dispatch_glLoadName = resolve_glLoadName();
	piglit_dispatch_glLoadName(name);
}

PFNGLLOADNAMEPROC piglit_dispatch_glLoadName = stub_glLoadName;

static void*
resolve_glLoadPaletteFromModelViewMatrixOES(void)
{
	/* glLoadPaletteFromModelViewMatrixOES (GL_OES_matrix_palette) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_matrix_palette")) {
		return get_ext_proc("glLoadPaletteFromModelViewMatrixOES");
	}

	unsupported("glLoadPaletteFromModelViewMatrixOES");
	return piglit_dispatch_glLoadPaletteFromModelViewMatrixOES;
}

static void APIENTRY
stub_glLoadPaletteFromModelViewMatrixOES()
{
	check_initialized();
	piglit_dispatch_glLoadPaletteFromModelViewMatrixOES = resolve_glLoadPaletteFromModelViewMatrixOES();
	piglit_dispatch_glLoadPaletteFromModelViewMatrixOES();
}

PFNGLLOADPALETTEFROMMODELVIEWMATRIXOESPROC piglit_dispatch_glLoadPaletteFromModelViewMatrixOES = stub_glLoadPaletteFromModelViewMatrixOES;

static void*
resolve_glLoadProgramNV(void)
{
	/* glLoadProgramNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glLoadProgramNV");
	}

	unsupported("glLoadProgramNV");
	return piglit_dispatch_glLoadProgramNV;
}

static void APIENTRY
stub_glLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte * program)
{
	check_initialized();
	piglit_dispatch_glLoadProgramNV = resolve_glLoadProgramNV();
	piglit_dispatch_glLoadProgramNV(target, id, len, program);
}

PFNGLLOADPROGRAMNVPROC piglit_dispatch_glLoadProgramNV = stub_glLoadProgramNV;

static void*
resolve_glLoadTransposeMatrixd(void)
{
	/* glLoadTransposeMatrixd (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glLoadTransposeMatrixd", 13);
	}

	/* glLoadTransposeMatrixdARB (GL_ARB_transpose_matrix) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_transpose_matrix")) {
		return get_ext_proc("glLoadTransposeMatrixdARB");
	}

	unsupported("glLoadTransposeMatrixd");
	return piglit_dispatch_glLoadTransposeMatrixd;
}

static void APIENTRY
stub_glLoadTransposeMatrixd(const GLdouble * m)
{
	check_initialized();
	piglit_dispatch_glLoadTransposeMatrixd = resolve_glLoadTransposeMatrixd();
	piglit_dispatch_glLoadTransposeMatrixd(m);
}

PFNGLLOADTRANSPOSEMATRIXDPROC piglit_dispatch_glLoadTransposeMatrixd = stub_glLoadTransposeMatrixd;

static void*
resolve_glLoadTransposeMatrixf(void)
{
	/* glLoadTransposeMatrixf (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glLoadTransposeMatrixf", 13);
	}

	/* glLoadTransposeMatrixfARB (GL_ARB_transpose_matrix) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_transpose_matrix")) {
		return get_ext_proc("glLoadTransposeMatrixfARB");
	}

	unsupported("glLoadTransposeMatrixf");
	return piglit_dispatch_glLoadTransposeMatrixf;
}

static void APIENTRY
stub_glLoadTransposeMatrixf(const GLfloat * m)
{
	check_initialized();
	piglit_dispatch_glLoadTransposeMatrixf = resolve_glLoadTransposeMatrixf();
	piglit_dispatch_glLoadTransposeMatrixf(m);
}

PFNGLLOADTRANSPOSEMATRIXFPROC piglit_dispatch_glLoadTransposeMatrixf = stub_glLoadTransposeMatrixf;

static void*
resolve_glLoadTransposeMatrixxOES(void)
{
	/* glLoadTransposeMatrixxOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glLoadTransposeMatrixxOES");
	}

	unsupported("glLoadTransposeMatrixxOES");
	return piglit_dispatch_glLoadTransposeMatrixxOES;
}

static void APIENTRY
stub_glLoadTransposeMatrixxOES(const GLfixed * m)
{
	check_initialized();
	piglit_dispatch_glLoadTransposeMatrixxOES = resolve_glLoadTransposeMatrixxOES();
	piglit_dispatch_glLoadTransposeMatrixxOES(m);
}

PFNGLLOADTRANSPOSEMATRIXXOESPROC piglit_dispatch_glLoadTransposeMatrixxOES = stub_glLoadTransposeMatrixxOES;

static void*
resolve_glLockArraysEXT(void)
{
	/* glLockArraysEXT (GL_EXT_compiled_vertex_array) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_compiled_vertex_array")) {
		return get_ext_proc("glLockArraysEXT");
	}

	unsupported("glLockArraysEXT");
	return piglit_dispatch_glLockArraysEXT;
}

static void APIENTRY
stub_glLockArraysEXT(GLint first, GLsizei count)
{
	check_initialized();
	piglit_dispatch_glLockArraysEXT = resolve_glLockArraysEXT();
	piglit_dispatch_glLockArraysEXT(first, count);
}

PFNGLLOCKARRAYSEXTPROC piglit_dispatch_glLockArraysEXT = stub_glLockArraysEXT;

static void*
resolve_glLogicOp(void)
{
	/* glLogicOp (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glLogicOp", 10);
	}

	/* glLogicOp (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glLogicOp", 10);
	}

	unsupported("glLogicOp");
	return piglit_dispatch_glLogicOp;
}

static void APIENTRY
stub_glLogicOp(GLenum opcode)
{
	check_initialized();
	piglit_dispatch_glLogicOp = resolve_glLogicOp();
	piglit_dispatch_glLogicOp(opcode);
}

PFNGLLOGICOPPROC piglit_dispatch_glLogicOp = stub_glLogicOp;

static void*
resolve_glMakeBufferNonResidentNV(void)
{
	/* glMakeBufferNonResidentNV (GL_NV_shader_buffer_load) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_shader_buffer_load")) {
		return get_ext_proc("glMakeBufferNonResidentNV");
	}

	unsupported("glMakeBufferNonResidentNV");
	return piglit_dispatch_glMakeBufferNonResidentNV;
}

static void APIENTRY
stub_glMakeBufferNonResidentNV(GLenum target)
{
	check_initialized();
	piglit_dispatch_glMakeBufferNonResidentNV = resolve_glMakeBufferNonResidentNV();
	piglit_dispatch_glMakeBufferNonResidentNV(target);
}

PFNGLMAKEBUFFERNONRESIDENTNVPROC piglit_dispatch_glMakeBufferNonResidentNV = stub_glMakeBufferNonResidentNV;

static void*
resolve_glMakeBufferResidentNV(void)
{
	/* glMakeBufferResidentNV (GL_NV_shader_buffer_load) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_shader_buffer_load")) {
		return get_ext_proc("glMakeBufferResidentNV");
	}

	unsupported("glMakeBufferResidentNV");
	return piglit_dispatch_glMakeBufferResidentNV;
}

static void APIENTRY
stub_glMakeBufferResidentNV(GLenum target, GLenum access)
{
	check_initialized();
	piglit_dispatch_glMakeBufferResidentNV = resolve_glMakeBufferResidentNV();
	piglit_dispatch_glMakeBufferResidentNV(target, access);
}

PFNGLMAKEBUFFERRESIDENTNVPROC piglit_dispatch_glMakeBufferResidentNV = stub_glMakeBufferResidentNV;

static void*
resolve_glMakeImageHandleNonResidentARB(void)
{
	/* glMakeImageHandleNonResidentARB (GL_ARB_bindless_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_bindless_texture")) {
		return get_ext_proc("glMakeImageHandleNonResidentARB");
	}

	unsupported("glMakeImageHandleNonResidentARB");
	return piglit_dispatch_glMakeImageHandleNonResidentARB;
}

static void APIENTRY
stub_glMakeImageHandleNonResidentARB(GLuint64 handle)
{
	check_initialized();
	piglit_dispatch_glMakeImageHandleNonResidentARB = resolve_glMakeImageHandleNonResidentARB();
	piglit_dispatch_glMakeImageHandleNonResidentARB(handle);
}

PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC piglit_dispatch_glMakeImageHandleNonResidentARB = stub_glMakeImageHandleNonResidentARB;

static void*
resolve_glMakeImageHandleNonResidentNV(void)
{
	/* glMakeImageHandleNonResidentNV (GL_NV_bindless_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_bindless_texture")) {
		return get_ext_proc("glMakeImageHandleNonResidentNV");
	}

	unsupported("glMakeImageHandleNonResidentNV");
	return piglit_dispatch_glMakeImageHandleNonResidentNV;
}

static void APIENTRY
stub_glMakeImageHandleNonResidentNV(GLuint64 handle)
{
	check_initialized();
	piglit_dispatch_glMakeImageHandleNonResidentNV = resolve_glMakeImageHandleNonResidentNV();
	piglit_dispatch_glMakeImageHandleNonResidentNV(handle);
}

PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC piglit_dispatch_glMakeImageHandleNonResidentNV = stub_glMakeImageHandleNonResidentNV;

static void*
resolve_glMakeImageHandleResidentARB(void)
{
	/* glMakeImageHandleResidentARB (GL_ARB_bindless_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_bindless_texture")) {
		return get_ext_proc("glMakeImageHandleResidentARB");
	}

	unsupported("glMakeImageHandleResidentARB");
	return piglit_dispatch_glMakeImageHandleResidentARB;
}

static void APIENTRY
stub_glMakeImageHandleResidentARB(GLuint64 handle, GLenum access)
{
	check_initialized();
	piglit_dispatch_glMakeImageHandleResidentARB = resolve_glMakeImageHandleResidentARB();
	piglit_dispatch_glMakeImageHandleResidentARB(handle, access);
}

PFNGLMAKEIMAGEHANDLERESIDENTARBPROC piglit_dispatch_glMakeImageHandleResidentARB = stub_glMakeImageHandleResidentARB;

static void*
resolve_glMakeImageHandleResidentNV(void)
{
	/* glMakeImageHandleResidentNV (GL_NV_bindless_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_bindless_texture")) {
		return get_ext_proc("glMakeImageHandleResidentNV");
	}

	unsupported("glMakeImageHandleResidentNV");
	return piglit_dispatch_glMakeImageHandleResidentNV;
}

static void APIENTRY
stub_glMakeImageHandleResidentNV(GLuint64 handle, GLenum access)
{
	check_initialized();
	piglit_dispatch_glMakeImageHandleResidentNV = resolve_glMakeImageHandleResidentNV();
	piglit_dispatch_glMakeImageHandleResidentNV(handle, access);
}

PFNGLMAKEIMAGEHANDLERESIDENTNVPROC piglit_dispatch_glMakeImageHandleResidentNV = stub_glMakeImageHandleResidentNV;

static void*
resolve_glMakeNamedBufferNonResidentNV(void)
{
	/* glMakeNamedBufferNonResidentNV (GL_NV_shader_buffer_load) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_shader_buffer_load")) {
		return get_ext_proc("glMakeNamedBufferNonResidentNV");
	}

	unsupported("glMakeNamedBufferNonResidentNV");
	return piglit_dispatch_glMakeNamedBufferNonResidentNV;
}

static void APIENTRY
stub_glMakeNamedBufferNonResidentNV(GLuint buffer)
{
	check_initialized();
	piglit_dispatch_glMakeNamedBufferNonResidentNV = resolve_glMakeNamedBufferNonResidentNV();
	piglit_dispatch_glMakeNamedBufferNonResidentNV(buffer);
}

PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC piglit_dispatch_glMakeNamedBufferNonResidentNV = stub_glMakeNamedBufferNonResidentNV;

static void*
resolve_glMakeNamedBufferResidentNV(void)
{
	/* glMakeNamedBufferResidentNV (GL_NV_shader_buffer_load) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_shader_buffer_load")) {
		return get_ext_proc("glMakeNamedBufferResidentNV");
	}

	unsupported("glMakeNamedBufferResidentNV");
	return piglit_dispatch_glMakeNamedBufferResidentNV;
}

static void APIENTRY
stub_glMakeNamedBufferResidentNV(GLuint buffer, GLenum access)
{
	check_initialized();
	piglit_dispatch_glMakeNamedBufferResidentNV = resolve_glMakeNamedBufferResidentNV();
	piglit_dispatch_glMakeNamedBufferResidentNV(buffer, access);
}

PFNGLMAKENAMEDBUFFERRESIDENTNVPROC piglit_dispatch_glMakeNamedBufferResidentNV = stub_glMakeNamedBufferResidentNV;

static void*
resolve_glMakeTextureHandleNonResidentARB(void)
{
	/* glMakeTextureHandleNonResidentARB (GL_ARB_bindless_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_bindless_texture")) {
		return get_ext_proc("glMakeTextureHandleNonResidentARB");
	}

	unsupported("glMakeTextureHandleNonResidentARB");
	return piglit_dispatch_glMakeTextureHandleNonResidentARB;
}

static void APIENTRY
stub_glMakeTextureHandleNonResidentARB(GLuint64 handle)
{
	check_initialized();
	piglit_dispatch_glMakeTextureHandleNonResidentARB = resolve_glMakeTextureHandleNonResidentARB();
	piglit_dispatch_glMakeTextureHandleNonResidentARB(handle);
}

PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC piglit_dispatch_glMakeTextureHandleNonResidentARB = stub_glMakeTextureHandleNonResidentARB;

static void*
resolve_glMakeTextureHandleNonResidentNV(void)
{
	/* glMakeTextureHandleNonResidentNV (GL_NV_bindless_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_bindless_texture")) {
		return get_ext_proc("glMakeTextureHandleNonResidentNV");
	}

	unsupported("glMakeTextureHandleNonResidentNV");
	return piglit_dispatch_glMakeTextureHandleNonResidentNV;
}

static void APIENTRY
stub_glMakeTextureHandleNonResidentNV(GLuint64 handle)
{
	check_initialized();
	piglit_dispatch_glMakeTextureHandleNonResidentNV = resolve_glMakeTextureHandleNonResidentNV();
	piglit_dispatch_glMakeTextureHandleNonResidentNV(handle);
}

PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC piglit_dispatch_glMakeTextureHandleNonResidentNV = stub_glMakeTextureHandleNonResidentNV;

static void*
resolve_glMakeTextureHandleResidentARB(void)
{
	/* glMakeTextureHandleResidentARB (GL_ARB_bindless_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_bindless_texture")) {
		return get_ext_proc("glMakeTextureHandleResidentARB");
	}

	unsupported("glMakeTextureHandleResidentARB");
	return piglit_dispatch_glMakeTextureHandleResidentARB;
}

static void APIENTRY
stub_glMakeTextureHandleResidentARB(GLuint64 handle)
{
	check_initialized();
	piglit_dispatch_glMakeTextureHandleResidentARB = resolve_glMakeTextureHandleResidentARB();
	piglit_dispatch_glMakeTextureHandleResidentARB(handle);
}

PFNGLMAKETEXTUREHANDLERESIDENTARBPROC piglit_dispatch_glMakeTextureHandleResidentARB = stub_glMakeTextureHandleResidentARB;

static void*
resolve_glMakeTextureHandleResidentNV(void)
{
	/* glMakeTextureHandleResidentNV (GL_NV_bindless_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_bindless_texture")) {
		return get_ext_proc("glMakeTextureHandleResidentNV");
	}

	unsupported("glMakeTextureHandleResidentNV");
	return piglit_dispatch_glMakeTextureHandleResidentNV;
}

static void APIENTRY
stub_glMakeTextureHandleResidentNV(GLuint64 handle)
{
	check_initialized();
	piglit_dispatch_glMakeTextureHandleResidentNV = resolve_glMakeTextureHandleResidentNV();
	piglit_dispatch_glMakeTextureHandleResidentNV(handle);
}

PFNGLMAKETEXTUREHANDLERESIDENTNVPROC piglit_dispatch_glMakeTextureHandleResidentNV = stub_glMakeTextureHandleResidentNV;

static void*
resolve_glMap1d(void)
{
	/* glMap1d (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glMap1d", 10);
	}

	unsupported("glMap1d");
	return piglit_dispatch_glMap1d;
}

static void APIENTRY
stub_glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points)
{
	check_initialized();
	piglit_dispatch_glMap1d = resolve_glMap1d();
	piglit_dispatch_glMap1d(target, u1, u2, stride, order, points);
}

PFNGLMAP1DPROC piglit_dispatch_glMap1d = stub_glMap1d;

static void*
resolve_glMap1f(void)
{
	/* glMap1f (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glMap1f", 10);
	}

	unsupported("glMap1f");
	return piglit_dispatch_glMap1f;
}

static void APIENTRY
stub_glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points)
{
	check_initialized();
	piglit_dispatch_glMap1f = resolve_glMap1f();
	piglit_dispatch_glMap1f(target, u1, u2, stride, order, points);
}

PFNGLMAP1FPROC piglit_dispatch_glMap1f = stub_glMap1f;

static void*
resolve_glMap1xOES(void)
{
	/* glMap1xOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glMap1xOES");
	}

	unsupported("glMap1xOES");
	return piglit_dispatch_glMap1xOES;
}

static void APIENTRY
stub_glMap1xOES(GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points)
{
	check_initialized();
	piglit_dispatch_glMap1xOES = resolve_glMap1xOES();
	piglit_dispatch_glMap1xOES(target, u1, u2, stride, order, points);
}

PFNGLMAP1XOESPROC piglit_dispatch_glMap1xOES = stub_glMap1xOES;

static void*
resolve_glMap2d(void)
{
	/* glMap2d (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glMap2d", 10);
	}

	unsupported("glMap2d");
	return piglit_dispatch_glMap2d;
}

static void APIENTRY
stub_glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points)
{
	check_initialized();
	piglit_dispatch_glMap2d = resolve_glMap2d();
	piglit_dispatch_glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

PFNGLMAP2DPROC piglit_dispatch_glMap2d = stub_glMap2d;

static void*
resolve_glMap2f(void)
{
	/* glMap2f (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glMap2f", 10);
	}

	unsupported("glMap2f");
	return piglit_dispatch_glMap2f;
}

static void APIENTRY
stub_glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points)
{
	check_initialized();
	piglit_dispatch_glMap2f = resolve_glMap2f();
	piglit_dispatch_glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

PFNGLMAP2FPROC piglit_dispatch_glMap2f = stub_glMap2f;

static void*
resolve_glMap2xOES(void)
{
	/* glMap2xOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glMap2xOES");
	}

	unsupported("glMap2xOES");
	return piglit_dispatch_glMap2xOES;
}

static void APIENTRY
stub_glMap2xOES(GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points)
{
	check_initialized();
	piglit_dispatch_glMap2xOES = resolve_glMap2xOES();
	piglit_dispatch_glMap2xOES(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

PFNGLMAP2XOESPROC piglit_dispatch_glMap2xOES = stub_glMap2xOES;

static void*
resolve_glMapBuffer(void)
{
	/* glMapBuffer (GL_VERSION_1_5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMapBuffer", 15);
	}

	/* glMapBufferARB (GL_ARB_vertex_buffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_buffer_object")) {
		return get_ext_proc("glMapBufferARB");
	}

	/* glMapBufferOES (GL_OES_mapbuffer) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_OES_mapbuffer")) {
		return get_ext_proc("glMapBufferOES");
	}

	unsupported("glMapBuffer");
	return piglit_dispatch_glMapBuffer;
}

static void * APIENTRY
stub_glMapBuffer(GLenum target, GLenum access)
{
	check_initialized();
	piglit_dispatch_glMapBuffer = resolve_glMapBuffer();
	return piglit_dispatch_glMapBuffer(target, access);
}

PFNGLMAPBUFFERPROC piglit_dispatch_glMapBuffer = stub_glMapBuffer;

static void*
resolve_glMapBufferRange(void)
{
	/* glMapBufferRange (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMapBufferRange", 30);
	}

	/* glMapBufferRange (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glMapBufferRange", 30);
	}

	/* glMapBufferRange (GL_ARB_map_buffer_range) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_map_buffer_range")) {
		return get_ext_proc("glMapBufferRange");
	}

	/* glMapBufferRangeEXT (GL_EXT_map_buffer_range) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_map_buffer_range")) {
		return get_ext_proc("glMapBufferRangeEXT");
	}

	unsupported("glMapBufferRange");
	return piglit_dispatch_glMapBufferRange;
}

static void * APIENTRY
stub_glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
	check_initialized();
	piglit_dispatch_glMapBufferRange = resolve_glMapBufferRange();
	return piglit_dispatch_glMapBufferRange(target, offset, length, access);
}

PFNGLMAPBUFFERRANGEPROC piglit_dispatch_glMapBufferRange = stub_glMapBufferRange;

static void*
resolve_glMapControlPointsNV(void)
{
	/* glMapControlPointsNV (GL_NV_evaluators) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_evaluators")) {
		return get_ext_proc("glMapControlPointsNV");
	}

	unsupported("glMapControlPointsNV");
	return piglit_dispatch_glMapControlPointsNV;
}

static void APIENTRY
stub_glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void * points)
{
	check_initialized();
	piglit_dispatch_glMapControlPointsNV = resolve_glMapControlPointsNV();
	piglit_dispatch_glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points);
}

PFNGLMAPCONTROLPOINTSNVPROC piglit_dispatch_glMapControlPointsNV = stub_glMapControlPointsNV;

static void*
resolve_glMapGrid1d(void)
{
	/* glMapGrid1d (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glMapGrid1d", 10);
	}

	unsupported("glMapGrid1d");
	return piglit_dispatch_glMapGrid1d;
}

static void APIENTRY
stub_glMapGrid1d(GLint un, GLdouble u1, GLdouble u2)
{
	check_initialized();
	piglit_dispatch_glMapGrid1d = resolve_glMapGrid1d();
	piglit_dispatch_glMapGrid1d(un, u1, u2);
}

PFNGLMAPGRID1DPROC piglit_dispatch_glMapGrid1d = stub_glMapGrid1d;

static void*
resolve_glMapGrid1f(void)
{
	/* glMapGrid1f (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glMapGrid1f", 10);
	}

	unsupported("glMapGrid1f");
	return piglit_dispatch_glMapGrid1f;
}

static void APIENTRY
stub_glMapGrid1f(GLint un, GLfloat u1, GLfloat u2)
{
	check_initialized();
	piglit_dispatch_glMapGrid1f = resolve_glMapGrid1f();
	piglit_dispatch_glMapGrid1f(un, u1, u2);
}

PFNGLMAPGRID1FPROC piglit_dispatch_glMapGrid1f = stub_glMapGrid1f;

static void*
resolve_glMapGrid1xOES(void)
{
	/* glMapGrid1xOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glMapGrid1xOES");
	}

	unsupported("glMapGrid1xOES");
	return piglit_dispatch_glMapGrid1xOES;
}

static void APIENTRY
stub_glMapGrid1xOES(GLint n, GLfixed u1, GLfixed u2)
{
	check_initialized();
	piglit_dispatch_glMapGrid1xOES = resolve_glMapGrid1xOES();
	piglit_dispatch_glMapGrid1xOES(n, u1, u2);
}

PFNGLMAPGRID1XOESPROC piglit_dispatch_glMapGrid1xOES = stub_glMapGrid1xOES;

static void*
resolve_glMapGrid2d(void)
{
	/* glMapGrid2d (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glMapGrid2d", 10);
	}

	unsupported("glMapGrid2d");
	return piglit_dispatch_glMapGrid2d;
}

static void APIENTRY
stub_glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)
{
	check_initialized();
	piglit_dispatch_glMapGrid2d = resolve_glMapGrid2d();
	piglit_dispatch_glMapGrid2d(un, u1, u2, vn, v1, v2);
}

PFNGLMAPGRID2DPROC piglit_dispatch_glMapGrid2d = stub_glMapGrid2d;

static void*
resolve_glMapGrid2f(void)
{
	/* glMapGrid2f (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glMapGrid2f", 10);
	}

	unsupported("glMapGrid2f");
	return piglit_dispatch_glMapGrid2f;
}

static void APIENTRY
stub_glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)
{
	check_initialized();
	piglit_dispatch_glMapGrid2f = resolve_glMapGrid2f();
	piglit_dispatch_glMapGrid2f(un, u1, u2, vn, v1, v2);
}

PFNGLMAPGRID2FPROC piglit_dispatch_glMapGrid2f = stub_glMapGrid2f;

static void*
resolve_glMapGrid2xOES(void)
{
	/* glMapGrid2xOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glMapGrid2xOES");
	}

	unsupported("glMapGrid2xOES");
	return piglit_dispatch_glMapGrid2xOES;
}

static void APIENTRY
stub_glMapGrid2xOES(GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2)
{
	check_initialized();
	piglit_dispatch_glMapGrid2xOES = resolve_glMapGrid2xOES();
	piglit_dispatch_glMapGrid2xOES(n, u1, u2, v1, v2);
}

PFNGLMAPGRID2XOESPROC piglit_dispatch_glMapGrid2xOES = stub_glMapGrid2xOES;

static void*
resolve_glMapNamedBufferEXT(void)
{
	/* glMapNamedBufferEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMapNamedBufferEXT");
	}

	unsupported("glMapNamedBufferEXT");
	return piglit_dispatch_glMapNamedBufferEXT;
}

static void * APIENTRY
stub_glMapNamedBufferEXT(GLuint buffer, GLenum access)
{
	check_initialized();
	piglit_dispatch_glMapNamedBufferEXT = resolve_glMapNamedBufferEXT();
	return piglit_dispatch_glMapNamedBufferEXT(buffer, access);
}

PFNGLMAPNAMEDBUFFEREXTPROC piglit_dispatch_glMapNamedBufferEXT = stub_glMapNamedBufferEXT;

static void*
resolve_glMapNamedBufferRangeEXT(void)
{
	/* glMapNamedBufferRangeEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMapNamedBufferRangeEXT");
	}

	unsupported("glMapNamedBufferRangeEXT");
	return piglit_dispatch_glMapNamedBufferRangeEXT;
}

static void * APIENTRY
stub_glMapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
	check_initialized();
	piglit_dispatch_glMapNamedBufferRangeEXT = resolve_glMapNamedBufferRangeEXT();
	return piglit_dispatch_glMapNamedBufferRangeEXT(buffer, offset, length, access);
}

PFNGLMAPNAMEDBUFFERRANGEEXTPROC piglit_dispatch_glMapNamedBufferRangeEXT = stub_glMapNamedBufferRangeEXT;

static void*
resolve_glMapObjectBufferATI(void)
{
	/* glMapObjectBufferATI (GL_ATI_map_object_buffer) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_map_object_buffer")) {
		return get_ext_proc("glMapObjectBufferATI");
	}

	unsupported("glMapObjectBufferATI");
	return piglit_dispatch_glMapObjectBufferATI;
}

static void * APIENTRY
stub_glMapObjectBufferATI(GLuint buffer)
{
	check_initialized();
	piglit_dispatch_glMapObjectBufferATI = resolve_glMapObjectBufferATI();
	return piglit_dispatch_glMapObjectBufferATI(buffer);
}

PFNGLMAPOBJECTBUFFERATIPROC piglit_dispatch_glMapObjectBufferATI = stub_glMapObjectBufferATI;

static void*
resolve_glMapParameterfvNV(void)
{
	/* glMapParameterfvNV (GL_NV_evaluators) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_evaluators")) {
		return get_ext_proc("glMapParameterfvNV");
	}

	unsupported("glMapParameterfvNV");
	return piglit_dispatch_glMapParameterfvNV;
}

static void APIENTRY
stub_glMapParameterfvNV(GLenum target, GLenum pname, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glMapParameterfvNV = resolve_glMapParameterfvNV();
	piglit_dispatch_glMapParameterfvNV(target, pname, params);
}

PFNGLMAPPARAMETERFVNVPROC piglit_dispatch_glMapParameterfvNV = stub_glMapParameterfvNV;

static void*
resolve_glMapParameterivNV(void)
{
	/* glMapParameterivNV (GL_NV_evaluators) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_evaluators")) {
		return get_ext_proc("glMapParameterivNV");
	}

	unsupported("glMapParameterivNV");
	return piglit_dispatch_glMapParameterivNV;
}

static void APIENTRY
stub_glMapParameterivNV(GLenum target, GLenum pname, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glMapParameterivNV = resolve_glMapParameterivNV();
	piglit_dispatch_glMapParameterivNV(target, pname, params);
}

PFNGLMAPPARAMETERIVNVPROC piglit_dispatch_glMapParameterivNV = stub_glMapParameterivNV;

static void*
resolve_glMapTexture2DINTEL(void)
{
	/* glMapTexture2DINTEL (GL_INTEL_map_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_INTEL_map_texture")) {
		return get_ext_proc("glMapTexture2DINTEL");
	}

	unsupported("glMapTexture2DINTEL");
	return piglit_dispatch_glMapTexture2DINTEL;
}

static void * APIENTRY
stub_glMapTexture2DINTEL(GLuint texture, GLint level, GLbitfield access, GLint * stride, GLenum * layout)
{
	check_initialized();
	piglit_dispatch_glMapTexture2DINTEL = resolve_glMapTexture2DINTEL();
	return piglit_dispatch_glMapTexture2DINTEL(texture, level, access, stride, layout);
}

PFNGLMAPTEXTURE2DINTELPROC piglit_dispatch_glMapTexture2DINTEL = stub_glMapTexture2DINTEL;

static void*
resolve_glMapVertexAttrib1dAPPLE(void)
{
	/* glMapVertexAttrib1dAPPLE (GL_APPLE_vertex_program_evaluators) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_APPLE_vertex_program_evaluators")) {
		return get_ext_proc("glMapVertexAttrib1dAPPLE");
	}

	unsupported("glMapVertexAttrib1dAPPLE");
	return piglit_dispatch_glMapVertexAttrib1dAPPLE;
}

static void APIENTRY
stub_glMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points)
{
	check_initialized();
	piglit_dispatch_glMapVertexAttrib1dAPPLE = resolve_glMapVertexAttrib1dAPPLE();
	piglit_dispatch_glMapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points);
}

PFNGLMAPVERTEXATTRIB1DAPPLEPROC piglit_dispatch_glMapVertexAttrib1dAPPLE = stub_glMapVertexAttrib1dAPPLE;

static void*
resolve_glMapVertexAttrib1fAPPLE(void)
{
	/* glMapVertexAttrib1fAPPLE (GL_APPLE_vertex_program_evaluators) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_APPLE_vertex_program_evaluators")) {
		return get_ext_proc("glMapVertexAttrib1fAPPLE");
	}

	unsupported("glMapVertexAttrib1fAPPLE");
	return piglit_dispatch_glMapVertexAttrib1fAPPLE;
}

static void APIENTRY
stub_glMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points)
{
	check_initialized();
	piglit_dispatch_glMapVertexAttrib1fAPPLE = resolve_glMapVertexAttrib1fAPPLE();
	piglit_dispatch_glMapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points);
}

PFNGLMAPVERTEXATTRIB1FAPPLEPROC piglit_dispatch_glMapVertexAttrib1fAPPLE = stub_glMapVertexAttrib1fAPPLE;

static void*
resolve_glMapVertexAttrib2dAPPLE(void)
{
	/* glMapVertexAttrib2dAPPLE (GL_APPLE_vertex_program_evaluators) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_APPLE_vertex_program_evaluators")) {
		return get_ext_proc("glMapVertexAttrib2dAPPLE");
	}

	unsupported("glMapVertexAttrib2dAPPLE");
	return piglit_dispatch_glMapVertexAttrib2dAPPLE;
}

static void APIENTRY
stub_glMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points)
{
	check_initialized();
	piglit_dispatch_glMapVertexAttrib2dAPPLE = resolve_glMapVertexAttrib2dAPPLE();
	piglit_dispatch_glMapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

PFNGLMAPVERTEXATTRIB2DAPPLEPROC piglit_dispatch_glMapVertexAttrib2dAPPLE = stub_glMapVertexAttrib2dAPPLE;

static void*
resolve_glMapVertexAttrib2fAPPLE(void)
{
	/* glMapVertexAttrib2fAPPLE (GL_APPLE_vertex_program_evaluators) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_APPLE_vertex_program_evaluators")) {
		return get_ext_proc("glMapVertexAttrib2fAPPLE");
	}

	unsupported("glMapVertexAttrib2fAPPLE");
	return piglit_dispatch_glMapVertexAttrib2fAPPLE;
}

static void APIENTRY
stub_glMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points)
{
	check_initialized();
	piglit_dispatch_glMapVertexAttrib2fAPPLE = resolve_glMapVertexAttrib2fAPPLE();
	piglit_dispatch_glMapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

PFNGLMAPVERTEXATTRIB2FAPPLEPROC piglit_dispatch_glMapVertexAttrib2fAPPLE = stub_glMapVertexAttrib2fAPPLE;

static void*
resolve_glMaterialf(void)
{
	/* glMaterialf (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glMaterialf", 10);
	}

	/* glMaterialf (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glMaterialf", 10);
	}

	unsupported("glMaterialf");
	return piglit_dispatch_glMaterialf;
}

static void APIENTRY
stub_glMaterialf(GLenum face, GLenum pname, GLfloat param)
{
	check_initialized();
	piglit_dispatch_glMaterialf = resolve_glMaterialf();
	piglit_dispatch_glMaterialf(face, pname, param);
}

PFNGLMATERIALFPROC piglit_dispatch_glMaterialf = stub_glMaterialf;

static void*
resolve_glMaterialfv(void)
{
	/* glMaterialfv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glMaterialfv", 10);
	}

	/* glMaterialfv (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glMaterialfv", 10);
	}

	unsupported("glMaterialfv");
	return piglit_dispatch_glMaterialfv;
}

static void APIENTRY
stub_glMaterialfv(GLenum face, GLenum pname, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glMaterialfv = resolve_glMaterialfv();
	piglit_dispatch_glMaterialfv(face, pname, params);
}

PFNGLMATERIALFVPROC piglit_dispatch_glMaterialfv = stub_glMaterialfv;

static void*
resolve_glMateriali(void)
{
	/* glMateriali (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glMateriali", 10);
	}

	unsupported("glMateriali");
	return piglit_dispatch_glMateriali;
}

static void APIENTRY
stub_glMateriali(GLenum face, GLenum pname, GLint param)
{
	check_initialized();
	piglit_dispatch_glMateriali = resolve_glMateriali();
	piglit_dispatch_glMateriali(face, pname, param);
}

PFNGLMATERIALIPROC piglit_dispatch_glMateriali = stub_glMateriali;

static void*
resolve_glMaterialiv(void)
{
	/* glMaterialiv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glMaterialiv", 10);
	}

	unsupported("glMaterialiv");
	return piglit_dispatch_glMaterialiv;
}

static void APIENTRY
stub_glMaterialiv(GLenum face, GLenum pname, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glMaterialiv = resolve_glMaterialiv();
	piglit_dispatch_glMaterialiv(face, pname, params);
}

PFNGLMATERIALIVPROC piglit_dispatch_glMaterialiv = stub_glMaterialiv;

static void*
resolve_glMaterialx(void)
{
	/* glMaterialx (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glMaterialx", 10);
	}

	unsupported("glMaterialx");
	return piglit_dispatch_glMaterialx;
}

static void APIENTRY
stub_glMaterialx(GLenum face, GLenum pname, GLfixed param)
{
	check_initialized();
	piglit_dispatch_glMaterialx = resolve_glMaterialx();
	piglit_dispatch_glMaterialx(face, pname, param);
}

PFNGLMATERIALXPROC piglit_dispatch_glMaterialx = stub_glMaterialx;

static void*
resolve_glMaterialxOES(void)
{
	/* glMaterialxOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glMaterialxOES");
	}

	unsupported("glMaterialxOES");
	return piglit_dispatch_glMaterialxOES;
}

static void APIENTRY
stub_glMaterialxOES(GLenum face, GLenum pname, GLfixed param)
{
	check_initialized();
	piglit_dispatch_glMaterialxOES = resolve_glMaterialxOES();
	piglit_dispatch_glMaterialxOES(face, pname, param);
}

PFNGLMATERIALXOESPROC piglit_dispatch_glMaterialxOES = stub_glMaterialxOES;

static void*
resolve_glMaterialxv(void)
{
	/* glMaterialxv (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glMaterialxv", 10);
	}

	unsupported("glMaterialxv");
	return piglit_dispatch_glMaterialxv;
}

static void APIENTRY
stub_glMaterialxv(GLenum face, GLenum pname, const GLfixed * param)
{
	check_initialized();
	piglit_dispatch_glMaterialxv = resolve_glMaterialxv();
	piglit_dispatch_glMaterialxv(face, pname, param);
}

PFNGLMATERIALXVPROC piglit_dispatch_glMaterialxv = stub_glMaterialxv;

static void*
resolve_glMaterialxvOES(void)
{
	/* glMaterialxvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glMaterialxvOES");
	}

	unsupported("glMaterialxvOES");
	return piglit_dispatch_glMaterialxvOES;
}

static void APIENTRY
stub_glMaterialxvOES(GLenum face, GLenum pname, const GLfixed * param)
{
	check_initialized();
	piglit_dispatch_glMaterialxvOES = resolve_glMaterialxvOES();
	piglit_dispatch_glMaterialxvOES(face, pname, param);
}

PFNGLMATERIALXVOESPROC piglit_dispatch_glMaterialxvOES = stub_glMaterialxvOES;

static void*
resolve_glMatrixFrustumEXT(void)
{
	/* glMatrixFrustumEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMatrixFrustumEXT");
	}

	unsupported("glMatrixFrustumEXT");
	return piglit_dispatch_glMatrixFrustumEXT;
}

static void APIENTRY
stub_glMatrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
	check_initialized();
	piglit_dispatch_glMatrixFrustumEXT = resolve_glMatrixFrustumEXT();
	piglit_dispatch_glMatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar);
}

PFNGLMATRIXFRUSTUMEXTPROC piglit_dispatch_glMatrixFrustumEXT = stub_glMatrixFrustumEXT;

static void*
resolve_glMatrixIndexPointerARB(void)
{
	/* glMatrixIndexPointerARB (GL_ARB_matrix_palette) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_matrix_palette")) {
		return get_ext_proc("glMatrixIndexPointerARB");
	}

	unsupported("glMatrixIndexPointerARB");
	return piglit_dispatch_glMatrixIndexPointerARB;
}

static void APIENTRY
stub_glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, const void * pointer)
{
	check_initialized();
	piglit_dispatch_glMatrixIndexPointerARB = resolve_glMatrixIndexPointerARB();
	piglit_dispatch_glMatrixIndexPointerARB(size, type, stride, pointer);
}

PFNGLMATRIXINDEXPOINTERARBPROC piglit_dispatch_glMatrixIndexPointerARB = stub_glMatrixIndexPointerARB;

static void*
resolve_glMatrixIndexPointerOES(void)
{
	/* glMatrixIndexPointerOES (GL_OES_matrix_palette) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_matrix_palette")) {
		return get_ext_proc("glMatrixIndexPointerOES");
	}

	unsupported("glMatrixIndexPointerOES");
	return piglit_dispatch_glMatrixIndexPointerOES;
}

static void APIENTRY
stub_glMatrixIndexPointerOES(GLint size, GLenum type, GLsizei stride, const void * pointer)
{
	check_initialized();
	piglit_dispatch_glMatrixIndexPointerOES = resolve_glMatrixIndexPointerOES();
	piglit_dispatch_glMatrixIndexPointerOES(size, type, stride, pointer);
}

PFNGLMATRIXINDEXPOINTEROESPROC piglit_dispatch_glMatrixIndexPointerOES = stub_glMatrixIndexPointerOES;

static void*
resolve_glMatrixIndexubvARB(void)
{
	/* glMatrixIndexubvARB (GL_ARB_matrix_palette) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_matrix_palette")) {
		return get_ext_proc("glMatrixIndexubvARB");
	}

	unsupported("glMatrixIndexubvARB");
	return piglit_dispatch_glMatrixIndexubvARB;
}

static void APIENTRY
stub_glMatrixIndexubvARB(GLint size, const GLubyte * indices)
{
	check_initialized();
	piglit_dispatch_glMatrixIndexubvARB = resolve_glMatrixIndexubvARB();
	piglit_dispatch_glMatrixIndexubvARB(size, indices);
}

PFNGLMATRIXINDEXUBVARBPROC piglit_dispatch_glMatrixIndexubvARB = stub_glMatrixIndexubvARB;

static void*
resolve_glMatrixIndexuivARB(void)
{
	/* glMatrixIndexuivARB (GL_ARB_matrix_palette) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_matrix_palette")) {
		return get_ext_proc("glMatrixIndexuivARB");
	}

	unsupported("glMatrixIndexuivARB");
	return piglit_dispatch_glMatrixIndexuivARB;
}

static void APIENTRY
stub_glMatrixIndexuivARB(GLint size, const GLuint * indices)
{
	check_initialized();
	piglit_dispatch_glMatrixIndexuivARB = resolve_glMatrixIndexuivARB();
	piglit_dispatch_glMatrixIndexuivARB(size, indices);
}

PFNGLMATRIXINDEXUIVARBPROC piglit_dispatch_glMatrixIndexuivARB = stub_glMatrixIndexuivARB;

static void*
resolve_glMatrixIndexusvARB(void)
{
	/* glMatrixIndexusvARB (GL_ARB_matrix_palette) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_matrix_palette")) {
		return get_ext_proc("glMatrixIndexusvARB");
	}

	unsupported("glMatrixIndexusvARB");
	return piglit_dispatch_glMatrixIndexusvARB;
}

static void APIENTRY
stub_glMatrixIndexusvARB(GLint size, const GLushort * indices)
{
	check_initialized();
	piglit_dispatch_glMatrixIndexusvARB = resolve_glMatrixIndexusvARB();
	piglit_dispatch_glMatrixIndexusvARB(size, indices);
}

PFNGLMATRIXINDEXUSVARBPROC piglit_dispatch_glMatrixIndexusvARB = stub_glMatrixIndexusvARB;

static void*
resolve_glMatrixLoadIdentityEXT(void)
{
	/* glMatrixLoadIdentityEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMatrixLoadIdentityEXT");
	}

	unsupported("glMatrixLoadIdentityEXT");
	return piglit_dispatch_glMatrixLoadIdentityEXT;
}

static void APIENTRY
stub_glMatrixLoadIdentityEXT(GLenum mode)
{
	check_initialized();
	piglit_dispatch_glMatrixLoadIdentityEXT = resolve_glMatrixLoadIdentityEXT();
	piglit_dispatch_glMatrixLoadIdentityEXT(mode);
}

PFNGLMATRIXLOADIDENTITYEXTPROC piglit_dispatch_glMatrixLoadIdentityEXT = stub_glMatrixLoadIdentityEXT;

static void*
resolve_glMatrixLoadTransposedEXT(void)
{
	/* glMatrixLoadTransposedEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMatrixLoadTransposedEXT");
	}

	unsupported("glMatrixLoadTransposedEXT");
	return piglit_dispatch_glMatrixLoadTransposedEXT;
}

static void APIENTRY
stub_glMatrixLoadTransposedEXT(GLenum mode, const GLdouble * m)
{
	check_initialized();
	piglit_dispatch_glMatrixLoadTransposedEXT = resolve_glMatrixLoadTransposedEXT();
	piglit_dispatch_glMatrixLoadTransposedEXT(mode, m);
}

PFNGLMATRIXLOADTRANSPOSEDEXTPROC piglit_dispatch_glMatrixLoadTransposedEXT = stub_glMatrixLoadTransposedEXT;

static void*
resolve_glMatrixLoadTransposefEXT(void)
{
	/* glMatrixLoadTransposefEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMatrixLoadTransposefEXT");
	}

	unsupported("glMatrixLoadTransposefEXT");
	return piglit_dispatch_glMatrixLoadTransposefEXT;
}

static void APIENTRY
stub_glMatrixLoadTransposefEXT(GLenum mode, const GLfloat * m)
{
	check_initialized();
	piglit_dispatch_glMatrixLoadTransposefEXT = resolve_glMatrixLoadTransposefEXT();
	piglit_dispatch_glMatrixLoadTransposefEXT(mode, m);
}

PFNGLMATRIXLOADTRANSPOSEFEXTPROC piglit_dispatch_glMatrixLoadTransposefEXT = stub_glMatrixLoadTransposefEXT;

static void*
resolve_glMatrixLoaddEXT(void)
{
	/* glMatrixLoaddEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMatrixLoaddEXT");
	}

	unsupported("glMatrixLoaddEXT");
	return piglit_dispatch_glMatrixLoaddEXT;
}

static void APIENTRY
stub_glMatrixLoaddEXT(GLenum mode, const GLdouble * m)
{
	check_initialized();
	piglit_dispatch_glMatrixLoaddEXT = resolve_glMatrixLoaddEXT();
	piglit_dispatch_glMatrixLoaddEXT(mode, m);
}

PFNGLMATRIXLOADDEXTPROC piglit_dispatch_glMatrixLoaddEXT = stub_glMatrixLoaddEXT;

static void*
resolve_glMatrixLoadfEXT(void)
{
	/* glMatrixLoadfEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMatrixLoadfEXT");
	}

	unsupported("glMatrixLoadfEXT");
	return piglit_dispatch_glMatrixLoadfEXT;
}

static void APIENTRY
stub_glMatrixLoadfEXT(GLenum mode, const GLfloat * m)
{
	check_initialized();
	piglit_dispatch_glMatrixLoadfEXT = resolve_glMatrixLoadfEXT();
	piglit_dispatch_glMatrixLoadfEXT(mode, m);
}

PFNGLMATRIXLOADFEXTPROC piglit_dispatch_glMatrixLoadfEXT = stub_glMatrixLoadfEXT;

static void*
resolve_glMatrixMode(void)
{
	/* glMatrixMode (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glMatrixMode", 10);
	}

	/* glMatrixMode (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glMatrixMode", 10);
	}

	unsupported("glMatrixMode");
	return piglit_dispatch_glMatrixMode;
}

static void APIENTRY
stub_glMatrixMode(GLenum mode)
{
	check_initialized();
	piglit_dispatch_glMatrixMode = resolve_glMatrixMode();
	piglit_dispatch_glMatrixMode(mode);
}

PFNGLMATRIXMODEPROC piglit_dispatch_glMatrixMode = stub_glMatrixMode;

static void*
resolve_glMatrixMultTransposedEXT(void)
{
	/* glMatrixMultTransposedEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMatrixMultTransposedEXT");
	}

	unsupported("glMatrixMultTransposedEXT");
	return piglit_dispatch_glMatrixMultTransposedEXT;
}

static void APIENTRY
stub_glMatrixMultTransposedEXT(GLenum mode, const GLdouble * m)
{
	check_initialized();
	piglit_dispatch_glMatrixMultTransposedEXT = resolve_glMatrixMultTransposedEXT();
	piglit_dispatch_glMatrixMultTransposedEXT(mode, m);
}

PFNGLMATRIXMULTTRANSPOSEDEXTPROC piglit_dispatch_glMatrixMultTransposedEXT = stub_glMatrixMultTransposedEXT;

static void*
resolve_glMatrixMultTransposefEXT(void)
{
	/* glMatrixMultTransposefEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMatrixMultTransposefEXT");
	}

	unsupported("glMatrixMultTransposefEXT");
	return piglit_dispatch_glMatrixMultTransposefEXT;
}

static void APIENTRY
stub_glMatrixMultTransposefEXT(GLenum mode, const GLfloat * m)
{
	check_initialized();
	piglit_dispatch_glMatrixMultTransposefEXT = resolve_glMatrixMultTransposefEXT();
	piglit_dispatch_glMatrixMultTransposefEXT(mode, m);
}

PFNGLMATRIXMULTTRANSPOSEFEXTPROC piglit_dispatch_glMatrixMultTransposefEXT = stub_glMatrixMultTransposefEXT;

static void*
resolve_glMatrixMultdEXT(void)
{
	/* glMatrixMultdEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMatrixMultdEXT");
	}

	unsupported("glMatrixMultdEXT");
	return piglit_dispatch_glMatrixMultdEXT;
}

static void APIENTRY
stub_glMatrixMultdEXT(GLenum mode, const GLdouble * m)
{
	check_initialized();
	piglit_dispatch_glMatrixMultdEXT = resolve_glMatrixMultdEXT();
	piglit_dispatch_glMatrixMultdEXT(mode, m);
}

PFNGLMATRIXMULTDEXTPROC piglit_dispatch_glMatrixMultdEXT = stub_glMatrixMultdEXT;

static void*
resolve_glMatrixMultfEXT(void)
{
	/* glMatrixMultfEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMatrixMultfEXT");
	}

	unsupported("glMatrixMultfEXT");
	return piglit_dispatch_glMatrixMultfEXT;
}

static void APIENTRY
stub_glMatrixMultfEXT(GLenum mode, const GLfloat * m)
{
	check_initialized();
	piglit_dispatch_glMatrixMultfEXT = resolve_glMatrixMultfEXT();
	piglit_dispatch_glMatrixMultfEXT(mode, m);
}

PFNGLMATRIXMULTFEXTPROC piglit_dispatch_glMatrixMultfEXT = stub_glMatrixMultfEXT;

static void*
resolve_glMatrixOrthoEXT(void)
{
	/* glMatrixOrthoEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMatrixOrthoEXT");
	}

	unsupported("glMatrixOrthoEXT");
	return piglit_dispatch_glMatrixOrthoEXT;
}

static void APIENTRY
stub_glMatrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
	check_initialized();
	piglit_dispatch_glMatrixOrthoEXT = resolve_glMatrixOrthoEXT();
	piglit_dispatch_glMatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar);
}

PFNGLMATRIXORTHOEXTPROC piglit_dispatch_glMatrixOrthoEXT = stub_glMatrixOrthoEXT;

static void*
resolve_glMatrixPopEXT(void)
{
	/* glMatrixPopEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMatrixPopEXT");
	}

	unsupported("glMatrixPopEXT");
	return piglit_dispatch_glMatrixPopEXT;
}

static void APIENTRY
stub_glMatrixPopEXT(GLenum mode)
{
	check_initialized();
	piglit_dispatch_glMatrixPopEXT = resolve_glMatrixPopEXT();
	piglit_dispatch_glMatrixPopEXT(mode);
}

PFNGLMATRIXPOPEXTPROC piglit_dispatch_glMatrixPopEXT = stub_glMatrixPopEXT;

static void*
resolve_glMatrixPushEXT(void)
{
	/* glMatrixPushEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMatrixPushEXT");
	}

	unsupported("glMatrixPushEXT");
	return piglit_dispatch_glMatrixPushEXT;
}

static void APIENTRY
stub_glMatrixPushEXT(GLenum mode)
{
	check_initialized();
	piglit_dispatch_glMatrixPushEXT = resolve_glMatrixPushEXT();
	piglit_dispatch_glMatrixPushEXT(mode);
}

PFNGLMATRIXPUSHEXTPROC piglit_dispatch_glMatrixPushEXT = stub_glMatrixPushEXT;

static void*
resolve_glMatrixRotatedEXT(void)
{
	/* glMatrixRotatedEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMatrixRotatedEXT");
	}

	unsupported("glMatrixRotatedEXT");
	return piglit_dispatch_glMatrixRotatedEXT;
}

static void APIENTRY
stub_glMatrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
	check_initialized();
	piglit_dispatch_glMatrixRotatedEXT = resolve_glMatrixRotatedEXT();
	piglit_dispatch_glMatrixRotatedEXT(mode, angle, x, y, z);
}

PFNGLMATRIXROTATEDEXTPROC piglit_dispatch_glMatrixRotatedEXT = stub_glMatrixRotatedEXT;

static void*
resolve_glMatrixRotatefEXT(void)
{
	/* glMatrixRotatefEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMatrixRotatefEXT");
	}

	unsupported("glMatrixRotatefEXT");
	return piglit_dispatch_glMatrixRotatefEXT;
}

static void APIENTRY
stub_glMatrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
	check_initialized();
	piglit_dispatch_glMatrixRotatefEXT = resolve_glMatrixRotatefEXT();
	piglit_dispatch_glMatrixRotatefEXT(mode, angle, x, y, z);
}

PFNGLMATRIXROTATEFEXTPROC piglit_dispatch_glMatrixRotatefEXT = stub_glMatrixRotatefEXT;

static void*
resolve_glMatrixScaledEXT(void)
{
	/* glMatrixScaledEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMatrixScaledEXT");
	}

	unsupported("glMatrixScaledEXT");
	return piglit_dispatch_glMatrixScaledEXT;
}

static void APIENTRY
stub_glMatrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z)
{
	check_initialized();
	piglit_dispatch_glMatrixScaledEXT = resolve_glMatrixScaledEXT();
	piglit_dispatch_glMatrixScaledEXT(mode, x, y, z);
}

PFNGLMATRIXSCALEDEXTPROC piglit_dispatch_glMatrixScaledEXT = stub_glMatrixScaledEXT;

static void*
resolve_glMatrixScalefEXT(void)
{
	/* glMatrixScalefEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMatrixScalefEXT");
	}

	unsupported("glMatrixScalefEXT");
	return piglit_dispatch_glMatrixScalefEXT;
}

static void APIENTRY
stub_glMatrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z)
{
	check_initialized();
	piglit_dispatch_glMatrixScalefEXT = resolve_glMatrixScalefEXT();
	piglit_dispatch_glMatrixScalefEXT(mode, x, y, z);
}

PFNGLMATRIXSCALEFEXTPROC piglit_dispatch_glMatrixScalefEXT = stub_glMatrixScalefEXT;

static void*
resolve_glMatrixTranslatedEXT(void)
{
	/* glMatrixTranslatedEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMatrixTranslatedEXT");
	}

	unsupported("glMatrixTranslatedEXT");
	return piglit_dispatch_glMatrixTranslatedEXT;
}

static void APIENTRY
stub_glMatrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z)
{
	check_initialized();
	piglit_dispatch_glMatrixTranslatedEXT = resolve_glMatrixTranslatedEXT();
	piglit_dispatch_glMatrixTranslatedEXT(mode, x, y, z);
}

PFNGLMATRIXTRANSLATEDEXTPROC piglit_dispatch_glMatrixTranslatedEXT = stub_glMatrixTranslatedEXT;

static void*
resolve_glMatrixTranslatefEXT(void)
{
	/* glMatrixTranslatefEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMatrixTranslatefEXT");
	}

	unsupported("glMatrixTranslatefEXT");
	return piglit_dispatch_glMatrixTranslatefEXT;
}

static void APIENTRY
stub_glMatrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z)
{
	check_initialized();
	piglit_dispatch_glMatrixTranslatefEXT = resolve_glMatrixTranslatefEXT();
	piglit_dispatch_glMatrixTranslatefEXT(mode, x, y, z);
}

PFNGLMATRIXTRANSLATEFEXTPROC piglit_dispatch_glMatrixTranslatefEXT = stub_glMatrixTranslatefEXT;

static void*
resolve_glMemoryBarrier(void)
{
	/* glMemoryBarrier (GL_VERSION_4_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMemoryBarrier", 42);
	}

	/* glMemoryBarrier (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glMemoryBarrier", 31);
	}

	/* glMemoryBarrier (GL_ARB_shader_image_load_store) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_image_load_store")) {
		return get_ext_proc("glMemoryBarrier");
	}

	/* glMemoryBarrierEXT (GL_EXT_shader_image_load_store) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_shader_image_load_store")) {
		return get_ext_proc("glMemoryBarrierEXT");
	}

	unsupported("glMemoryBarrier");
	return piglit_dispatch_glMemoryBarrier;
}

static void APIENTRY
stub_glMemoryBarrier(GLbitfield barriers)
{
	check_initialized();
	piglit_dispatch_glMemoryBarrier = resolve_glMemoryBarrier();
	piglit_dispatch_glMemoryBarrier(barriers);
}

PFNGLMEMORYBARRIERPROC piglit_dispatch_glMemoryBarrier = stub_glMemoryBarrier;

static void*
resolve_glMemoryBarrierByRegion(void)
{
	/* glMemoryBarrierByRegion (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glMemoryBarrierByRegion", 31);
	}

	unsupported("glMemoryBarrierByRegion");
	return piglit_dispatch_glMemoryBarrierByRegion;
}

static void APIENTRY
stub_glMemoryBarrierByRegion(GLbitfield barriers)
{
	check_initialized();
	piglit_dispatch_glMemoryBarrierByRegion = resolve_glMemoryBarrierByRegion();
	piglit_dispatch_glMemoryBarrierByRegion(barriers);
}

PFNGLMEMORYBARRIERBYREGIONPROC piglit_dispatch_glMemoryBarrierByRegion = stub_glMemoryBarrierByRegion;

static void*
resolve_glMinSampleShading(void)
{
	/* glMinSampleShading (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMinSampleShading", 40);
	}

	/* glMinSampleShadingARB (GL_ARB_sample_shading) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_sample_shading")) {
		return get_ext_proc("glMinSampleShadingARB");
	}

	/* glMinSampleShadingOES (GL_OES_sample_shading) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_OES_sample_shading")) {
		return get_ext_proc("glMinSampleShadingOES");
	}

	unsupported("glMinSampleShading");
	return piglit_dispatch_glMinSampleShading;
}

static void APIENTRY
stub_glMinSampleShading(GLfloat value)
{
	check_initialized();
	piglit_dispatch_glMinSampleShading = resolve_glMinSampleShading();
	piglit_dispatch_glMinSampleShading(value);
}

PFNGLMINSAMPLESHADINGPROC piglit_dispatch_glMinSampleShading = stub_glMinSampleShading;

static void*
resolve_glMinmax(void)
{
	/* glMinmax (GL_ARB_imaging) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_imaging")) {
		return get_ext_proc("glMinmax");
	}

	/* glMinmaxEXT (GL_EXT_histogram) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_histogram")) {
		return get_ext_proc("glMinmaxEXT");
	}

	unsupported("glMinmax");
	return piglit_dispatch_glMinmax;
}

static void APIENTRY
stub_glMinmax(GLenum target, GLenum internalformat, GLboolean sink)
{
	check_initialized();
	piglit_dispatch_glMinmax = resolve_glMinmax();
	piglit_dispatch_glMinmax(target, internalformat, sink);
}

PFNGLMINMAXPROC piglit_dispatch_glMinmax = stub_glMinmax;

static void*
resolve_glMultMatrixd(void)
{
	/* glMultMatrixd (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glMultMatrixd", 10);
	}

	unsupported("glMultMatrixd");
	return piglit_dispatch_glMultMatrixd;
}

static void APIENTRY
stub_glMultMatrixd(const GLdouble * m)
{
	check_initialized();
	piglit_dispatch_glMultMatrixd = resolve_glMultMatrixd();
	piglit_dispatch_glMultMatrixd(m);
}

PFNGLMULTMATRIXDPROC piglit_dispatch_glMultMatrixd = stub_glMultMatrixd;

static void*
resolve_glMultMatrixf(void)
{
	/* glMultMatrixf (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glMultMatrixf", 10);
	}

	/* glMultMatrixf (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glMultMatrixf", 10);
	}

	unsupported("glMultMatrixf");
	return piglit_dispatch_glMultMatrixf;
}

static void APIENTRY
stub_glMultMatrixf(const GLfloat * m)
{
	check_initialized();
	piglit_dispatch_glMultMatrixf = resolve_glMultMatrixf();
	piglit_dispatch_glMultMatrixf(m);
}

PFNGLMULTMATRIXFPROC piglit_dispatch_glMultMatrixf = stub_glMultMatrixf;

static void*
resolve_glMultMatrixx(void)
{
	/* glMultMatrixx (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glMultMatrixx", 10);
	}

	unsupported("glMultMatrixx");
	return piglit_dispatch_glMultMatrixx;
}

static void APIENTRY
stub_glMultMatrixx(const GLfixed * m)
{
	check_initialized();
	piglit_dispatch_glMultMatrixx = resolve_glMultMatrixx();
	piglit_dispatch_glMultMatrixx(m);
}

PFNGLMULTMATRIXXPROC piglit_dispatch_glMultMatrixx = stub_glMultMatrixx;

static void*
resolve_glMultMatrixxOES(void)
{
	/* glMultMatrixxOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glMultMatrixxOES");
	}

	unsupported("glMultMatrixxOES");
	return piglit_dispatch_glMultMatrixxOES;
}

static void APIENTRY
stub_glMultMatrixxOES(const GLfixed * m)
{
	check_initialized();
	piglit_dispatch_glMultMatrixxOES = resolve_glMultMatrixxOES();
	piglit_dispatch_glMultMatrixxOES(m);
}

PFNGLMULTMATRIXXOESPROC piglit_dispatch_glMultMatrixxOES = stub_glMultMatrixxOES;

static void*
resolve_glMultTransposeMatrixd(void)
{
	/* glMultTransposeMatrixd (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultTransposeMatrixd", 13);
	}

	/* glMultTransposeMatrixdARB (GL_ARB_transpose_matrix) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_transpose_matrix")) {
		return get_ext_proc("glMultTransposeMatrixdARB");
	}

	unsupported("glMultTransposeMatrixd");
	return piglit_dispatch_glMultTransposeMatrixd;
}

static void APIENTRY
stub_glMultTransposeMatrixd(const GLdouble * m)
{
	check_initialized();
	piglit_dispatch_glMultTransposeMatrixd = resolve_glMultTransposeMatrixd();
	piglit_dispatch_glMultTransposeMatrixd(m);
}

PFNGLMULTTRANSPOSEMATRIXDPROC piglit_dispatch_glMultTransposeMatrixd = stub_glMultTransposeMatrixd;

static void*
resolve_glMultTransposeMatrixf(void)
{
	/* glMultTransposeMatrixf (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultTransposeMatrixf", 13);
	}

	/* glMultTransposeMatrixfARB (GL_ARB_transpose_matrix) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_transpose_matrix")) {
		return get_ext_proc("glMultTransposeMatrixfARB");
	}

	unsupported("glMultTransposeMatrixf");
	return piglit_dispatch_glMultTransposeMatrixf;
}

static void APIENTRY
stub_glMultTransposeMatrixf(const GLfloat * m)
{
	check_initialized();
	piglit_dispatch_glMultTransposeMatrixf = resolve_glMultTransposeMatrixf();
	piglit_dispatch_glMultTransposeMatrixf(m);
}

PFNGLMULTTRANSPOSEMATRIXFPROC piglit_dispatch_glMultTransposeMatrixf = stub_glMultTransposeMatrixf;

static void*
resolve_glMultTransposeMatrixxOES(void)
{
	/* glMultTransposeMatrixxOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glMultTransposeMatrixxOES");
	}

	unsupported("glMultTransposeMatrixxOES");
	return piglit_dispatch_glMultTransposeMatrixxOES;
}

static void APIENTRY
stub_glMultTransposeMatrixxOES(const GLfixed * m)
{
	check_initialized();
	piglit_dispatch_glMultTransposeMatrixxOES = resolve_glMultTransposeMatrixxOES();
	piglit_dispatch_glMultTransposeMatrixxOES(m);
}

PFNGLMULTTRANSPOSEMATRIXXOESPROC piglit_dispatch_glMultTransposeMatrixxOES = stub_glMultTransposeMatrixxOES;

static void*
resolve_glMultiDrawArrays(void)
{
	/* glMultiDrawArrays (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiDrawArrays", 14);
	}

	/* glMultiDrawArraysEXT (GL_EXT_multi_draw_arrays) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_multi_draw_arrays")) {
		return get_ext_proc("glMultiDrawArraysEXT");
	}

	unsupported("glMultiDrawArrays");
	return piglit_dispatch_glMultiDrawArrays;
}

static void APIENTRY
stub_glMultiDrawArrays(GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount)
{
	check_initialized();
	piglit_dispatch_glMultiDrawArrays = resolve_glMultiDrawArrays();
	piglit_dispatch_glMultiDrawArrays(mode, first, count, drawcount);
}

PFNGLMULTIDRAWARRAYSPROC piglit_dispatch_glMultiDrawArrays = stub_glMultiDrawArrays;

static void*
resolve_glMultiDrawArraysIndirect(void)
{
	/* glMultiDrawArraysIndirect (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiDrawArraysIndirect", 43);
	}

	/* glMultiDrawArraysIndirect (GL_ARB_multi_draw_indirect) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multi_draw_indirect")) {
		return get_ext_proc("glMultiDrawArraysIndirect");
	}

	/* glMultiDrawArraysIndirectAMD (GL_AMD_multi_draw_indirect) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_multi_draw_indirect")) {
		return get_ext_proc("glMultiDrawArraysIndirectAMD");
	}

	unsupported("glMultiDrawArraysIndirect");
	return piglit_dispatch_glMultiDrawArraysIndirect;
}

static void APIENTRY
stub_glMultiDrawArraysIndirect(GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride)
{
	check_initialized();
	piglit_dispatch_glMultiDrawArraysIndirect = resolve_glMultiDrawArraysIndirect();
	piglit_dispatch_glMultiDrawArraysIndirect(mode, indirect, drawcount, stride);
}

PFNGLMULTIDRAWARRAYSINDIRECTPROC piglit_dispatch_glMultiDrawArraysIndirect = stub_glMultiDrawArraysIndirect;

static void*
resolve_glMultiDrawArraysIndirectBindlessNV(void)
{
	/* glMultiDrawArraysIndirectBindlessNV (GL_NV_bindless_multi_draw_indirect) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_bindless_multi_draw_indirect")) {
		return get_ext_proc("glMultiDrawArraysIndirectBindlessNV");
	}

	unsupported("glMultiDrawArraysIndirectBindlessNV");
	return piglit_dispatch_glMultiDrawArraysIndirectBindlessNV;
}

static void APIENTRY
stub_glMultiDrawArraysIndirectBindlessNV(GLenum mode, const void * indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount)
{
	check_initialized();
	piglit_dispatch_glMultiDrawArraysIndirectBindlessNV = resolve_glMultiDrawArraysIndirectBindlessNV();
	piglit_dispatch_glMultiDrawArraysIndirectBindlessNV(mode, indirect, drawCount, stride, vertexBufferCount);
}

PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC piglit_dispatch_glMultiDrawArraysIndirectBindlessNV = stub_glMultiDrawArraysIndirectBindlessNV;

static void*
resolve_glMultiDrawArraysIndirectCountARB(void)
{
	/* glMultiDrawArraysIndirectCountARB (GL_ARB_indirect_parameters) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_indirect_parameters")) {
		return get_ext_proc("glMultiDrawArraysIndirectCountARB");
	}

	unsupported("glMultiDrawArraysIndirectCountARB");
	return piglit_dispatch_glMultiDrawArraysIndirectCountARB;
}

static void APIENTRY
stub_glMultiDrawArraysIndirectCountARB(GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
{
	check_initialized();
	piglit_dispatch_glMultiDrawArraysIndirectCountARB = resolve_glMultiDrawArraysIndirectCountARB();
	piglit_dispatch_glMultiDrawArraysIndirectCountARB(mode, indirect, drawcount, maxdrawcount, stride);
}

PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC piglit_dispatch_glMultiDrawArraysIndirectCountARB = stub_glMultiDrawArraysIndirectCountARB;

static void*
resolve_glMultiDrawElementArrayAPPLE(void)
{
	/* glMultiDrawElementArrayAPPLE (GL_APPLE_element_array) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_APPLE_element_array")) {
		return get_ext_proc("glMultiDrawElementArrayAPPLE");
	}

	unsupported("glMultiDrawElementArrayAPPLE");
	return piglit_dispatch_glMultiDrawElementArrayAPPLE;
}

static void APIENTRY
stub_glMultiDrawElementArrayAPPLE(GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount)
{
	check_initialized();
	piglit_dispatch_glMultiDrawElementArrayAPPLE = resolve_glMultiDrawElementArrayAPPLE();
	piglit_dispatch_glMultiDrawElementArrayAPPLE(mode, first, count, primcount);
}

PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC piglit_dispatch_glMultiDrawElementArrayAPPLE = stub_glMultiDrawElementArrayAPPLE;

static void*
resolve_glMultiDrawElements(void)
{
	/* glMultiDrawElements (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiDrawElements", 14);
	}

	/* glMultiDrawElementsEXT (GL_EXT_multi_draw_arrays) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_multi_draw_arrays")) {
		return get_ext_proc("glMultiDrawElementsEXT");
	}

	unsupported("glMultiDrawElements");
	return piglit_dispatch_glMultiDrawElements;
}

static void APIENTRY
stub_glMultiDrawElements(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount)
{
	check_initialized();
	piglit_dispatch_glMultiDrawElements = resolve_glMultiDrawElements();
	piglit_dispatch_glMultiDrawElements(mode, count, type, indices, drawcount);
}

PFNGLMULTIDRAWELEMENTSPROC piglit_dispatch_glMultiDrawElements = stub_glMultiDrawElements;

static void*
resolve_glMultiDrawElementsBaseVertex(void)
{
	/* glMultiDrawElementsBaseVertex (GL_VERSION_3_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiDrawElementsBaseVertex", 32);
	}

	/* glMultiDrawElementsBaseVertex (GL_ARB_draw_elements_base_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_draw_elements_base_vertex")) {
		return get_ext_proc("glMultiDrawElementsBaseVertex");
	}

	unsupported("glMultiDrawElementsBaseVertex");
	return piglit_dispatch_glMultiDrawElementsBaseVertex;
}

static void APIENTRY
stub_glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount, const GLint * basevertex)
{
	check_initialized();
	piglit_dispatch_glMultiDrawElementsBaseVertex = resolve_glMultiDrawElementsBaseVertex();
	piglit_dispatch_glMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex);
}

PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC piglit_dispatch_glMultiDrawElementsBaseVertex = stub_glMultiDrawElementsBaseVertex;

static void*
resolve_glMultiDrawElementsIndirect(void)
{
	/* glMultiDrawElementsIndirect (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiDrawElementsIndirect", 43);
	}

	/* glMultiDrawElementsIndirect (GL_ARB_multi_draw_indirect) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multi_draw_indirect")) {
		return get_ext_proc("glMultiDrawElementsIndirect");
	}

	/* glMultiDrawElementsIndirectAMD (GL_AMD_multi_draw_indirect) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_multi_draw_indirect")) {
		return get_ext_proc("glMultiDrawElementsIndirectAMD");
	}

	unsupported("glMultiDrawElementsIndirect");
	return piglit_dispatch_glMultiDrawElementsIndirect;
}

static void APIENTRY
stub_glMultiDrawElementsIndirect(GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride)
{
	check_initialized();
	piglit_dispatch_glMultiDrawElementsIndirect = resolve_glMultiDrawElementsIndirect();
	piglit_dispatch_glMultiDrawElementsIndirect(mode, type, indirect, drawcount, stride);
}

PFNGLMULTIDRAWELEMENTSINDIRECTPROC piglit_dispatch_glMultiDrawElementsIndirect = stub_glMultiDrawElementsIndirect;

static void*
resolve_glMultiDrawElementsIndirectBindlessNV(void)
{
	/* glMultiDrawElementsIndirectBindlessNV (GL_NV_bindless_multi_draw_indirect) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_bindless_multi_draw_indirect")) {
		return get_ext_proc("glMultiDrawElementsIndirectBindlessNV");
	}

	unsupported("glMultiDrawElementsIndirectBindlessNV");
	return piglit_dispatch_glMultiDrawElementsIndirectBindlessNV;
}

static void APIENTRY
stub_glMultiDrawElementsIndirectBindlessNV(GLenum mode, GLenum type, const void * indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount)
{
	check_initialized();
	piglit_dispatch_glMultiDrawElementsIndirectBindlessNV = resolve_glMultiDrawElementsIndirectBindlessNV();
	piglit_dispatch_glMultiDrawElementsIndirectBindlessNV(mode, type, indirect, drawCount, stride, vertexBufferCount);
}

PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC piglit_dispatch_glMultiDrawElementsIndirectBindlessNV = stub_glMultiDrawElementsIndirectBindlessNV;

static void*
resolve_glMultiDrawElementsIndirectCountARB(void)
{
	/* glMultiDrawElementsIndirectCountARB (GL_ARB_indirect_parameters) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_indirect_parameters")) {
		return get_ext_proc("glMultiDrawElementsIndirectCountARB");
	}

	unsupported("glMultiDrawElementsIndirectCountARB");
	return piglit_dispatch_glMultiDrawElementsIndirectCountARB;
}

static void APIENTRY
stub_glMultiDrawElementsIndirectCountARB(GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
{
	check_initialized();
	piglit_dispatch_glMultiDrawElementsIndirectCountARB = resolve_glMultiDrawElementsIndirectCountARB();
	piglit_dispatch_glMultiDrawElementsIndirectCountARB(mode, type, indirect, drawcount, maxdrawcount, stride);
}

PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC piglit_dispatch_glMultiDrawElementsIndirectCountARB = stub_glMultiDrawElementsIndirectCountARB;

static void*
resolve_glMultiDrawRangeElementArrayAPPLE(void)
{
	/* glMultiDrawRangeElementArrayAPPLE (GL_APPLE_element_array) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_APPLE_element_array")) {
		return get_ext_proc("glMultiDrawRangeElementArrayAPPLE");
	}

	unsupported("glMultiDrawRangeElementArrayAPPLE");
	return piglit_dispatch_glMultiDrawRangeElementArrayAPPLE;
}

static void APIENTRY
stub_glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint * first, const GLsizei * count, GLsizei primcount)
{
	check_initialized();
	piglit_dispatch_glMultiDrawRangeElementArrayAPPLE = resolve_glMultiDrawRangeElementArrayAPPLE();
	piglit_dispatch_glMultiDrawRangeElementArrayAPPLE(mode, start, end, first, count, primcount);
}

PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC piglit_dispatch_glMultiDrawRangeElementArrayAPPLE = stub_glMultiDrawRangeElementArrayAPPLE;

static void*
resolve_glMultiModeDrawArraysIBM(void)
{
	/* glMultiModeDrawArraysIBM (GL_IBM_multimode_draw_arrays) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_IBM_multimode_draw_arrays")) {
		return get_ext_proc("glMultiModeDrawArraysIBM");
	}

	unsupported("glMultiModeDrawArraysIBM");
	return piglit_dispatch_glMultiModeDrawArraysIBM;
}

static void APIENTRY
stub_glMultiModeDrawArraysIBM(const GLenum * mode, const GLint * first, const GLsizei * count, GLsizei primcount, GLint modestride)
{
	check_initialized();
	piglit_dispatch_glMultiModeDrawArraysIBM = resolve_glMultiModeDrawArraysIBM();
	piglit_dispatch_glMultiModeDrawArraysIBM(mode, first, count, primcount, modestride);
}

PFNGLMULTIMODEDRAWARRAYSIBMPROC piglit_dispatch_glMultiModeDrawArraysIBM = stub_glMultiModeDrawArraysIBM;

static void*
resolve_glMultiModeDrawElementsIBM(void)
{
	/* glMultiModeDrawElementsIBM (GL_IBM_multimode_draw_arrays) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_IBM_multimode_draw_arrays")) {
		return get_ext_proc("glMultiModeDrawElementsIBM");
	}

	unsupported("glMultiModeDrawElementsIBM");
	return piglit_dispatch_glMultiModeDrawElementsIBM;
}

static void APIENTRY
stub_glMultiModeDrawElementsIBM(const GLenum * mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount, GLint modestride)
{
	check_initialized();
	piglit_dispatch_glMultiModeDrawElementsIBM = resolve_glMultiModeDrawElementsIBM();
	piglit_dispatch_glMultiModeDrawElementsIBM(mode, count, type, indices, primcount, modestride);
}

PFNGLMULTIMODEDRAWELEMENTSIBMPROC piglit_dispatch_glMultiModeDrawElementsIBM = stub_glMultiModeDrawElementsIBM;

static void*
resolve_glMultiTexBufferEXT(void)
{
	/* glMultiTexBufferEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMultiTexBufferEXT");
	}

	unsupported("glMultiTexBufferEXT");
	return piglit_dispatch_glMultiTexBufferEXT;
}

static void APIENTRY
stub_glMultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer)
{
	check_initialized();
	piglit_dispatch_glMultiTexBufferEXT = resolve_glMultiTexBufferEXT();
	piglit_dispatch_glMultiTexBufferEXT(texunit, target, internalformat, buffer);
}

PFNGLMULTITEXBUFFEREXTPROC piglit_dispatch_glMultiTexBufferEXT = stub_glMultiTexBufferEXT;

static void*
resolve_glMultiTexCoord1bOES(void)
{
	/* glMultiTexCoord1bOES (GL_OES_byte_coordinates) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_byte_coordinates")) {
		return get_ext_proc("glMultiTexCoord1bOES");
	}

	unsupported("glMultiTexCoord1bOES");
	return piglit_dispatch_glMultiTexCoord1bOES;
}

static void APIENTRY
stub_glMultiTexCoord1bOES(GLenum texture, GLbyte s)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord1bOES = resolve_glMultiTexCoord1bOES();
	piglit_dispatch_glMultiTexCoord1bOES(texture, s);
}

PFNGLMULTITEXCOORD1BOESPROC piglit_dispatch_glMultiTexCoord1bOES = stub_glMultiTexCoord1bOES;

static void*
resolve_glMultiTexCoord1bvOES(void)
{
	/* glMultiTexCoord1bvOES (GL_OES_byte_coordinates) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_byte_coordinates")) {
		return get_ext_proc("glMultiTexCoord1bvOES");
	}

	unsupported("glMultiTexCoord1bvOES");
	return piglit_dispatch_glMultiTexCoord1bvOES;
}

static void APIENTRY
stub_glMultiTexCoord1bvOES(GLenum texture, const GLbyte * coords)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord1bvOES = resolve_glMultiTexCoord1bvOES();
	piglit_dispatch_glMultiTexCoord1bvOES(texture, coords);
}

PFNGLMULTITEXCOORD1BVOESPROC piglit_dispatch_glMultiTexCoord1bvOES = stub_glMultiTexCoord1bvOES;

static void*
resolve_glMultiTexCoord1d(void)
{
	/* glMultiTexCoord1d (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoord1d", 13);
	}

	/* glMultiTexCoord1dARB (GL_ARB_multitexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multitexture")) {
		return get_ext_proc("glMultiTexCoord1dARB");
	}

	unsupported("glMultiTexCoord1d");
	return piglit_dispatch_glMultiTexCoord1d;
}

static void APIENTRY
stub_glMultiTexCoord1d(GLenum target, GLdouble s)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord1d = resolve_glMultiTexCoord1d();
	piglit_dispatch_glMultiTexCoord1d(target, s);
}

PFNGLMULTITEXCOORD1DPROC piglit_dispatch_glMultiTexCoord1d = stub_glMultiTexCoord1d;

static void*
resolve_glMultiTexCoord1dv(void)
{
	/* glMultiTexCoord1dv (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoord1dv", 13);
	}

	/* glMultiTexCoord1dvARB (GL_ARB_multitexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multitexture")) {
		return get_ext_proc("glMultiTexCoord1dvARB");
	}

	unsupported("glMultiTexCoord1dv");
	return piglit_dispatch_glMultiTexCoord1dv;
}

static void APIENTRY
stub_glMultiTexCoord1dv(GLenum target, const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord1dv = resolve_glMultiTexCoord1dv();
	piglit_dispatch_glMultiTexCoord1dv(target, v);
}

PFNGLMULTITEXCOORD1DVPROC piglit_dispatch_glMultiTexCoord1dv = stub_glMultiTexCoord1dv;

static void*
resolve_glMultiTexCoord1f(void)
{
	/* glMultiTexCoord1f (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoord1f", 13);
	}

	/* glMultiTexCoord1fARB (GL_ARB_multitexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multitexture")) {
		return get_ext_proc("glMultiTexCoord1fARB");
	}

	unsupported("glMultiTexCoord1f");
	return piglit_dispatch_glMultiTexCoord1f;
}

static void APIENTRY
stub_glMultiTexCoord1f(GLenum target, GLfloat s)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord1f = resolve_glMultiTexCoord1f();
	piglit_dispatch_glMultiTexCoord1f(target, s);
}

PFNGLMULTITEXCOORD1FPROC piglit_dispatch_glMultiTexCoord1f = stub_glMultiTexCoord1f;

static void*
resolve_glMultiTexCoord1fv(void)
{
	/* glMultiTexCoord1fv (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoord1fv", 13);
	}

	/* glMultiTexCoord1fvARB (GL_ARB_multitexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multitexture")) {
		return get_ext_proc("glMultiTexCoord1fvARB");
	}

	unsupported("glMultiTexCoord1fv");
	return piglit_dispatch_glMultiTexCoord1fv;
}

static void APIENTRY
stub_glMultiTexCoord1fv(GLenum target, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord1fv = resolve_glMultiTexCoord1fv();
	piglit_dispatch_glMultiTexCoord1fv(target, v);
}

PFNGLMULTITEXCOORD1FVPROC piglit_dispatch_glMultiTexCoord1fv = stub_glMultiTexCoord1fv;

static void*
resolve_glMultiTexCoord1hNV(void)
{
	/* glMultiTexCoord1hNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glMultiTexCoord1hNV");
	}

	unsupported("glMultiTexCoord1hNV");
	return piglit_dispatch_glMultiTexCoord1hNV;
}

static void APIENTRY
stub_glMultiTexCoord1hNV(GLenum target, GLhalfNV s)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord1hNV = resolve_glMultiTexCoord1hNV();
	piglit_dispatch_glMultiTexCoord1hNV(target, s);
}

PFNGLMULTITEXCOORD1HNVPROC piglit_dispatch_glMultiTexCoord1hNV = stub_glMultiTexCoord1hNV;

static void*
resolve_glMultiTexCoord1hvNV(void)
{
	/* glMultiTexCoord1hvNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glMultiTexCoord1hvNV");
	}

	unsupported("glMultiTexCoord1hvNV");
	return piglit_dispatch_glMultiTexCoord1hvNV;
}

static void APIENTRY
stub_glMultiTexCoord1hvNV(GLenum target, const GLhalfNV * v)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord1hvNV = resolve_glMultiTexCoord1hvNV();
	piglit_dispatch_glMultiTexCoord1hvNV(target, v);
}

PFNGLMULTITEXCOORD1HVNVPROC piglit_dispatch_glMultiTexCoord1hvNV = stub_glMultiTexCoord1hvNV;

static void*
resolve_glMultiTexCoord1i(void)
{
	/* glMultiTexCoord1i (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoord1i", 13);
	}

	/* glMultiTexCoord1iARB (GL_ARB_multitexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multitexture")) {
		return get_ext_proc("glMultiTexCoord1iARB");
	}

	unsupported("glMultiTexCoord1i");
	return piglit_dispatch_glMultiTexCoord1i;
}

static void APIENTRY
stub_glMultiTexCoord1i(GLenum target, GLint s)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord1i = resolve_glMultiTexCoord1i();
	piglit_dispatch_glMultiTexCoord1i(target, s);
}

PFNGLMULTITEXCOORD1IPROC piglit_dispatch_glMultiTexCoord1i = stub_glMultiTexCoord1i;

static void*
resolve_glMultiTexCoord1iv(void)
{
	/* glMultiTexCoord1iv (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoord1iv", 13);
	}

	/* glMultiTexCoord1ivARB (GL_ARB_multitexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multitexture")) {
		return get_ext_proc("glMultiTexCoord1ivARB");
	}

	unsupported("glMultiTexCoord1iv");
	return piglit_dispatch_glMultiTexCoord1iv;
}

static void APIENTRY
stub_glMultiTexCoord1iv(GLenum target, const GLint * v)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord1iv = resolve_glMultiTexCoord1iv();
	piglit_dispatch_glMultiTexCoord1iv(target, v);
}

PFNGLMULTITEXCOORD1IVPROC piglit_dispatch_glMultiTexCoord1iv = stub_glMultiTexCoord1iv;

static void*
resolve_glMultiTexCoord1s(void)
{
	/* glMultiTexCoord1s (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoord1s", 13);
	}

	/* glMultiTexCoord1sARB (GL_ARB_multitexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multitexture")) {
		return get_ext_proc("glMultiTexCoord1sARB");
	}

	unsupported("glMultiTexCoord1s");
	return piglit_dispatch_glMultiTexCoord1s;
}

static void APIENTRY
stub_glMultiTexCoord1s(GLenum target, GLshort s)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord1s = resolve_glMultiTexCoord1s();
	piglit_dispatch_glMultiTexCoord1s(target, s);
}

PFNGLMULTITEXCOORD1SPROC piglit_dispatch_glMultiTexCoord1s = stub_glMultiTexCoord1s;

static void*
resolve_glMultiTexCoord1sv(void)
{
	/* glMultiTexCoord1sv (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoord1sv", 13);
	}

	/* glMultiTexCoord1svARB (GL_ARB_multitexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multitexture")) {
		return get_ext_proc("glMultiTexCoord1svARB");
	}

	unsupported("glMultiTexCoord1sv");
	return piglit_dispatch_glMultiTexCoord1sv;
}

static void APIENTRY
stub_glMultiTexCoord1sv(GLenum target, const GLshort * v)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord1sv = resolve_glMultiTexCoord1sv();
	piglit_dispatch_glMultiTexCoord1sv(target, v);
}

PFNGLMULTITEXCOORD1SVPROC piglit_dispatch_glMultiTexCoord1sv = stub_glMultiTexCoord1sv;

static void*
resolve_glMultiTexCoord1xOES(void)
{
	/* glMultiTexCoord1xOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glMultiTexCoord1xOES");
	}

	unsupported("glMultiTexCoord1xOES");
	return piglit_dispatch_glMultiTexCoord1xOES;
}

static void APIENTRY
stub_glMultiTexCoord1xOES(GLenum texture, GLfixed s)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord1xOES = resolve_glMultiTexCoord1xOES();
	piglit_dispatch_glMultiTexCoord1xOES(texture, s);
}

PFNGLMULTITEXCOORD1XOESPROC piglit_dispatch_glMultiTexCoord1xOES = stub_glMultiTexCoord1xOES;

static void*
resolve_glMultiTexCoord1xvOES(void)
{
	/* glMultiTexCoord1xvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glMultiTexCoord1xvOES");
	}

	unsupported("glMultiTexCoord1xvOES");
	return piglit_dispatch_glMultiTexCoord1xvOES;
}

static void APIENTRY
stub_glMultiTexCoord1xvOES(GLenum texture, const GLfixed * coords)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord1xvOES = resolve_glMultiTexCoord1xvOES();
	piglit_dispatch_glMultiTexCoord1xvOES(texture, coords);
}

PFNGLMULTITEXCOORD1XVOESPROC piglit_dispatch_glMultiTexCoord1xvOES = stub_glMultiTexCoord1xvOES;

static void*
resolve_glMultiTexCoord2bOES(void)
{
	/* glMultiTexCoord2bOES (GL_OES_byte_coordinates) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_byte_coordinates")) {
		return get_ext_proc("glMultiTexCoord2bOES");
	}

	unsupported("glMultiTexCoord2bOES");
	return piglit_dispatch_glMultiTexCoord2bOES;
}

static void APIENTRY
stub_glMultiTexCoord2bOES(GLenum texture, GLbyte s, GLbyte t)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord2bOES = resolve_glMultiTexCoord2bOES();
	piglit_dispatch_glMultiTexCoord2bOES(texture, s, t);
}

PFNGLMULTITEXCOORD2BOESPROC piglit_dispatch_glMultiTexCoord2bOES = stub_glMultiTexCoord2bOES;

static void*
resolve_glMultiTexCoord2bvOES(void)
{
	/* glMultiTexCoord2bvOES (GL_OES_byte_coordinates) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_byte_coordinates")) {
		return get_ext_proc("glMultiTexCoord2bvOES");
	}

	unsupported("glMultiTexCoord2bvOES");
	return piglit_dispatch_glMultiTexCoord2bvOES;
}

static void APIENTRY
stub_glMultiTexCoord2bvOES(GLenum texture, const GLbyte * coords)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord2bvOES = resolve_glMultiTexCoord2bvOES();
	piglit_dispatch_glMultiTexCoord2bvOES(texture, coords);
}

PFNGLMULTITEXCOORD2BVOESPROC piglit_dispatch_glMultiTexCoord2bvOES = stub_glMultiTexCoord2bvOES;

static void*
resolve_glMultiTexCoord2d(void)
{
	/* glMultiTexCoord2d (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoord2d", 13);
	}

	/* glMultiTexCoord2dARB (GL_ARB_multitexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multitexture")) {
		return get_ext_proc("glMultiTexCoord2dARB");
	}

	unsupported("glMultiTexCoord2d");
	return piglit_dispatch_glMultiTexCoord2d;
}

static void APIENTRY
stub_glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord2d = resolve_glMultiTexCoord2d();
	piglit_dispatch_glMultiTexCoord2d(target, s, t);
}

PFNGLMULTITEXCOORD2DPROC piglit_dispatch_glMultiTexCoord2d = stub_glMultiTexCoord2d;

static void*
resolve_glMultiTexCoord2dv(void)
{
	/* glMultiTexCoord2dv (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoord2dv", 13);
	}

	/* glMultiTexCoord2dvARB (GL_ARB_multitexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multitexture")) {
		return get_ext_proc("glMultiTexCoord2dvARB");
	}

	unsupported("glMultiTexCoord2dv");
	return piglit_dispatch_glMultiTexCoord2dv;
}

static void APIENTRY
stub_glMultiTexCoord2dv(GLenum target, const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord2dv = resolve_glMultiTexCoord2dv();
	piglit_dispatch_glMultiTexCoord2dv(target, v);
}

PFNGLMULTITEXCOORD2DVPROC piglit_dispatch_glMultiTexCoord2dv = stub_glMultiTexCoord2dv;

static void*
resolve_glMultiTexCoord2f(void)
{
	/* glMultiTexCoord2f (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoord2f", 13);
	}

	/* glMultiTexCoord2fARB (GL_ARB_multitexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multitexture")) {
		return get_ext_proc("glMultiTexCoord2fARB");
	}

	unsupported("glMultiTexCoord2f");
	return piglit_dispatch_glMultiTexCoord2f;
}

static void APIENTRY
stub_glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord2f = resolve_glMultiTexCoord2f();
	piglit_dispatch_glMultiTexCoord2f(target, s, t);
}

PFNGLMULTITEXCOORD2FPROC piglit_dispatch_glMultiTexCoord2f = stub_glMultiTexCoord2f;

static void*
resolve_glMultiTexCoord2fv(void)
{
	/* glMultiTexCoord2fv (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoord2fv", 13);
	}

	/* glMultiTexCoord2fvARB (GL_ARB_multitexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multitexture")) {
		return get_ext_proc("glMultiTexCoord2fvARB");
	}

	unsupported("glMultiTexCoord2fv");
	return piglit_dispatch_glMultiTexCoord2fv;
}

static void APIENTRY
stub_glMultiTexCoord2fv(GLenum target, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord2fv = resolve_glMultiTexCoord2fv();
	piglit_dispatch_glMultiTexCoord2fv(target, v);
}

PFNGLMULTITEXCOORD2FVPROC piglit_dispatch_glMultiTexCoord2fv = stub_glMultiTexCoord2fv;

static void*
resolve_glMultiTexCoord2hNV(void)
{
	/* glMultiTexCoord2hNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glMultiTexCoord2hNV");
	}

	unsupported("glMultiTexCoord2hNV");
	return piglit_dispatch_glMultiTexCoord2hNV;
}

static void APIENTRY
stub_glMultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord2hNV = resolve_glMultiTexCoord2hNV();
	piglit_dispatch_glMultiTexCoord2hNV(target, s, t);
}

PFNGLMULTITEXCOORD2HNVPROC piglit_dispatch_glMultiTexCoord2hNV = stub_glMultiTexCoord2hNV;

static void*
resolve_glMultiTexCoord2hvNV(void)
{
	/* glMultiTexCoord2hvNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glMultiTexCoord2hvNV");
	}

	unsupported("glMultiTexCoord2hvNV");
	return piglit_dispatch_glMultiTexCoord2hvNV;
}

static void APIENTRY
stub_glMultiTexCoord2hvNV(GLenum target, const GLhalfNV * v)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord2hvNV = resolve_glMultiTexCoord2hvNV();
	piglit_dispatch_glMultiTexCoord2hvNV(target, v);
}

PFNGLMULTITEXCOORD2HVNVPROC piglit_dispatch_glMultiTexCoord2hvNV = stub_glMultiTexCoord2hvNV;

static void*
resolve_glMultiTexCoord2i(void)
{
	/* glMultiTexCoord2i (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoord2i", 13);
	}

	/* glMultiTexCoord2iARB (GL_ARB_multitexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multitexture")) {
		return get_ext_proc("glMultiTexCoord2iARB");
	}

	unsupported("glMultiTexCoord2i");
	return piglit_dispatch_glMultiTexCoord2i;
}

static void APIENTRY
stub_glMultiTexCoord2i(GLenum target, GLint s, GLint t)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord2i = resolve_glMultiTexCoord2i();
	piglit_dispatch_glMultiTexCoord2i(target, s, t);
}

PFNGLMULTITEXCOORD2IPROC piglit_dispatch_glMultiTexCoord2i = stub_glMultiTexCoord2i;

static void*
resolve_glMultiTexCoord2iv(void)
{
	/* glMultiTexCoord2iv (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoord2iv", 13);
	}

	/* glMultiTexCoord2ivARB (GL_ARB_multitexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multitexture")) {
		return get_ext_proc("glMultiTexCoord2ivARB");
	}

	unsupported("glMultiTexCoord2iv");
	return piglit_dispatch_glMultiTexCoord2iv;
}

static void APIENTRY
stub_glMultiTexCoord2iv(GLenum target, const GLint * v)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord2iv = resolve_glMultiTexCoord2iv();
	piglit_dispatch_glMultiTexCoord2iv(target, v);
}

PFNGLMULTITEXCOORD2IVPROC piglit_dispatch_glMultiTexCoord2iv = stub_glMultiTexCoord2iv;

static void*
resolve_glMultiTexCoord2s(void)
{
	/* glMultiTexCoord2s (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoord2s", 13);
	}

	/* glMultiTexCoord2sARB (GL_ARB_multitexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multitexture")) {
		return get_ext_proc("glMultiTexCoord2sARB");
	}

	unsupported("glMultiTexCoord2s");
	return piglit_dispatch_glMultiTexCoord2s;
}

static void APIENTRY
stub_glMultiTexCoord2s(GLenum target, GLshort s, GLshort t)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord2s = resolve_glMultiTexCoord2s();
	piglit_dispatch_glMultiTexCoord2s(target, s, t);
}

PFNGLMULTITEXCOORD2SPROC piglit_dispatch_glMultiTexCoord2s = stub_glMultiTexCoord2s;

static void*
resolve_glMultiTexCoord2sv(void)
{
	/* glMultiTexCoord2sv (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoord2sv", 13);
	}

	/* glMultiTexCoord2svARB (GL_ARB_multitexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multitexture")) {
		return get_ext_proc("glMultiTexCoord2svARB");
	}

	unsupported("glMultiTexCoord2sv");
	return piglit_dispatch_glMultiTexCoord2sv;
}

static void APIENTRY
stub_glMultiTexCoord2sv(GLenum target, const GLshort * v)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord2sv = resolve_glMultiTexCoord2sv();
	piglit_dispatch_glMultiTexCoord2sv(target, v);
}

PFNGLMULTITEXCOORD2SVPROC piglit_dispatch_glMultiTexCoord2sv = stub_glMultiTexCoord2sv;

static void*
resolve_glMultiTexCoord2xOES(void)
{
	/* glMultiTexCoord2xOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glMultiTexCoord2xOES");
	}

	unsupported("glMultiTexCoord2xOES");
	return piglit_dispatch_glMultiTexCoord2xOES;
}

static void APIENTRY
stub_glMultiTexCoord2xOES(GLenum texture, GLfixed s, GLfixed t)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord2xOES = resolve_glMultiTexCoord2xOES();
	piglit_dispatch_glMultiTexCoord2xOES(texture, s, t);
}

PFNGLMULTITEXCOORD2XOESPROC piglit_dispatch_glMultiTexCoord2xOES = stub_glMultiTexCoord2xOES;

static void*
resolve_glMultiTexCoord2xvOES(void)
{
	/* glMultiTexCoord2xvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glMultiTexCoord2xvOES");
	}

	unsupported("glMultiTexCoord2xvOES");
	return piglit_dispatch_glMultiTexCoord2xvOES;
}

static void APIENTRY
stub_glMultiTexCoord2xvOES(GLenum texture, const GLfixed * coords)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord2xvOES = resolve_glMultiTexCoord2xvOES();
	piglit_dispatch_glMultiTexCoord2xvOES(texture, coords);
}

PFNGLMULTITEXCOORD2XVOESPROC piglit_dispatch_glMultiTexCoord2xvOES = stub_glMultiTexCoord2xvOES;

static void*
resolve_glMultiTexCoord3bOES(void)
{
	/* glMultiTexCoord3bOES (GL_OES_byte_coordinates) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_byte_coordinates")) {
		return get_ext_proc("glMultiTexCoord3bOES");
	}

	unsupported("glMultiTexCoord3bOES");
	return piglit_dispatch_glMultiTexCoord3bOES;
}

static void APIENTRY
stub_glMultiTexCoord3bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte r)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord3bOES = resolve_glMultiTexCoord3bOES();
	piglit_dispatch_glMultiTexCoord3bOES(texture, s, t, r);
}

PFNGLMULTITEXCOORD3BOESPROC piglit_dispatch_glMultiTexCoord3bOES = stub_glMultiTexCoord3bOES;

static void*
resolve_glMultiTexCoord3bvOES(void)
{
	/* glMultiTexCoord3bvOES (GL_OES_byte_coordinates) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_byte_coordinates")) {
		return get_ext_proc("glMultiTexCoord3bvOES");
	}

	unsupported("glMultiTexCoord3bvOES");
	return piglit_dispatch_glMultiTexCoord3bvOES;
}

static void APIENTRY
stub_glMultiTexCoord3bvOES(GLenum texture, const GLbyte * coords)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord3bvOES = resolve_glMultiTexCoord3bvOES();
	piglit_dispatch_glMultiTexCoord3bvOES(texture, coords);
}

PFNGLMULTITEXCOORD3BVOESPROC piglit_dispatch_glMultiTexCoord3bvOES = stub_glMultiTexCoord3bvOES;

static void*
resolve_glMultiTexCoord3d(void)
{
	/* glMultiTexCoord3d (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoord3d", 13);
	}

	/* glMultiTexCoord3dARB (GL_ARB_multitexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multitexture")) {
		return get_ext_proc("glMultiTexCoord3dARB");
	}

	unsupported("glMultiTexCoord3d");
	return piglit_dispatch_glMultiTexCoord3d;
}

static void APIENTRY
stub_glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord3d = resolve_glMultiTexCoord3d();
	piglit_dispatch_glMultiTexCoord3d(target, s, t, r);
}

PFNGLMULTITEXCOORD3DPROC piglit_dispatch_glMultiTexCoord3d = stub_glMultiTexCoord3d;

static void*
resolve_glMultiTexCoord3dv(void)
{
	/* glMultiTexCoord3dv (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoord3dv", 13);
	}

	/* glMultiTexCoord3dvARB (GL_ARB_multitexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multitexture")) {
		return get_ext_proc("glMultiTexCoord3dvARB");
	}

	unsupported("glMultiTexCoord3dv");
	return piglit_dispatch_glMultiTexCoord3dv;
}

static void APIENTRY
stub_glMultiTexCoord3dv(GLenum target, const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord3dv = resolve_glMultiTexCoord3dv();
	piglit_dispatch_glMultiTexCoord3dv(target, v);
}

PFNGLMULTITEXCOORD3DVPROC piglit_dispatch_glMultiTexCoord3dv = stub_glMultiTexCoord3dv;

static void*
resolve_glMultiTexCoord3f(void)
{
	/* glMultiTexCoord3f (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoord3f", 13);
	}

	/* glMultiTexCoord3fARB (GL_ARB_multitexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multitexture")) {
		return get_ext_proc("glMultiTexCoord3fARB");
	}

	unsupported("glMultiTexCoord3f");
	return piglit_dispatch_glMultiTexCoord3f;
}

static void APIENTRY
stub_glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord3f = resolve_glMultiTexCoord3f();
	piglit_dispatch_glMultiTexCoord3f(target, s, t, r);
}

PFNGLMULTITEXCOORD3FPROC piglit_dispatch_glMultiTexCoord3f = stub_glMultiTexCoord3f;

static void*
resolve_glMultiTexCoord3fv(void)
{
	/* glMultiTexCoord3fv (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoord3fv", 13);
	}

	/* glMultiTexCoord3fvARB (GL_ARB_multitexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multitexture")) {
		return get_ext_proc("glMultiTexCoord3fvARB");
	}

	unsupported("glMultiTexCoord3fv");
	return piglit_dispatch_glMultiTexCoord3fv;
}

static void APIENTRY
stub_glMultiTexCoord3fv(GLenum target, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord3fv = resolve_glMultiTexCoord3fv();
	piglit_dispatch_glMultiTexCoord3fv(target, v);
}

PFNGLMULTITEXCOORD3FVPROC piglit_dispatch_glMultiTexCoord3fv = stub_glMultiTexCoord3fv;

static void*
resolve_glMultiTexCoord3hNV(void)
{
	/* glMultiTexCoord3hNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glMultiTexCoord3hNV");
	}

	unsupported("glMultiTexCoord3hNV");
	return piglit_dispatch_glMultiTexCoord3hNV;
}

static void APIENTRY
stub_glMultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord3hNV = resolve_glMultiTexCoord3hNV();
	piglit_dispatch_glMultiTexCoord3hNV(target, s, t, r);
}

PFNGLMULTITEXCOORD3HNVPROC piglit_dispatch_glMultiTexCoord3hNV = stub_glMultiTexCoord3hNV;

static void*
resolve_glMultiTexCoord3hvNV(void)
{
	/* glMultiTexCoord3hvNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glMultiTexCoord3hvNV");
	}

	unsupported("glMultiTexCoord3hvNV");
	return piglit_dispatch_glMultiTexCoord3hvNV;
}

static void APIENTRY
stub_glMultiTexCoord3hvNV(GLenum target, const GLhalfNV * v)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord3hvNV = resolve_glMultiTexCoord3hvNV();
	piglit_dispatch_glMultiTexCoord3hvNV(target, v);
}

PFNGLMULTITEXCOORD3HVNVPROC piglit_dispatch_glMultiTexCoord3hvNV = stub_glMultiTexCoord3hvNV;

static void*
resolve_glMultiTexCoord3i(void)
{
	/* glMultiTexCoord3i (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoord3i", 13);
	}

	/* glMultiTexCoord3iARB (GL_ARB_multitexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multitexture")) {
		return get_ext_proc("glMultiTexCoord3iARB");
	}

	unsupported("glMultiTexCoord3i");
	return piglit_dispatch_glMultiTexCoord3i;
}

static void APIENTRY
stub_glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord3i = resolve_glMultiTexCoord3i();
	piglit_dispatch_glMultiTexCoord3i(target, s, t, r);
}

PFNGLMULTITEXCOORD3IPROC piglit_dispatch_glMultiTexCoord3i = stub_glMultiTexCoord3i;

static void*
resolve_glMultiTexCoord3iv(void)
{
	/* glMultiTexCoord3iv (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoord3iv", 13);
	}

	/* glMultiTexCoord3ivARB (GL_ARB_multitexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multitexture")) {
		return get_ext_proc("glMultiTexCoord3ivARB");
	}

	unsupported("glMultiTexCoord3iv");
	return piglit_dispatch_glMultiTexCoord3iv;
}

static void APIENTRY
stub_glMultiTexCoord3iv(GLenum target, const GLint * v)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord3iv = resolve_glMultiTexCoord3iv();
	piglit_dispatch_glMultiTexCoord3iv(target, v);
}

PFNGLMULTITEXCOORD3IVPROC piglit_dispatch_glMultiTexCoord3iv = stub_glMultiTexCoord3iv;

static void*
resolve_glMultiTexCoord3s(void)
{
	/* glMultiTexCoord3s (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoord3s", 13);
	}

	/* glMultiTexCoord3sARB (GL_ARB_multitexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multitexture")) {
		return get_ext_proc("glMultiTexCoord3sARB");
	}

	unsupported("glMultiTexCoord3s");
	return piglit_dispatch_glMultiTexCoord3s;
}

static void APIENTRY
stub_glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord3s = resolve_glMultiTexCoord3s();
	piglit_dispatch_glMultiTexCoord3s(target, s, t, r);
}

PFNGLMULTITEXCOORD3SPROC piglit_dispatch_glMultiTexCoord3s = stub_glMultiTexCoord3s;

static void*
resolve_glMultiTexCoord3sv(void)
{
	/* glMultiTexCoord3sv (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoord3sv", 13);
	}

	/* glMultiTexCoord3svARB (GL_ARB_multitexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multitexture")) {
		return get_ext_proc("glMultiTexCoord3svARB");
	}

	unsupported("glMultiTexCoord3sv");
	return piglit_dispatch_glMultiTexCoord3sv;
}

static void APIENTRY
stub_glMultiTexCoord3sv(GLenum target, const GLshort * v)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord3sv = resolve_glMultiTexCoord3sv();
	piglit_dispatch_glMultiTexCoord3sv(target, v);
}

PFNGLMULTITEXCOORD3SVPROC piglit_dispatch_glMultiTexCoord3sv = stub_glMultiTexCoord3sv;

static void*
resolve_glMultiTexCoord3xOES(void)
{
	/* glMultiTexCoord3xOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glMultiTexCoord3xOES");
	}

	unsupported("glMultiTexCoord3xOES");
	return piglit_dispatch_glMultiTexCoord3xOES;
}

static void APIENTRY
stub_glMultiTexCoord3xOES(GLenum texture, GLfixed s, GLfixed t, GLfixed r)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord3xOES = resolve_glMultiTexCoord3xOES();
	piglit_dispatch_glMultiTexCoord3xOES(texture, s, t, r);
}

PFNGLMULTITEXCOORD3XOESPROC piglit_dispatch_glMultiTexCoord3xOES = stub_glMultiTexCoord3xOES;

static void*
resolve_glMultiTexCoord3xvOES(void)
{
	/* glMultiTexCoord3xvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glMultiTexCoord3xvOES");
	}

	unsupported("glMultiTexCoord3xvOES");
	return piglit_dispatch_glMultiTexCoord3xvOES;
}

static void APIENTRY
stub_glMultiTexCoord3xvOES(GLenum texture, const GLfixed * coords)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord3xvOES = resolve_glMultiTexCoord3xvOES();
	piglit_dispatch_glMultiTexCoord3xvOES(texture, coords);
}

PFNGLMULTITEXCOORD3XVOESPROC piglit_dispatch_glMultiTexCoord3xvOES = stub_glMultiTexCoord3xvOES;

static void*
resolve_glMultiTexCoord4bOES(void)
{
	/* glMultiTexCoord4bOES (GL_OES_byte_coordinates) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_byte_coordinates")) {
		return get_ext_proc("glMultiTexCoord4bOES");
	}

	unsupported("glMultiTexCoord4bOES");
	return piglit_dispatch_glMultiTexCoord4bOES;
}

static void APIENTRY
stub_glMultiTexCoord4bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord4bOES = resolve_glMultiTexCoord4bOES();
	piglit_dispatch_glMultiTexCoord4bOES(texture, s, t, r, q);
}

PFNGLMULTITEXCOORD4BOESPROC piglit_dispatch_glMultiTexCoord4bOES = stub_glMultiTexCoord4bOES;

static void*
resolve_glMultiTexCoord4bvOES(void)
{
	/* glMultiTexCoord4bvOES (GL_OES_byte_coordinates) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_byte_coordinates")) {
		return get_ext_proc("glMultiTexCoord4bvOES");
	}

	unsupported("glMultiTexCoord4bvOES");
	return piglit_dispatch_glMultiTexCoord4bvOES;
}

static void APIENTRY
stub_glMultiTexCoord4bvOES(GLenum texture, const GLbyte * coords)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord4bvOES = resolve_glMultiTexCoord4bvOES();
	piglit_dispatch_glMultiTexCoord4bvOES(texture, coords);
}

PFNGLMULTITEXCOORD4BVOESPROC piglit_dispatch_glMultiTexCoord4bvOES = stub_glMultiTexCoord4bvOES;

static void*
resolve_glMultiTexCoord4d(void)
{
	/* glMultiTexCoord4d (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoord4d", 13);
	}

	/* glMultiTexCoord4dARB (GL_ARB_multitexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multitexture")) {
		return get_ext_proc("glMultiTexCoord4dARB");
	}

	unsupported("glMultiTexCoord4d");
	return piglit_dispatch_glMultiTexCoord4d;
}

static void APIENTRY
stub_glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord4d = resolve_glMultiTexCoord4d();
	piglit_dispatch_glMultiTexCoord4d(target, s, t, r, q);
}

PFNGLMULTITEXCOORD4DPROC piglit_dispatch_glMultiTexCoord4d = stub_glMultiTexCoord4d;

static void*
resolve_glMultiTexCoord4dv(void)
{
	/* glMultiTexCoord4dv (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoord4dv", 13);
	}

	/* glMultiTexCoord4dvARB (GL_ARB_multitexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multitexture")) {
		return get_ext_proc("glMultiTexCoord4dvARB");
	}

	unsupported("glMultiTexCoord4dv");
	return piglit_dispatch_glMultiTexCoord4dv;
}

static void APIENTRY
stub_glMultiTexCoord4dv(GLenum target, const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord4dv = resolve_glMultiTexCoord4dv();
	piglit_dispatch_glMultiTexCoord4dv(target, v);
}

PFNGLMULTITEXCOORD4DVPROC piglit_dispatch_glMultiTexCoord4dv = stub_glMultiTexCoord4dv;

static void*
resolve_glMultiTexCoord4f(void)
{
	/* glMultiTexCoord4f (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoord4f", 13);
	}

	/* glMultiTexCoord4f (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glMultiTexCoord4f", 10);
	}

	/* glMultiTexCoord4fARB (GL_ARB_multitexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multitexture")) {
		return get_ext_proc("glMultiTexCoord4fARB");
	}

	unsupported("glMultiTexCoord4f");
	return piglit_dispatch_glMultiTexCoord4f;
}

static void APIENTRY
stub_glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord4f = resolve_glMultiTexCoord4f();
	piglit_dispatch_glMultiTexCoord4f(target, s, t, r, q);
}

PFNGLMULTITEXCOORD4FPROC piglit_dispatch_glMultiTexCoord4f = stub_glMultiTexCoord4f;

static void*
resolve_glMultiTexCoord4fv(void)
{
	/* glMultiTexCoord4fv (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoord4fv", 13);
	}

	/* glMultiTexCoord4fvARB (GL_ARB_multitexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multitexture")) {
		return get_ext_proc("glMultiTexCoord4fvARB");
	}

	unsupported("glMultiTexCoord4fv");
	return piglit_dispatch_glMultiTexCoord4fv;
}

static void APIENTRY
stub_glMultiTexCoord4fv(GLenum target, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord4fv = resolve_glMultiTexCoord4fv();
	piglit_dispatch_glMultiTexCoord4fv(target, v);
}

PFNGLMULTITEXCOORD4FVPROC piglit_dispatch_glMultiTexCoord4fv = stub_glMultiTexCoord4fv;

static void*
resolve_glMultiTexCoord4hNV(void)
{
	/* glMultiTexCoord4hNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glMultiTexCoord4hNV");
	}

	unsupported("glMultiTexCoord4hNV");
	return piglit_dispatch_glMultiTexCoord4hNV;
}

static void APIENTRY
stub_glMultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord4hNV = resolve_glMultiTexCoord4hNV();
	piglit_dispatch_glMultiTexCoord4hNV(target, s, t, r, q);
}

PFNGLMULTITEXCOORD4HNVPROC piglit_dispatch_glMultiTexCoord4hNV = stub_glMultiTexCoord4hNV;

static void*
resolve_glMultiTexCoord4hvNV(void)
{
	/* glMultiTexCoord4hvNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glMultiTexCoord4hvNV");
	}

	unsupported("glMultiTexCoord4hvNV");
	return piglit_dispatch_glMultiTexCoord4hvNV;
}

static void APIENTRY
stub_glMultiTexCoord4hvNV(GLenum target, const GLhalfNV * v)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord4hvNV = resolve_glMultiTexCoord4hvNV();
	piglit_dispatch_glMultiTexCoord4hvNV(target, v);
}

PFNGLMULTITEXCOORD4HVNVPROC piglit_dispatch_glMultiTexCoord4hvNV = stub_glMultiTexCoord4hvNV;

static void*
resolve_glMultiTexCoord4i(void)
{
	/* glMultiTexCoord4i (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoord4i", 13);
	}

	/* glMultiTexCoord4iARB (GL_ARB_multitexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multitexture")) {
		return get_ext_proc("glMultiTexCoord4iARB");
	}

	unsupported("glMultiTexCoord4i");
	return piglit_dispatch_glMultiTexCoord4i;
}

static void APIENTRY
stub_glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord4i = resolve_glMultiTexCoord4i();
	piglit_dispatch_glMultiTexCoord4i(target, s, t, r, q);
}

PFNGLMULTITEXCOORD4IPROC piglit_dispatch_glMultiTexCoord4i = stub_glMultiTexCoord4i;

static void*
resolve_glMultiTexCoord4iv(void)
{
	/* glMultiTexCoord4iv (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoord4iv", 13);
	}

	/* glMultiTexCoord4ivARB (GL_ARB_multitexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multitexture")) {
		return get_ext_proc("glMultiTexCoord4ivARB");
	}

	unsupported("glMultiTexCoord4iv");
	return piglit_dispatch_glMultiTexCoord4iv;
}

static void APIENTRY
stub_glMultiTexCoord4iv(GLenum target, const GLint * v)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord4iv = resolve_glMultiTexCoord4iv();
	piglit_dispatch_glMultiTexCoord4iv(target, v);
}

PFNGLMULTITEXCOORD4IVPROC piglit_dispatch_glMultiTexCoord4iv = stub_glMultiTexCoord4iv;

static void*
resolve_glMultiTexCoord4s(void)
{
	/* glMultiTexCoord4s (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoord4s", 13);
	}

	/* glMultiTexCoord4sARB (GL_ARB_multitexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multitexture")) {
		return get_ext_proc("glMultiTexCoord4sARB");
	}

	unsupported("glMultiTexCoord4s");
	return piglit_dispatch_glMultiTexCoord4s;
}

static void APIENTRY
stub_glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord4s = resolve_glMultiTexCoord4s();
	piglit_dispatch_glMultiTexCoord4s(target, s, t, r, q);
}

PFNGLMULTITEXCOORD4SPROC piglit_dispatch_glMultiTexCoord4s = stub_glMultiTexCoord4s;

static void*
resolve_glMultiTexCoord4sv(void)
{
	/* glMultiTexCoord4sv (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoord4sv", 13);
	}

	/* glMultiTexCoord4svARB (GL_ARB_multitexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multitexture")) {
		return get_ext_proc("glMultiTexCoord4svARB");
	}

	unsupported("glMultiTexCoord4sv");
	return piglit_dispatch_glMultiTexCoord4sv;
}

static void APIENTRY
stub_glMultiTexCoord4sv(GLenum target, const GLshort * v)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord4sv = resolve_glMultiTexCoord4sv();
	piglit_dispatch_glMultiTexCoord4sv(target, v);
}

PFNGLMULTITEXCOORD4SVPROC piglit_dispatch_glMultiTexCoord4sv = stub_glMultiTexCoord4sv;

static void*
resolve_glMultiTexCoord4x(void)
{
	/* glMultiTexCoord4x (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glMultiTexCoord4x", 10);
	}

	unsupported("glMultiTexCoord4x");
	return piglit_dispatch_glMultiTexCoord4x;
}

static void APIENTRY
stub_glMultiTexCoord4x(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord4x = resolve_glMultiTexCoord4x();
	piglit_dispatch_glMultiTexCoord4x(texture, s, t, r, q);
}

PFNGLMULTITEXCOORD4XPROC piglit_dispatch_glMultiTexCoord4x = stub_glMultiTexCoord4x;

static void*
resolve_glMultiTexCoord4xOES(void)
{
	/* glMultiTexCoord4xOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glMultiTexCoord4xOES");
	}

	unsupported("glMultiTexCoord4xOES");
	return piglit_dispatch_glMultiTexCoord4xOES;
}

static void APIENTRY
stub_glMultiTexCoord4xOES(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord4xOES = resolve_glMultiTexCoord4xOES();
	piglit_dispatch_glMultiTexCoord4xOES(texture, s, t, r, q);
}

PFNGLMULTITEXCOORD4XOESPROC piglit_dispatch_glMultiTexCoord4xOES = stub_glMultiTexCoord4xOES;

static void*
resolve_glMultiTexCoord4xvOES(void)
{
	/* glMultiTexCoord4xvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glMultiTexCoord4xvOES");
	}

	unsupported("glMultiTexCoord4xvOES");
	return piglit_dispatch_glMultiTexCoord4xvOES;
}

static void APIENTRY
stub_glMultiTexCoord4xvOES(GLenum texture, const GLfixed * coords)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoord4xvOES = resolve_glMultiTexCoord4xvOES();
	piglit_dispatch_glMultiTexCoord4xvOES(texture, coords);
}

PFNGLMULTITEXCOORD4XVOESPROC piglit_dispatch_glMultiTexCoord4xvOES = stub_glMultiTexCoord4xvOES;

static void*
resolve_glMultiTexCoordP1ui(void)
{
	/* glMultiTexCoordP1ui (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoordP1ui", 33);
	}

	/* glMultiTexCoordP1ui (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glMultiTexCoordP1ui");
	}

	unsupported("glMultiTexCoordP1ui");
	return piglit_dispatch_glMultiTexCoordP1ui;
}

static void APIENTRY
stub_glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoordP1ui = resolve_glMultiTexCoordP1ui();
	piglit_dispatch_glMultiTexCoordP1ui(texture, type, coords);
}

PFNGLMULTITEXCOORDP1UIPROC piglit_dispatch_glMultiTexCoordP1ui = stub_glMultiTexCoordP1ui;

static void*
resolve_glMultiTexCoordP1uiv(void)
{
	/* glMultiTexCoordP1uiv (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoordP1uiv", 33);
	}

	/* glMultiTexCoordP1uiv (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glMultiTexCoordP1uiv");
	}

	unsupported("glMultiTexCoordP1uiv");
	return piglit_dispatch_glMultiTexCoordP1uiv;
}

static void APIENTRY
stub_glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint * coords)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoordP1uiv = resolve_glMultiTexCoordP1uiv();
	piglit_dispatch_glMultiTexCoordP1uiv(texture, type, coords);
}

PFNGLMULTITEXCOORDP1UIVPROC piglit_dispatch_glMultiTexCoordP1uiv = stub_glMultiTexCoordP1uiv;

static void*
resolve_glMultiTexCoordP2ui(void)
{
	/* glMultiTexCoordP2ui (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoordP2ui", 33);
	}

	/* glMultiTexCoordP2ui (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glMultiTexCoordP2ui");
	}

	unsupported("glMultiTexCoordP2ui");
	return piglit_dispatch_glMultiTexCoordP2ui;
}

static void APIENTRY
stub_glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoordP2ui = resolve_glMultiTexCoordP2ui();
	piglit_dispatch_glMultiTexCoordP2ui(texture, type, coords);
}

PFNGLMULTITEXCOORDP2UIPROC piglit_dispatch_glMultiTexCoordP2ui = stub_glMultiTexCoordP2ui;

static void*
resolve_glMultiTexCoordP2uiv(void)
{
	/* glMultiTexCoordP2uiv (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoordP2uiv", 33);
	}

	/* glMultiTexCoordP2uiv (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glMultiTexCoordP2uiv");
	}

	unsupported("glMultiTexCoordP2uiv");
	return piglit_dispatch_glMultiTexCoordP2uiv;
}

static void APIENTRY
stub_glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint * coords)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoordP2uiv = resolve_glMultiTexCoordP2uiv();
	piglit_dispatch_glMultiTexCoordP2uiv(texture, type, coords);
}

PFNGLMULTITEXCOORDP2UIVPROC piglit_dispatch_glMultiTexCoordP2uiv = stub_glMultiTexCoordP2uiv;

static void*
resolve_glMultiTexCoordP3ui(void)
{
	/* glMultiTexCoordP3ui (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoordP3ui", 33);
	}

	/* glMultiTexCoordP3ui (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glMultiTexCoordP3ui");
	}

	unsupported("glMultiTexCoordP3ui");
	return piglit_dispatch_glMultiTexCoordP3ui;
}

static void APIENTRY
stub_glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoordP3ui = resolve_glMultiTexCoordP3ui();
	piglit_dispatch_glMultiTexCoordP3ui(texture, type, coords);
}

PFNGLMULTITEXCOORDP3UIPROC piglit_dispatch_glMultiTexCoordP3ui = stub_glMultiTexCoordP3ui;

static void*
resolve_glMultiTexCoordP3uiv(void)
{
	/* glMultiTexCoordP3uiv (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoordP3uiv", 33);
	}

	/* glMultiTexCoordP3uiv (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glMultiTexCoordP3uiv");
	}

	unsupported("glMultiTexCoordP3uiv");
	return piglit_dispatch_glMultiTexCoordP3uiv;
}

static void APIENTRY
stub_glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint * coords)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoordP3uiv = resolve_glMultiTexCoordP3uiv();
	piglit_dispatch_glMultiTexCoordP3uiv(texture, type, coords);
}

PFNGLMULTITEXCOORDP3UIVPROC piglit_dispatch_glMultiTexCoordP3uiv = stub_glMultiTexCoordP3uiv;

static void*
resolve_glMultiTexCoordP4ui(void)
{
	/* glMultiTexCoordP4ui (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoordP4ui", 33);
	}

	/* glMultiTexCoordP4ui (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glMultiTexCoordP4ui");
	}

	unsupported("glMultiTexCoordP4ui");
	return piglit_dispatch_glMultiTexCoordP4ui;
}

static void APIENTRY
stub_glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoordP4ui = resolve_glMultiTexCoordP4ui();
	piglit_dispatch_glMultiTexCoordP4ui(texture, type, coords);
}

PFNGLMULTITEXCOORDP4UIPROC piglit_dispatch_glMultiTexCoordP4ui = stub_glMultiTexCoordP4ui;

static void*
resolve_glMultiTexCoordP4uiv(void)
{
	/* glMultiTexCoordP4uiv (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glMultiTexCoordP4uiv", 33);
	}

	/* glMultiTexCoordP4uiv (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glMultiTexCoordP4uiv");
	}

	unsupported("glMultiTexCoordP4uiv");
	return piglit_dispatch_glMultiTexCoordP4uiv;
}

static void APIENTRY
stub_glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint * coords)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoordP4uiv = resolve_glMultiTexCoordP4uiv();
	piglit_dispatch_glMultiTexCoordP4uiv(texture, type, coords);
}

PFNGLMULTITEXCOORDP4UIVPROC piglit_dispatch_glMultiTexCoordP4uiv = stub_glMultiTexCoordP4uiv;

static void*
resolve_glMultiTexCoordPointerEXT(void)
{
	/* glMultiTexCoordPointerEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMultiTexCoordPointerEXT");
	}

	unsupported("glMultiTexCoordPointerEXT");
	return piglit_dispatch_glMultiTexCoordPointerEXT;
}

static void APIENTRY
stub_glMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void * pointer)
{
	check_initialized();
	piglit_dispatch_glMultiTexCoordPointerEXT = resolve_glMultiTexCoordPointerEXT();
	piglit_dispatch_glMultiTexCoordPointerEXT(texunit, size, type, stride, pointer);
}

PFNGLMULTITEXCOORDPOINTEREXTPROC piglit_dispatch_glMultiTexCoordPointerEXT = stub_glMultiTexCoordPointerEXT;

static void*
resolve_glMultiTexEnvfEXT(void)
{
	/* glMultiTexEnvfEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMultiTexEnvfEXT");
	}

	unsupported("glMultiTexEnvfEXT");
	return piglit_dispatch_glMultiTexEnvfEXT;
}

static void APIENTRY
stub_glMultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)
{
	check_initialized();
	piglit_dispatch_glMultiTexEnvfEXT = resolve_glMultiTexEnvfEXT();
	piglit_dispatch_glMultiTexEnvfEXT(texunit, target, pname, param);
}

PFNGLMULTITEXENVFEXTPROC piglit_dispatch_glMultiTexEnvfEXT = stub_glMultiTexEnvfEXT;

static void*
resolve_glMultiTexEnvfvEXT(void)
{
	/* glMultiTexEnvfvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMultiTexEnvfvEXT");
	}

	unsupported("glMultiTexEnvfvEXT");
	return piglit_dispatch_glMultiTexEnvfvEXT;
}

static void APIENTRY
stub_glMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glMultiTexEnvfvEXT = resolve_glMultiTexEnvfvEXT();
	piglit_dispatch_glMultiTexEnvfvEXT(texunit, target, pname, params);
}

PFNGLMULTITEXENVFVEXTPROC piglit_dispatch_glMultiTexEnvfvEXT = stub_glMultiTexEnvfvEXT;

static void*
resolve_glMultiTexEnviEXT(void)
{
	/* glMultiTexEnviEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMultiTexEnviEXT");
	}

	unsupported("glMultiTexEnviEXT");
	return piglit_dispatch_glMultiTexEnviEXT;
}

static void APIENTRY
stub_glMultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)
{
	check_initialized();
	piglit_dispatch_glMultiTexEnviEXT = resolve_glMultiTexEnviEXT();
	piglit_dispatch_glMultiTexEnviEXT(texunit, target, pname, param);
}

PFNGLMULTITEXENVIEXTPROC piglit_dispatch_glMultiTexEnviEXT = stub_glMultiTexEnviEXT;

static void*
resolve_glMultiTexEnvivEXT(void)
{
	/* glMultiTexEnvivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMultiTexEnvivEXT");
	}

	unsupported("glMultiTexEnvivEXT");
	return piglit_dispatch_glMultiTexEnvivEXT;
}

static void APIENTRY
stub_glMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glMultiTexEnvivEXT = resolve_glMultiTexEnvivEXT();
	piglit_dispatch_glMultiTexEnvivEXT(texunit, target, pname, params);
}

PFNGLMULTITEXENVIVEXTPROC piglit_dispatch_glMultiTexEnvivEXT = stub_glMultiTexEnvivEXT;

static void*
resolve_glMultiTexGendEXT(void)
{
	/* glMultiTexGendEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMultiTexGendEXT");
	}

	unsupported("glMultiTexGendEXT");
	return piglit_dispatch_glMultiTexGendEXT;
}

static void APIENTRY
stub_glMultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param)
{
	check_initialized();
	piglit_dispatch_glMultiTexGendEXT = resolve_glMultiTexGendEXT();
	piglit_dispatch_glMultiTexGendEXT(texunit, coord, pname, param);
}

PFNGLMULTITEXGENDEXTPROC piglit_dispatch_glMultiTexGendEXT = stub_glMultiTexGendEXT;

static void*
resolve_glMultiTexGendvEXT(void)
{
	/* glMultiTexGendvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMultiTexGendvEXT");
	}

	unsupported("glMultiTexGendvEXT");
	return piglit_dispatch_glMultiTexGendvEXT;
}

static void APIENTRY
stub_glMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble * params)
{
	check_initialized();
	piglit_dispatch_glMultiTexGendvEXT = resolve_glMultiTexGendvEXT();
	piglit_dispatch_glMultiTexGendvEXT(texunit, coord, pname, params);
}

PFNGLMULTITEXGENDVEXTPROC piglit_dispatch_glMultiTexGendvEXT = stub_glMultiTexGendvEXT;

static void*
resolve_glMultiTexGenfEXT(void)
{
	/* glMultiTexGenfEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMultiTexGenfEXT");
	}

	unsupported("glMultiTexGenfEXT");
	return piglit_dispatch_glMultiTexGenfEXT;
}

static void APIENTRY
stub_glMultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param)
{
	check_initialized();
	piglit_dispatch_glMultiTexGenfEXT = resolve_glMultiTexGenfEXT();
	piglit_dispatch_glMultiTexGenfEXT(texunit, coord, pname, param);
}

PFNGLMULTITEXGENFEXTPROC piglit_dispatch_glMultiTexGenfEXT = stub_glMultiTexGenfEXT;

static void*
resolve_glMultiTexGenfvEXT(void)
{
	/* glMultiTexGenfvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMultiTexGenfvEXT");
	}

	unsupported("glMultiTexGenfvEXT");
	return piglit_dispatch_glMultiTexGenfvEXT;
}

static void APIENTRY
stub_glMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glMultiTexGenfvEXT = resolve_glMultiTexGenfvEXT();
	piglit_dispatch_glMultiTexGenfvEXT(texunit, coord, pname, params);
}

PFNGLMULTITEXGENFVEXTPROC piglit_dispatch_glMultiTexGenfvEXT = stub_glMultiTexGenfvEXT;

static void*
resolve_glMultiTexGeniEXT(void)
{
	/* glMultiTexGeniEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMultiTexGeniEXT");
	}

	unsupported("glMultiTexGeniEXT");
	return piglit_dispatch_glMultiTexGeniEXT;
}

static void APIENTRY
stub_glMultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param)
{
	check_initialized();
	piglit_dispatch_glMultiTexGeniEXT = resolve_glMultiTexGeniEXT();
	piglit_dispatch_glMultiTexGeniEXT(texunit, coord, pname, param);
}

PFNGLMULTITEXGENIEXTPROC piglit_dispatch_glMultiTexGeniEXT = stub_glMultiTexGeniEXT;

static void*
resolve_glMultiTexGenivEXT(void)
{
	/* glMultiTexGenivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMultiTexGenivEXT");
	}

	unsupported("glMultiTexGenivEXT");
	return piglit_dispatch_glMultiTexGenivEXT;
}

static void APIENTRY
stub_glMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glMultiTexGenivEXT = resolve_glMultiTexGenivEXT();
	piglit_dispatch_glMultiTexGenivEXT(texunit, coord, pname, params);
}

PFNGLMULTITEXGENIVEXTPROC piglit_dispatch_glMultiTexGenivEXT = stub_glMultiTexGenivEXT;

static void*
resolve_glMultiTexImage1DEXT(void)
{
	/* glMultiTexImage1DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMultiTexImage1DEXT");
	}

	unsupported("glMultiTexImage1DEXT");
	return piglit_dispatch_glMultiTexImage1DEXT;
}

static void APIENTRY
stub_glMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels)
{
	check_initialized();
	piglit_dispatch_glMultiTexImage1DEXT = resolve_glMultiTexImage1DEXT();
	piglit_dispatch_glMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels);
}

PFNGLMULTITEXIMAGE1DEXTPROC piglit_dispatch_glMultiTexImage1DEXT = stub_glMultiTexImage1DEXT;

static void*
resolve_glMultiTexImage2DEXT(void)
{
	/* glMultiTexImage2DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMultiTexImage2DEXT");
	}

	unsupported("glMultiTexImage2DEXT");
	return piglit_dispatch_glMultiTexImage2DEXT;
}

static void APIENTRY
stub_glMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels)
{
	check_initialized();
	piglit_dispatch_glMultiTexImage2DEXT = resolve_glMultiTexImage2DEXT();
	piglit_dispatch_glMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels);
}

PFNGLMULTITEXIMAGE2DEXTPROC piglit_dispatch_glMultiTexImage2DEXT = stub_glMultiTexImage2DEXT;

static void*
resolve_glMultiTexImage3DEXT(void)
{
	/* glMultiTexImage3DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMultiTexImage3DEXT");
	}

	unsupported("glMultiTexImage3DEXT");
	return piglit_dispatch_glMultiTexImage3DEXT;
}

static void APIENTRY
stub_glMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels)
{
	check_initialized();
	piglit_dispatch_glMultiTexImage3DEXT = resolve_glMultiTexImage3DEXT();
	piglit_dispatch_glMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
}

PFNGLMULTITEXIMAGE3DEXTPROC piglit_dispatch_glMultiTexImage3DEXT = stub_glMultiTexImage3DEXT;

static void*
resolve_glMultiTexParameterIivEXT(void)
{
	/* glMultiTexParameterIivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMultiTexParameterIivEXT");
	}

	unsupported("glMultiTexParameterIivEXT");
	return piglit_dispatch_glMultiTexParameterIivEXT;
}

static void APIENTRY
stub_glMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glMultiTexParameterIivEXT = resolve_glMultiTexParameterIivEXT();
	piglit_dispatch_glMultiTexParameterIivEXT(texunit, target, pname, params);
}

PFNGLMULTITEXPARAMETERIIVEXTPROC piglit_dispatch_glMultiTexParameterIivEXT = stub_glMultiTexParameterIivEXT;

static void*
resolve_glMultiTexParameterIuivEXT(void)
{
	/* glMultiTexParameterIuivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMultiTexParameterIuivEXT");
	}

	unsupported("glMultiTexParameterIuivEXT");
	return piglit_dispatch_glMultiTexParameterIuivEXT;
}

static void APIENTRY
stub_glMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint * params)
{
	check_initialized();
	piglit_dispatch_glMultiTexParameterIuivEXT = resolve_glMultiTexParameterIuivEXT();
	piglit_dispatch_glMultiTexParameterIuivEXT(texunit, target, pname, params);
}

PFNGLMULTITEXPARAMETERIUIVEXTPROC piglit_dispatch_glMultiTexParameterIuivEXT = stub_glMultiTexParameterIuivEXT;

static void*
resolve_glMultiTexParameterfEXT(void)
{
	/* glMultiTexParameterfEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMultiTexParameterfEXT");
	}

	unsupported("glMultiTexParameterfEXT");
	return piglit_dispatch_glMultiTexParameterfEXT;
}

static void APIENTRY
stub_glMultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)
{
	check_initialized();
	piglit_dispatch_glMultiTexParameterfEXT = resolve_glMultiTexParameterfEXT();
	piglit_dispatch_glMultiTexParameterfEXT(texunit, target, pname, param);
}

PFNGLMULTITEXPARAMETERFEXTPROC piglit_dispatch_glMultiTexParameterfEXT = stub_glMultiTexParameterfEXT;

static void*
resolve_glMultiTexParameterfvEXT(void)
{
	/* glMultiTexParameterfvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMultiTexParameterfvEXT");
	}

	unsupported("glMultiTexParameterfvEXT");
	return piglit_dispatch_glMultiTexParameterfvEXT;
}

static void APIENTRY
stub_glMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glMultiTexParameterfvEXT = resolve_glMultiTexParameterfvEXT();
	piglit_dispatch_glMultiTexParameterfvEXT(texunit, target, pname, params);
}

PFNGLMULTITEXPARAMETERFVEXTPROC piglit_dispatch_glMultiTexParameterfvEXT = stub_glMultiTexParameterfvEXT;

static void*
resolve_glMultiTexParameteriEXT(void)
{
	/* glMultiTexParameteriEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMultiTexParameteriEXT");
	}

	unsupported("glMultiTexParameteriEXT");
	return piglit_dispatch_glMultiTexParameteriEXT;
}

static void APIENTRY
stub_glMultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)
{
	check_initialized();
	piglit_dispatch_glMultiTexParameteriEXT = resolve_glMultiTexParameteriEXT();
	piglit_dispatch_glMultiTexParameteriEXT(texunit, target, pname, param);
}

PFNGLMULTITEXPARAMETERIEXTPROC piglit_dispatch_glMultiTexParameteriEXT = stub_glMultiTexParameteriEXT;

static void*
resolve_glMultiTexParameterivEXT(void)
{
	/* glMultiTexParameterivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMultiTexParameterivEXT");
	}

	unsupported("glMultiTexParameterivEXT");
	return piglit_dispatch_glMultiTexParameterivEXT;
}

static void APIENTRY
stub_glMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glMultiTexParameterivEXT = resolve_glMultiTexParameterivEXT();
	piglit_dispatch_glMultiTexParameterivEXT(texunit, target, pname, params);
}

PFNGLMULTITEXPARAMETERIVEXTPROC piglit_dispatch_glMultiTexParameterivEXT = stub_glMultiTexParameterivEXT;

static void*
resolve_glMultiTexRenderbufferEXT(void)
{
	/* glMultiTexRenderbufferEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMultiTexRenderbufferEXT");
	}

	unsupported("glMultiTexRenderbufferEXT");
	return piglit_dispatch_glMultiTexRenderbufferEXT;
}

static void APIENTRY
stub_glMultiTexRenderbufferEXT(GLenum texunit, GLenum target, GLuint renderbuffer)
{
	check_initialized();
	piglit_dispatch_glMultiTexRenderbufferEXT = resolve_glMultiTexRenderbufferEXT();
	piglit_dispatch_glMultiTexRenderbufferEXT(texunit, target, renderbuffer);
}

PFNGLMULTITEXRENDERBUFFEREXTPROC piglit_dispatch_glMultiTexRenderbufferEXT = stub_glMultiTexRenderbufferEXT;

static void*
resolve_glMultiTexSubImage1DEXT(void)
{
	/* glMultiTexSubImage1DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMultiTexSubImage1DEXT");
	}

	unsupported("glMultiTexSubImage1DEXT");
	return piglit_dispatch_glMultiTexSubImage1DEXT;
}

static void APIENTRY
stub_glMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels)
{
	check_initialized();
	piglit_dispatch_glMultiTexSubImage1DEXT = resolve_glMultiTexSubImage1DEXT();
	piglit_dispatch_glMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels);
}

PFNGLMULTITEXSUBIMAGE1DEXTPROC piglit_dispatch_glMultiTexSubImage1DEXT = stub_glMultiTexSubImage1DEXT;

static void*
resolve_glMultiTexSubImage2DEXT(void)
{
	/* glMultiTexSubImage2DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMultiTexSubImage2DEXT");
	}

	unsupported("glMultiTexSubImage2DEXT");
	return piglit_dispatch_glMultiTexSubImage2DEXT;
}

static void APIENTRY
stub_glMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels)
{
	check_initialized();
	piglit_dispatch_glMultiTexSubImage2DEXT = resolve_glMultiTexSubImage2DEXT();
	piglit_dispatch_glMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
}

PFNGLMULTITEXSUBIMAGE2DEXTPROC piglit_dispatch_glMultiTexSubImage2DEXT = stub_glMultiTexSubImage2DEXT;

static void*
resolve_glMultiTexSubImage3DEXT(void)
{
	/* glMultiTexSubImage3DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glMultiTexSubImage3DEXT");
	}

	unsupported("glMultiTexSubImage3DEXT");
	return piglit_dispatch_glMultiTexSubImage3DEXT;
}

static void APIENTRY
stub_glMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels)
{
	check_initialized();
	piglit_dispatch_glMultiTexSubImage3DEXT = resolve_glMultiTexSubImage3DEXT();
	piglit_dispatch_glMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

PFNGLMULTITEXSUBIMAGE3DEXTPROC piglit_dispatch_glMultiTexSubImage3DEXT = stub_glMultiTexSubImage3DEXT;

static void*
resolve_glNamedBufferDataEXT(void)
{
	/* glNamedBufferDataEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glNamedBufferDataEXT");
	}

	unsupported("glNamedBufferDataEXT");
	return piglit_dispatch_glNamedBufferDataEXT;
}

static void APIENTRY
stub_glNamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const void * data, GLenum usage)
{
	check_initialized();
	piglit_dispatch_glNamedBufferDataEXT = resolve_glNamedBufferDataEXT();
	piglit_dispatch_glNamedBufferDataEXT(buffer, size, data, usage);
}

PFNGLNAMEDBUFFERDATAEXTPROC piglit_dispatch_glNamedBufferDataEXT = stub_glNamedBufferDataEXT;

static void*
resolve_glNamedBufferStorageEXT(void)
{
	/* glNamedBufferStorageEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glNamedBufferStorageEXT");
	}

	unsupported("glNamedBufferStorageEXT");
	return piglit_dispatch_glNamedBufferStorageEXT;
}

static void APIENTRY
stub_glNamedBufferStorageEXT(GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags)
{
	check_initialized();
	piglit_dispatch_glNamedBufferStorageEXT = resolve_glNamedBufferStorageEXT();
	piglit_dispatch_glNamedBufferStorageEXT(buffer, size, data, flags);
}

PFNGLNAMEDBUFFERSTORAGEEXTPROC piglit_dispatch_glNamedBufferStorageEXT = stub_glNamedBufferStorageEXT;

static void*
resolve_glNamedBufferSubDataEXT(void)
{
	/* glNamedBufferSubDataEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glNamedBufferSubDataEXT");
	}

	unsupported("glNamedBufferSubDataEXT");
	return piglit_dispatch_glNamedBufferSubDataEXT;
}

static void APIENTRY
stub_glNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data)
{
	check_initialized();
	piglit_dispatch_glNamedBufferSubDataEXT = resolve_glNamedBufferSubDataEXT();
	piglit_dispatch_glNamedBufferSubDataEXT(buffer, offset, size, data);
}

PFNGLNAMEDBUFFERSUBDATAEXTPROC piglit_dispatch_glNamedBufferSubDataEXT = stub_glNamedBufferSubDataEXT;

static void*
resolve_glNamedCopyBufferSubDataEXT(void)
{
	/* glNamedCopyBufferSubDataEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glNamedCopyBufferSubDataEXT");
	}

	unsupported("glNamedCopyBufferSubDataEXT");
	return piglit_dispatch_glNamedCopyBufferSubDataEXT;
}

static void APIENTRY
stub_glNamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
	check_initialized();
	piglit_dispatch_glNamedCopyBufferSubDataEXT = resolve_glNamedCopyBufferSubDataEXT();
	piglit_dispatch_glNamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size);
}

PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC piglit_dispatch_glNamedCopyBufferSubDataEXT = stub_glNamedCopyBufferSubDataEXT;

static void*
resolve_glNamedFramebufferParameteriEXT(void)
{
	/* glNamedFramebufferParameteriEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glNamedFramebufferParameteriEXT");
	}

	unsupported("glNamedFramebufferParameteriEXT");
	return piglit_dispatch_glNamedFramebufferParameteriEXT;
}

static void APIENTRY
stub_glNamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param)
{
	check_initialized();
	piglit_dispatch_glNamedFramebufferParameteriEXT = resolve_glNamedFramebufferParameteriEXT();
	piglit_dispatch_glNamedFramebufferParameteriEXT(framebuffer, pname, param);
}

PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC piglit_dispatch_glNamedFramebufferParameteriEXT = stub_glNamedFramebufferParameteriEXT;

static void*
resolve_glNamedFramebufferRenderbufferEXT(void)
{
	/* glNamedFramebufferRenderbufferEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glNamedFramebufferRenderbufferEXT");
	}

	unsupported("glNamedFramebufferRenderbufferEXT");
	return piglit_dispatch_glNamedFramebufferRenderbufferEXT;
}

static void APIENTRY
stub_glNamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
	check_initialized();
	piglit_dispatch_glNamedFramebufferRenderbufferEXT = resolve_glNamedFramebufferRenderbufferEXT();
	piglit_dispatch_glNamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer);
}

PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC piglit_dispatch_glNamedFramebufferRenderbufferEXT = stub_glNamedFramebufferRenderbufferEXT;

static void*
resolve_glNamedFramebufferTexture1DEXT(void)
{
	/* glNamedFramebufferTexture1DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glNamedFramebufferTexture1DEXT");
	}

	unsupported("glNamedFramebufferTexture1DEXT");
	return piglit_dispatch_glNamedFramebufferTexture1DEXT;
}

static void APIENTRY
stub_glNamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
	check_initialized();
	piglit_dispatch_glNamedFramebufferTexture1DEXT = resolve_glNamedFramebufferTexture1DEXT();
	piglit_dispatch_glNamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level);
}

PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC piglit_dispatch_glNamedFramebufferTexture1DEXT = stub_glNamedFramebufferTexture1DEXT;

static void*
resolve_glNamedFramebufferTexture2DEXT(void)
{
	/* glNamedFramebufferTexture2DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glNamedFramebufferTexture2DEXT");
	}

	unsupported("glNamedFramebufferTexture2DEXT");
	return piglit_dispatch_glNamedFramebufferTexture2DEXT;
}

static void APIENTRY
stub_glNamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
	check_initialized();
	piglit_dispatch_glNamedFramebufferTexture2DEXT = resolve_glNamedFramebufferTexture2DEXT();
	piglit_dispatch_glNamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level);
}

PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC piglit_dispatch_glNamedFramebufferTexture2DEXT = stub_glNamedFramebufferTexture2DEXT;

static void*
resolve_glNamedFramebufferTexture3DEXT(void)
{
	/* glNamedFramebufferTexture3DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glNamedFramebufferTexture3DEXT");
	}

	unsupported("glNamedFramebufferTexture3DEXT");
	return piglit_dispatch_glNamedFramebufferTexture3DEXT;
}

static void APIENTRY
stub_glNamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
	check_initialized();
	piglit_dispatch_glNamedFramebufferTexture3DEXT = resolve_glNamedFramebufferTexture3DEXT();
	piglit_dispatch_glNamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset);
}

PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC piglit_dispatch_glNamedFramebufferTexture3DEXT = stub_glNamedFramebufferTexture3DEXT;

static void*
resolve_glNamedFramebufferTextureEXT(void)
{
	/* glNamedFramebufferTextureEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glNamedFramebufferTextureEXT");
	}

	unsupported("glNamedFramebufferTextureEXT");
	return piglit_dispatch_glNamedFramebufferTextureEXT;
}

static void APIENTRY
stub_glNamedFramebufferTextureEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
{
	check_initialized();
	piglit_dispatch_glNamedFramebufferTextureEXT = resolve_glNamedFramebufferTextureEXT();
	piglit_dispatch_glNamedFramebufferTextureEXT(framebuffer, attachment, texture, level);
}

PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC piglit_dispatch_glNamedFramebufferTextureEXT = stub_glNamedFramebufferTextureEXT;

static void*
resolve_glNamedFramebufferTextureFaceEXT(void)
{
	/* glNamedFramebufferTextureFaceEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glNamedFramebufferTextureFaceEXT");
	}

	unsupported("glNamedFramebufferTextureFaceEXT");
	return piglit_dispatch_glNamedFramebufferTextureFaceEXT;
}

static void APIENTRY
stub_glNamedFramebufferTextureFaceEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
	check_initialized();
	piglit_dispatch_glNamedFramebufferTextureFaceEXT = resolve_glNamedFramebufferTextureFaceEXT();
	piglit_dispatch_glNamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face);
}

PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC piglit_dispatch_glNamedFramebufferTextureFaceEXT = stub_glNamedFramebufferTextureFaceEXT;

static void*
resolve_glNamedFramebufferTextureLayerEXT(void)
{
	/* glNamedFramebufferTextureLayerEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glNamedFramebufferTextureLayerEXT");
	}

	unsupported("glNamedFramebufferTextureLayerEXT");
	return piglit_dispatch_glNamedFramebufferTextureLayerEXT;
}

static void APIENTRY
stub_glNamedFramebufferTextureLayerEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
	check_initialized();
	piglit_dispatch_glNamedFramebufferTextureLayerEXT = resolve_glNamedFramebufferTextureLayerEXT();
	piglit_dispatch_glNamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer);
}

PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC piglit_dispatch_glNamedFramebufferTextureLayerEXT = stub_glNamedFramebufferTextureLayerEXT;

static void*
resolve_glNamedProgramLocalParameter4dEXT(void)
{
	/* glNamedProgramLocalParameter4dEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glNamedProgramLocalParameter4dEXT");
	}

	unsupported("glNamedProgramLocalParameter4dEXT");
	return piglit_dispatch_glNamedProgramLocalParameter4dEXT;
}

static void APIENTRY
stub_glNamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
	check_initialized();
	piglit_dispatch_glNamedProgramLocalParameter4dEXT = resolve_glNamedProgramLocalParameter4dEXT();
	piglit_dispatch_glNamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w);
}

PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC piglit_dispatch_glNamedProgramLocalParameter4dEXT = stub_glNamedProgramLocalParameter4dEXT;

static void*
resolve_glNamedProgramLocalParameter4dvEXT(void)
{
	/* glNamedProgramLocalParameter4dvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glNamedProgramLocalParameter4dvEXT");
	}

	unsupported("glNamedProgramLocalParameter4dvEXT");
	return piglit_dispatch_glNamedProgramLocalParameter4dvEXT;
}

static void APIENTRY
stub_glNamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble * params)
{
	check_initialized();
	piglit_dispatch_glNamedProgramLocalParameter4dvEXT = resolve_glNamedProgramLocalParameter4dvEXT();
	piglit_dispatch_glNamedProgramLocalParameter4dvEXT(program, target, index, params);
}

PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC piglit_dispatch_glNamedProgramLocalParameter4dvEXT = stub_glNamedProgramLocalParameter4dvEXT;

static void*
resolve_glNamedProgramLocalParameter4fEXT(void)
{
	/* glNamedProgramLocalParameter4fEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glNamedProgramLocalParameter4fEXT");
	}

	unsupported("glNamedProgramLocalParameter4fEXT");
	return piglit_dispatch_glNamedProgramLocalParameter4fEXT;
}

static void APIENTRY
stub_glNamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
	check_initialized();
	piglit_dispatch_glNamedProgramLocalParameter4fEXT = resolve_glNamedProgramLocalParameter4fEXT();
	piglit_dispatch_glNamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w);
}

PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC piglit_dispatch_glNamedProgramLocalParameter4fEXT = stub_glNamedProgramLocalParameter4fEXT;

static void*
resolve_glNamedProgramLocalParameter4fvEXT(void)
{
	/* glNamedProgramLocalParameter4fvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glNamedProgramLocalParameter4fvEXT");
	}

	unsupported("glNamedProgramLocalParameter4fvEXT");
	return piglit_dispatch_glNamedProgramLocalParameter4fvEXT;
}

static void APIENTRY
stub_glNamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glNamedProgramLocalParameter4fvEXT = resolve_glNamedProgramLocalParameter4fvEXT();
	piglit_dispatch_glNamedProgramLocalParameter4fvEXT(program, target, index, params);
}

PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC piglit_dispatch_glNamedProgramLocalParameter4fvEXT = stub_glNamedProgramLocalParameter4fvEXT;

static void*
resolve_glNamedProgramLocalParameterI4iEXT(void)
{
	/* glNamedProgramLocalParameterI4iEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glNamedProgramLocalParameterI4iEXT");
	}

	unsupported("glNamedProgramLocalParameterI4iEXT");
	return piglit_dispatch_glNamedProgramLocalParameterI4iEXT;
}

static void APIENTRY
stub_glNamedProgramLocalParameterI4iEXT(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
	check_initialized();
	piglit_dispatch_glNamedProgramLocalParameterI4iEXT = resolve_glNamedProgramLocalParameterI4iEXT();
	piglit_dispatch_glNamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w);
}

PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC piglit_dispatch_glNamedProgramLocalParameterI4iEXT = stub_glNamedProgramLocalParameterI4iEXT;

static void*
resolve_glNamedProgramLocalParameterI4ivEXT(void)
{
	/* glNamedProgramLocalParameterI4ivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glNamedProgramLocalParameterI4ivEXT");
	}

	unsupported("glNamedProgramLocalParameterI4ivEXT");
	return piglit_dispatch_glNamedProgramLocalParameterI4ivEXT;
}

static void APIENTRY
stub_glNamedProgramLocalParameterI4ivEXT(GLuint program, GLenum target, GLuint index, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glNamedProgramLocalParameterI4ivEXT = resolve_glNamedProgramLocalParameterI4ivEXT();
	piglit_dispatch_glNamedProgramLocalParameterI4ivEXT(program, target, index, params);
}

PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC piglit_dispatch_glNamedProgramLocalParameterI4ivEXT = stub_glNamedProgramLocalParameterI4ivEXT;

static void*
resolve_glNamedProgramLocalParameterI4uiEXT(void)
{
	/* glNamedProgramLocalParameterI4uiEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glNamedProgramLocalParameterI4uiEXT");
	}

	unsupported("glNamedProgramLocalParameterI4uiEXT");
	return piglit_dispatch_glNamedProgramLocalParameterI4uiEXT;
}

static void APIENTRY
stub_glNamedProgramLocalParameterI4uiEXT(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
	check_initialized();
	piglit_dispatch_glNamedProgramLocalParameterI4uiEXT = resolve_glNamedProgramLocalParameterI4uiEXT();
	piglit_dispatch_glNamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w);
}

PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC piglit_dispatch_glNamedProgramLocalParameterI4uiEXT = stub_glNamedProgramLocalParameterI4uiEXT;

static void*
resolve_glNamedProgramLocalParameterI4uivEXT(void)
{
	/* glNamedProgramLocalParameterI4uivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glNamedProgramLocalParameterI4uivEXT");
	}

	unsupported("glNamedProgramLocalParameterI4uivEXT");
	return piglit_dispatch_glNamedProgramLocalParameterI4uivEXT;
}

static void APIENTRY
stub_glNamedProgramLocalParameterI4uivEXT(GLuint program, GLenum target, GLuint index, const GLuint * params)
{
	check_initialized();
	piglit_dispatch_glNamedProgramLocalParameterI4uivEXT = resolve_glNamedProgramLocalParameterI4uivEXT();
	piglit_dispatch_glNamedProgramLocalParameterI4uivEXT(program, target, index, params);
}

PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC piglit_dispatch_glNamedProgramLocalParameterI4uivEXT = stub_glNamedProgramLocalParameterI4uivEXT;

static void*
resolve_glNamedProgramLocalParameters4fvEXT(void)
{
	/* glNamedProgramLocalParameters4fvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glNamedProgramLocalParameters4fvEXT");
	}

	unsupported("glNamedProgramLocalParameters4fvEXT");
	return piglit_dispatch_glNamedProgramLocalParameters4fvEXT;
}

static void APIENTRY
stub_glNamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glNamedProgramLocalParameters4fvEXT = resolve_glNamedProgramLocalParameters4fvEXT();
	piglit_dispatch_glNamedProgramLocalParameters4fvEXT(program, target, index, count, params);
}

PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC piglit_dispatch_glNamedProgramLocalParameters4fvEXT = stub_glNamedProgramLocalParameters4fvEXT;

static void*
resolve_glNamedProgramLocalParametersI4ivEXT(void)
{
	/* glNamedProgramLocalParametersI4ivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glNamedProgramLocalParametersI4ivEXT");
	}

	unsupported("glNamedProgramLocalParametersI4ivEXT");
	return piglit_dispatch_glNamedProgramLocalParametersI4ivEXT;
}

static void APIENTRY
stub_glNamedProgramLocalParametersI4ivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glNamedProgramLocalParametersI4ivEXT = resolve_glNamedProgramLocalParametersI4ivEXT();
	piglit_dispatch_glNamedProgramLocalParametersI4ivEXT(program, target, index, count, params);
}

PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC piglit_dispatch_glNamedProgramLocalParametersI4ivEXT = stub_glNamedProgramLocalParametersI4ivEXT;

static void*
resolve_glNamedProgramLocalParametersI4uivEXT(void)
{
	/* glNamedProgramLocalParametersI4uivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glNamedProgramLocalParametersI4uivEXT");
	}

	unsupported("glNamedProgramLocalParametersI4uivEXT");
	return piglit_dispatch_glNamedProgramLocalParametersI4uivEXT;
}

static void APIENTRY
stub_glNamedProgramLocalParametersI4uivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint * params)
{
	check_initialized();
	piglit_dispatch_glNamedProgramLocalParametersI4uivEXT = resolve_glNamedProgramLocalParametersI4uivEXT();
	piglit_dispatch_glNamedProgramLocalParametersI4uivEXT(program, target, index, count, params);
}

PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC piglit_dispatch_glNamedProgramLocalParametersI4uivEXT = stub_glNamedProgramLocalParametersI4uivEXT;

static void*
resolve_glNamedProgramStringEXT(void)
{
	/* glNamedProgramStringEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glNamedProgramStringEXT");
	}

	unsupported("glNamedProgramStringEXT");
	return piglit_dispatch_glNamedProgramStringEXT;
}

static void APIENTRY
stub_glNamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const void * string)
{
	check_initialized();
	piglit_dispatch_glNamedProgramStringEXT = resolve_glNamedProgramStringEXT();
	piglit_dispatch_glNamedProgramStringEXT(program, target, format, len, string);
}

PFNGLNAMEDPROGRAMSTRINGEXTPROC piglit_dispatch_glNamedProgramStringEXT = stub_glNamedProgramStringEXT;

static void*
resolve_glNamedRenderbufferStorageEXT(void)
{
	/* glNamedRenderbufferStorageEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glNamedRenderbufferStorageEXT");
	}

	unsupported("glNamedRenderbufferStorageEXT");
	return piglit_dispatch_glNamedRenderbufferStorageEXT;
}

static void APIENTRY
stub_glNamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
{
	check_initialized();
	piglit_dispatch_glNamedRenderbufferStorageEXT = resolve_glNamedRenderbufferStorageEXT();
	piglit_dispatch_glNamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height);
}

PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC piglit_dispatch_glNamedRenderbufferStorageEXT = stub_glNamedRenderbufferStorageEXT;

static void*
resolve_glNamedRenderbufferStorageMultisampleCoverageEXT(void)
{
	/* glNamedRenderbufferStorageMultisampleCoverageEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glNamedRenderbufferStorageMultisampleCoverageEXT");
	}

	unsupported("glNamedRenderbufferStorageMultisampleCoverageEXT");
	return piglit_dispatch_glNamedRenderbufferStorageMultisampleCoverageEXT;
}

static void APIENTRY
stub_glNamedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
{
	check_initialized();
	piglit_dispatch_glNamedRenderbufferStorageMultisampleCoverageEXT = resolve_glNamedRenderbufferStorageMultisampleCoverageEXT();
	piglit_dispatch_glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
}

PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC piglit_dispatch_glNamedRenderbufferStorageMultisampleCoverageEXT = stub_glNamedRenderbufferStorageMultisampleCoverageEXT;

static void*
resolve_glNamedRenderbufferStorageMultisampleEXT(void)
{
	/* glNamedRenderbufferStorageMultisampleEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glNamedRenderbufferStorageMultisampleEXT");
	}

	unsupported("glNamedRenderbufferStorageMultisampleEXT");
	return piglit_dispatch_glNamedRenderbufferStorageMultisampleEXT;
}

static void APIENTRY
stub_glNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
	check_initialized();
	piglit_dispatch_glNamedRenderbufferStorageMultisampleEXT = resolve_glNamedRenderbufferStorageMultisampleEXT();
	piglit_dispatch_glNamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height);
}

PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC piglit_dispatch_glNamedRenderbufferStorageMultisampleEXT = stub_glNamedRenderbufferStorageMultisampleEXT;

static void*
resolve_glNamedStringARB(void)
{
	/* glNamedStringARB (GL_ARB_shading_language_include) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shading_language_include")) {
		return get_ext_proc("glNamedStringARB");
	}

	unsupported("glNamedStringARB");
	return piglit_dispatch_glNamedStringARB;
}

static void APIENTRY
stub_glNamedStringARB(GLenum type, GLint namelen, const GLchar * name, GLint stringlen, const GLchar * string)
{
	check_initialized();
	piglit_dispatch_glNamedStringARB = resolve_glNamedStringARB();
	piglit_dispatch_glNamedStringARB(type, namelen, name, stringlen, string);
}

PFNGLNAMEDSTRINGARBPROC piglit_dispatch_glNamedStringARB = stub_glNamedStringARB;

static void*
resolve_glNewList(void)
{
	/* glNewList (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glNewList", 10);
	}

	unsupported("glNewList");
	return piglit_dispatch_glNewList;
}

static void APIENTRY
stub_glNewList(GLuint list, GLenum mode)
{
	check_initialized();
	piglit_dispatch_glNewList = resolve_glNewList();
	piglit_dispatch_glNewList(list, mode);
}

PFNGLNEWLISTPROC piglit_dispatch_glNewList = stub_glNewList;

static void*
resolve_glNewObjectBufferATI(void)
{
	/* glNewObjectBufferATI (GL_ATI_vertex_array_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_array_object")) {
		return get_ext_proc("glNewObjectBufferATI");
	}

	unsupported("glNewObjectBufferATI");
	return piglit_dispatch_glNewObjectBufferATI;
}

static GLuint APIENTRY
stub_glNewObjectBufferATI(GLsizei size, const void * pointer, GLenum usage)
{
	check_initialized();
	piglit_dispatch_glNewObjectBufferATI = resolve_glNewObjectBufferATI();
	return piglit_dispatch_glNewObjectBufferATI(size, pointer, usage);
}

PFNGLNEWOBJECTBUFFERATIPROC piglit_dispatch_glNewObjectBufferATI = stub_glNewObjectBufferATI;

static void*
resolve_glNormal3b(void)
{
	/* glNormal3b (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glNormal3b", 10);
	}

	unsupported("glNormal3b");
	return piglit_dispatch_glNormal3b;
}

static void APIENTRY
stub_glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz)
{
	check_initialized();
	piglit_dispatch_glNormal3b = resolve_glNormal3b();
	piglit_dispatch_glNormal3b(nx, ny, nz);
}

PFNGLNORMAL3BPROC piglit_dispatch_glNormal3b = stub_glNormal3b;

static void*
resolve_glNormal3bv(void)
{
	/* glNormal3bv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glNormal3bv", 10);
	}

	unsupported("glNormal3bv");
	return piglit_dispatch_glNormal3bv;
}

static void APIENTRY
stub_glNormal3bv(const GLbyte * v)
{
	check_initialized();
	piglit_dispatch_glNormal3bv = resolve_glNormal3bv();
	piglit_dispatch_glNormal3bv(v);
}

PFNGLNORMAL3BVPROC piglit_dispatch_glNormal3bv = stub_glNormal3bv;

static void*
resolve_glNormal3d(void)
{
	/* glNormal3d (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glNormal3d", 10);
	}

	unsupported("glNormal3d");
	return piglit_dispatch_glNormal3d;
}

static void APIENTRY
stub_glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz)
{
	check_initialized();
	piglit_dispatch_glNormal3d = resolve_glNormal3d();
	piglit_dispatch_glNormal3d(nx, ny, nz);
}

PFNGLNORMAL3DPROC piglit_dispatch_glNormal3d = stub_glNormal3d;

static void*
resolve_glNormal3dv(void)
{
	/* glNormal3dv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glNormal3dv", 10);
	}

	unsupported("glNormal3dv");
	return piglit_dispatch_glNormal3dv;
}

static void APIENTRY
stub_glNormal3dv(const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glNormal3dv = resolve_glNormal3dv();
	piglit_dispatch_glNormal3dv(v);
}

PFNGLNORMAL3DVPROC piglit_dispatch_glNormal3dv = stub_glNormal3dv;

static void*
resolve_glNormal3f(void)
{
	/* glNormal3f (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glNormal3f", 10);
	}

	/* glNormal3f (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glNormal3f", 10);
	}

	unsupported("glNormal3f");
	return piglit_dispatch_glNormal3f;
}

static void APIENTRY
stub_glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz)
{
	check_initialized();
	piglit_dispatch_glNormal3f = resolve_glNormal3f();
	piglit_dispatch_glNormal3f(nx, ny, nz);
}

PFNGLNORMAL3FPROC piglit_dispatch_glNormal3f = stub_glNormal3f;

static void*
resolve_glNormal3fVertex3fSUN(void)
{
	/* glNormal3fVertex3fSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glNormal3fVertex3fSUN");
	}

	unsupported("glNormal3fVertex3fSUN");
	return piglit_dispatch_glNormal3fVertex3fSUN;
}

static void APIENTRY
stub_glNormal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
	check_initialized();
	piglit_dispatch_glNormal3fVertex3fSUN = resolve_glNormal3fVertex3fSUN();
	piglit_dispatch_glNormal3fVertex3fSUN(nx, ny, nz, x, y, z);
}

PFNGLNORMAL3FVERTEX3FSUNPROC piglit_dispatch_glNormal3fVertex3fSUN = stub_glNormal3fVertex3fSUN;

static void*
resolve_glNormal3fVertex3fvSUN(void)
{
	/* glNormal3fVertex3fvSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glNormal3fVertex3fvSUN");
	}

	unsupported("glNormal3fVertex3fvSUN");
	return piglit_dispatch_glNormal3fVertex3fvSUN;
}

static void APIENTRY
stub_glNormal3fVertex3fvSUN(const GLfloat * n, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glNormal3fVertex3fvSUN = resolve_glNormal3fVertex3fvSUN();
	piglit_dispatch_glNormal3fVertex3fvSUN(n, v);
}

PFNGLNORMAL3FVERTEX3FVSUNPROC piglit_dispatch_glNormal3fVertex3fvSUN = stub_glNormal3fVertex3fvSUN;

static void*
resolve_glNormal3fv(void)
{
	/* glNormal3fv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glNormal3fv", 10);
	}

	unsupported("glNormal3fv");
	return piglit_dispatch_glNormal3fv;
}

static void APIENTRY
stub_glNormal3fv(const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glNormal3fv = resolve_glNormal3fv();
	piglit_dispatch_glNormal3fv(v);
}

PFNGLNORMAL3FVPROC piglit_dispatch_glNormal3fv = stub_glNormal3fv;

static void*
resolve_glNormal3hNV(void)
{
	/* glNormal3hNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glNormal3hNV");
	}

	unsupported("glNormal3hNV");
	return piglit_dispatch_glNormal3hNV;
}

static void APIENTRY
stub_glNormal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz)
{
	check_initialized();
	piglit_dispatch_glNormal3hNV = resolve_glNormal3hNV();
	piglit_dispatch_glNormal3hNV(nx, ny, nz);
}

PFNGLNORMAL3HNVPROC piglit_dispatch_glNormal3hNV = stub_glNormal3hNV;

static void*
resolve_glNormal3hvNV(void)
{
	/* glNormal3hvNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glNormal3hvNV");
	}

	unsupported("glNormal3hvNV");
	return piglit_dispatch_glNormal3hvNV;
}

static void APIENTRY
stub_glNormal3hvNV(const GLhalfNV * v)
{
	check_initialized();
	piglit_dispatch_glNormal3hvNV = resolve_glNormal3hvNV();
	piglit_dispatch_glNormal3hvNV(v);
}

PFNGLNORMAL3HVNVPROC piglit_dispatch_glNormal3hvNV = stub_glNormal3hvNV;

static void*
resolve_glNormal3i(void)
{
	/* glNormal3i (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glNormal3i", 10);
	}

	unsupported("glNormal3i");
	return piglit_dispatch_glNormal3i;
}

static void APIENTRY
stub_glNormal3i(GLint nx, GLint ny, GLint nz)
{
	check_initialized();
	piglit_dispatch_glNormal3i = resolve_glNormal3i();
	piglit_dispatch_glNormal3i(nx, ny, nz);
}

PFNGLNORMAL3IPROC piglit_dispatch_glNormal3i = stub_glNormal3i;

static void*
resolve_glNormal3iv(void)
{
	/* glNormal3iv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glNormal3iv", 10);
	}

	unsupported("glNormal3iv");
	return piglit_dispatch_glNormal3iv;
}

static void APIENTRY
stub_glNormal3iv(const GLint * v)
{
	check_initialized();
	piglit_dispatch_glNormal3iv = resolve_glNormal3iv();
	piglit_dispatch_glNormal3iv(v);
}

PFNGLNORMAL3IVPROC piglit_dispatch_glNormal3iv = stub_glNormal3iv;

static void*
resolve_glNormal3s(void)
{
	/* glNormal3s (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glNormal3s", 10);
	}

	unsupported("glNormal3s");
	return piglit_dispatch_glNormal3s;
}

static void APIENTRY
stub_glNormal3s(GLshort nx, GLshort ny, GLshort nz)
{
	check_initialized();
	piglit_dispatch_glNormal3s = resolve_glNormal3s();
	piglit_dispatch_glNormal3s(nx, ny, nz);
}

PFNGLNORMAL3SPROC piglit_dispatch_glNormal3s = stub_glNormal3s;

static void*
resolve_glNormal3sv(void)
{
	/* glNormal3sv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glNormal3sv", 10);
	}

	unsupported("glNormal3sv");
	return piglit_dispatch_glNormal3sv;
}

static void APIENTRY
stub_glNormal3sv(const GLshort * v)
{
	check_initialized();
	piglit_dispatch_glNormal3sv = resolve_glNormal3sv();
	piglit_dispatch_glNormal3sv(v);
}

PFNGLNORMAL3SVPROC piglit_dispatch_glNormal3sv = stub_glNormal3sv;

static void*
resolve_glNormal3x(void)
{
	/* glNormal3x (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glNormal3x", 10);
	}

	unsupported("glNormal3x");
	return piglit_dispatch_glNormal3x;
}

static void APIENTRY
stub_glNormal3x(GLfixed nx, GLfixed ny, GLfixed nz)
{
	check_initialized();
	piglit_dispatch_glNormal3x = resolve_glNormal3x();
	piglit_dispatch_glNormal3x(nx, ny, nz);
}

PFNGLNORMAL3XPROC piglit_dispatch_glNormal3x = stub_glNormal3x;

static void*
resolve_glNormal3xOES(void)
{
	/* glNormal3xOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glNormal3xOES");
	}

	unsupported("glNormal3xOES");
	return piglit_dispatch_glNormal3xOES;
}

static void APIENTRY
stub_glNormal3xOES(GLfixed nx, GLfixed ny, GLfixed nz)
{
	check_initialized();
	piglit_dispatch_glNormal3xOES = resolve_glNormal3xOES();
	piglit_dispatch_glNormal3xOES(nx, ny, nz);
}

PFNGLNORMAL3XOESPROC piglit_dispatch_glNormal3xOES = stub_glNormal3xOES;

static void*
resolve_glNormal3xvOES(void)
{
	/* glNormal3xvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glNormal3xvOES");
	}

	unsupported("glNormal3xvOES");
	return piglit_dispatch_glNormal3xvOES;
}

static void APIENTRY
stub_glNormal3xvOES(const GLfixed * coords)
{
	check_initialized();
	piglit_dispatch_glNormal3xvOES = resolve_glNormal3xvOES();
	piglit_dispatch_glNormal3xvOES(coords);
}

PFNGLNORMAL3XVOESPROC piglit_dispatch_glNormal3xvOES = stub_glNormal3xvOES;

static void*
resolve_glNormalFormatNV(void)
{
	/* glNormalFormatNV (GL_NV_vertex_buffer_unified_memory) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_buffer_unified_memory")) {
		return get_ext_proc("glNormalFormatNV");
	}

	unsupported("glNormalFormatNV");
	return piglit_dispatch_glNormalFormatNV;
}

static void APIENTRY
stub_glNormalFormatNV(GLenum type, GLsizei stride)
{
	check_initialized();
	piglit_dispatch_glNormalFormatNV = resolve_glNormalFormatNV();
	piglit_dispatch_glNormalFormatNV(type, stride);
}

PFNGLNORMALFORMATNVPROC piglit_dispatch_glNormalFormatNV = stub_glNormalFormatNV;

static void*
resolve_glNormalP3ui(void)
{
	/* glNormalP3ui (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glNormalP3ui", 33);
	}

	/* glNormalP3ui (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glNormalP3ui");
	}

	unsupported("glNormalP3ui");
	return piglit_dispatch_glNormalP3ui;
}

static void APIENTRY
stub_glNormalP3ui(GLenum type, GLuint coords)
{
	check_initialized();
	piglit_dispatch_glNormalP3ui = resolve_glNormalP3ui();
	piglit_dispatch_glNormalP3ui(type, coords);
}

PFNGLNORMALP3UIPROC piglit_dispatch_glNormalP3ui = stub_glNormalP3ui;

static void*
resolve_glNormalP3uiv(void)
{
	/* glNormalP3uiv (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glNormalP3uiv", 33);
	}

	/* glNormalP3uiv (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glNormalP3uiv");
	}

	unsupported("glNormalP3uiv");
	return piglit_dispatch_glNormalP3uiv;
}

static void APIENTRY
stub_glNormalP3uiv(GLenum type, const GLuint * coords)
{
	check_initialized();
	piglit_dispatch_glNormalP3uiv = resolve_glNormalP3uiv();
	piglit_dispatch_glNormalP3uiv(type, coords);
}

PFNGLNORMALP3UIVPROC piglit_dispatch_glNormalP3uiv = stub_glNormalP3uiv;

static void*
resolve_glNormalPointer(void)
{
	/* glNormalPointer (GL_VERSION_1_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glNormalPointer", 11);
	}

	/* glNormalPointer (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glNormalPointer", 10);
	}

	unsupported("glNormalPointer");
	return piglit_dispatch_glNormalPointer;
}

static void APIENTRY
stub_glNormalPointer(GLenum type, GLsizei stride, const void * pointer)
{
	check_initialized();
	piglit_dispatch_glNormalPointer = resolve_glNormalPointer();
	piglit_dispatch_glNormalPointer(type, stride, pointer);
}

PFNGLNORMALPOINTERPROC piglit_dispatch_glNormalPointer = stub_glNormalPointer;

static void*
resolve_glNormalPointerEXT(void)
{
	/* glNormalPointerEXT (GL_EXT_vertex_array) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_array")) {
		return get_ext_proc("glNormalPointerEXT");
	}

	unsupported("glNormalPointerEXT");
	return piglit_dispatch_glNormalPointerEXT;
}

static void APIENTRY
stub_glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void * pointer)
{
	check_initialized();
	piglit_dispatch_glNormalPointerEXT = resolve_glNormalPointerEXT();
	piglit_dispatch_glNormalPointerEXT(type, stride, count, pointer);
}

PFNGLNORMALPOINTEREXTPROC piglit_dispatch_glNormalPointerEXT = stub_glNormalPointerEXT;

static void*
resolve_glNormalPointerListIBM(void)
{
	/* glNormalPointerListIBM (GL_IBM_vertex_array_lists) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_IBM_vertex_array_lists")) {
		return get_ext_proc("glNormalPointerListIBM");
	}

	unsupported("glNormalPointerListIBM");
	return piglit_dispatch_glNormalPointerListIBM;
}

static void APIENTRY
stub_glNormalPointerListIBM(GLenum type, GLint stride, const void ** pointer, GLint ptrstride)
{
	check_initialized();
	piglit_dispatch_glNormalPointerListIBM = resolve_glNormalPointerListIBM();
	piglit_dispatch_glNormalPointerListIBM(type, stride, pointer, ptrstride);
}

PFNGLNORMALPOINTERLISTIBMPROC piglit_dispatch_glNormalPointerListIBM = stub_glNormalPointerListIBM;

static void*
resolve_glNormalPointervINTEL(void)
{
	/* glNormalPointervINTEL (GL_INTEL_parallel_arrays) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_INTEL_parallel_arrays")) {
		return get_ext_proc("glNormalPointervINTEL");
	}

	unsupported("glNormalPointervINTEL");
	return piglit_dispatch_glNormalPointervINTEL;
}

static void APIENTRY
stub_glNormalPointervINTEL(GLenum type, const void ** pointer)
{
	check_initialized();
	piglit_dispatch_glNormalPointervINTEL = resolve_glNormalPointervINTEL();
	piglit_dispatch_glNormalPointervINTEL(type, pointer);
}

PFNGLNORMALPOINTERVINTELPROC piglit_dispatch_glNormalPointervINTEL = stub_glNormalPointervINTEL;

static void*
resolve_glNormalStream3bATI(void)
{
	/* glNormalStream3bATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glNormalStream3bATI");
	}

	unsupported("glNormalStream3bATI");
	return piglit_dispatch_glNormalStream3bATI;
}

static void APIENTRY
stub_glNormalStream3bATI(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz)
{
	check_initialized();
	piglit_dispatch_glNormalStream3bATI = resolve_glNormalStream3bATI();
	piglit_dispatch_glNormalStream3bATI(stream, nx, ny, nz);
}

PFNGLNORMALSTREAM3BATIPROC piglit_dispatch_glNormalStream3bATI = stub_glNormalStream3bATI;

static void*
resolve_glNormalStream3bvATI(void)
{
	/* glNormalStream3bvATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glNormalStream3bvATI");
	}

	unsupported("glNormalStream3bvATI");
	return piglit_dispatch_glNormalStream3bvATI;
}

static void APIENTRY
stub_glNormalStream3bvATI(GLenum stream, const GLbyte * coords)
{
	check_initialized();
	piglit_dispatch_glNormalStream3bvATI = resolve_glNormalStream3bvATI();
	piglit_dispatch_glNormalStream3bvATI(stream, coords);
}

PFNGLNORMALSTREAM3BVATIPROC piglit_dispatch_glNormalStream3bvATI = stub_glNormalStream3bvATI;

static void*
resolve_glNormalStream3dATI(void)
{
	/* glNormalStream3dATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glNormalStream3dATI");
	}

	unsupported("glNormalStream3dATI");
	return piglit_dispatch_glNormalStream3dATI;
}

static void APIENTRY
stub_glNormalStream3dATI(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz)
{
	check_initialized();
	piglit_dispatch_glNormalStream3dATI = resolve_glNormalStream3dATI();
	piglit_dispatch_glNormalStream3dATI(stream, nx, ny, nz);
}

PFNGLNORMALSTREAM3DATIPROC piglit_dispatch_glNormalStream3dATI = stub_glNormalStream3dATI;

static void*
resolve_glNormalStream3dvATI(void)
{
	/* glNormalStream3dvATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glNormalStream3dvATI");
	}

	unsupported("glNormalStream3dvATI");
	return piglit_dispatch_glNormalStream3dvATI;
}

static void APIENTRY
stub_glNormalStream3dvATI(GLenum stream, const GLdouble * coords)
{
	check_initialized();
	piglit_dispatch_glNormalStream3dvATI = resolve_glNormalStream3dvATI();
	piglit_dispatch_glNormalStream3dvATI(stream, coords);
}

PFNGLNORMALSTREAM3DVATIPROC piglit_dispatch_glNormalStream3dvATI = stub_glNormalStream3dvATI;

static void*
resolve_glNormalStream3fATI(void)
{
	/* glNormalStream3fATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glNormalStream3fATI");
	}

	unsupported("glNormalStream3fATI");
	return piglit_dispatch_glNormalStream3fATI;
}

static void APIENTRY
stub_glNormalStream3fATI(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz)
{
	check_initialized();
	piglit_dispatch_glNormalStream3fATI = resolve_glNormalStream3fATI();
	piglit_dispatch_glNormalStream3fATI(stream, nx, ny, nz);
}

PFNGLNORMALSTREAM3FATIPROC piglit_dispatch_glNormalStream3fATI = stub_glNormalStream3fATI;

static void*
resolve_glNormalStream3fvATI(void)
{
	/* glNormalStream3fvATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glNormalStream3fvATI");
	}

	unsupported("glNormalStream3fvATI");
	return piglit_dispatch_glNormalStream3fvATI;
}

static void APIENTRY
stub_glNormalStream3fvATI(GLenum stream, const GLfloat * coords)
{
	check_initialized();
	piglit_dispatch_glNormalStream3fvATI = resolve_glNormalStream3fvATI();
	piglit_dispatch_glNormalStream3fvATI(stream, coords);
}

PFNGLNORMALSTREAM3FVATIPROC piglit_dispatch_glNormalStream3fvATI = stub_glNormalStream3fvATI;

static void*
resolve_glNormalStream3iATI(void)
{
	/* glNormalStream3iATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glNormalStream3iATI");
	}

	unsupported("glNormalStream3iATI");
	return piglit_dispatch_glNormalStream3iATI;
}

static void APIENTRY
stub_glNormalStream3iATI(GLenum stream, GLint nx, GLint ny, GLint nz)
{
	check_initialized();
	piglit_dispatch_glNormalStream3iATI = resolve_glNormalStream3iATI();
	piglit_dispatch_glNormalStream3iATI(stream, nx, ny, nz);
}

PFNGLNORMALSTREAM3IATIPROC piglit_dispatch_glNormalStream3iATI = stub_glNormalStream3iATI;

static void*
resolve_glNormalStream3ivATI(void)
{
	/* glNormalStream3ivATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glNormalStream3ivATI");
	}

	unsupported("glNormalStream3ivATI");
	return piglit_dispatch_glNormalStream3ivATI;
}

static void APIENTRY
stub_glNormalStream3ivATI(GLenum stream, const GLint * coords)
{
	check_initialized();
	piglit_dispatch_glNormalStream3ivATI = resolve_glNormalStream3ivATI();
	piglit_dispatch_glNormalStream3ivATI(stream, coords);
}

PFNGLNORMALSTREAM3IVATIPROC piglit_dispatch_glNormalStream3ivATI = stub_glNormalStream3ivATI;

static void*
resolve_glNormalStream3sATI(void)
{
	/* glNormalStream3sATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glNormalStream3sATI");
	}

	unsupported("glNormalStream3sATI");
	return piglit_dispatch_glNormalStream3sATI;
}

static void APIENTRY
stub_glNormalStream3sATI(GLenum stream, GLshort nx, GLshort ny, GLshort nz)
{
	check_initialized();
	piglit_dispatch_glNormalStream3sATI = resolve_glNormalStream3sATI();
	piglit_dispatch_glNormalStream3sATI(stream, nx, ny, nz);
}

PFNGLNORMALSTREAM3SATIPROC piglit_dispatch_glNormalStream3sATI = stub_glNormalStream3sATI;

static void*
resolve_glNormalStream3svATI(void)
{
	/* glNormalStream3svATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glNormalStream3svATI");
	}

	unsupported("glNormalStream3svATI");
	return piglit_dispatch_glNormalStream3svATI;
}

static void APIENTRY
stub_glNormalStream3svATI(GLenum stream, const GLshort * coords)
{
	check_initialized();
	piglit_dispatch_glNormalStream3svATI = resolve_glNormalStream3svATI();
	piglit_dispatch_glNormalStream3svATI(stream, coords);
}

PFNGLNORMALSTREAM3SVATIPROC piglit_dispatch_glNormalStream3svATI = stub_glNormalStream3svATI;

static void*
resolve_glObjectLabel(void)
{
	/* glObjectLabel (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glObjectLabel", 43);
	}

	/* glObjectLabel (GL_KHR_debug) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_KHR_debug")) {
		return get_ext_proc("glObjectLabel");
	}

	/* glObjectLabelKHR (GL_KHR_debug) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_KHR_debug")) {
		return get_ext_proc("glObjectLabelKHR");
	}

	unsupported("glObjectLabel");
	return piglit_dispatch_glObjectLabel;
}

static void APIENTRY
stub_glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar * label)
{
	check_initialized();
	piglit_dispatch_glObjectLabel = resolve_glObjectLabel();
	piglit_dispatch_glObjectLabel(identifier, name, length, label);
}

PFNGLOBJECTLABELPROC piglit_dispatch_glObjectLabel = stub_glObjectLabel;

static void*
resolve_glObjectPtrLabel(void)
{
	/* glObjectPtrLabel (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glObjectPtrLabel", 43);
	}

	/* glObjectPtrLabel (GL_KHR_debug) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_KHR_debug")) {
		return get_ext_proc("glObjectPtrLabel");
	}

	/* glObjectPtrLabelKHR (GL_KHR_debug) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_KHR_debug")) {
		return get_ext_proc("glObjectPtrLabelKHR");
	}

	unsupported("glObjectPtrLabel");
	return piglit_dispatch_glObjectPtrLabel;
}

static void APIENTRY
stub_glObjectPtrLabel(const void * ptr, GLsizei length, const GLchar * label)
{
	check_initialized();
	piglit_dispatch_glObjectPtrLabel = resolve_glObjectPtrLabel();
	piglit_dispatch_glObjectPtrLabel(ptr, length, label);
}

PFNGLOBJECTPTRLABELPROC piglit_dispatch_glObjectPtrLabel = stub_glObjectPtrLabel;

static void*
resolve_glObjectPurgeableAPPLE(void)
{
	/* glObjectPurgeableAPPLE (GL_APPLE_object_purgeable) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_APPLE_object_purgeable")) {
		return get_ext_proc("glObjectPurgeableAPPLE");
	}

	unsupported("glObjectPurgeableAPPLE");
	return piglit_dispatch_glObjectPurgeableAPPLE;
}

static GLenum APIENTRY
stub_glObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)
{
	check_initialized();
	piglit_dispatch_glObjectPurgeableAPPLE = resolve_glObjectPurgeableAPPLE();
	return piglit_dispatch_glObjectPurgeableAPPLE(objectType, name, option);
}

PFNGLOBJECTPURGEABLEAPPLEPROC piglit_dispatch_glObjectPurgeableAPPLE = stub_glObjectPurgeableAPPLE;

static void*
resolve_glObjectUnpurgeableAPPLE(void)
{
	/* glObjectUnpurgeableAPPLE (GL_APPLE_object_purgeable) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_APPLE_object_purgeable")) {
		return get_ext_proc("glObjectUnpurgeableAPPLE");
	}

	unsupported("glObjectUnpurgeableAPPLE");
	return piglit_dispatch_glObjectUnpurgeableAPPLE;
}

static GLenum APIENTRY
stub_glObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)
{
	check_initialized();
	piglit_dispatch_glObjectUnpurgeableAPPLE = resolve_glObjectUnpurgeableAPPLE();
	return piglit_dispatch_glObjectUnpurgeableAPPLE(objectType, name, option);
}

PFNGLOBJECTUNPURGEABLEAPPLEPROC piglit_dispatch_glObjectUnpurgeableAPPLE = stub_glObjectUnpurgeableAPPLE;

static void*
resolve_glOrtho(void)
{
	/* glOrtho (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glOrtho", 10);
	}

	unsupported("glOrtho");
	return piglit_dispatch_glOrtho;
}

static void APIENTRY
stub_glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
	check_initialized();
	piglit_dispatch_glOrtho = resolve_glOrtho();
	piglit_dispatch_glOrtho(left, right, bottom, top, zNear, zFar);
}

PFNGLORTHOPROC piglit_dispatch_glOrtho = stub_glOrtho;

static void*
resolve_glOrthof(void)
{
	/* glOrthof (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glOrthof", 10);
	}

	unsupported("glOrthof");
	return piglit_dispatch_glOrthof;
}

static void APIENTRY
stub_glOrthof(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
{
	check_initialized();
	piglit_dispatch_glOrthof = resolve_glOrthof();
	piglit_dispatch_glOrthof(l, r, b, t, n, f);
}

PFNGLORTHOFPROC piglit_dispatch_glOrthof = stub_glOrthof;

static void*
resolve_glOrthofOES(void)
{
	/* glOrthofOES (GL_OES_single_precision) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_single_precision")) {
		return get_ext_proc("glOrthofOES");
	}

	unsupported("glOrthofOES");
	return piglit_dispatch_glOrthofOES;
}

static void APIENTRY
stub_glOrthofOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
{
	check_initialized();
	piglit_dispatch_glOrthofOES = resolve_glOrthofOES();
	piglit_dispatch_glOrthofOES(l, r, b, t, n, f);
}

PFNGLORTHOFOESPROC piglit_dispatch_glOrthofOES = stub_glOrthofOES;

static void*
resolve_glOrthox(void)
{
	/* glOrthox (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glOrthox", 10);
	}

	unsupported("glOrthox");
	return piglit_dispatch_glOrthox;
}

static void APIENTRY
stub_glOrthox(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f)
{
	check_initialized();
	piglit_dispatch_glOrthox = resolve_glOrthox();
	piglit_dispatch_glOrthox(l, r, b, t, n, f);
}

PFNGLORTHOXPROC piglit_dispatch_glOrthox = stub_glOrthox;

static void*
resolve_glOrthoxOES(void)
{
	/* glOrthoxOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glOrthoxOES");
	}

	unsupported("glOrthoxOES");
	return piglit_dispatch_glOrthoxOES;
}

static void APIENTRY
stub_glOrthoxOES(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f)
{
	check_initialized();
	piglit_dispatch_glOrthoxOES = resolve_glOrthoxOES();
	piglit_dispatch_glOrthoxOES(l, r, b, t, n, f);
}

PFNGLORTHOXOESPROC piglit_dispatch_glOrthoxOES = stub_glOrthoxOES;

static void*
resolve_glPNTrianglesfATI(void)
{
	/* glPNTrianglesfATI (GL_ATI_pn_triangles) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_pn_triangles")) {
		return get_ext_proc("glPNTrianglesfATI");
	}

	unsupported("glPNTrianglesfATI");
	return piglit_dispatch_glPNTrianglesfATI;
}

static void APIENTRY
stub_glPNTrianglesfATI(GLenum pname, GLfloat param)
{
	check_initialized();
	piglit_dispatch_glPNTrianglesfATI = resolve_glPNTrianglesfATI();
	piglit_dispatch_glPNTrianglesfATI(pname, param);
}

PFNGLPNTRIANGLESFATIPROC piglit_dispatch_glPNTrianglesfATI = stub_glPNTrianglesfATI;

static void*
resolve_glPNTrianglesiATI(void)
{
	/* glPNTrianglesiATI (GL_ATI_pn_triangles) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_pn_triangles")) {
		return get_ext_proc("glPNTrianglesiATI");
	}

	unsupported("glPNTrianglesiATI");
	return piglit_dispatch_glPNTrianglesiATI;
}

static void APIENTRY
stub_glPNTrianglesiATI(GLenum pname, GLint param)
{
	check_initialized();
	piglit_dispatch_glPNTrianglesiATI = resolve_glPNTrianglesiATI();
	piglit_dispatch_glPNTrianglesiATI(pname, param);
}

PFNGLPNTRIANGLESIATIPROC piglit_dispatch_glPNTrianglesiATI = stub_glPNTrianglesiATI;

static void*
resolve_glPassTexCoordATI(void)
{
	/* glPassTexCoordATI (GL_ATI_fragment_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_fragment_shader")) {
		return get_ext_proc("glPassTexCoordATI");
	}

	unsupported("glPassTexCoordATI");
	return piglit_dispatch_glPassTexCoordATI;
}

static void APIENTRY
stub_glPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle)
{
	check_initialized();
	piglit_dispatch_glPassTexCoordATI = resolve_glPassTexCoordATI();
	piglit_dispatch_glPassTexCoordATI(dst, coord, swizzle);
}

PFNGLPASSTEXCOORDATIPROC piglit_dispatch_glPassTexCoordATI = stub_glPassTexCoordATI;

static void*
resolve_glPassThrough(void)
{
	/* glPassThrough (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glPassThrough", 10);
	}

	unsupported("glPassThrough");
	return piglit_dispatch_glPassThrough;
}

static void APIENTRY
stub_glPassThrough(GLfloat token)
{
	check_initialized();
	piglit_dispatch_glPassThrough = resolve_glPassThrough();
	piglit_dispatch_glPassThrough(token);
}

PFNGLPASSTHROUGHPROC piglit_dispatch_glPassThrough = stub_glPassThrough;

static void*
resolve_glPassThroughxOES(void)
{
	/* glPassThroughxOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glPassThroughxOES");
	}

	unsupported("glPassThroughxOES");
	return piglit_dispatch_glPassThroughxOES;
}

static void APIENTRY
stub_glPassThroughxOES(GLfixed token)
{
	check_initialized();
	piglit_dispatch_glPassThroughxOES = resolve_glPassThroughxOES();
	piglit_dispatch_glPassThroughxOES(token);
}

PFNGLPASSTHROUGHXOESPROC piglit_dispatch_glPassThroughxOES = stub_glPassThroughxOES;

static void*
resolve_glPatchParameterfv(void)
{
	/* glPatchParameterfv (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glPatchParameterfv", 40);
	}

	/* glPatchParameterfv (GL_ARB_tessellation_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_tessellation_shader")) {
		return get_ext_proc("glPatchParameterfv");
	}

	unsupported("glPatchParameterfv");
	return piglit_dispatch_glPatchParameterfv;
}

static void APIENTRY
stub_glPatchParameterfv(GLenum pname, const GLfloat * values)
{
	check_initialized();
	piglit_dispatch_glPatchParameterfv = resolve_glPatchParameterfv();
	piglit_dispatch_glPatchParameterfv(pname, values);
}

PFNGLPATCHPARAMETERFVPROC piglit_dispatch_glPatchParameterfv = stub_glPatchParameterfv;

static void*
resolve_glPatchParameteri(void)
{
	/* glPatchParameteri (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glPatchParameteri", 40);
	}

	/* glPatchParameteri (GL_ARB_tessellation_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_tessellation_shader")) {
		return get_ext_proc("glPatchParameteri");
	}

	/* glPatchParameteriEXT (GL_EXT_tessellation_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_tessellation_shader")) {
		return get_ext_proc("glPatchParameteriEXT");
	}

	unsupported("glPatchParameteri");
	return piglit_dispatch_glPatchParameteri;
}

static void APIENTRY
stub_glPatchParameteri(GLenum pname, GLint value)
{
	check_initialized();
	piglit_dispatch_glPatchParameteri = resolve_glPatchParameteri();
	piglit_dispatch_glPatchParameteri(pname, value);
}

PFNGLPATCHPARAMETERIPROC piglit_dispatch_glPatchParameteri = stub_glPatchParameteri;

static void*
resolve_glPathColorGenNV(void)
{
	/* glPathColorGenNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glPathColorGenNV");
	}

	unsupported("glPathColorGenNV");
	return piglit_dispatch_glPathColorGenNV;
}

static void APIENTRY
stub_glPathColorGenNV(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat * coeffs)
{
	check_initialized();
	piglit_dispatch_glPathColorGenNV = resolve_glPathColorGenNV();
	piglit_dispatch_glPathColorGenNV(color, genMode, colorFormat, coeffs);
}

PFNGLPATHCOLORGENNVPROC piglit_dispatch_glPathColorGenNV = stub_glPathColorGenNV;

static void*
resolve_glPathCommandsNV(void)
{
	/* glPathCommandsNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glPathCommandsNV");
	}

	unsupported("glPathCommandsNV");
	return piglit_dispatch_glPathCommandsNV;
}

static void APIENTRY
stub_glPathCommandsNV(GLuint path, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const void * coords)
{
	check_initialized();
	piglit_dispatch_glPathCommandsNV = resolve_glPathCommandsNV();
	piglit_dispatch_glPathCommandsNV(path, numCommands, commands, numCoords, coordType, coords);
}

PFNGLPATHCOMMANDSNVPROC piglit_dispatch_glPathCommandsNV = stub_glPathCommandsNV;

static void*
resolve_glPathCoordsNV(void)
{
	/* glPathCoordsNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glPathCoordsNV");
	}

	unsupported("glPathCoordsNV");
	return piglit_dispatch_glPathCoordsNV;
}

static void APIENTRY
stub_glPathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, const void * coords)
{
	check_initialized();
	piglit_dispatch_glPathCoordsNV = resolve_glPathCoordsNV();
	piglit_dispatch_glPathCoordsNV(path, numCoords, coordType, coords);
}

PFNGLPATHCOORDSNVPROC piglit_dispatch_glPathCoordsNV = stub_glPathCoordsNV;

static void*
resolve_glPathCoverDepthFuncNV(void)
{
	/* glPathCoverDepthFuncNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glPathCoverDepthFuncNV");
	}

	unsupported("glPathCoverDepthFuncNV");
	return piglit_dispatch_glPathCoverDepthFuncNV;
}

static void APIENTRY
stub_glPathCoverDepthFuncNV(GLenum func)
{
	check_initialized();
	piglit_dispatch_glPathCoverDepthFuncNV = resolve_glPathCoverDepthFuncNV();
	piglit_dispatch_glPathCoverDepthFuncNV(func);
}

PFNGLPATHCOVERDEPTHFUNCNVPROC piglit_dispatch_glPathCoverDepthFuncNV = stub_glPathCoverDepthFuncNV;

static void*
resolve_glPathDashArrayNV(void)
{
	/* glPathDashArrayNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glPathDashArrayNV");
	}

	unsupported("glPathDashArrayNV");
	return piglit_dispatch_glPathDashArrayNV;
}

static void APIENTRY
stub_glPathDashArrayNV(GLuint path, GLsizei dashCount, const GLfloat * dashArray)
{
	check_initialized();
	piglit_dispatch_glPathDashArrayNV = resolve_glPathDashArrayNV();
	piglit_dispatch_glPathDashArrayNV(path, dashCount, dashArray);
}

PFNGLPATHDASHARRAYNVPROC piglit_dispatch_glPathDashArrayNV = stub_glPathDashArrayNV;

static void*
resolve_glPathFogGenNV(void)
{
	/* glPathFogGenNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glPathFogGenNV");
	}

	unsupported("glPathFogGenNV");
	return piglit_dispatch_glPathFogGenNV;
}

static void APIENTRY
stub_glPathFogGenNV(GLenum genMode)
{
	check_initialized();
	piglit_dispatch_glPathFogGenNV = resolve_glPathFogGenNV();
	piglit_dispatch_glPathFogGenNV(genMode);
}

PFNGLPATHFOGGENNVPROC piglit_dispatch_glPathFogGenNV = stub_glPathFogGenNV;

static void*
resolve_glPathGlyphRangeNV(void)
{
	/* glPathGlyphRangeNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glPathGlyphRangeNV");
	}

	unsupported("glPathGlyphRangeNV");
	return piglit_dispatch_glPathGlyphRangeNV;
}

static void APIENTRY
stub_glPathGlyphRangeNV(GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
	check_initialized();
	piglit_dispatch_glPathGlyphRangeNV = resolve_glPathGlyphRangeNV();
	piglit_dispatch_glPathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
}

PFNGLPATHGLYPHRANGENVPROC piglit_dispatch_glPathGlyphRangeNV = stub_glPathGlyphRangeNV;

static void*
resolve_glPathGlyphsNV(void)
{
	/* glPathGlyphsNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glPathGlyphsNV");
	}

	unsupported("glPathGlyphsNV");
	return piglit_dispatch_glPathGlyphsNV;
}

static void APIENTRY
stub_glPathGlyphsNV(GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void * charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
	check_initialized();
	piglit_dispatch_glPathGlyphsNV = resolve_glPathGlyphsNV();
	piglit_dispatch_glPathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
}

PFNGLPATHGLYPHSNVPROC piglit_dispatch_glPathGlyphsNV = stub_glPathGlyphsNV;

static void*
resolve_glPathParameterfNV(void)
{
	/* glPathParameterfNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glPathParameterfNV");
	}

	unsupported("glPathParameterfNV");
	return piglit_dispatch_glPathParameterfNV;
}

static void APIENTRY
stub_glPathParameterfNV(GLuint path, GLenum pname, GLfloat value)
{
	check_initialized();
	piglit_dispatch_glPathParameterfNV = resolve_glPathParameterfNV();
	piglit_dispatch_glPathParameterfNV(path, pname, value);
}

PFNGLPATHPARAMETERFNVPROC piglit_dispatch_glPathParameterfNV = stub_glPathParameterfNV;

static void*
resolve_glPathParameterfvNV(void)
{
	/* glPathParameterfvNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glPathParameterfvNV");
	}

	unsupported("glPathParameterfvNV");
	return piglit_dispatch_glPathParameterfvNV;
}

static void APIENTRY
stub_glPathParameterfvNV(GLuint path, GLenum pname, const GLfloat * value)
{
	check_initialized();
	piglit_dispatch_glPathParameterfvNV = resolve_glPathParameterfvNV();
	piglit_dispatch_glPathParameterfvNV(path, pname, value);
}

PFNGLPATHPARAMETERFVNVPROC piglit_dispatch_glPathParameterfvNV = stub_glPathParameterfvNV;

static void*
resolve_glPathParameteriNV(void)
{
	/* glPathParameteriNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glPathParameteriNV");
	}

	unsupported("glPathParameteriNV");
	return piglit_dispatch_glPathParameteriNV;
}

static void APIENTRY
stub_glPathParameteriNV(GLuint path, GLenum pname, GLint value)
{
	check_initialized();
	piglit_dispatch_glPathParameteriNV = resolve_glPathParameteriNV();
	piglit_dispatch_glPathParameteriNV(path, pname, value);
}

PFNGLPATHPARAMETERINVPROC piglit_dispatch_glPathParameteriNV = stub_glPathParameteriNV;

static void*
resolve_glPathParameterivNV(void)
{
	/* glPathParameterivNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glPathParameterivNV");
	}

	unsupported("glPathParameterivNV");
	return piglit_dispatch_glPathParameterivNV;
}

static void APIENTRY
stub_glPathParameterivNV(GLuint path, GLenum pname, const GLint * value)
{
	check_initialized();
	piglit_dispatch_glPathParameterivNV = resolve_glPathParameterivNV();
	piglit_dispatch_glPathParameterivNV(path, pname, value);
}

PFNGLPATHPARAMETERIVNVPROC piglit_dispatch_glPathParameterivNV = stub_glPathParameterivNV;

static void*
resolve_glPathStencilDepthOffsetNV(void)
{
	/* glPathStencilDepthOffsetNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glPathStencilDepthOffsetNV");
	}

	unsupported("glPathStencilDepthOffsetNV");
	return piglit_dispatch_glPathStencilDepthOffsetNV;
}

static void APIENTRY
stub_glPathStencilDepthOffsetNV(GLfloat factor, GLfloat units)
{
	check_initialized();
	piglit_dispatch_glPathStencilDepthOffsetNV = resolve_glPathStencilDepthOffsetNV();
	piglit_dispatch_glPathStencilDepthOffsetNV(factor, units);
}

PFNGLPATHSTENCILDEPTHOFFSETNVPROC piglit_dispatch_glPathStencilDepthOffsetNV = stub_glPathStencilDepthOffsetNV;

static void*
resolve_glPathStencilFuncNV(void)
{
	/* glPathStencilFuncNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glPathStencilFuncNV");
	}

	unsupported("glPathStencilFuncNV");
	return piglit_dispatch_glPathStencilFuncNV;
}

static void APIENTRY
stub_glPathStencilFuncNV(GLenum func, GLint ref, GLuint mask)
{
	check_initialized();
	piglit_dispatch_glPathStencilFuncNV = resolve_glPathStencilFuncNV();
	piglit_dispatch_glPathStencilFuncNV(func, ref, mask);
}

PFNGLPATHSTENCILFUNCNVPROC piglit_dispatch_glPathStencilFuncNV = stub_glPathStencilFuncNV;

static void*
resolve_glPathStringNV(void)
{
	/* glPathStringNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glPathStringNV");
	}

	unsupported("glPathStringNV");
	return piglit_dispatch_glPathStringNV;
}

static void APIENTRY
stub_glPathStringNV(GLuint path, GLenum format, GLsizei length, const void * pathString)
{
	check_initialized();
	piglit_dispatch_glPathStringNV = resolve_glPathStringNV();
	piglit_dispatch_glPathStringNV(path, format, length, pathString);
}

PFNGLPATHSTRINGNVPROC piglit_dispatch_glPathStringNV = stub_glPathStringNV;

static void*
resolve_glPathSubCommandsNV(void)
{
	/* glPathSubCommandsNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glPathSubCommandsNV");
	}

	unsupported("glPathSubCommandsNV");
	return piglit_dispatch_glPathSubCommandsNV;
}

static void APIENTRY
stub_glPathSubCommandsNV(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const void * coords)
{
	check_initialized();
	piglit_dispatch_glPathSubCommandsNV = resolve_glPathSubCommandsNV();
	piglit_dispatch_glPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
}

PFNGLPATHSUBCOMMANDSNVPROC piglit_dispatch_glPathSubCommandsNV = stub_glPathSubCommandsNV;

static void*
resolve_glPathSubCoordsNV(void)
{
	/* glPathSubCoordsNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glPathSubCoordsNV");
	}

	unsupported("glPathSubCoordsNV");
	return piglit_dispatch_glPathSubCoordsNV;
}

static void APIENTRY
stub_glPathSubCoordsNV(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void * coords)
{
	check_initialized();
	piglit_dispatch_glPathSubCoordsNV = resolve_glPathSubCoordsNV();
	piglit_dispatch_glPathSubCoordsNV(path, coordStart, numCoords, coordType, coords);
}

PFNGLPATHSUBCOORDSNVPROC piglit_dispatch_glPathSubCoordsNV = stub_glPathSubCoordsNV;

static void*
resolve_glPathTexGenNV(void)
{
	/* glPathTexGenNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glPathTexGenNV");
	}

	unsupported("glPathTexGenNV");
	return piglit_dispatch_glPathTexGenNV;
}

static void APIENTRY
stub_glPathTexGenNV(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat * coeffs)
{
	check_initialized();
	piglit_dispatch_glPathTexGenNV = resolve_glPathTexGenNV();
	piglit_dispatch_glPathTexGenNV(texCoordSet, genMode, components, coeffs);
}

PFNGLPATHTEXGENNVPROC piglit_dispatch_glPathTexGenNV = stub_glPathTexGenNV;

static void*
resolve_glPauseTransformFeedback(void)
{
	/* glPauseTransformFeedback (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glPauseTransformFeedback", 40);
	}

	/* glPauseTransformFeedback (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glPauseTransformFeedback", 30);
	}

	/* glPauseTransformFeedback (GL_ARB_transform_feedback2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_transform_feedback2")) {
		return get_ext_proc("glPauseTransformFeedback");
	}

	/* glPauseTransformFeedbackNV (GL_NV_transform_feedback2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_transform_feedback2")) {
		return get_ext_proc("glPauseTransformFeedbackNV");
	}

	unsupported("glPauseTransformFeedback");
	return piglit_dispatch_glPauseTransformFeedback;
}

static void APIENTRY
stub_glPauseTransformFeedback()
{
	check_initialized();
	piglit_dispatch_glPauseTransformFeedback = resolve_glPauseTransformFeedback();
	piglit_dispatch_glPauseTransformFeedback();
}

PFNGLPAUSETRANSFORMFEEDBACKPROC piglit_dispatch_glPauseTransformFeedback = stub_glPauseTransformFeedback;

static void*
resolve_glPixelDataRangeNV(void)
{
	/* glPixelDataRangeNV (GL_NV_pixel_data_range) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_pixel_data_range")) {
		return get_ext_proc("glPixelDataRangeNV");
	}

	unsupported("glPixelDataRangeNV");
	return piglit_dispatch_glPixelDataRangeNV;
}

static void APIENTRY
stub_glPixelDataRangeNV(GLenum target, GLsizei length, const void * pointer)
{
	check_initialized();
	piglit_dispatch_glPixelDataRangeNV = resolve_glPixelDataRangeNV();
	piglit_dispatch_glPixelDataRangeNV(target, length, pointer);
}

PFNGLPIXELDATARANGENVPROC piglit_dispatch_glPixelDataRangeNV = stub_glPixelDataRangeNV;

static void*
resolve_glPixelMapfv(void)
{
	/* glPixelMapfv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glPixelMapfv", 10);
	}

	unsupported("glPixelMapfv");
	return piglit_dispatch_glPixelMapfv;
}

static void APIENTRY
stub_glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat * values)
{
	check_initialized();
	piglit_dispatch_glPixelMapfv = resolve_glPixelMapfv();
	piglit_dispatch_glPixelMapfv(map, mapsize, values);
}

PFNGLPIXELMAPFVPROC piglit_dispatch_glPixelMapfv = stub_glPixelMapfv;

static void*
resolve_glPixelMapuiv(void)
{
	/* glPixelMapuiv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glPixelMapuiv", 10);
	}

	unsupported("glPixelMapuiv");
	return piglit_dispatch_glPixelMapuiv;
}

static void APIENTRY
stub_glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint * values)
{
	check_initialized();
	piglit_dispatch_glPixelMapuiv = resolve_glPixelMapuiv();
	piglit_dispatch_glPixelMapuiv(map, mapsize, values);
}

PFNGLPIXELMAPUIVPROC piglit_dispatch_glPixelMapuiv = stub_glPixelMapuiv;

static void*
resolve_glPixelMapusv(void)
{
	/* glPixelMapusv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glPixelMapusv", 10);
	}

	unsupported("glPixelMapusv");
	return piglit_dispatch_glPixelMapusv;
}

static void APIENTRY
stub_glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort * values)
{
	check_initialized();
	piglit_dispatch_glPixelMapusv = resolve_glPixelMapusv();
	piglit_dispatch_glPixelMapusv(map, mapsize, values);
}

PFNGLPIXELMAPUSVPROC piglit_dispatch_glPixelMapusv = stub_glPixelMapusv;

static void*
resolve_glPixelMapx(void)
{
	/* glPixelMapx (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glPixelMapx");
	}

	unsupported("glPixelMapx");
	return piglit_dispatch_glPixelMapx;
}

static void APIENTRY
stub_glPixelMapx(GLenum map, GLint size, const GLfixed * values)
{
	check_initialized();
	piglit_dispatch_glPixelMapx = resolve_glPixelMapx();
	piglit_dispatch_glPixelMapx(map, size, values);
}

PFNGLPIXELMAPXPROC piglit_dispatch_glPixelMapx = stub_glPixelMapx;

static void*
resolve_glPixelStoref(void)
{
	/* glPixelStoref (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glPixelStoref", 10);
	}

	unsupported("glPixelStoref");
	return piglit_dispatch_glPixelStoref;
}

static void APIENTRY
stub_glPixelStoref(GLenum pname, GLfloat param)
{
	check_initialized();
	piglit_dispatch_glPixelStoref = resolve_glPixelStoref();
	piglit_dispatch_glPixelStoref(pname, param);
}

PFNGLPIXELSTOREFPROC piglit_dispatch_glPixelStoref = stub_glPixelStoref;

static void*
resolve_glPixelStorei(void)
{
	/* glPixelStorei (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glPixelStorei", 10);
	}

	/* glPixelStorei (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glPixelStorei", 10);
	}

	/* glPixelStorei (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glPixelStorei", 20);
	}

	unsupported("glPixelStorei");
	return piglit_dispatch_glPixelStorei;
}

static void APIENTRY
stub_glPixelStorei(GLenum pname, GLint param)
{
	check_initialized();
	piglit_dispatch_glPixelStorei = resolve_glPixelStorei();
	piglit_dispatch_glPixelStorei(pname, param);
}

PFNGLPIXELSTOREIPROC piglit_dispatch_glPixelStorei = stub_glPixelStorei;

static void*
resolve_glPixelStorex(void)
{
	/* glPixelStorex (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glPixelStorex");
	}

	unsupported("glPixelStorex");
	return piglit_dispatch_glPixelStorex;
}

static void APIENTRY
stub_glPixelStorex(GLenum pname, GLfixed param)
{
	check_initialized();
	piglit_dispatch_glPixelStorex = resolve_glPixelStorex();
	piglit_dispatch_glPixelStorex(pname, param);
}

PFNGLPIXELSTOREXPROC piglit_dispatch_glPixelStorex = stub_glPixelStorex;

static void*
resolve_glPixelTexGenParameterfSGIS(void)
{
	/* glPixelTexGenParameterfSGIS (GL_SGIS_pixel_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIS_pixel_texture")) {
		return get_ext_proc("glPixelTexGenParameterfSGIS");
	}

	unsupported("glPixelTexGenParameterfSGIS");
	return piglit_dispatch_glPixelTexGenParameterfSGIS;
}

static void APIENTRY
stub_glPixelTexGenParameterfSGIS(GLenum pname, GLfloat param)
{
	check_initialized();
	piglit_dispatch_glPixelTexGenParameterfSGIS = resolve_glPixelTexGenParameterfSGIS();
	piglit_dispatch_glPixelTexGenParameterfSGIS(pname, param);
}

PFNGLPIXELTEXGENPARAMETERFSGISPROC piglit_dispatch_glPixelTexGenParameterfSGIS = stub_glPixelTexGenParameterfSGIS;

static void*
resolve_glPixelTexGenParameterfvSGIS(void)
{
	/* glPixelTexGenParameterfvSGIS (GL_SGIS_pixel_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIS_pixel_texture")) {
		return get_ext_proc("glPixelTexGenParameterfvSGIS");
	}

	unsupported("glPixelTexGenParameterfvSGIS");
	return piglit_dispatch_glPixelTexGenParameterfvSGIS;
}

static void APIENTRY
stub_glPixelTexGenParameterfvSGIS(GLenum pname, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glPixelTexGenParameterfvSGIS = resolve_glPixelTexGenParameterfvSGIS();
	piglit_dispatch_glPixelTexGenParameterfvSGIS(pname, params);
}

PFNGLPIXELTEXGENPARAMETERFVSGISPROC piglit_dispatch_glPixelTexGenParameterfvSGIS = stub_glPixelTexGenParameterfvSGIS;

static void*
resolve_glPixelTexGenParameteriSGIS(void)
{
	/* glPixelTexGenParameteriSGIS (GL_SGIS_pixel_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIS_pixel_texture")) {
		return get_ext_proc("glPixelTexGenParameteriSGIS");
	}

	unsupported("glPixelTexGenParameteriSGIS");
	return piglit_dispatch_glPixelTexGenParameteriSGIS;
}

static void APIENTRY
stub_glPixelTexGenParameteriSGIS(GLenum pname, GLint param)
{
	check_initialized();
	piglit_dispatch_glPixelTexGenParameteriSGIS = resolve_glPixelTexGenParameteriSGIS();
	piglit_dispatch_glPixelTexGenParameteriSGIS(pname, param);
}

PFNGLPIXELTEXGENPARAMETERISGISPROC piglit_dispatch_glPixelTexGenParameteriSGIS = stub_glPixelTexGenParameteriSGIS;

static void*
resolve_glPixelTexGenParameterivSGIS(void)
{
	/* glPixelTexGenParameterivSGIS (GL_SGIS_pixel_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIS_pixel_texture")) {
		return get_ext_proc("glPixelTexGenParameterivSGIS");
	}

	unsupported("glPixelTexGenParameterivSGIS");
	return piglit_dispatch_glPixelTexGenParameterivSGIS;
}

static void APIENTRY
stub_glPixelTexGenParameterivSGIS(GLenum pname, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glPixelTexGenParameterivSGIS = resolve_glPixelTexGenParameterivSGIS();
	piglit_dispatch_glPixelTexGenParameterivSGIS(pname, params);
}

PFNGLPIXELTEXGENPARAMETERIVSGISPROC piglit_dispatch_glPixelTexGenParameterivSGIS = stub_glPixelTexGenParameterivSGIS;

static void*
resolve_glPixelTexGenSGIX(void)
{
	/* glPixelTexGenSGIX (GL_SGIX_pixel_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_pixel_texture")) {
		return get_ext_proc("glPixelTexGenSGIX");
	}

	unsupported("glPixelTexGenSGIX");
	return piglit_dispatch_glPixelTexGenSGIX;
}

static void APIENTRY
stub_glPixelTexGenSGIX(GLenum mode)
{
	check_initialized();
	piglit_dispatch_glPixelTexGenSGIX = resolve_glPixelTexGenSGIX();
	piglit_dispatch_glPixelTexGenSGIX(mode);
}

PFNGLPIXELTEXGENSGIXPROC piglit_dispatch_glPixelTexGenSGIX = stub_glPixelTexGenSGIX;

static void*
resolve_glPixelTransferf(void)
{
	/* glPixelTransferf (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glPixelTransferf", 10);
	}

	unsupported("glPixelTransferf");
	return piglit_dispatch_glPixelTransferf;
}

static void APIENTRY
stub_glPixelTransferf(GLenum pname, GLfloat param)
{
	check_initialized();
	piglit_dispatch_glPixelTransferf = resolve_glPixelTransferf();
	piglit_dispatch_glPixelTransferf(pname, param);
}

PFNGLPIXELTRANSFERFPROC piglit_dispatch_glPixelTransferf = stub_glPixelTransferf;

static void*
resolve_glPixelTransferi(void)
{
	/* glPixelTransferi (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glPixelTransferi", 10);
	}

	unsupported("glPixelTransferi");
	return piglit_dispatch_glPixelTransferi;
}

static void APIENTRY
stub_glPixelTransferi(GLenum pname, GLint param)
{
	check_initialized();
	piglit_dispatch_glPixelTransferi = resolve_glPixelTransferi();
	piglit_dispatch_glPixelTransferi(pname, param);
}

PFNGLPIXELTRANSFERIPROC piglit_dispatch_glPixelTransferi = stub_glPixelTransferi;

static void*
resolve_glPixelTransferxOES(void)
{
	/* glPixelTransferxOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glPixelTransferxOES");
	}

	unsupported("glPixelTransferxOES");
	return piglit_dispatch_glPixelTransferxOES;
}

static void APIENTRY
stub_glPixelTransferxOES(GLenum pname, GLfixed param)
{
	check_initialized();
	piglit_dispatch_glPixelTransferxOES = resolve_glPixelTransferxOES();
	piglit_dispatch_glPixelTransferxOES(pname, param);
}

PFNGLPIXELTRANSFERXOESPROC piglit_dispatch_glPixelTransferxOES = stub_glPixelTransferxOES;

static void*
resolve_glPixelTransformParameterfEXT(void)
{
	/* glPixelTransformParameterfEXT (GL_EXT_pixel_transform) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_pixel_transform")) {
		return get_ext_proc("glPixelTransformParameterfEXT");
	}

	unsupported("glPixelTransformParameterfEXT");
	return piglit_dispatch_glPixelTransformParameterfEXT;
}

static void APIENTRY
stub_glPixelTransformParameterfEXT(GLenum target, GLenum pname, GLfloat param)
{
	check_initialized();
	piglit_dispatch_glPixelTransformParameterfEXT = resolve_glPixelTransformParameterfEXT();
	piglit_dispatch_glPixelTransformParameterfEXT(target, pname, param);
}

PFNGLPIXELTRANSFORMPARAMETERFEXTPROC piglit_dispatch_glPixelTransformParameterfEXT = stub_glPixelTransformParameterfEXT;

static void*
resolve_glPixelTransformParameterfvEXT(void)
{
	/* glPixelTransformParameterfvEXT (GL_EXT_pixel_transform) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_pixel_transform")) {
		return get_ext_proc("glPixelTransformParameterfvEXT");
	}

	unsupported("glPixelTransformParameterfvEXT");
	return piglit_dispatch_glPixelTransformParameterfvEXT;
}

static void APIENTRY
stub_glPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glPixelTransformParameterfvEXT = resolve_glPixelTransformParameterfvEXT();
	piglit_dispatch_glPixelTransformParameterfvEXT(target, pname, params);
}

PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC piglit_dispatch_glPixelTransformParameterfvEXT = stub_glPixelTransformParameterfvEXT;

static void*
resolve_glPixelTransformParameteriEXT(void)
{
	/* glPixelTransformParameteriEXT (GL_EXT_pixel_transform) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_pixel_transform")) {
		return get_ext_proc("glPixelTransformParameteriEXT");
	}

	unsupported("glPixelTransformParameteriEXT");
	return piglit_dispatch_glPixelTransformParameteriEXT;
}

static void APIENTRY
stub_glPixelTransformParameteriEXT(GLenum target, GLenum pname, GLint param)
{
	check_initialized();
	piglit_dispatch_glPixelTransformParameteriEXT = resolve_glPixelTransformParameteriEXT();
	piglit_dispatch_glPixelTransformParameteriEXT(target, pname, param);
}

PFNGLPIXELTRANSFORMPARAMETERIEXTPROC piglit_dispatch_glPixelTransformParameteriEXT = stub_glPixelTransformParameteriEXT;

static void*
resolve_glPixelTransformParameterivEXT(void)
{
	/* glPixelTransformParameterivEXT (GL_EXT_pixel_transform) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_pixel_transform")) {
		return get_ext_proc("glPixelTransformParameterivEXT");
	}

	unsupported("glPixelTransformParameterivEXT");
	return piglit_dispatch_glPixelTransformParameterivEXT;
}

static void APIENTRY
stub_glPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glPixelTransformParameterivEXT = resolve_glPixelTransformParameterivEXT();
	piglit_dispatch_glPixelTransformParameterivEXT(target, pname, params);
}

PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC piglit_dispatch_glPixelTransformParameterivEXT = stub_glPixelTransformParameterivEXT;

static void*
resolve_glPixelZoom(void)
{
	/* glPixelZoom (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glPixelZoom", 10);
	}

	unsupported("glPixelZoom");
	return piglit_dispatch_glPixelZoom;
}

static void APIENTRY
stub_glPixelZoom(GLfloat xfactor, GLfloat yfactor)
{
	check_initialized();
	piglit_dispatch_glPixelZoom = resolve_glPixelZoom();
	piglit_dispatch_glPixelZoom(xfactor, yfactor);
}

PFNGLPIXELZOOMPROC piglit_dispatch_glPixelZoom = stub_glPixelZoom;

static void*
resolve_glPixelZoomxOES(void)
{
	/* glPixelZoomxOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glPixelZoomxOES");
	}

	unsupported("glPixelZoomxOES");
	return piglit_dispatch_glPixelZoomxOES;
}

static void APIENTRY
stub_glPixelZoomxOES(GLfixed xfactor, GLfixed yfactor)
{
	check_initialized();
	piglit_dispatch_glPixelZoomxOES = resolve_glPixelZoomxOES();
	piglit_dispatch_glPixelZoomxOES(xfactor, yfactor);
}

PFNGLPIXELZOOMXOESPROC piglit_dispatch_glPixelZoomxOES = stub_glPixelZoomxOES;

static void*
resolve_glPointAlongPathNV(void)
{
	/* glPointAlongPathNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glPointAlongPathNV");
	}

	unsupported("glPointAlongPathNV");
	return piglit_dispatch_glPointAlongPathNV;
}

static GLboolean APIENTRY
stub_glPointAlongPathNV(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat * x, GLfloat * y, GLfloat * tangentX, GLfloat * tangentY)
{
	check_initialized();
	piglit_dispatch_glPointAlongPathNV = resolve_glPointAlongPathNV();
	return piglit_dispatch_glPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
}

PFNGLPOINTALONGPATHNVPROC piglit_dispatch_glPointAlongPathNV = stub_glPointAlongPathNV;

static void*
resolve_glPointParameterf(void)
{
	/* glPointParameterf (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glPointParameterf", 14);
	}

	/* glPointParameterf (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glPointParameterf", 10);
	}

	/* glPointParameterfARB (GL_ARB_point_parameters) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_point_parameters")) {
		return get_ext_proc("glPointParameterfARB");
	}

	/* glPointParameterfEXT (GL_EXT_point_parameters) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_point_parameters")) {
		return get_ext_proc("glPointParameterfEXT");
	}

	/* glPointParameterfSGIS (GL_SGIS_point_parameters) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIS_point_parameters")) {
		return get_ext_proc("glPointParameterfSGIS");
	}

	unsupported("glPointParameterf");
	return piglit_dispatch_glPointParameterf;
}

static void APIENTRY
stub_glPointParameterf(GLenum pname, GLfloat param)
{
	check_initialized();
	piglit_dispatch_glPointParameterf = resolve_glPointParameterf();
	piglit_dispatch_glPointParameterf(pname, param);
}

PFNGLPOINTPARAMETERFPROC piglit_dispatch_glPointParameterf = stub_glPointParameterf;

static void*
resolve_glPointParameterfv(void)
{
	/* glPointParameterfv (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glPointParameterfv", 14);
	}

	/* glPointParameterfv (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glPointParameterfv", 10);
	}

	/* glPointParameterfvARB (GL_ARB_point_parameters) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_point_parameters")) {
		return get_ext_proc("glPointParameterfvARB");
	}

	/* glPointParameterfvEXT (GL_EXT_point_parameters) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_point_parameters")) {
		return get_ext_proc("glPointParameterfvEXT");
	}

	/* glPointParameterfvSGIS (GL_SGIS_point_parameters) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIS_point_parameters")) {
		return get_ext_proc("glPointParameterfvSGIS");
	}

	unsupported("glPointParameterfv");
	return piglit_dispatch_glPointParameterfv;
}

static void APIENTRY
stub_glPointParameterfv(GLenum pname, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glPointParameterfv = resolve_glPointParameterfv();
	piglit_dispatch_glPointParameterfv(pname, params);
}

PFNGLPOINTPARAMETERFVPROC piglit_dispatch_glPointParameterfv = stub_glPointParameterfv;

static void*
resolve_glPointParameteri(void)
{
	/* glPointParameteri (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glPointParameteri", 14);
	}

	/* glPointParameteriNV (GL_NV_point_sprite) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_point_sprite")) {
		return get_ext_proc("glPointParameteriNV");
	}

	unsupported("glPointParameteri");
	return piglit_dispatch_glPointParameteri;
}

static void APIENTRY
stub_glPointParameteri(GLenum pname, GLint param)
{
	check_initialized();
	piglit_dispatch_glPointParameteri = resolve_glPointParameteri();
	piglit_dispatch_glPointParameteri(pname, param);
}

PFNGLPOINTPARAMETERIPROC piglit_dispatch_glPointParameteri = stub_glPointParameteri;

static void*
resolve_glPointParameteriv(void)
{
	/* glPointParameteriv (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glPointParameteriv", 14);
	}

	/* glPointParameterivNV (GL_NV_point_sprite) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_point_sprite")) {
		return get_ext_proc("glPointParameterivNV");
	}

	unsupported("glPointParameteriv");
	return piglit_dispatch_glPointParameteriv;
}

static void APIENTRY
stub_glPointParameteriv(GLenum pname, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glPointParameteriv = resolve_glPointParameteriv();
	piglit_dispatch_glPointParameteriv(pname, params);
}

PFNGLPOINTPARAMETERIVPROC piglit_dispatch_glPointParameteriv = stub_glPointParameteriv;

static void*
resolve_glPointParameterx(void)
{
	/* glPointParameterx (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glPointParameterx", 10);
	}

	unsupported("glPointParameterx");
	return piglit_dispatch_glPointParameterx;
}

static void APIENTRY
stub_glPointParameterx(GLenum pname, GLfixed param)
{
	check_initialized();
	piglit_dispatch_glPointParameterx = resolve_glPointParameterx();
	piglit_dispatch_glPointParameterx(pname, param);
}

PFNGLPOINTPARAMETERXPROC piglit_dispatch_glPointParameterx = stub_glPointParameterx;

static void*
resolve_glPointParameterxOES(void)
{
	/* glPointParameterxOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glPointParameterxOES");
	}

	unsupported("glPointParameterxOES");
	return piglit_dispatch_glPointParameterxOES;
}

static void APIENTRY
stub_glPointParameterxOES(GLenum pname, GLfixed param)
{
	check_initialized();
	piglit_dispatch_glPointParameterxOES = resolve_glPointParameterxOES();
	piglit_dispatch_glPointParameterxOES(pname, param);
}

PFNGLPOINTPARAMETERXOESPROC piglit_dispatch_glPointParameterxOES = stub_glPointParameterxOES;

static void*
resolve_glPointParameterxv(void)
{
	/* glPointParameterxv (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glPointParameterxv", 10);
	}

	unsupported("glPointParameterxv");
	return piglit_dispatch_glPointParameterxv;
}

static void APIENTRY
stub_glPointParameterxv(GLenum pname, const GLfixed * params)
{
	check_initialized();
	piglit_dispatch_glPointParameterxv = resolve_glPointParameterxv();
	piglit_dispatch_glPointParameterxv(pname, params);
}

PFNGLPOINTPARAMETERXVPROC piglit_dispatch_glPointParameterxv = stub_glPointParameterxv;

static void*
resolve_glPointParameterxvOES(void)
{
	/* glPointParameterxvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glPointParameterxvOES");
	}

	unsupported("glPointParameterxvOES");
	return piglit_dispatch_glPointParameterxvOES;
}

static void APIENTRY
stub_glPointParameterxvOES(GLenum pname, const GLfixed * params)
{
	check_initialized();
	piglit_dispatch_glPointParameterxvOES = resolve_glPointParameterxvOES();
	piglit_dispatch_glPointParameterxvOES(pname, params);
}

PFNGLPOINTPARAMETERXVOESPROC piglit_dispatch_glPointParameterxvOES = stub_glPointParameterxvOES;

static void*
resolve_glPointSize(void)
{
	/* glPointSize (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glPointSize", 10);
	}

	/* glPointSize (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glPointSize", 10);
	}

	unsupported("glPointSize");
	return piglit_dispatch_glPointSize;
}

static void APIENTRY
stub_glPointSize(GLfloat size)
{
	check_initialized();
	piglit_dispatch_glPointSize = resolve_glPointSize();
	piglit_dispatch_glPointSize(size);
}

PFNGLPOINTSIZEPROC piglit_dispatch_glPointSize = stub_glPointSize;

static void*
resolve_glPointSizePointerOES(void)
{
	/* glPointSizePointerOES (GL_OES_point_size_array) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_point_size_array")) {
		return get_ext_proc("glPointSizePointerOES");
	}

	unsupported("glPointSizePointerOES");
	return piglit_dispatch_glPointSizePointerOES;
}

static void APIENTRY
stub_glPointSizePointerOES(GLenum type, GLsizei stride, const void * pointer)
{
	check_initialized();
	piglit_dispatch_glPointSizePointerOES = resolve_glPointSizePointerOES();
	piglit_dispatch_glPointSizePointerOES(type, stride, pointer);
}

PFNGLPOINTSIZEPOINTEROESPROC piglit_dispatch_glPointSizePointerOES = stub_glPointSizePointerOES;

static void*
resolve_glPointSizex(void)
{
	/* glPointSizex (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glPointSizex", 10);
	}

	unsupported("glPointSizex");
	return piglit_dispatch_glPointSizex;
}

static void APIENTRY
stub_glPointSizex(GLfixed size)
{
	check_initialized();
	piglit_dispatch_glPointSizex = resolve_glPointSizex();
	piglit_dispatch_glPointSizex(size);
}

PFNGLPOINTSIZEXPROC piglit_dispatch_glPointSizex = stub_glPointSizex;

static void*
resolve_glPointSizexOES(void)
{
	/* glPointSizexOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glPointSizexOES");
	}

	unsupported("glPointSizexOES");
	return piglit_dispatch_glPointSizexOES;
}

static void APIENTRY
stub_glPointSizexOES(GLfixed size)
{
	check_initialized();
	piglit_dispatch_glPointSizexOES = resolve_glPointSizexOES();
	piglit_dispatch_glPointSizexOES(size);
}

PFNGLPOINTSIZEXOESPROC piglit_dispatch_glPointSizexOES = stub_glPointSizexOES;

static void*
resolve_glPollAsyncSGIX(void)
{
	/* glPollAsyncSGIX (GL_SGIX_async) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_async")) {
		return get_ext_proc("glPollAsyncSGIX");
	}

	unsupported("glPollAsyncSGIX");
	return piglit_dispatch_glPollAsyncSGIX;
}

static GLint APIENTRY
stub_glPollAsyncSGIX(GLuint * markerp)
{
	check_initialized();
	piglit_dispatch_glPollAsyncSGIX = resolve_glPollAsyncSGIX();
	return piglit_dispatch_glPollAsyncSGIX(markerp);
}

PFNGLPOLLASYNCSGIXPROC piglit_dispatch_glPollAsyncSGIX = stub_glPollAsyncSGIX;

static void*
resolve_glPollInstrumentsSGIX(void)
{
	/* glPollInstrumentsSGIX (GL_SGIX_instruments) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_instruments")) {
		return get_ext_proc("glPollInstrumentsSGIX");
	}

	unsupported("glPollInstrumentsSGIX");
	return piglit_dispatch_glPollInstrumentsSGIX;
}

static GLint APIENTRY
stub_glPollInstrumentsSGIX(GLint * marker_p)
{
	check_initialized();
	piglit_dispatch_glPollInstrumentsSGIX = resolve_glPollInstrumentsSGIX();
	return piglit_dispatch_glPollInstrumentsSGIX(marker_p);
}

PFNGLPOLLINSTRUMENTSSGIXPROC piglit_dispatch_glPollInstrumentsSGIX = stub_glPollInstrumentsSGIX;

static void*
resolve_glPolygonMode(void)
{
	/* glPolygonMode (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glPolygonMode", 10);
	}

	unsupported("glPolygonMode");
	return piglit_dispatch_glPolygonMode;
}

static void APIENTRY
stub_glPolygonMode(GLenum face, GLenum mode)
{
	check_initialized();
	piglit_dispatch_glPolygonMode = resolve_glPolygonMode();
	piglit_dispatch_glPolygonMode(face, mode);
}

PFNGLPOLYGONMODEPROC piglit_dispatch_glPolygonMode = stub_glPolygonMode;

static void*
resolve_glPolygonOffset(void)
{
	/* glPolygonOffset (GL_VERSION_1_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glPolygonOffset", 11);
	}

	/* glPolygonOffset (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glPolygonOffset", 10);
	}

	/* glPolygonOffset (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glPolygonOffset", 20);
	}

	unsupported("glPolygonOffset");
	return piglit_dispatch_glPolygonOffset;
}

static void APIENTRY
stub_glPolygonOffset(GLfloat factor, GLfloat units)
{
	check_initialized();
	piglit_dispatch_glPolygonOffset = resolve_glPolygonOffset();
	piglit_dispatch_glPolygonOffset(factor, units);
}

PFNGLPOLYGONOFFSETPROC piglit_dispatch_glPolygonOffset = stub_glPolygonOffset;

static void*
resolve_glPolygonOffsetEXT(void)
{
	/* glPolygonOffsetEXT (GL_EXT_polygon_offset) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_polygon_offset")) {
		return get_ext_proc("glPolygonOffsetEXT");
	}

	unsupported("glPolygonOffsetEXT");
	return piglit_dispatch_glPolygonOffsetEXT;
}

static void APIENTRY
stub_glPolygonOffsetEXT(GLfloat factor, GLfloat bias)
{
	check_initialized();
	piglit_dispatch_glPolygonOffsetEXT = resolve_glPolygonOffsetEXT();
	piglit_dispatch_glPolygonOffsetEXT(factor, bias);
}

PFNGLPOLYGONOFFSETEXTPROC piglit_dispatch_glPolygonOffsetEXT = stub_glPolygonOffsetEXT;

static void*
resolve_glPolygonOffsetx(void)
{
	/* glPolygonOffsetx (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glPolygonOffsetx", 10);
	}

	unsupported("glPolygonOffsetx");
	return piglit_dispatch_glPolygonOffsetx;
}

static void APIENTRY
stub_glPolygonOffsetx(GLfixed factor, GLfixed units)
{
	check_initialized();
	piglit_dispatch_glPolygonOffsetx = resolve_glPolygonOffsetx();
	piglit_dispatch_glPolygonOffsetx(factor, units);
}

PFNGLPOLYGONOFFSETXPROC piglit_dispatch_glPolygonOffsetx = stub_glPolygonOffsetx;

static void*
resolve_glPolygonOffsetxOES(void)
{
	/* glPolygonOffsetxOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glPolygonOffsetxOES");
	}

	unsupported("glPolygonOffsetxOES");
	return piglit_dispatch_glPolygonOffsetxOES;
}

static void APIENTRY
stub_glPolygonOffsetxOES(GLfixed factor, GLfixed units)
{
	check_initialized();
	piglit_dispatch_glPolygonOffsetxOES = resolve_glPolygonOffsetxOES();
	piglit_dispatch_glPolygonOffsetxOES(factor, units);
}

PFNGLPOLYGONOFFSETXOESPROC piglit_dispatch_glPolygonOffsetxOES = stub_glPolygonOffsetxOES;

static void*
resolve_glPolygonStipple(void)
{
	/* glPolygonStipple (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glPolygonStipple", 10);
	}

	unsupported("glPolygonStipple");
	return piglit_dispatch_glPolygonStipple;
}

static void APIENTRY
stub_glPolygonStipple(const GLubyte * mask)
{
	check_initialized();
	piglit_dispatch_glPolygonStipple = resolve_glPolygonStipple();
	piglit_dispatch_glPolygonStipple(mask);
}

PFNGLPOLYGONSTIPPLEPROC piglit_dispatch_glPolygonStipple = stub_glPolygonStipple;

static void*
resolve_glPopAttrib(void)
{
	/* glPopAttrib (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glPopAttrib", 10);
	}

	unsupported("glPopAttrib");
	return piglit_dispatch_glPopAttrib;
}

static void APIENTRY
stub_glPopAttrib()
{
	check_initialized();
	piglit_dispatch_glPopAttrib = resolve_glPopAttrib();
	piglit_dispatch_glPopAttrib();
}

PFNGLPOPATTRIBPROC piglit_dispatch_glPopAttrib = stub_glPopAttrib;

static void*
resolve_glPopClientAttrib(void)
{
	/* glPopClientAttrib (GL_VERSION_1_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glPopClientAttrib", 11);
	}

	unsupported("glPopClientAttrib");
	return piglit_dispatch_glPopClientAttrib;
}

static void APIENTRY
stub_glPopClientAttrib()
{
	check_initialized();
	piglit_dispatch_glPopClientAttrib = resolve_glPopClientAttrib();
	piglit_dispatch_glPopClientAttrib();
}

PFNGLPOPCLIENTATTRIBPROC piglit_dispatch_glPopClientAttrib = stub_glPopClientAttrib;

static void*
resolve_glPopDebugGroup(void)
{
	/* glPopDebugGroup (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glPopDebugGroup", 43);
	}

	/* glPopDebugGroup (GL_KHR_debug) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_KHR_debug")) {
		return get_ext_proc("glPopDebugGroup");
	}

	/* glPopDebugGroupKHR (GL_KHR_debug) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_KHR_debug")) {
		return get_ext_proc("glPopDebugGroupKHR");
	}

	unsupported("glPopDebugGroup");
	return piglit_dispatch_glPopDebugGroup;
}

static void APIENTRY
stub_glPopDebugGroup()
{
	check_initialized();
	piglit_dispatch_glPopDebugGroup = resolve_glPopDebugGroup();
	piglit_dispatch_glPopDebugGroup();
}

PFNGLPOPDEBUGGROUPPROC piglit_dispatch_glPopDebugGroup = stub_glPopDebugGroup;

static void*
resolve_glPopGroupMarkerEXT(void)
{
	/* glPopGroupMarkerEXT (GL_EXT_debug_marker) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_debug_marker")) {
		return get_ext_proc("glPopGroupMarkerEXT");
	}

	unsupported("glPopGroupMarkerEXT");
	return piglit_dispatch_glPopGroupMarkerEXT;
}

static void APIENTRY
stub_glPopGroupMarkerEXT()
{
	check_initialized();
	piglit_dispatch_glPopGroupMarkerEXT = resolve_glPopGroupMarkerEXT();
	piglit_dispatch_glPopGroupMarkerEXT();
}

PFNGLPOPGROUPMARKEREXTPROC piglit_dispatch_glPopGroupMarkerEXT = stub_glPopGroupMarkerEXT;

static void*
resolve_glPopMatrix(void)
{
	/* glPopMatrix (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glPopMatrix", 10);
	}

	/* glPopMatrix (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glPopMatrix", 10);
	}

	unsupported("glPopMatrix");
	return piglit_dispatch_glPopMatrix;
}

static void APIENTRY
stub_glPopMatrix()
{
	check_initialized();
	piglit_dispatch_glPopMatrix = resolve_glPopMatrix();
	piglit_dispatch_glPopMatrix();
}

PFNGLPOPMATRIXPROC piglit_dispatch_glPopMatrix = stub_glPopMatrix;

static void*
resolve_glPopName(void)
{
	/* glPopName (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glPopName", 10);
	}

	unsupported("glPopName");
	return piglit_dispatch_glPopName;
}

static void APIENTRY
stub_glPopName()
{
	check_initialized();
	piglit_dispatch_glPopName = resolve_glPopName();
	piglit_dispatch_glPopName();
}

PFNGLPOPNAMEPROC piglit_dispatch_glPopName = stub_glPopName;

static void*
resolve_glPresentFrameDualFillNV(void)
{
	/* glPresentFrameDualFillNV (GL_NV_present_video) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_present_video")) {
		return get_ext_proc("glPresentFrameDualFillNV");
	}

	unsupported("glPresentFrameDualFillNV");
	return piglit_dispatch_glPresentFrameDualFillNV;
}

static void APIENTRY
stub_glPresentFrameDualFillNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3)
{
	check_initialized();
	piglit_dispatch_glPresentFrameDualFillNV = resolve_glPresentFrameDualFillNV();
	piglit_dispatch_glPresentFrameDualFillNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
}

PFNGLPRESENTFRAMEDUALFILLNVPROC piglit_dispatch_glPresentFrameDualFillNV = stub_glPresentFrameDualFillNV;

static void*
resolve_glPresentFrameKeyedNV(void)
{
	/* glPresentFrameKeyedNV (GL_NV_present_video) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_present_video")) {
		return get_ext_proc("glPresentFrameKeyedNV");
	}

	unsupported("glPresentFrameKeyedNV");
	return piglit_dispatch_glPresentFrameKeyedNV;
}

static void APIENTRY
stub_glPresentFrameKeyedNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1)
{
	check_initialized();
	piglit_dispatch_glPresentFrameKeyedNV = resolve_glPresentFrameKeyedNV();
	piglit_dispatch_glPresentFrameKeyedNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
}

PFNGLPRESENTFRAMEKEYEDNVPROC piglit_dispatch_glPresentFrameKeyedNV = stub_glPresentFrameKeyedNV;

static void*
resolve_glPrimitiveRestartIndex(void)
{
	/* glPrimitiveRestartIndex (GL_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glPrimitiveRestartIndex", 31);
	}

	unsupported("glPrimitiveRestartIndex");
	return piglit_dispatch_glPrimitiveRestartIndex;
}

static void APIENTRY
stub_glPrimitiveRestartIndex(GLuint index)
{
	check_initialized();
	piglit_dispatch_glPrimitiveRestartIndex = resolve_glPrimitiveRestartIndex();
	piglit_dispatch_glPrimitiveRestartIndex(index);
}

PFNGLPRIMITIVERESTARTINDEXPROC piglit_dispatch_glPrimitiveRestartIndex = stub_glPrimitiveRestartIndex;

static void*
resolve_glPrimitiveRestartIndexNV(void)
{
	/* glPrimitiveRestartIndexNV (GL_NV_primitive_restart) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_primitive_restart")) {
		return get_ext_proc("glPrimitiveRestartIndexNV");
	}

	unsupported("glPrimitiveRestartIndexNV");
	return piglit_dispatch_glPrimitiveRestartIndexNV;
}

static void APIENTRY
stub_glPrimitiveRestartIndexNV(GLuint index)
{
	check_initialized();
	piglit_dispatch_glPrimitiveRestartIndexNV = resolve_glPrimitiveRestartIndexNV();
	piglit_dispatch_glPrimitiveRestartIndexNV(index);
}

PFNGLPRIMITIVERESTARTINDEXNVPROC piglit_dispatch_glPrimitiveRestartIndexNV = stub_glPrimitiveRestartIndexNV;

static void*
resolve_glPrimitiveRestartNV(void)
{
	/* glPrimitiveRestartNV (GL_NV_primitive_restart) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_primitive_restart")) {
		return get_ext_proc("glPrimitiveRestartNV");
	}

	unsupported("glPrimitiveRestartNV");
	return piglit_dispatch_glPrimitiveRestartNV;
}

static void APIENTRY
stub_glPrimitiveRestartNV()
{
	check_initialized();
	piglit_dispatch_glPrimitiveRestartNV = resolve_glPrimitiveRestartNV();
	piglit_dispatch_glPrimitiveRestartNV();
}

PFNGLPRIMITIVERESTARTNVPROC piglit_dispatch_glPrimitiveRestartNV = stub_glPrimitiveRestartNV;

static void*
resolve_glPrioritizeTextures(void)
{
	/* glPrioritizeTextures (GL_VERSION_1_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glPrioritizeTextures", 11);
	}

	/* glPrioritizeTexturesEXT (GL_EXT_texture_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_texture_object")) {
		return get_ext_proc("glPrioritizeTexturesEXT");
	}

	unsupported("glPrioritizeTextures");
	return piglit_dispatch_glPrioritizeTextures;
}

static void APIENTRY
stub_glPrioritizeTextures(GLsizei n, const GLuint * textures, const GLfloat * priorities)
{
	check_initialized();
	piglit_dispatch_glPrioritizeTextures = resolve_glPrioritizeTextures();
	piglit_dispatch_glPrioritizeTextures(n, textures, priorities);
}

PFNGLPRIORITIZETEXTURESPROC piglit_dispatch_glPrioritizeTextures = stub_glPrioritizeTextures;

static void*
resolve_glPrioritizeTexturesxOES(void)
{
	/* glPrioritizeTexturesxOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glPrioritizeTexturesxOES");
	}

	unsupported("glPrioritizeTexturesxOES");
	return piglit_dispatch_glPrioritizeTexturesxOES;
}

static void APIENTRY
stub_glPrioritizeTexturesxOES(GLsizei n, const GLuint * textures, const GLfixed * priorities)
{
	check_initialized();
	piglit_dispatch_glPrioritizeTexturesxOES = resolve_glPrioritizeTexturesxOES();
	piglit_dispatch_glPrioritizeTexturesxOES(n, textures, priorities);
}

PFNGLPRIORITIZETEXTURESXOESPROC piglit_dispatch_glPrioritizeTexturesxOES = stub_glPrioritizeTexturesxOES;

static void*
resolve_glProgramBinary(void)
{
	/* glProgramBinary (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramBinary", 41);
	}

	/* glProgramBinary (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramBinary", 30);
	}

	/* glProgramBinary (GL_ARB_get_program_binary) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_get_program_binary")) {
		return get_ext_proc("glProgramBinary");
	}

	/* glProgramBinaryOES (GL_OES_get_program_binary) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_OES_get_program_binary")) {
		return get_ext_proc("glProgramBinaryOES");
	}

	unsupported("glProgramBinary");
	return piglit_dispatch_glProgramBinary;
}

static void APIENTRY
stub_glProgramBinary(GLuint program, GLenum binaryFormat, const void * binary, GLsizei length)
{
	check_initialized();
	piglit_dispatch_glProgramBinary = resolve_glProgramBinary();
	piglit_dispatch_glProgramBinary(program, binaryFormat, binary, length);
}

PFNGLPROGRAMBINARYPROC piglit_dispatch_glProgramBinary = stub_glProgramBinary;

static void*
resolve_glProgramBufferParametersIivNV(void)
{
	/* glProgramBufferParametersIivNV (GL_NV_parameter_buffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_parameter_buffer_object")) {
		return get_ext_proc("glProgramBufferParametersIivNV");
	}

	unsupported("glProgramBufferParametersIivNV");
	return piglit_dispatch_glProgramBufferParametersIivNV;
}

static void APIENTRY
stub_glProgramBufferParametersIivNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glProgramBufferParametersIivNV = resolve_glProgramBufferParametersIivNV();
	piglit_dispatch_glProgramBufferParametersIivNV(target, bindingIndex, wordIndex, count, params);
}

PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC piglit_dispatch_glProgramBufferParametersIivNV = stub_glProgramBufferParametersIivNV;

static void*
resolve_glProgramBufferParametersIuivNV(void)
{
	/* glProgramBufferParametersIuivNV (GL_NV_parameter_buffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_parameter_buffer_object")) {
		return get_ext_proc("glProgramBufferParametersIuivNV");
	}

	unsupported("glProgramBufferParametersIuivNV");
	return piglit_dispatch_glProgramBufferParametersIuivNV;
}

static void APIENTRY
stub_glProgramBufferParametersIuivNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint * params)
{
	check_initialized();
	piglit_dispatch_glProgramBufferParametersIuivNV = resolve_glProgramBufferParametersIuivNV();
	piglit_dispatch_glProgramBufferParametersIuivNV(target, bindingIndex, wordIndex, count, params);
}

PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC piglit_dispatch_glProgramBufferParametersIuivNV = stub_glProgramBufferParametersIuivNV;

static void*
resolve_glProgramBufferParametersfvNV(void)
{
	/* glProgramBufferParametersfvNV (GL_NV_parameter_buffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_parameter_buffer_object")) {
		return get_ext_proc("glProgramBufferParametersfvNV");
	}

	unsupported("glProgramBufferParametersfvNV");
	return piglit_dispatch_glProgramBufferParametersfvNV;
}

static void APIENTRY
stub_glProgramBufferParametersfvNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glProgramBufferParametersfvNV = resolve_glProgramBufferParametersfvNV();
	piglit_dispatch_glProgramBufferParametersfvNV(target, bindingIndex, wordIndex, count, params);
}

PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC piglit_dispatch_glProgramBufferParametersfvNV = stub_glProgramBufferParametersfvNV;

static void*
resolve_glProgramEnvParameter4dARB(void)
{
	/* glProgramEnvParameter4dARB (GL_ARB_fragment_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_fragment_program")) {
		return get_ext_proc("glProgramEnvParameter4dARB");
	}

	/* glProgramEnvParameter4dARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glProgramEnvParameter4dARB");
	}

	unsupported("glProgramEnvParameter4dARB");
	return piglit_dispatch_glProgramEnvParameter4dARB;
}

static void APIENTRY
stub_glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
	check_initialized();
	piglit_dispatch_glProgramEnvParameter4dARB = resolve_glProgramEnvParameter4dARB();
	piglit_dispatch_glProgramEnvParameter4dARB(target, index, x, y, z, w);
}

PFNGLPROGRAMENVPARAMETER4DARBPROC piglit_dispatch_glProgramEnvParameter4dARB = stub_glProgramEnvParameter4dARB;

static void*
resolve_glProgramEnvParameter4dvARB(void)
{
	/* glProgramEnvParameter4dvARB (GL_ARB_fragment_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_fragment_program")) {
		return get_ext_proc("glProgramEnvParameter4dvARB");
	}

	/* glProgramEnvParameter4dvARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glProgramEnvParameter4dvARB");
	}

	unsupported("glProgramEnvParameter4dvARB");
	return piglit_dispatch_glProgramEnvParameter4dvARB;
}

static void APIENTRY
stub_glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble * params)
{
	check_initialized();
	piglit_dispatch_glProgramEnvParameter4dvARB = resolve_glProgramEnvParameter4dvARB();
	piglit_dispatch_glProgramEnvParameter4dvARB(target, index, params);
}

PFNGLPROGRAMENVPARAMETER4DVARBPROC piglit_dispatch_glProgramEnvParameter4dvARB = stub_glProgramEnvParameter4dvARB;

static void*
resolve_glProgramEnvParameter4fARB(void)
{
	/* glProgramEnvParameter4fARB (GL_ARB_fragment_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_fragment_program")) {
		return get_ext_proc("glProgramEnvParameter4fARB");
	}

	/* glProgramEnvParameter4fARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glProgramEnvParameter4fARB");
	}

	unsupported("glProgramEnvParameter4fARB");
	return piglit_dispatch_glProgramEnvParameter4fARB;
}

static void APIENTRY
stub_glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
	check_initialized();
	piglit_dispatch_glProgramEnvParameter4fARB = resolve_glProgramEnvParameter4fARB();
	piglit_dispatch_glProgramEnvParameter4fARB(target, index, x, y, z, w);
}

PFNGLPROGRAMENVPARAMETER4FARBPROC piglit_dispatch_glProgramEnvParameter4fARB = stub_glProgramEnvParameter4fARB;

static void*
resolve_glProgramEnvParameter4fvARB(void)
{
	/* glProgramEnvParameter4fvARB (GL_ARB_fragment_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_fragment_program")) {
		return get_ext_proc("glProgramEnvParameter4fvARB");
	}

	/* glProgramEnvParameter4fvARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glProgramEnvParameter4fvARB");
	}

	unsupported("glProgramEnvParameter4fvARB");
	return piglit_dispatch_glProgramEnvParameter4fvARB;
}

static void APIENTRY
stub_glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glProgramEnvParameter4fvARB = resolve_glProgramEnvParameter4fvARB();
	piglit_dispatch_glProgramEnvParameter4fvARB(target, index, params);
}

PFNGLPROGRAMENVPARAMETER4FVARBPROC piglit_dispatch_glProgramEnvParameter4fvARB = stub_glProgramEnvParameter4fvARB;

static void*
resolve_glProgramEnvParameterI4iNV(void)
{
	/* glProgramEnvParameterI4iNV (GL_NV_gpu_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_program4")) {
		return get_ext_proc("glProgramEnvParameterI4iNV");
	}

	unsupported("glProgramEnvParameterI4iNV");
	return piglit_dispatch_glProgramEnvParameterI4iNV;
}

static void APIENTRY
stub_glProgramEnvParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
	check_initialized();
	piglit_dispatch_glProgramEnvParameterI4iNV = resolve_glProgramEnvParameterI4iNV();
	piglit_dispatch_glProgramEnvParameterI4iNV(target, index, x, y, z, w);
}

PFNGLPROGRAMENVPARAMETERI4INVPROC piglit_dispatch_glProgramEnvParameterI4iNV = stub_glProgramEnvParameterI4iNV;

static void*
resolve_glProgramEnvParameterI4ivNV(void)
{
	/* glProgramEnvParameterI4ivNV (GL_NV_gpu_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_program4")) {
		return get_ext_proc("glProgramEnvParameterI4ivNV");
	}

	unsupported("glProgramEnvParameterI4ivNV");
	return piglit_dispatch_glProgramEnvParameterI4ivNV;
}

static void APIENTRY
stub_glProgramEnvParameterI4ivNV(GLenum target, GLuint index, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glProgramEnvParameterI4ivNV = resolve_glProgramEnvParameterI4ivNV();
	piglit_dispatch_glProgramEnvParameterI4ivNV(target, index, params);
}

PFNGLPROGRAMENVPARAMETERI4IVNVPROC piglit_dispatch_glProgramEnvParameterI4ivNV = stub_glProgramEnvParameterI4ivNV;

static void*
resolve_glProgramEnvParameterI4uiNV(void)
{
	/* glProgramEnvParameterI4uiNV (GL_NV_gpu_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_program4")) {
		return get_ext_proc("glProgramEnvParameterI4uiNV");
	}

	unsupported("glProgramEnvParameterI4uiNV");
	return piglit_dispatch_glProgramEnvParameterI4uiNV;
}

static void APIENTRY
stub_glProgramEnvParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
	check_initialized();
	piglit_dispatch_glProgramEnvParameterI4uiNV = resolve_glProgramEnvParameterI4uiNV();
	piglit_dispatch_glProgramEnvParameterI4uiNV(target, index, x, y, z, w);
}

PFNGLPROGRAMENVPARAMETERI4UINVPROC piglit_dispatch_glProgramEnvParameterI4uiNV = stub_glProgramEnvParameterI4uiNV;

static void*
resolve_glProgramEnvParameterI4uivNV(void)
{
	/* glProgramEnvParameterI4uivNV (GL_NV_gpu_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_program4")) {
		return get_ext_proc("glProgramEnvParameterI4uivNV");
	}

	unsupported("glProgramEnvParameterI4uivNV");
	return piglit_dispatch_glProgramEnvParameterI4uivNV;
}

static void APIENTRY
stub_glProgramEnvParameterI4uivNV(GLenum target, GLuint index, const GLuint * params)
{
	check_initialized();
	piglit_dispatch_glProgramEnvParameterI4uivNV = resolve_glProgramEnvParameterI4uivNV();
	piglit_dispatch_glProgramEnvParameterI4uivNV(target, index, params);
}

PFNGLPROGRAMENVPARAMETERI4UIVNVPROC piglit_dispatch_glProgramEnvParameterI4uivNV = stub_glProgramEnvParameterI4uivNV;

static void*
resolve_glProgramEnvParameters4fvEXT(void)
{
	/* glProgramEnvParameters4fvEXT (GL_EXT_gpu_program_parameters) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_gpu_program_parameters")) {
		return get_ext_proc("glProgramEnvParameters4fvEXT");
	}

	unsupported("glProgramEnvParameters4fvEXT");
	return piglit_dispatch_glProgramEnvParameters4fvEXT;
}

static void APIENTRY
stub_glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glProgramEnvParameters4fvEXT = resolve_glProgramEnvParameters4fvEXT();
	piglit_dispatch_glProgramEnvParameters4fvEXT(target, index, count, params);
}

PFNGLPROGRAMENVPARAMETERS4FVEXTPROC piglit_dispatch_glProgramEnvParameters4fvEXT = stub_glProgramEnvParameters4fvEXT;

static void*
resolve_glProgramEnvParametersI4ivNV(void)
{
	/* glProgramEnvParametersI4ivNV (GL_NV_gpu_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_program4")) {
		return get_ext_proc("glProgramEnvParametersI4ivNV");
	}

	unsupported("glProgramEnvParametersI4ivNV");
	return piglit_dispatch_glProgramEnvParametersI4ivNV;
}

static void APIENTRY
stub_glProgramEnvParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glProgramEnvParametersI4ivNV = resolve_glProgramEnvParametersI4ivNV();
	piglit_dispatch_glProgramEnvParametersI4ivNV(target, index, count, params);
}

PFNGLPROGRAMENVPARAMETERSI4IVNVPROC piglit_dispatch_glProgramEnvParametersI4ivNV = stub_glProgramEnvParametersI4ivNV;

static void*
resolve_glProgramEnvParametersI4uivNV(void)
{
	/* glProgramEnvParametersI4uivNV (GL_NV_gpu_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_program4")) {
		return get_ext_proc("glProgramEnvParametersI4uivNV");
	}

	unsupported("glProgramEnvParametersI4uivNV");
	return piglit_dispatch_glProgramEnvParametersI4uivNV;
}

static void APIENTRY
stub_glProgramEnvParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint * params)
{
	check_initialized();
	piglit_dispatch_glProgramEnvParametersI4uivNV = resolve_glProgramEnvParametersI4uivNV();
	piglit_dispatch_glProgramEnvParametersI4uivNV(target, index, count, params);
}

PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC piglit_dispatch_glProgramEnvParametersI4uivNV = stub_glProgramEnvParametersI4uivNV;

static void*
resolve_glProgramLocalParameter4dARB(void)
{
	/* glProgramLocalParameter4dARB (GL_ARB_fragment_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_fragment_program")) {
		return get_ext_proc("glProgramLocalParameter4dARB");
	}

	/* glProgramLocalParameter4dARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glProgramLocalParameter4dARB");
	}

	unsupported("glProgramLocalParameter4dARB");
	return piglit_dispatch_glProgramLocalParameter4dARB;
}

static void APIENTRY
stub_glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
	check_initialized();
	piglit_dispatch_glProgramLocalParameter4dARB = resolve_glProgramLocalParameter4dARB();
	piglit_dispatch_glProgramLocalParameter4dARB(target, index, x, y, z, w);
}

PFNGLPROGRAMLOCALPARAMETER4DARBPROC piglit_dispatch_glProgramLocalParameter4dARB = stub_glProgramLocalParameter4dARB;

static void*
resolve_glProgramLocalParameter4dvARB(void)
{
	/* glProgramLocalParameter4dvARB (GL_ARB_fragment_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_fragment_program")) {
		return get_ext_proc("glProgramLocalParameter4dvARB");
	}

	/* glProgramLocalParameter4dvARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glProgramLocalParameter4dvARB");
	}

	unsupported("glProgramLocalParameter4dvARB");
	return piglit_dispatch_glProgramLocalParameter4dvARB;
}

static void APIENTRY
stub_glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble * params)
{
	check_initialized();
	piglit_dispatch_glProgramLocalParameter4dvARB = resolve_glProgramLocalParameter4dvARB();
	piglit_dispatch_glProgramLocalParameter4dvARB(target, index, params);
}

PFNGLPROGRAMLOCALPARAMETER4DVARBPROC piglit_dispatch_glProgramLocalParameter4dvARB = stub_glProgramLocalParameter4dvARB;

static void*
resolve_glProgramLocalParameter4fARB(void)
{
	/* glProgramLocalParameter4fARB (GL_ARB_fragment_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_fragment_program")) {
		return get_ext_proc("glProgramLocalParameter4fARB");
	}

	/* glProgramLocalParameter4fARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glProgramLocalParameter4fARB");
	}

	unsupported("glProgramLocalParameter4fARB");
	return piglit_dispatch_glProgramLocalParameter4fARB;
}

static void APIENTRY
stub_glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
	check_initialized();
	piglit_dispatch_glProgramLocalParameter4fARB = resolve_glProgramLocalParameter4fARB();
	piglit_dispatch_glProgramLocalParameter4fARB(target, index, x, y, z, w);
}

PFNGLPROGRAMLOCALPARAMETER4FARBPROC piglit_dispatch_glProgramLocalParameter4fARB = stub_glProgramLocalParameter4fARB;

static void*
resolve_glProgramLocalParameter4fvARB(void)
{
	/* glProgramLocalParameter4fvARB (GL_ARB_fragment_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_fragment_program")) {
		return get_ext_proc("glProgramLocalParameter4fvARB");
	}

	/* glProgramLocalParameter4fvARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glProgramLocalParameter4fvARB");
	}

	unsupported("glProgramLocalParameter4fvARB");
	return piglit_dispatch_glProgramLocalParameter4fvARB;
}

static void APIENTRY
stub_glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glProgramLocalParameter4fvARB = resolve_glProgramLocalParameter4fvARB();
	piglit_dispatch_glProgramLocalParameter4fvARB(target, index, params);
}

PFNGLPROGRAMLOCALPARAMETER4FVARBPROC piglit_dispatch_glProgramLocalParameter4fvARB = stub_glProgramLocalParameter4fvARB;

static void*
resolve_glProgramLocalParameterI4iNV(void)
{
	/* glProgramLocalParameterI4iNV (GL_NV_gpu_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_program4")) {
		return get_ext_proc("glProgramLocalParameterI4iNV");
	}

	unsupported("glProgramLocalParameterI4iNV");
	return piglit_dispatch_glProgramLocalParameterI4iNV;
}

static void APIENTRY
stub_glProgramLocalParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
	check_initialized();
	piglit_dispatch_glProgramLocalParameterI4iNV = resolve_glProgramLocalParameterI4iNV();
	piglit_dispatch_glProgramLocalParameterI4iNV(target, index, x, y, z, w);
}

PFNGLPROGRAMLOCALPARAMETERI4INVPROC piglit_dispatch_glProgramLocalParameterI4iNV = stub_glProgramLocalParameterI4iNV;

static void*
resolve_glProgramLocalParameterI4ivNV(void)
{
	/* glProgramLocalParameterI4ivNV (GL_NV_gpu_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_program4")) {
		return get_ext_proc("glProgramLocalParameterI4ivNV");
	}

	unsupported("glProgramLocalParameterI4ivNV");
	return piglit_dispatch_glProgramLocalParameterI4ivNV;
}

static void APIENTRY
stub_glProgramLocalParameterI4ivNV(GLenum target, GLuint index, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glProgramLocalParameterI4ivNV = resolve_glProgramLocalParameterI4ivNV();
	piglit_dispatch_glProgramLocalParameterI4ivNV(target, index, params);
}

PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC piglit_dispatch_glProgramLocalParameterI4ivNV = stub_glProgramLocalParameterI4ivNV;

static void*
resolve_glProgramLocalParameterI4uiNV(void)
{
	/* glProgramLocalParameterI4uiNV (GL_NV_gpu_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_program4")) {
		return get_ext_proc("glProgramLocalParameterI4uiNV");
	}

	unsupported("glProgramLocalParameterI4uiNV");
	return piglit_dispatch_glProgramLocalParameterI4uiNV;
}

static void APIENTRY
stub_glProgramLocalParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
	check_initialized();
	piglit_dispatch_glProgramLocalParameterI4uiNV = resolve_glProgramLocalParameterI4uiNV();
	piglit_dispatch_glProgramLocalParameterI4uiNV(target, index, x, y, z, w);
}

PFNGLPROGRAMLOCALPARAMETERI4UINVPROC piglit_dispatch_glProgramLocalParameterI4uiNV = stub_glProgramLocalParameterI4uiNV;

static void*
resolve_glProgramLocalParameterI4uivNV(void)
{
	/* glProgramLocalParameterI4uivNV (GL_NV_gpu_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_program4")) {
		return get_ext_proc("glProgramLocalParameterI4uivNV");
	}

	unsupported("glProgramLocalParameterI4uivNV");
	return piglit_dispatch_glProgramLocalParameterI4uivNV;
}

static void APIENTRY
stub_glProgramLocalParameterI4uivNV(GLenum target, GLuint index, const GLuint * params)
{
	check_initialized();
	piglit_dispatch_glProgramLocalParameterI4uivNV = resolve_glProgramLocalParameterI4uivNV();
	piglit_dispatch_glProgramLocalParameterI4uivNV(target, index, params);
}

PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC piglit_dispatch_glProgramLocalParameterI4uivNV = stub_glProgramLocalParameterI4uivNV;

static void*
resolve_glProgramLocalParameters4fvEXT(void)
{
	/* glProgramLocalParameters4fvEXT (GL_EXT_gpu_program_parameters) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_gpu_program_parameters")) {
		return get_ext_proc("glProgramLocalParameters4fvEXT");
	}

	unsupported("glProgramLocalParameters4fvEXT");
	return piglit_dispatch_glProgramLocalParameters4fvEXT;
}

static void APIENTRY
stub_glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glProgramLocalParameters4fvEXT = resolve_glProgramLocalParameters4fvEXT();
	piglit_dispatch_glProgramLocalParameters4fvEXT(target, index, count, params);
}

PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC piglit_dispatch_glProgramLocalParameters4fvEXT = stub_glProgramLocalParameters4fvEXT;

static void*
resolve_glProgramLocalParametersI4ivNV(void)
{
	/* glProgramLocalParametersI4ivNV (GL_NV_gpu_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_program4")) {
		return get_ext_proc("glProgramLocalParametersI4ivNV");
	}

	unsupported("glProgramLocalParametersI4ivNV");
	return piglit_dispatch_glProgramLocalParametersI4ivNV;
}

static void APIENTRY
stub_glProgramLocalParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glProgramLocalParametersI4ivNV = resolve_glProgramLocalParametersI4ivNV();
	piglit_dispatch_glProgramLocalParametersI4ivNV(target, index, count, params);
}

PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC piglit_dispatch_glProgramLocalParametersI4ivNV = stub_glProgramLocalParametersI4ivNV;

static void*
resolve_glProgramLocalParametersI4uivNV(void)
{
	/* glProgramLocalParametersI4uivNV (GL_NV_gpu_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_program4")) {
		return get_ext_proc("glProgramLocalParametersI4uivNV");
	}

	unsupported("glProgramLocalParametersI4uivNV");
	return piglit_dispatch_glProgramLocalParametersI4uivNV;
}

static void APIENTRY
stub_glProgramLocalParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint * params)
{
	check_initialized();
	piglit_dispatch_glProgramLocalParametersI4uivNV = resolve_glProgramLocalParametersI4uivNV();
	piglit_dispatch_glProgramLocalParametersI4uivNV(target, index, count, params);
}

PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC piglit_dispatch_glProgramLocalParametersI4uivNV = stub_glProgramLocalParametersI4uivNV;

static void*
resolve_glProgramNamedParameter4dNV(void)
{
	/* glProgramNamedParameter4dNV (GL_NV_fragment_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_fragment_program")) {
		return get_ext_proc("glProgramNamedParameter4dNV");
	}

	unsupported("glProgramNamedParameter4dNV");
	return piglit_dispatch_glProgramNamedParameter4dNV;
}

static void APIENTRY
stub_glProgramNamedParameter4dNV(GLuint id, GLsizei len, const GLubyte * name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
	check_initialized();
	piglit_dispatch_glProgramNamedParameter4dNV = resolve_glProgramNamedParameter4dNV();
	piglit_dispatch_glProgramNamedParameter4dNV(id, len, name, x, y, z, w);
}

PFNGLPROGRAMNAMEDPARAMETER4DNVPROC piglit_dispatch_glProgramNamedParameter4dNV = stub_glProgramNamedParameter4dNV;

static void*
resolve_glProgramNamedParameter4dvNV(void)
{
	/* glProgramNamedParameter4dvNV (GL_NV_fragment_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_fragment_program")) {
		return get_ext_proc("glProgramNamedParameter4dvNV");
	}

	unsupported("glProgramNamedParameter4dvNV");
	return piglit_dispatch_glProgramNamedParameter4dvNV;
}

static void APIENTRY
stub_glProgramNamedParameter4dvNV(GLuint id, GLsizei len, const GLubyte * name, const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glProgramNamedParameter4dvNV = resolve_glProgramNamedParameter4dvNV();
	piglit_dispatch_glProgramNamedParameter4dvNV(id, len, name, v);
}

PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC piglit_dispatch_glProgramNamedParameter4dvNV = stub_glProgramNamedParameter4dvNV;

static void*
resolve_glProgramNamedParameter4fNV(void)
{
	/* glProgramNamedParameter4fNV (GL_NV_fragment_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_fragment_program")) {
		return get_ext_proc("glProgramNamedParameter4fNV");
	}

	unsupported("glProgramNamedParameter4fNV");
	return piglit_dispatch_glProgramNamedParameter4fNV;
}

static void APIENTRY
stub_glProgramNamedParameter4fNV(GLuint id, GLsizei len, const GLubyte * name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
	check_initialized();
	piglit_dispatch_glProgramNamedParameter4fNV = resolve_glProgramNamedParameter4fNV();
	piglit_dispatch_glProgramNamedParameter4fNV(id, len, name, x, y, z, w);
}

PFNGLPROGRAMNAMEDPARAMETER4FNVPROC piglit_dispatch_glProgramNamedParameter4fNV = stub_glProgramNamedParameter4fNV;

static void*
resolve_glProgramNamedParameter4fvNV(void)
{
	/* glProgramNamedParameter4fvNV (GL_NV_fragment_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_fragment_program")) {
		return get_ext_proc("glProgramNamedParameter4fvNV");
	}

	unsupported("glProgramNamedParameter4fvNV");
	return piglit_dispatch_glProgramNamedParameter4fvNV;
}

static void APIENTRY
stub_glProgramNamedParameter4fvNV(GLuint id, GLsizei len, const GLubyte * name, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glProgramNamedParameter4fvNV = resolve_glProgramNamedParameter4fvNV();
	piglit_dispatch_glProgramNamedParameter4fvNV(id, len, name, v);
}

PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC piglit_dispatch_glProgramNamedParameter4fvNV = stub_glProgramNamedParameter4fvNV;

static void*
resolve_glProgramParameter4dNV(void)
{
	/* glProgramParameter4dNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glProgramParameter4dNV");
	}

	unsupported("glProgramParameter4dNV");
	return piglit_dispatch_glProgramParameter4dNV;
}

static void APIENTRY
stub_glProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
	check_initialized();
	piglit_dispatch_glProgramParameter4dNV = resolve_glProgramParameter4dNV();
	piglit_dispatch_glProgramParameter4dNV(target, index, x, y, z, w);
}

PFNGLPROGRAMPARAMETER4DNVPROC piglit_dispatch_glProgramParameter4dNV = stub_glProgramParameter4dNV;

static void*
resolve_glProgramParameter4dvNV(void)
{
	/* glProgramParameter4dvNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glProgramParameter4dvNV");
	}

	unsupported("glProgramParameter4dvNV");
	return piglit_dispatch_glProgramParameter4dvNV;
}

static void APIENTRY
stub_glProgramParameter4dvNV(GLenum target, GLuint index, const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glProgramParameter4dvNV = resolve_glProgramParameter4dvNV();
	piglit_dispatch_glProgramParameter4dvNV(target, index, v);
}

PFNGLPROGRAMPARAMETER4DVNVPROC piglit_dispatch_glProgramParameter4dvNV = stub_glProgramParameter4dvNV;

static void*
resolve_glProgramParameter4fNV(void)
{
	/* glProgramParameter4fNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glProgramParameter4fNV");
	}

	unsupported("glProgramParameter4fNV");
	return piglit_dispatch_glProgramParameter4fNV;
}

static void APIENTRY
stub_glProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
	check_initialized();
	piglit_dispatch_glProgramParameter4fNV = resolve_glProgramParameter4fNV();
	piglit_dispatch_glProgramParameter4fNV(target, index, x, y, z, w);
}

PFNGLPROGRAMPARAMETER4FNVPROC piglit_dispatch_glProgramParameter4fNV = stub_glProgramParameter4fNV;

static void*
resolve_glProgramParameter4fvNV(void)
{
	/* glProgramParameter4fvNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glProgramParameter4fvNV");
	}

	unsupported("glProgramParameter4fvNV");
	return piglit_dispatch_glProgramParameter4fvNV;
}

static void APIENTRY
stub_glProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glProgramParameter4fvNV = resolve_glProgramParameter4fvNV();
	piglit_dispatch_glProgramParameter4fvNV(target, index, v);
}

PFNGLPROGRAMPARAMETER4FVNVPROC piglit_dispatch_glProgramParameter4fvNV = stub_glProgramParameter4fvNV;

static void*
resolve_glProgramParameteri(void)
{
	/* glProgramParameteri (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramParameteri", 41);
	}

	/* glProgramParameteri (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramParameteri", 30);
	}

	/* glProgramParameteriARB (GL_ARB_geometry_shader4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_geometry_shader4")) {
		return get_ext_proc("glProgramParameteriARB");
	}

	/* glProgramParameteri (GL_ARB_get_program_binary) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_get_program_binary")) {
		return get_ext_proc("glProgramParameteri");
	}

	/* glProgramParameteriEXT (GL_EXT_geometry_shader4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_geometry_shader4")) {
		return get_ext_proc("glProgramParameteriEXT");
	}

	/* glProgramParameteriEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramParameteriEXT");
	}

	unsupported("glProgramParameteri");
	return piglit_dispatch_glProgramParameteri;
}

static void APIENTRY
stub_glProgramParameteri(GLuint program, GLenum pname, GLint value)
{
	check_initialized();
	piglit_dispatch_glProgramParameteri = resolve_glProgramParameteri();
	piglit_dispatch_glProgramParameteri(program, pname, value);
}

PFNGLPROGRAMPARAMETERIPROC piglit_dispatch_glProgramParameteri = stub_glProgramParameteri;

static void*
resolve_glProgramParameters4dvNV(void)
{
	/* glProgramParameters4dvNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glProgramParameters4dvNV");
	}

	unsupported("glProgramParameters4dvNV");
	return piglit_dispatch_glProgramParameters4dvNV;
}

static void APIENTRY
stub_glProgramParameters4dvNV(GLenum target, GLuint index, GLsizei count, const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glProgramParameters4dvNV = resolve_glProgramParameters4dvNV();
	piglit_dispatch_glProgramParameters4dvNV(target, index, count, v);
}

PFNGLPROGRAMPARAMETERS4DVNVPROC piglit_dispatch_glProgramParameters4dvNV = stub_glProgramParameters4dvNV;

static void*
resolve_glProgramParameters4fvNV(void)
{
	/* glProgramParameters4fvNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glProgramParameters4fvNV");
	}

	unsupported("glProgramParameters4fvNV");
	return piglit_dispatch_glProgramParameters4fvNV;
}

static void APIENTRY
stub_glProgramParameters4fvNV(GLenum target, GLuint index, GLsizei count, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glProgramParameters4fvNV = resolve_glProgramParameters4fvNV();
	piglit_dispatch_glProgramParameters4fvNV(target, index, count, v);
}

PFNGLPROGRAMPARAMETERS4FVNVPROC piglit_dispatch_glProgramParameters4fvNV = stub_glProgramParameters4fvNV;

static void*
resolve_glProgramStringARB(void)
{
	/* glProgramStringARB (GL_ARB_fragment_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_fragment_program")) {
		return get_ext_proc("glProgramStringARB");
	}

	/* glProgramStringARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glProgramStringARB");
	}

	unsupported("glProgramStringARB");
	return piglit_dispatch_glProgramStringARB;
}

static void APIENTRY
stub_glProgramStringARB(GLenum target, GLenum format, GLsizei len, const void * string)
{
	check_initialized();
	piglit_dispatch_glProgramStringARB = resolve_glProgramStringARB();
	piglit_dispatch_glProgramStringARB(target, format, len, string);
}

PFNGLPROGRAMSTRINGARBPROC piglit_dispatch_glProgramStringARB = stub_glProgramStringARB;

static void*
resolve_glProgramSubroutineParametersuivNV(void)
{
	/* glProgramSubroutineParametersuivNV (GL_NV_gpu_program5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_program5")) {
		return get_ext_proc("glProgramSubroutineParametersuivNV");
	}

	unsupported("glProgramSubroutineParametersuivNV");
	return piglit_dispatch_glProgramSubroutineParametersuivNV;
}

static void APIENTRY
stub_glProgramSubroutineParametersuivNV(GLenum target, GLsizei count, const GLuint * params)
{
	check_initialized();
	piglit_dispatch_glProgramSubroutineParametersuivNV = resolve_glProgramSubroutineParametersuivNV();
	piglit_dispatch_glProgramSubroutineParametersuivNV(target, count, params);
}

PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC piglit_dispatch_glProgramSubroutineParametersuivNV = stub_glProgramSubroutineParametersuivNV;

static void*
resolve_glProgramUniform1d(void)
{
	/* glProgramUniform1d (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniform1d", 41);
	}

	/* glProgramUniform1d (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform1d");
	}

	unsupported("glProgramUniform1d");
	return piglit_dispatch_glProgramUniform1d;
}

static void APIENTRY
stub_glProgramUniform1d(GLuint program, GLint location, GLdouble v0)
{
	check_initialized();
	piglit_dispatch_glProgramUniform1d = resolve_glProgramUniform1d();
	piglit_dispatch_glProgramUniform1d(program, location, v0);
}

PFNGLPROGRAMUNIFORM1DPROC piglit_dispatch_glProgramUniform1d = stub_glProgramUniform1d;

static void*
resolve_glProgramUniform1dEXT(void)
{
	/* glProgramUniform1dEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniform1dEXT");
	}

	unsupported("glProgramUniform1dEXT");
	return piglit_dispatch_glProgramUniform1dEXT;
}

static void APIENTRY
stub_glProgramUniform1dEXT(GLuint program, GLint location, GLdouble x)
{
	check_initialized();
	piglit_dispatch_glProgramUniform1dEXT = resolve_glProgramUniform1dEXT();
	piglit_dispatch_glProgramUniform1dEXT(program, location, x);
}

PFNGLPROGRAMUNIFORM1DEXTPROC piglit_dispatch_glProgramUniform1dEXT = stub_glProgramUniform1dEXT;

static void*
resolve_glProgramUniform1dv(void)
{
	/* glProgramUniform1dv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniform1dv", 41);
	}

	/* glProgramUniform1dv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform1dv");
	}

	unsupported("glProgramUniform1dv");
	return piglit_dispatch_glProgramUniform1dv;
}

static void APIENTRY
stub_glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniform1dv = resolve_glProgramUniform1dv();
	piglit_dispatch_glProgramUniform1dv(program, location, count, value);
}

PFNGLPROGRAMUNIFORM1DVPROC piglit_dispatch_glProgramUniform1dv = stub_glProgramUniform1dv;

static void*
resolve_glProgramUniform1dvEXT(void)
{
	/* glProgramUniform1dvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniform1dvEXT");
	}

	unsupported("glProgramUniform1dvEXT");
	return piglit_dispatch_glProgramUniform1dvEXT;
}

static void APIENTRY
stub_glProgramUniform1dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniform1dvEXT = resolve_glProgramUniform1dvEXT();
	piglit_dispatch_glProgramUniform1dvEXT(program, location, count, value);
}

PFNGLPROGRAMUNIFORM1DVEXTPROC piglit_dispatch_glProgramUniform1dvEXT = stub_glProgramUniform1dvEXT;

static void*
resolve_glProgramUniform1f(void)
{
	/* glProgramUniform1f (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniform1f", 41);
	}

	/* glProgramUniform1f (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramUniform1f", 31);
	}

	/* glProgramUniform1f (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform1f");
	}

	/* glProgramUniform1fEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniform1fEXT");
	}

	/* glProgramUniform1fEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform1fEXT");
	}

	unsupported("glProgramUniform1f");
	return piglit_dispatch_glProgramUniform1f;
}

static void APIENTRY
stub_glProgramUniform1f(GLuint program, GLint location, GLfloat v0)
{
	check_initialized();
	piglit_dispatch_glProgramUniform1f = resolve_glProgramUniform1f();
	piglit_dispatch_glProgramUniform1f(program, location, v0);
}

PFNGLPROGRAMUNIFORM1FPROC piglit_dispatch_glProgramUniform1f = stub_glProgramUniform1f;

static void*
resolve_glProgramUniform1fv(void)
{
	/* glProgramUniform1fv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniform1fv", 41);
	}

	/* glProgramUniform1fv (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramUniform1fv", 31);
	}

	/* glProgramUniform1fv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform1fv");
	}

	/* glProgramUniform1fvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniform1fvEXT");
	}

	/* glProgramUniform1fvEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform1fvEXT");
	}

	unsupported("glProgramUniform1fv");
	return piglit_dispatch_glProgramUniform1fv;
}

static void APIENTRY
stub_glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniform1fv = resolve_glProgramUniform1fv();
	piglit_dispatch_glProgramUniform1fv(program, location, count, value);
}

PFNGLPROGRAMUNIFORM1FVPROC piglit_dispatch_glProgramUniform1fv = stub_glProgramUniform1fv;

static void*
resolve_glProgramUniform1i(void)
{
	/* glProgramUniform1i (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniform1i", 41);
	}

	/* glProgramUniform1i (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramUniform1i", 31);
	}

	/* glProgramUniform1i (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform1i");
	}

	/* glProgramUniform1iEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniform1iEXT");
	}

	/* glProgramUniform1iEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform1iEXT");
	}

	unsupported("glProgramUniform1i");
	return piglit_dispatch_glProgramUniform1i;
}

static void APIENTRY
stub_glProgramUniform1i(GLuint program, GLint location, GLint v0)
{
	check_initialized();
	piglit_dispatch_glProgramUniform1i = resolve_glProgramUniform1i();
	piglit_dispatch_glProgramUniform1i(program, location, v0);
}

PFNGLPROGRAMUNIFORM1IPROC piglit_dispatch_glProgramUniform1i = stub_glProgramUniform1i;

static void*
resolve_glProgramUniform1i64NV(void)
{
	/* glProgramUniform1i64NV (GL_AMD_gpu_shader_int64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_gpu_shader_int64")) {
		return get_ext_proc("glProgramUniform1i64NV");
	}

	/* glProgramUniform1i64NV (GL_NV_gpu_shader5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_shader5")) {
		return get_ext_proc("glProgramUniform1i64NV");
	}

	unsupported("glProgramUniform1i64NV");
	return piglit_dispatch_glProgramUniform1i64NV;
}

static void APIENTRY
stub_glProgramUniform1i64NV(GLuint program, GLint location, GLint64EXT x)
{
	check_initialized();
	piglit_dispatch_glProgramUniform1i64NV = resolve_glProgramUniform1i64NV();
	piglit_dispatch_glProgramUniform1i64NV(program, location, x);
}

PFNGLPROGRAMUNIFORM1I64NVPROC piglit_dispatch_glProgramUniform1i64NV = stub_glProgramUniform1i64NV;

static void*
resolve_glProgramUniform1i64vNV(void)
{
	/* glProgramUniform1i64vNV (GL_AMD_gpu_shader_int64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_gpu_shader_int64")) {
		return get_ext_proc("glProgramUniform1i64vNV");
	}

	/* glProgramUniform1i64vNV (GL_NV_gpu_shader5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_shader5")) {
		return get_ext_proc("glProgramUniform1i64vNV");
	}

	unsupported("glProgramUniform1i64vNV");
	return piglit_dispatch_glProgramUniform1i64vNV;
}

static void APIENTRY
stub_glProgramUniform1i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniform1i64vNV = resolve_glProgramUniform1i64vNV();
	piglit_dispatch_glProgramUniform1i64vNV(program, location, count, value);
}

PFNGLPROGRAMUNIFORM1I64VNVPROC piglit_dispatch_glProgramUniform1i64vNV = stub_glProgramUniform1i64vNV;

static void*
resolve_glProgramUniform1iv(void)
{
	/* glProgramUniform1iv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniform1iv", 41);
	}

	/* glProgramUniform1iv (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramUniform1iv", 31);
	}

	/* glProgramUniform1iv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform1iv");
	}

	/* glProgramUniform1ivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniform1ivEXT");
	}

	/* glProgramUniform1ivEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform1ivEXT");
	}

	unsupported("glProgramUniform1iv");
	return piglit_dispatch_glProgramUniform1iv;
}

static void APIENTRY
stub_glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniform1iv = resolve_glProgramUniform1iv();
	piglit_dispatch_glProgramUniform1iv(program, location, count, value);
}

PFNGLPROGRAMUNIFORM1IVPROC piglit_dispatch_glProgramUniform1iv = stub_glProgramUniform1iv;

static void*
resolve_glProgramUniform1ui(void)
{
	/* glProgramUniform1ui (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniform1ui", 41);
	}

	/* glProgramUniform1ui (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramUniform1ui", 31);
	}

	/* glProgramUniform1ui (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform1ui");
	}

	/* glProgramUniform1uiEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniform1uiEXT");
	}

	/* glProgramUniform1uiEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform1uiEXT");
	}

	unsupported("glProgramUniform1ui");
	return piglit_dispatch_glProgramUniform1ui;
}

static void APIENTRY
stub_glProgramUniform1ui(GLuint program, GLint location, GLuint v0)
{
	check_initialized();
	piglit_dispatch_glProgramUniform1ui = resolve_glProgramUniform1ui();
	piglit_dispatch_glProgramUniform1ui(program, location, v0);
}

PFNGLPROGRAMUNIFORM1UIPROC piglit_dispatch_glProgramUniform1ui = stub_glProgramUniform1ui;

static void*
resolve_glProgramUniform1ui64NV(void)
{
	/* glProgramUniform1ui64NV (GL_AMD_gpu_shader_int64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_gpu_shader_int64")) {
		return get_ext_proc("glProgramUniform1ui64NV");
	}

	/* glProgramUniform1ui64NV (GL_NV_gpu_shader5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_shader5")) {
		return get_ext_proc("glProgramUniform1ui64NV");
	}

	unsupported("glProgramUniform1ui64NV");
	return piglit_dispatch_glProgramUniform1ui64NV;
}

static void APIENTRY
stub_glProgramUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x)
{
	check_initialized();
	piglit_dispatch_glProgramUniform1ui64NV = resolve_glProgramUniform1ui64NV();
	piglit_dispatch_glProgramUniform1ui64NV(program, location, x);
}

PFNGLPROGRAMUNIFORM1UI64NVPROC piglit_dispatch_glProgramUniform1ui64NV = stub_glProgramUniform1ui64NV;

static void*
resolve_glProgramUniform1ui64vNV(void)
{
	/* glProgramUniform1ui64vNV (GL_AMD_gpu_shader_int64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_gpu_shader_int64")) {
		return get_ext_proc("glProgramUniform1ui64vNV");
	}

	/* glProgramUniform1ui64vNV (GL_NV_gpu_shader5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_shader5")) {
		return get_ext_proc("glProgramUniform1ui64vNV");
	}

	unsupported("glProgramUniform1ui64vNV");
	return piglit_dispatch_glProgramUniform1ui64vNV;
}

static void APIENTRY
stub_glProgramUniform1ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniform1ui64vNV = resolve_glProgramUniform1ui64vNV();
	piglit_dispatch_glProgramUniform1ui64vNV(program, location, count, value);
}

PFNGLPROGRAMUNIFORM1UI64VNVPROC piglit_dispatch_glProgramUniform1ui64vNV = stub_glProgramUniform1ui64vNV;

static void*
resolve_glProgramUniform1uiv(void)
{
	/* glProgramUniform1uiv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniform1uiv", 41);
	}

	/* glProgramUniform1uiv (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramUniform1uiv", 31);
	}

	/* glProgramUniform1uiv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform1uiv");
	}

	/* glProgramUniform1uivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniform1uivEXT");
	}

	/* glProgramUniform1uivEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform1uivEXT");
	}

	unsupported("glProgramUniform1uiv");
	return piglit_dispatch_glProgramUniform1uiv;
}

static void APIENTRY
stub_glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniform1uiv = resolve_glProgramUniform1uiv();
	piglit_dispatch_glProgramUniform1uiv(program, location, count, value);
}

PFNGLPROGRAMUNIFORM1UIVPROC piglit_dispatch_glProgramUniform1uiv = stub_glProgramUniform1uiv;

static void*
resolve_glProgramUniform2d(void)
{
	/* glProgramUniform2d (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniform2d", 41);
	}

	/* glProgramUniform2d (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform2d");
	}

	unsupported("glProgramUniform2d");
	return piglit_dispatch_glProgramUniform2d;
}

static void APIENTRY
stub_glProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1)
{
	check_initialized();
	piglit_dispatch_glProgramUniform2d = resolve_glProgramUniform2d();
	piglit_dispatch_glProgramUniform2d(program, location, v0, v1);
}

PFNGLPROGRAMUNIFORM2DPROC piglit_dispatch_glProgramUniform2d = stub_glProgramUniform2d;

static void*
resolve_glProgramUniform2dEXT(void)
{
	/* glProgramUniform2dEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniform2dEXT");
	}

	unsupported("glProgramUniform2dEXT");
	return piglit_dispatch_glProgramUniform2dEXT;
}

static void APIENTRY
stub_glProgramUniform2dEXT(GLuint program, GLint location, GLdouble x, GLdouble y)
{
	check_initialized();
	piglit_dispatch_glProgramUniform2dEXT = resolve_glProgramUniform2dEXT();
	piglit_dispatch_glProgramUniform2dEXT(program, location, x, y);
}

PFNGLPROGRAMUNIFORM2DEXTPROC piglit_dispatch_glProgramUniform2dEXT = stub_glProgramUniform2dEXT;

static void*
resolve_glProgramUniform2dv(void)
{
	/* glProgramUniform2dv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniform2dv", 41);
	}

	/* glProgramUniform2dv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform2dv");
	}

	unsupported("glProgramUniform2dv");
	return piglit_dispatch_glProgramUniform2dv;
}

static void APIENTRY
stub_glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniform2dv = resolve_glProgramUniform2dv();
	piglit_dispatch_glProgramUniform2dv(program, location, count, value);
}

PFNGLPROGRAMUNIFORM2DVPROC piglit_dispatch_glProgramUniform2dv = stub_glProgramUniform2dv;

static void*
resolve_glProgramUniform2dvEXT(void)
{
	/* glProgramUniform2dvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniform2dvEXT");
	}

	unsupported("glProgramUniform2dvEXT");
	return piglit_dispatch_glProgramUniform2dvEXT;
}

static void APIENTRY
stub_glProgramUniform2dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniform2dvEXT = resolve_glProgramUniform2dvEXT();
	piglit_dispatch_glProgramUniform2dvEXT(program, location, count, value);
}

PFNGLPROGRAMUNIFORM2DVEXTPROC piglit_dispatch_glProgramUniform2dvEXT = stub_glProgramUniform2dvEXT;

static void*
resolve_glProgramUniform2f(void)
{
	/* glProgramUniform2f (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniform2f", 41);
	}

	/* glProgramUniform2f (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramUniform2f", 31);
	}

	/* glProgramUniform2f (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform2f");
	}

	/* glProgramUniform2fEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniform2fEXT");
	}

	/* glProgramUniform2fEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform2fEXT");
	}

	unsupported("glProgramUniform2f");
	return piglit_dispatch_glProgramUniform2f;
}

static void APIENTRY
stub_glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1)
{
	check_initialized();
	piglit_dispatch_glProgramUniform2f = resolve_glProgramUniform2f();
	piglit_dispatch_glProgramUniform2f(program, location, v0, v1);
}

PFNGLPROGRAMUNIFORM2FPROC piglit_dispatch_glProgramUniform2f = stub_glProgramUniform2f;

static void*
resolve_glProgramUniform2fv(void)
{
	/* glProgramUniform2fv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniform2fv", 41);
	}

	/* glProgramUniform2fv (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramUniform2fv", 31);
	}

	/* glProgramUniform2fv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform2fv");
	}

	/* glProgramUniform2fvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniform2fvEXT");
	}

	/* glProgramUniform2fvEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform2fvEXT");
	}

	unsupported("glProgramUniform2fv");
	return piglit_dispatch_glProgramUniform2fv;
}

static void APIENTRY
stub_glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniform2fv = resolve_glProgramUniform2fv();
	piglit_dispatch_glProgramUniform2fv(program, location, count, value);
}

PFNGLPROGRAMUNIFORM2FVPROC piglit_dispatch_glProgramUniform2fv = stub_glProgramUniform2fv;

static void*
resolve_glProgramUniform2i(void)
{
	/* glProgramUniform2i (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniform2i", 41);
	}

	/* glProgramUniform2i (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramUniform2i", 31);
	}

	/* glProgramUniform2i (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform2i");
	}

	/* glProgramUniform2iEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniform2iEXT");
	}

	/* glProgramUniform2iEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform2iEXT");
	}

	unsupported("glProgramUniform2i");
	return piglit_dispatch_glProgramUniform2i;
}

static void APIENTRY
stub_glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1)
{
	check_initialized();
	piglit_dispatch_glProgramUniform2i = resolve_glProgramUniform2i();
	piglit_dispatch_glProgramUniform2i(program, location, v0, v1);
}

PFNGLPROGRAMUNIFORM2IPROC piglit_dispatch_glProgramUniform2i = stub_glProgramUniform2i;

static void*
resolve_glProgramUniform2i64NV(void)
{
	/* glProgramUniform2i64NV (GL_AMD_gpu_shader_int64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_gpu_shader_int64")) {
		return get_ext_proc("glProgramUniform2i64NV");
	}

	/* glProgramUniform2i64NV (GL_NV_gpu_shader5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_shader5")) {
		return get_ext_proc("glProgramUniform2i64NV");
	}

	unsupported("glProgramUniform2i64NV");
	return piglit_dispatch_glProgramUniform2i64NV;
}

static void APIENTRY
stub_glProgramUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y)
{
	check_initialized();
	piglit_dispatch_glProgramUniform2i64NV = resolve_glProgramUniform2i64NV();
	piglit_dispatch_glProgramUniform2i64NV(program, location, x, y);
}

PFNGLPROGRAMUNIFORM2I64NVPROC piglit_dispatch_glProgramUniform2i64NV = stub_glProgramUniform2i64NV;

static void*
resolve_glProgramUniform2i64vNV(void)
{
	/* glProgramUniform2i64vNV (GL_AMD_gpu_shader_int64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_gpu_shader_int64")) {
		return get_ext_proc("glProgramUniform2i64vNV");
	}

	/* glProgramUniform2i64vNV (GL_NV_gpu_shader5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_shader5")) {
		return get_ext_proc("glProgramUniform2i64vNV");
	}

	unsupported("glProgramUniform2i64vNV");
	return piglit_dispatch_glProgramUniform2i64vNV;
}

static void APIENTRY
stub_glProgramUniform2i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniform2i64vNV = resolve_glProgramUniform2i64vNV();
	piglit_dispatch_glProgramUniform2i64vNV(program, location, count, value);
}

PFNGLPROGRAMUNIFORM2I64VNVPROC piglit_dispatch_glProgramUniform2i64vNV = stub_glProgramUniform2i64vNV;

static void*
resolve_glProgramUniform2iv(void)
{
	/* glProgramUniform2iv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniform2iv", 41);
	}

	/* glProgramUniform2iv (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramUniform2iv", 31);
	}

	/* glProgramUniform2iv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform2iv");
	}

	/* glProgramUniform2ivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniform2ivEXT");
	}

	/* glProgramUniform2ivEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform2ivEXT");
	}

	unsupported("glProgramUniform2iv");
	return piglit_dispatch_glProgramUniform2iv;
}

static void APIENTRY
stub_glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniform2iv = resolve_glProgramUniform2iv();
	piglit_dispatch_glProgramUniform2iv(program, location, count, value);
}

PFNGLPROGRAMUNIFORM2IVPROC piglit_dispatch_glProgramUniform2iv = stub_glProgramUniform2iv;

static void*
resolve_glProgramUniform2ui(void)
{
	/* glProgramUniform2ui (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniform2ui", 41);
	}

	/* glProgramUniform2ui (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramUniform2ui", 31);
	}

	/* glProgramUniform2ui (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform2ui");
	}

	/* glProgramUniform2uiEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniform2uiEXT");
	}

	/* glProgramUniform2uiEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform2uiEXT");
	}

	unsupported("glProgramUniform2ui");
	return piglit_dispatch_glProgramUniform2ui;
}

static void APIENTRY
stub_glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1)
{
	check_initialized();
	piglit_dispatch_glProgramUniform2ui = resolve_glProgramUniform2ui();
	piglit_dispatch_glProgramUniform2ui(program, location, v0, v1);
}

PFNGLPROGRAMUNIFORM2UIPROC piglit_dispatch_glProgramUniform2ui = stub_glProgramUniform2ui;

static void*
resolve_glProgramUniform2ui64NV(void)
{
	/* glProgramUniform2ui64NV (GL_AMD_gpu_shader_int64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_gpu_shader_int64")) {
		return get_ext_proc("glProgramUniform2ui64NV");
	}

	/* glProgramUniform2ui64NV (GL_NV_gpu_shader5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_shader5")) {
		return get_ext_proc("glProgramUniform2ui64NV");
	}

	unsupported("glProgramUniform2ui64NV");
	return piglit_dispatch_glProgramUniform2ui64NV;
}

static void APIENTRY
stub_glProgramUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y)
{
	check_initialized();
	piglit_dispatch_glProgramUniform2ui64NV = resolve_glProgramUniform2ui64NV();
	piglit_dispatch_glProgramUniform2ui64NV(program, location, x, y);
}

PFNGLPROGRAMUNIFORM2UI64NVPROC piglit_dispatch_glProgramUniform2ui64NV = stub_glProgramUniform2ui64NV;

static void*
resolve_glProgramUniform2ui64vNV(void)
{
	/* glProgramUniform2ui64vNV (GL_AMD_gpu_shader_int64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_gpu_shader_int64")) {
		return get_ext_proc("glProgramUniform2ui64vNV");
	}

	/* glProgramUniform2ui64vNV (GL_NV_gpu_shader5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_shader5")) {
		return get_ext_proc("glProgramUniform2ui64vNV");
	}

	unsupported("glProgramUniform2ui64vNV");
	return piglit_dispatch_glProgramUniform2ui64vNV;
}

static void APIENTRY
stub_glProgramUniform2ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniform2ui64vNV = resolve_glProgramUniform2ui64vNV();
	piglit_dispatch_glProgramUniform2ui64vNV(program, location, count, value);
}

PFNGLPROGRAMUNIFORM2UI64VNVPROC piglit_dispatch_glProgramUniform2ui64vNV = stub_glProgramUniform2ui64vNV;

static void*
resolve_glProgramUniform2uiv(void)
{
	/* glProgramUniform2uiv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniform2uiv", 41);
	}

	/* glProgramUniform2uiv (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramUniform2uiv", 31);
	}

	/* glProgramUniform2uiv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform2uiv");
	}

	/* glProgramUniform2uivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniform2uivEXT");
	}

	/* glProgramUniform2uivEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform2uivEXT");
	}

	unsupported("glProgramUniform2uiv");
	return piglit_dispatch_glProgramUniform2uiv;
}

static void APIENTRY
stub_glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniform2uiv = resolve_glProgramUniform2uiv();
	piglit_dispatch_glProgramUniform2uiv(program, location, count, value);
}

PFNGLPROGRAMUNIFORM2UIVPROC piglit_dispatch_glProgramUniform2uiv = stub_glProgramUniform2uiv;

static void*
resolve_glProgramUniform3d(void)
{
	/* glProgramUniform3d (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniform3d", 41);
	}

	/* glProgramUniform3d (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform3d");
	}

	unsupported("glProgramUniform3d");
	return piglit_dispatch_glProgramUniform3d;
}

static void APIENTRY
stub_glProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2)
{
	check_initialized();
	piglit_dispatch_glProgramUniform3d = resolve_glProgramUniform3d();
	piglit_dispatch_glProgramUniform3d(program, location, v0, v1, v2);
}

PFNGLPROGRAMUNIFORM3DPROC piglit_dispatch_glProgramUniform3d = stub_glProgramUniform3d;

static void*
resolve_glProgramUniform3dEXT(void)
{
	/* glProgramUniform3dEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniform3dEXT");
	}

	unsupported("glProgramUniform3dEXT");
	return piglit_dispatch_glProgramUniform3dEXT;
}

static void APIENTRY
stub_glProgramUniform3dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
{
	check_initialized();
	piglit_dispatch_glProgramUniform3dEXT = resolve_glProgramUniform3dEXT();
	piglit_dispatch_glProgramUniform3dEXT(program, location, x, y, z);
}

PFNGLPROGRAMUNIFORM3DEXTPROC piglit_dispatch_glProgramUniform3dEXT = stub_glProgramUniform3dEXT;

static void*
resolve_glProgramUniform3dv(void)
{
	/* glProgramUniform3dv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniform3dv", 41);
	}

	/* glProgramUniform3dv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform3dv");
	}

	unsupported("glProgramUniform3dv");
	return piglit_dispatch_glProgramUniform3dv;
}

static void APIENTRY
stub_glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniform3dv = resolve_glProgramUniform3dv();
	piglit_dispatch_glProgramUniform3dv(program, location, count, value);
}

PFNGLPROGRAMUNIFORM3DVPROC piglit_dispatch_glProgramUniform3dv = stub_glProgramUniform3dv;

static void*
resolve_glProgramUniform3dvEXT(void)
{
	/* glProgramUniform3dvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniform3dvEXT");
	}

	unsupported("glProgramUniform3dvEXT");
	return piglit_dispatch_glProgramUniform3dvEXT;
}

static void APIENTRY
stub_glProgramUniform3dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniform3dvEXT = resolve_glProgramUniform3dvEXT();
	piglit_dispatch_glProgramUniform3dvEXT(program, location, count, value);
}

PFNGLPROGRAMUNIFORM3DVEXTPROC piglit_dispatch_glProgramUniform3dvEXT = stub_glProgramUniform3dvEXT;

static void*
resolve_glProgramUniform3f(void)
{
	/* glProgramUniform3f (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniform3f", 41);
	}

	/* glProgramUniform3f (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramUniform3f", 31);
	}

	/* glProgramUniform3f (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform3f");
	}

	/* glProgramUniform3fEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniform3fEXT");
	}

	/* glProgramUniform3fEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform3fEXT");
	}

	unsupported("glProgramUniform3f");
	return piglit_dispatch_glProgramUniform3f;
}

static void APIENTRY
stub_glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
	check_initialized();
	piglit_dispatch_glProgramUniform3f = resolve_glProgramUniform3f();
	piglit_dispatch_glProgramUniform3f(program, location, v0, v1, v2);
}

PFNGLPROGRAMUNIFORM3FPROC piglit_dispatch_glProgramUniform3f = stub_glProgramUniform3f;

static void*
resolve_glProgramUniform3fv(void)
{
	/* glProgramUniform3fv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniform3fv", 41);
	}

	/* glProgramUniform3fv (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramUniform3fv", 31);
	}

	/* glProgramUniform3fv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform3fv");
	}

	/* glProgramUniform3fvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniform3fvEXT");
	}

	/* glProgramUniform3fvEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform3fvEXT");
	}

	unsupported("glProgramUniform3fv");
	return piglit_dispatch_glProgramUniform3fv;
}

static void APIENTRY
stub_glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniform3fv = resolve_glProgramUniform3fv();
	piglit_dispatch_glProgramUniform3fv(program, location, count, value);
}

PFNGLPROGRAMUNIFORM3FVPROC piglit_dispatch_glProgramUniform3fv = stub_glProgramUniform3fv;

static void*
resolve_glProgramUniform3i(void)
{
	/* glProgramUniform3i (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniform3i", 41);
	}

	/* glProgramUniform3i (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramUniform3i", 31);
	}

	/* glProgramUniform3i (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform3i");
	}

	/* glProgramUniform3iEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniform3iEXT");
	}

	/* glProgramUniform3iEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform3iEXT");
	}

	unsupported("glProgramUniform3i");
	return piglit_dispatch_glProgramUniform3i;
}

static void APIENTRY
stub_glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
{
	check_initialized();
	piglit_dispatch_glProgramUniform3i = resolve_glProgramUniform3i();
	piglit_dispatch_glProgramUniform3i(program, location, v0, v1, v2);
}

PFNGLPROGRAMUNIFORM3IPROC piglit_dispatch_glProgramUniform3i = stub_glProgramUniform3i;

static void*
resolve_glProgramUniform3i64NV(void)
{
	/* glProgramUniform3i64NV (GL_AMD_gpu_shader_int64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_gpu_shader_int64")) {
		return get_ext_proc("glProgramUniform3i64NV");
	}

	/* glProgramUniform3i64NV (GL_NV_gpu_shader5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_shader5")) {
		return get_ext_proc("glProgramUniform3i64NV");
	}

	unsupported("glProgramUniform3i64NV");
	return piglit_dispatch_glProgramUniform3i64NV;
}

static void APIENTRY
stub_glProgramUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
	check_initialized();
	piglit_dispatch_glProgramUniform3i64NV = resolve_glProgramUniform3i64NV();
	piglit_dispatch_glProgramUniform3i64NV(program, location, x, y, z);
}

PFNGLPROGRAMUNIFORM3I64NVPROC piglit_dispatch_glProgramUniform3i64NV = stub_glProgramUniform3i64NV;

static void*
resolve_glProgramUniform3i64vNV(void)
{
	/* glProgramUniform3i64vNV (GL_AMD_gpu_shader_int64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_gpu_shader_int64")) {
		return get_ext_proc("glProgramUniform3i64vNV");
	}

	/* glProgramUniform3i64vNV (GL_NV_gpu_shader5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_shader5")) {
		return get_ext_proc("glProgramUniform3i64vNV");
	}

	unsupported("glProgramUniform3i64vNV");
	return piglit_dispatch_glProgramUniform3i64vNV;
}

static void APIENTRY
stub_glProgramUniform3i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniform3i64vNV = resolve_glProgramUniform3i64vNV();
	piglit_dispatch_glProgramUniform3i64vNV(program, location, count, value);
}

PFNGLPROGRAMUNIFORM3I64VNVPROC piglit_dispatch_glProgramUniform3i64vNV = stub_glProgramUniform3i64vNV;

static void*
resolve_glProgramUniform3iv(void)
{
	/* glProgramUniform3iv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniform3iv", 41);
	}

	/* glProgramUniform3iv (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramUniform3iv", 31);
	}

	/* glProgramUniform3iv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform3iv");
	}

	/* glProgramUniform3ivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniform3ivEXT");
	}

	/* glProgramUniform3ivEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform3ivEXT");
	}

	unsupported("glProgramUniform3iv");
	return piglit_dispatch_glProgramUniform3iv;
}

static void APIENTRY
stub_glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniform3iv = resolve_glProgramUniform3iv();
	piglit_dispatch_glProgramUniform3iv(program, location, count, value);
}

PFNGLPROGRAMUNIFORM3IVPROC piglit_dispatch_glProgramUniform3iv = stub_glProgramUniform3iv;

static void*
resolve_glProgramUniform3ui(void)
{
	/* glProgramUniform3ui (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniform3ui", 41);
	}

	/* glProgramUniform3ui (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramUniform3ui", 31);
	}

	/* glProgramUniform3ui (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform3ui");
	}

	/* glProgramUniform3uiEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniform3uiEXT");
	}

	/* glProgramUniform3uiEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform3uiEXT");
	}

	unsupported("glProgramUniform3ui");
	return piglit_dispatch_glProgramUniform3ui;
}

static void APIENTRY
stub_glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
	check_initialized();
	piglit_dispatch_glProgramUniform3ui = resolve_glProgramUniform3ui();
	piglit_dispatch_glProgramUniform3ui(program, location, v0, v1, v2);
}

PFNGLPROGRAMUNIFORM3UIPROC piglit_dispatch_glProgramUniform3ui = stub_glProgramUniform3ui;

static void*
resolve_glProgramUniform3ui64NV(void)
{
	/* glProgramUniform3ui64NV (GL_AMD_gpu_shader_int64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_gpu_shader_int64")) {
		return get_ext_proc("glProgramUniform3ui64NV");
	}

	/* glProgramUniform3ui64NV (GL_NV_gpu_shader5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_shader5")) {
		return get_ext_proc("glProgramUniform3ui64NV");
	}

	unsupported("glProgramUniform3ui64NV");
	return piglit_dispatch_glProgramUniform3ui64NV;
}

static void APIENTRY
stub_glProgramUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
	check_initialized();
	piglit_dispatch_glProgramUniform3ui64NV = resolve_glProgramUniform3ui64NV();
	piglit_dispatch_glProgramUniform3ui64NV(program, location, x, y, z);
}

PFNGLPROGRAMUNIFORM3UI64NVPROC piglit_dispatch_glProgramUniform3ui64NV = stub_glProgramUniform3ui64NV;

static void*
resolve_glProgramUniform3ui64vNV(void)
{
	/* glProgramUniform3ui64vNV (GL_AMD_gpu_shader_int64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_gpu_shader_int64")) {
		return get_ext_proc("glProgramUniform3ui64vNV");
	}

	/* glProgramUniform3ui64vNV (GL_NV_gpu_shader5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_shader5")) {
		return get_ext_proc("glProgramUniform3ui64vNV");
	}

	unsupported("glProgramUniform3ui64vNV");
	return piglit_dispatch_glProgramUniform3ui64vNV;
}

static void APIENTRY
stub_glProgramUniform3ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniform3ui64vNV = resolve_glProgramUniform3ui64vNV();
	piglit_dispatch_glProgramUniform3ui64vNV(program, location, count, value);
}

PFNGLPROGRAMUNIFORM3UI64VNVPROC piglit_dispatch_glProgramUniform3ui64vNV = stub_glProgramUniform3ui64vNV;

static void*
resolve_glProgramUniform3uiv(void)
{
	/* glProgramUniform3uiv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniform3uiv", 41);
	}

	/* glProgramUniform3uiv (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramUniform3uiv", 31);
	}

	/* glProgramUniform3uiv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform3uiv");
	}

	/* glProgramUniform3uivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniform3uivEXT");
	}

	/* glProgramUniform3uivEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform3uivEXT");
	}

	unsupported("glProgramUniform3uiv");
	return piglit_dispatch_glProgramUniform3uiv;
}

static void APIENTRY
stub_glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniform3uiv = resolve_glProgramUniform3uiv();
	piglit_dispatch_glProgramUniform3uiv(program, location, count, value);
}

PFNGLPROGRAMUNIFORM3UIVPROC piglit_dispatch_glProgramUniform3uiv = stub_glProgramUniform3uiv;

static void*
resolve_glProgramUniform4d(void)
{
	/* glProgramUniform4d (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniform4d", 41);
	}

	/* glProgramUniform4d (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform4d");
	}

	unsupported("glProgramUniform4d");
	return piglit_dispatch_glProgramUniform4d;
}

static void APIENTRY
stub_glProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3)
{
	check_initialized();
	piglit_dispatch_glProgramUniform4d = resolve_glProgramUniform4d();
	piglit_dispatch_glProgramUniform4d(program, location, v0, v1, v2, v3);
}

PFNGLPROGRAMUNIFORM4DPROC piglit_dispatch_glProgramUniform4d = stub_glProgramUniform4d;

static void*
resolve_glProgramUniform4dEXT(void)
{
	/* glProgramUniform4dEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniform4dEXT");
	}

	unsupported("glProgramUniform4dEXT");
	return piglit_dispatch_glProgramUniform4dEXT;
}

static void APIENTRY
stub_glProgramUniform4dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
	check_initialized();
	piglit_dispatch_glProgramUniform4dEXT = resolve_glProgramUniform4dEXT();
	piglit_dispatch_glProgramUniform4dEXT(program, location, x, y, z, w);
}

PFNGLPROGRAMUNIFORM4DEXTPROC piglit_dispatch_glProgramUniform4dEXT = stub_glProgramUniform4dEXT;

static void*
resolve_glProgramUniform4dv(void)
{
	/* glProgramUniform4dv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniform4dv", 41);
	}

	/* glProgramUniform4dv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform4dv");
	}

	unsupported("glProgramUniform4dv");
	return piglit_dispatch_glProgramUniform4dv;
}

static void APIENTRY
stub_glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniform4dv = resolve_glProgramUniform4dv();
	piglit_dispatch_glProgramUniform4dv(program, location, count, value);
}

PFNGLPROGRAMUNIFORM4DVPROC piglit_dispatch_glProgramUniform4dv = stub_glProgramUniform4dv;

static void*
resolve_glProgramUniform4dvEXT(void)
{
	/* glProgramUniform4dvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniform4dvEXT");
	}

	unsupported("glProgramUniform4dvEXT");
	return piglit_dispatch_glProgramUniform4dvEXT;
}

static void APIENTRY
stub_glProgramUniform4dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniform4dvEXT = resolve_glProgramUniform4dvEXT();
	piglit_dispatch_glProgramUniform4dvEXT(program, location, count, value);
}

PFNGLPROGRAMUNIFORM4DVEXTPROC piglit_dispatch_glProgramUniform4dvEXT = stub_glProgramUniform4dvEXT;

static void*
resolve_glProgramUniform4f(void)
{
	/* glProgramUniform4f (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniform4f", 41);
	}

	/* glProgramUniform4f (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramUniform4f", 31);
	}

	/* glProgramUniform4f (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform4f");
	}

	/* glProgramUniform4fEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniform4fEXT");
	}

	/* glProgramUniform4fEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform4fEXT");
	}

	unsupported("glProgramUniform4f");
	return piglit_dispatch_glProgramUniform4f;
}

static void APIENTRY
stub_glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
	check_initialized();
	piglit_dispatch_glProgramUniform4f = resolve_glProgramUniform4f();
	piglit_dispatch_glProgramUniform4f(program, location, v0, v1, v2, v3);
}

PFNGLPROGRAMUNIFORM4FPROC piglit_dispatch_glProgramUniform4f = stub_glProgramUniform4f;

static void*
resolve_glProgramUniform4fv(void)
{
	/* glProgramUniform4fv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniform4fv", 41);
	}

	/* glProgramUniform4fv (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramUniform4fv", 31);
	}

	/* glProgramUniform4fv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform4fv");
	}

	/* glProgramUniform4fvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniform4fvEXT");
	}

	/* glProgramUniform4fvEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform4fvEXT");
	}

	unsupported("glProgramUniform4fv");
	return piglit_dispatch_glProgramUniform4fv;
}

static void APIENTRY
stub_glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniform4fv = resolve_glProgramUniform4fv();
	piglit_dispatch_glProgramUniform4fv(program, location, count, value);
}

PFNGLPROGRAMUNIFORM4FVPROC piglit_dispatch_glProgramUniform4fv = stub_glProgramUniform4fv;

static void*
resolve_glProgramUniform4i(void)
{
	/* glProgramUniform4i (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniform4i", 41);
	}

	/* glProgramUniform4i (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramUniform4i", 31);
	}

	/* glProgramUniform4i (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform4i");
	}

	/* glProgramUniform4iEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniform4iEXT");
	}

	/* glProgramUniform4iEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform4iEXT");
	}

	unsupported("glProgramUniform4i");
	return piglit_dispatch_glProgramUniform4i;
}

static void APIENTRY
stub_glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
	check_initialized();
	piglit_dispatch_glProgramUniform4i = resolve_glProgramUniform4i();
	piglit_dispatch_glProgramUniform4i(program, location, v0, v1, v2, v3);
}

PFNGLPROGRAMUNIFORM4IPROC piglit_dispatch_glProgramUniform4i = stub_glProgramUniform4i;

static void*
resolve_glProgramUniform4i64NV(void)
{
	/* glProgramUniform4i64NV (GL_AMD_gpu_shader_int64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_gpu_shader_int64")) {
		return get_ext_proc("glProgramUniform4i64NV");
	}

	/* glProgramUniform4i64NV (GL_NV_gpu_shader5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_shader5")) {
		return get_ext_proc("glProgramUniform4i64NV");
	}

	unsupported("glProgramUniform4i64NV");
	return piglit_dispatch_glProgramUniform4i64NV;
}

static void APIENTRY
stub_glProgramUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
	check_initialized();
	piglit_dispatch_glProgramUniform4i64NV = resolve_glProgramUniform4i64NV();
	piglit_dispatch_glProgramUniform4i64NV(program, location, x, y, z, w);
}

PFNGLPROGRAMUNIFORM4I64NVPROC piglit_dispatch_glProgramUniform4i64NV = stub_glProgramUniform4i64NV;

static void*
resolve_glProgramUniform4i64vNV(void)
{
	/* glProgramUniform4i64vNV (GL_AMD_gpu_shader_int64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_gpu_shader_int64")) {
		return get_ext_proc("glProgramUniform4i64vNV");
	}

	/* glProgramUniform4i64vNV (GL_NV_gpu_shader5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_shader5")) {
		return get_ext_proc("glProgramUniform4i64vNV");
	}

	unsupported("glProgramUniform4i64vNV");
	return piglit_dispatch_glProgramUniform4i64vNV;
}

static void APIENTRY
stub_glProgramUniform4i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniform4i64vNV = resolve_glProgramUniform4i64vNV();
	piglit_dispatch_glProgramUniform4i64vNV(program, location, count, value);
}

PFNGLPROGRAMUNIFORM4I64VNVPROC piglit_dispatch_glProgramUniform4i64vNV = stub_glProgramUniform4i64vNV;

static void*
resolve_glProgramUniform4iv(void)
{
	/* glProgramUniform4iv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniform4iv", 41);
	}

	/* glProgramUniform4iv (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramUniform4iv", 31);
	}

	/* glProgramUniform4iv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform4iv");
	}

	/* glProgramUniform4ivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniform4ivEXT");
	}

	/* glProgramUniform4ivEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform4ivEXT");
	}

	unsupported("glProgramUniform4iv");
	return piglit_dispatch_glProgramUniform4iv;
}

static void APIENTRY
stub_glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniform4iv = resolve_glProgramUniform4iv();
	piglit_dispatch_glProgramUniform4iv(program, location, count, value);
}

PFNGLPROGRAMUNIFORM4IVPROC piglit_dispatch_glProgramUniform4iv = stub_glProgramUniform4iv;

static void*
resolve_glProgramUniform4ui(void)
{
	/* glProgramUniform4ui (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniform4ui", 41);
	}

	/* glProgramUniform4ui (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramUniform4ui", 31);
	}

	/* glProgramUniform4ui (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform4ui");
	}

	/* glProgramUniform4uiEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniform4uiEXT");
	}

	/* glProgramUniform4uiEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform4uiEXT");
	}

	unsupported("glProgramUniform4ui");
	return piglit_dispatch_glProgramUniform4ui;
}

static void APIENTRY
stub_glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
	check_initialized();
	piglit_dispatch_glProgramUniform4ui = resolve_glProgramUniform4ui();
	piglit_dispatch_glProgramUniform4ui(program, location, v0, v1, v2, v3);
}

PFNGLPROGRAMUNIFORM4UIPROC piglit_dispatch_glProgramUniform4ui = stub_glProgramUniform4ui;

static void*
resolve_glProgramUniform4ui64NV(void)
{
	/* glProgramUniform4ui64NV (GL_AMD_gpu_shader_int64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_gpu_shader_int64")) {
		return get_ext_proc("glProgramUniform4ui64NV");
	}

	/* glProgramUniform4ui64NV (GL_NV_gpu_shader5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_shader5")) {
		return get_ext_proc("glProgramUniform4ui64NV");
	}

	unsupported("glProgramUniform4ui64NV");
	return piglit_dispatch_glProgramUniform4ui64NV;
}

static void APIENTRY
stub_glProgramUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
	check_initialized();
	piglit_dispatch_glProgramUniform4ui64NV = resolve_glProgramUniform4ui64NV();
	piglit_dispatch_glProgramUniform4ui64NV(program, location, x, y, z, w);
}

PFNGLPROGRAMUNIFORM4UI64NVPROC piglit_dispatch_glProgramUniform4ui64NV = stub_glProgramUniform4ui64NV;

static void*
resolve_glProgramUniform4ui64vNV(void)
{
	/* glProgramUniform4ui64vNV (GL_AMD_gpu_shader_int64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_gpu_shader_int64")) {
		return get_ext_proc("glProgramUniform4ui64vNV");
	}

	/* glProgramUniform4ui64vNV (GL_NV_gpu_shader5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_shader5")) {
		return get_ext_proc("glProgramUniform4ui64vNV");
	}

	unsupported("glProgramUniform4ui64vNV");
	return piglit_dispatch_glProgramUniform4ui64vNV;
}

static void APIENTRY
stub_glProgramUniform4ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniform4ui64vNV = resolve_glProgramUniform4ui64vNV();
	piglit_dispatch_glProgramUniform4ui64vNV(program, location, count, value);
}

PFNGLPROGRAMUNIFORM4UI64VNVPROC piglit_dispatch_glProgramUniform4ui64vNV = stub_glProgramUniform4ui64vNV;

static void*
resolve_glProgramUniform4uiv(void)
{
	/* glProgramUniform4uiv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniform4uiv", 41);
	}

	/* glProgramUniform4uiv (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramUniform4uiv", 31);
	}

	/* glProgramUniform4uiv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform4uiv");
	}

	/* glProgramUniform4uivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniform4uivEXT");
	}

	/* glProgramUniform4uivEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramUniform4uivEXT");
	}

	unsupported("glProgramUniform4uiv");
	return piglit_dispatch_glProgramUniform4uiv;
}

static void APIENTRY
stub_glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniform4uiv = resolve_glProgramUniform4uiv();
	piglit_dispatch_glProgramUniform4uiv(program, location, count, value);
}

PFNGLPROGRAMUNIFORM4UIVPROC piglit_dispatch_glProgramUniform4uiv = stub_glProgramUniform4uiv;

static void*
resolve_glProgramUniformHandleui64ARB(void)
{
	/* glProgramUniformHandleui64ARB (GL_ARB_bindless_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_bindless_texture")) {
		return get_ext_proc("glProgramUniformHandleui64ARB");
	}

	unsupported("glProgramUniformHandleui64ARB");
	return piglit_dispatch_glProgramUniformHandleui64ARB;
}

static void APIENTRY
stub_glProgramUniformHandleui64ARB(GLuint program, GLint location, GLuint64 value)
{
	check_initialized();
	piglit_dispatch_glProgramUniformHandleui64ARB = resolve_glProgramUniformHandleui64ARB();
	piglit_dispatch_glProgramUniformHandleui64ARB(program, location, value);
}

PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC piglit_dispatch_glProgramUniformHandleui64ARB = stub_glProgramUniformHandleui64ARB;

static void*
resolve_glProgramUniformHandleui64NV(void)
{
	/* glProgramUniformHandleui64NV (GL_NV_bindless_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_bindless_texture")) {
		return get_ext_proc("glProgramUniformHandleui64NV");
	}

	unsupported("glProgramUniformHandleui64NV");
	return piglit_dispatch_glProgramUniformHandleui64NV;
}

static void APIENTRY
stub_glProgramUniformHandleui64NV(GLuint program, GLint location, GLuint64 value)
{
	check_initialized();
	piglit_dispatch_glProgramUniformHandleui64NV = resolve_glProgramUniformHandleui64NV();
	piglit_dispatch_glProgramUniformHandleui64NV(program, location, value);
}

PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC piglit_dispatch_glProgramUniformHandleui64NV = stub_glProgramUniformHandleui64NV;

static void*
resolve_glProgramUniformHandleui64vARB(void)
{
	/* glProgramUniformHandleui64vARB (GL_ARB_bindless_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_bindless_texture")) {
		return get_ext_proc("glProgramUniformHandleui64vARB");
	}

	unsupported("glProgramUniformHandleui64vARB");
	return piglit_dispatch_glProgramUniformHandleui64vARB;
}

static void APIENTRY
stub_glProgramUniformHandleui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * values)
{
	check_initialized();
	piglit_dispatch_glProgramUniformHandleui64vARB = resolve_glProgramUniformHandleui64vARB();
	piglit_dispatch_glProgramUniformHandleui64vARB(program, location, count, values);
}

PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC piglit_dispatch_glProgramUniformHandleui64vARB = stub_glProgramUniformHandleui64vARB;

static void*
resolve_glProgramUniformHandleui64vNV(void)
{
	/* glProgramUniformHandleui64vNV (GL_NV_bindless_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_bindless_texture")) {
		return get_ext_proc("glProgramUniformHandleui64vNV");
	}

	unsupported("glProgramUniformHandleui64vNV");
	return piglit_dispatch_glProgramUniformHandleui64vNV;
}

static void APIENTRY
stub_glProgramUniformHandleui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64 * values)
{
	check_initialized();
	piglit_dispatch_glProgramUniformHandleui64vNV = resolve_glProgramUniformHandleui64vNV();
	piglit_dispatch_glProgramUniformHandleui64vNV(program, location, count, values);
}

PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC piglit_dispatch_glProgramUniformHandleui64vNV = stub_glProgramUniformHandleui64vNV;

static void*
resolve_glProgramUniformMatrix2dv(void)
{
	/* glProgramUniformMatrix2dv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniformMatrix2dv", 41);
	}

	/* glProgramUniformMatrix2dv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniformMatrix2dv");
	}

	unsupported("glProgramUniformMatrix2dv");
	return piglit_dispatch_glProgramUniformMatrix2dv;
}

static void APIENTRY
stub_glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniformMatrix2dv = resolve_glProgramUniformMatrix2dv();
	piglit_dispatch_glProgramUniformMatrix2dv(program, location, count, transpose, value);
}

PFNGLPROGRAMUNIFORMMATRIX2DVPROC piglit_dispatch_glProgramUniformMatrix2dv = stub_glProgramUniformMatrix2dv;

static void*
resolve_glProgramUniformMatrix2dvEXT(void)
{
	/* glProgramUniformMatrix2dvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniformMatrix2dvEXT");
	}

	unsupported("glProgramUniformMatrix2dvEXT");
	return piglit_dispatch_glProgramUniformMatrix2dvEXT;
}

static void APIENTRY
stub_glProgramUniformMatrix2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniformMatrix2dvEXT = resolve_glProgramUniformMatrix2dvEXT();
	piglit_dispatch_glProgramUniformMatrix2dvEXT(program, location, count, transpose, value);
}

PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC piglit_dispatch_glProgramUniformMatrix2dvEXT = stub_glProgramUniformMatrix2dvEXT;

static void*
resolve_glProgramUniformMatrix2fv(void)
{
	/* glProgramUniformMatrix2fv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniformMatrix2fv", 41);
	}

	/* glProgramUniformMatrix2fv (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramUniformMatrix2fv", 31);
	}

	/* glProgramUniformMatrix2fv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniformMatrix2fv");
	}

	/* glProgramUniformMatrix2fvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniformMatrix2fvEXT");
	}

	/* glProgramUniformMatrix2fvEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramUniformMatrix2fvEXT");
	}

	unsupported("glProgramUniformMatrix2fv");
	return piglit_dispatch_glProgramUniformMatrix2fv;
}

static void APIENTRY
stub_glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniformMatrix2fv = resolve_glProgramUniformMatrix2fv();
	piglit_dispatch_glProgramUniformMatrix2fv(program, location, count, transpose, value);
}

PFNGLPROGRAMUNIFORMMATRIX2FVPROC piglit_dispatch_glProgramUniformMatrix2fv = stub_glProgramUniformMatrix2fv;

static void*
resolve_glProgramUniformMatrix2x3dv(void)
{
	/* glProgramUniformMatrix2x3dv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniformMatrix2x3dv", 41);
	}

	/* glProgramUniformMatrix2x3dv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniformMatrix2x3dv");
	}

	unsupported("glProgramUniformMatrix2x3dv");
	return piglit_dispatch_glProgramUniformMatrix2x3dv;
}

static void APIENTRY
stub_glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniformMatrix2x3dv = resolve_glProgramUniformMatrix2x3dv();
	piglit_dispatch_glProgramUniformMatrix2x3dv(program, location, count, transpose, value);
}

PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC piglit_dispatch_glProgramUniformMatrix2x3dv = stub_glProgramUniformMatrix2x3dv;

static void*
resolve_glProgramUniformMatrix2x3dvEXT(void)
{
	/* glProgramUniformMatrix2x3dvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniformMatrix2x3dvEXT");
	}

	unsupported("glProgramUniformMatrix2x3dvEXT");
	return piglit_dispatch_glProgramUniformMatrix2x3dvEXT;
}

static void APIENTRY
stub_glProgramUniformMatrix2x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniformMatrix2x3dvEXT = resolve_glProgramUniformMatrix2x3dvEXT();
	piglit_dispatch_glProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value);
}

PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC piglit_dispatch_glProgramUniformMatrix2x3dvEXT = stub_glProgramUniformMatrix2x3dvEXT;

static void*
resolve_glProgramUniformMatrix2x3fv(void)
{
	/* glProgramUniformMatrix2x3fv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniformMatrix2x3fv", 41);
	}

	/* glProgramUniformMatrix2x3fv (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramUniformMatrix2x3fv", 31);
	}

	/* glProgramUniformMatrix2x3fv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniformMatrix2x3fv");
	}

	/* glProgramUniformMatrix2x3fvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniformMatrix2x3fvEXT");
	}

	/* glProgramUniformMatrix2x3fvEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramUniformMatrix2x3fvEXT");
	}

	unsupported("glProgramUniformMatrix2x3fv");
	return piglit_dispatch_glProgramUniformMatrix2x3fv;
}

static void APIENTRY
stub_glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniformMatrix2x3fv = resolve_glProgramUniformMatrix2x3fv();
	piglit_dispatch_glProgramUniformMatrix2x3fv(program, location, count, transpose, value);
}

PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC piglit_dispatch_glProgramUniformMatrix2x3fv = stub_glProgramUniformMatrix2x3fv;

static void*
resolve_glProgramUniformMatrix2x4dv(void)
{
	/* glProgramUniformMatrix2x4dv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniformMatrix2x4dv", 41);
	}

	/* glProgramUniformMatrix2x4dv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniformMatrix2x4dv");
	}

	unsupported("glProgramUniformMatrix2x4dv");
	return piglit_dispatch_glProgramUniformMatrix2x4dv;
}

static void APIENTRY
stub_glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniformMatrix2x4dv = resolve_glProgramUniformMatrix2x4dv();
	piglit_dispatch_glProgramUniformMatrix2x4dv(program, location, count, transpose, value);
}

PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC piglit_dispatch_glProgramUniformMatrix2x4dv = stub_glProgramUniformMatrix2x4dv;

static void*
resolve_glProgramUniformMatrix2x4dvEXT(void)
{
	/* glProgramUniformMatrix2x4dvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniformMatrix2x4dvEXT");
	}

	unsupported("glProgramUniformMatrix2x4dvEXT");
	return piglit_dispatch_glProgramUniformMatrix2x4dvEXT;
}

static void APIENTRY
stub_glProgramUniformMatrix2x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniformMatrix2x4dvEXT = resolve_glProgramUniformMatrix2x4dvEXT();
	piglit_dispatch_glProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value);
}

PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC piglit_dispatch_glProgramUniformMatrix2x4dvEXT = stub_glProgramUniformMatrix2x4dvEXT;

static void*
resolve_glProgramUniformMatrix2x4fv(void)
{
	/* glProgramUniformMatrix2x4fv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniformMatrix2x4fv", 41);
	}

	/* glProgramUniformMatrix2x4fv (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramUniformMatrix2x4fv", 31);
	}

	/* glProgramUniformMatrix2x4fv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniformMatrix2x4fv");
	}

	/* glProgramUniformMatrix2x4fvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniformMatrix2x4fvEXT");
	}

	/* glProgramUniformMatrix2x4fvEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramUniformMatrix2x4fvEXT");
	}

	unsupported("glProgramUniformMatrix2x4fv");
	return piglit_dispatch_glProgramUniformMatrix2x4fv;
}

static void APIENTRY
stub_glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniformMatrix2x4fv = resolve_glProgramUniformMatrix2x4fv();
	piglit_dispatch_glProgramUniformMatrix2x4fv(program, location, count, transpose, value);
}

PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC piglit_dispatch_glProgramUniformMatrix2x4fv = stub_glProgramUniformMatrix2x4fv;

static void*
resolve_glProgramUniformMatrix3dv(void)
{
	/* glProgramUniformMatrix3dv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniformMatrix3dv", 41);
	}

	/* glProgramUniformMatrix3dv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniformMatrix3dv");
	}

	unsupported("glProgramUniformMatrix3dv");
	return piglit_dispatch_glProgramUniformMatrix3dv;
}

static void APIENTRY
stub_glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniformMatrix3dv = resolve_glProgramUniformMatrix3dv();
	piglit_dispatch_glProgramUniformMatrix3dv(program, location, count, transpose, value);
}

PFNGLPROGRAMUNIFORMMATRIX3DVPROC piglit_dispatch_glProgramUniformMatrix3dv = stub_glProgramUniformMatrix3dv;

static void*
resolve_glProgramUniformMatrix3dvEXT(void)
{
	/* glProgramUniformMatrix3dvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniformMatrix3dvEXT");
	}

	unsupported("glProgramUniformMatrix3dvEXT");
	return piglit_dispatch_glProgramUniformMatrix3dvEXT;
}

static void APIENTRY
stub_glProgramUniformMatrix3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniformMatrix3dvEXT = resolve_glProgramUniformMatrix3dvEXT();
	piglit_dispatch_glProgramUniformMatrix3dvEXT(program, location, count, transpose, value);
}

PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC piglit_dispatch_glProgramUniformMatrix3dvEXT = stub_glProgramUniformMatrix3dvEXT;

static void*
resolve_glProgramUniformMatrix3fv(void)
{
	/* glProgramUniformMatrix3fv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniformMatrix3fv", 41);
	}

	/* glProgramUniformMatrix3fv (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramUniformMatrix3fv", 31);
	}

	/* glProgramUniformMatrix3fv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniformMatrix3fv");
	}

	/* glProgramUniformMatrix3fvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniformMatrix3fvEXT");
	}

	/* glProgramUniformMatrix3fvEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramUniformMatrix3fvEXT");
	}

	unsupported("glProgramUniformMatrix3fv");
	return piglit_dispatch_glProgramUniformMatrix3fv;
}

static void APIENTRY
stub_glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniformMatrix3fv = resolve_glProgramUniformMatrix3fv();
	piglit_dispatch_glProgramUniformMatrix3fv(program, location, count, transpose, value);
}

PFNGLPROGRAMUNIFORMMATRIX3FVPROC piglit_dispatch_glProgramUniformMatrix3fv = stub_glProgramUniformMatrix3fv;

static void*
resolve_glProgramUniformMatrix3x2dv(void)
{
	/* glProgramUniformMatrix3x2dv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniformMatrix3x2dv", 41);
	}

	/* glProgramUniformMatrix3x2dv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniformMatrix3x2dv");
	}

	unsupported("glProgramUniformMatrix3x2dv");
	return piglit_dispatch_glProgramUniformMatrix3x2dv;
}

static void APIENTRY
stub_glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniformMatrix3x2dv = resolve_glProgramUniformMatrix3x2dv();
	piglit_dispatch_glProgramUniformMatrix3x2dv(program, location, count, transpose, value);
}

PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC piglit_dispatch_glProgramUniformMatrix3x2dv = stub_glProgramUniformMatrix3x2dv;

static void*
resolve_glProgramUniformMatrix3x2dvEXT(void)
{
	/* glProgramUniformMatrix3x2dvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniformMatrix3x2dvEXT");
	}

	unsupported("glProgramUniformMatrix3x2dvEXT");
	return piglit_dispatch_glProgramUniformMatrix3x2dvEXT;
}

static void APIENTRY
stub_glProgramUniformMatrix3x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniformMatrix3x2dvEXT = resolve_glProgramUniformMatrix3x2dvEXT();
	piglit_dispatch_glProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value);
}

PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC piglit_dispatch_glProgramUniformMatrix3x2dvEXT = stub_glProgramUniformMatrix3x2dvEXT;

static void*
resolve_glProgramUniformMatrix3x2fv(void)
{
	/* glProgramUniformMatrix3x2fv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniformMatrix3x2fv", 41);
	}

	/* glProgramUniformMatrix3x2fv (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramUniformMatrix3x2fv", 31);
	}

	/* glProgramUniformMatrix3x2fv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniformMatrix3x2fv");
	}

	/* glProgramUniformMatrix3x2fvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniformMatrix3x2fvEXT");
	}

	/* glProgramUniformMatrix3x2fvEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramUniformMatrix3x2fvEXT");
	}

	unsupported("glProgramUniformMatrix3x2fv");
	return piglit_dispatch_glProgramUniformMatrix3x2fv;
}

static void APIENTRY
stub_glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniformMatrix3x2fv = resolve_glProgramUniformMatrix3x2fv();
	piglit_dispatch_glProgramUniformMatrix3x2fv(program, location, count, transpose, value);
}

PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC piglit_dispatch_glProgramUniformMatrix3x2fv = stub_glProgramUniformMatrix3x2fv;

static void*
resolve_glProgramUniformMatrix3x4dv(void)
{
	/* glProgramUniformMatrix3x4dv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniformMatrix3x4dv", 41);
	}

	/* glProgramUniformMatrix3x4dv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniformMatrix3x4dv");
	}

	unsupported("glProgramUniformMatrix3x4dv");
	return piglit_dispatch_glProgramUniformMatrix3x4dv;
}

static void APIENTRY
stub_glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniformMatrix3x4dv = resolve_glProgramUniformMatrix3x4dv();
	piglit_dispatch_glProgramUniformMatrix3x4dv(program, location, count, transpose, value);
}

PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC piglit_dispatch_glProgramUniformMatrix3x4dv = stub_glProgramUniformMatrix3x4dv;

static void*
resolve_glProgramUniformMatrix3x4dvEXT(void)
{
	/* glProgramUniformMatrix3x4dvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniformMatrix3x4dvEXT");
	}

	unsupported("glProgramUniformMatrix3x4dvEXT");
	return piglit_dispatch_glProgramUniformMatrix3x4dvEXT;
}

static void APIENTRY
stub_glProgramUniformMatrix3x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniformMatrix3x4dvEXT = resolve_glProgramUniformMatrix3x4dvEXT();
	piglit_dispatch_glProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value);
}

PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC piglit_dispatch_glProgramUniformMatrix3x4dvEXT = stub_glProgramUniformMatrix3x4dvEXT;

static void*
resolve_glProgramUniformMatrix3x4fv(void)
{
	/* glProgramUniformMatrix3x4fv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniformMatrix3x4fv", 41);
	}

	/* glProgramUniformMatrix3x4fv (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramUniformMatrix3x4fv", 31);
	}

	/* glProgramUniformMatrix3x4fv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniformMatrix3x4fv");
	}

	/* glProgramUniformMatrix3x4fvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniformMatrix3x4fvEXT");
	}

	/* glProgramUniformMatrix3x4fvEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramUniformMatrix3x4fvEXT");
	}

	unsupported("glProgramUniformMatrix3x4fv");
	return piglit_dispatch_glProgramUniformMatrix3x4fv;
}

static void APIENTRY
stub_glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniformMatrix3x4fv = resolve_glProgramUniformMatrix3x4fv();
	piglit_dispatch_glProgramUniformMatrix3x4fv(program, location, count, transpose, value);
}

PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC piglit_dispatch_glProgramUniformMatrix3x4fv = stub_glProgramUniformMatrix3x4fv;

static void*
resolve_glProgramUniformMatrix4dv(void)
{
	/* glProgramUniformMatrix4dv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniformMatrix4dv", 41);
	}

	/* glProgramUniformMatrix4dv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniformMatrix4dv");
	}

	unsupported("glProgramUniformMatrix4dv");
	return piglit_dispatch_glProgramUniformMatrix4dv;
}

static void APIENTRY
stub_glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniformMatrix4dv = resolve_glProgramUniformMatrix4dv();
	piglit_dispatch_glProgramUniformMatrix4dv(program, location, count, transpose, value);
}

PFNGLPROGRAMUNIFORMMATRIX4DVPROC piglit_dispatch_glProgramUniformMatrix4dv = stub_glProgramUniformMatrix4dv;

static void*
resolve_glProgramUniformMatrix4dvEXT(void)
{
	/* glProgramUniformMatrix4dvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniformMatrix4dvEXT");
	}

	unsupported("glProgramUniformMatrix4dvEXT");
	return piglit_dispatch_glProgramUniformMatrix4dvEXT;
}

static void APIENTRY
stub_glProgramUniformMatrix4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniformMatrix4dvEXT = resolve_glProgramUniformMatrix4dvEXT();
	piglit_dispatch_glProgramUniformMatrix4dvEXT(program, location, count, transpose, value);
}

PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC piglit_dispatch_glProgramUniformMatrix4dvEXT = stub_glProgramUniformMatrix4dvEXT;

static void*
resolve_glProgramUniformMatrix4fv(void)
{
	/* glProgramUniformMatrix4fv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniformMatrix4fv", 41);
	}

	/* glProgramUniformMatrix4fv (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramUniformMatrix4fv", 31);
	}

	/* glProgramUniformMatrix4fv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniformMatrix4fv");
	}

	/* glProgramUniformMatrix4fvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniformMatrix4fvEXT");
	}

	/* glProgramUniformMatrix4fvEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramUniformMatrix4fvEXT");
	}

	/* glProgramUniformMatrix4fvEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramUniformMatrix4fvEXT");
	}

	unsupported("glProgramUniformMatrix4fv");
	return piglit_dispatch_glProgramUniformMatrix4fv;
}

static void APIENTRY
stub_glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniformMatrix4fv = resolve_glProgramUniformMatrix4fv();
	piglit_dispatch_glProgramUniformMatrix4fv(program, location, count, transpose, value);
}

PFNGLPROGRAMUNIFORMMATRIX4FVPROC piglit_dispatch_glProgramUniformMatrix4fv = stub_glProgramUniformMatrix4fv;

static void*
resolve_glProgramUniformMatrix4x2dv(void)
{
	/* glProgramUniformMatrix4x2dv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniformMatrix4x2dv", 41);
	}

	/* glProgramUniformMatrix4x2dv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniformMatrix4x2dv");
	}

	unsupported("glProgramUniformMatrix4x2dv");
	return piglit_dispatch_glProgramUniformMatrix4x2dv;
}

static void APIENTRY
stub_glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniformMatrix4x2dv = resolve_glProgramUniformMatrix4x2dv();
	piglit_dispatch_glProgramUniformMatrix4x2dv(program, location, count, transpose, value);
}

PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC piglit_dispatch_glProgramUniformMatrix4x2dv = stub_glProgramUniformMatrix4x2dv;

static void*
resolve_glProgramUniformMatrix4x2dvEXT(void)
{
	/* glProgramUniformMatrix4x2dvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniformMatrix4x2dvEXT");
	}

	unsupported("glProgramUniformMatrix4x2dvEXT");
	return piglit_dispatch_glProgramUniformMatrix4x2dvEXT;
}

static void APIENTRY
stub_glProgramUniformMatrix4x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniformMatrix4x2dvEXT = resolve_glProgramUniformMatrix4x2dvEXT();
	piglit_dispatch_glProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value);
}

PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC piglit_dispatch_glProgramUniformMatrix4x2dvEXT = stub_glProgramUniformMatrix4x2dvEXT;

static void*
resolve_glProgramUniformMatrix4x2fv(void)
{
	/* glProgramUniformMatrix4x2fv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniformMatrix4x2fv", 41);
	}

	/* glProgramUniformMatrix4x2fv (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramUniformMatrix4x2fv", 31);
	}

	/* glProgramUniformMatrix4x2fv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniformMatrix4x2fv");
	}

	/* glProgramUniformMatrix4x2fvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniformMatrix4x2fvEXT");
	}

	/* glProgramUniformMatrix4x2fvEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramUniformMatrix4x2fvEXT");
	}

	unsupported("glProgramUniformMatrix4x2fv");
	return piglit_dispatch_glProgramUniformMatrix4x2fv;
}

static void APIENTRY
stub_glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniformMatrix4x2fv = resolve_glProgramUniformMatrix4x2fv();
	piglit_dispatch_glProgramUniformMatrix4x2fv(program, location, count, transpose, value);
}

PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC piglit_dispatch_glProgramUniformMatrix4x2fv = stub_glProgramUniformMatrix4x2fv;

static void*
resolve_glProgramUniformMatrix4x3dv(void)
{
	/* glProgramUniformMatrix4x3dv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniformMatrix4x3dv", 41);
	}

	/* glProgramUniformMatrix4x3dv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniformMatrix4x3dv");
	}

	unsupported("glProgramUniformMatrix4x3dv");
	return piglit_dispatch_glProgramUniformMatrix4x3dv;
}

static void APIENTRY
stub_glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniformMatrix4x3dv = resolve_glProgramUniformMatrix4x3dv();
	piglit_dispatch_glProgramUniformMatrix4x3dv(program, location, count, transpose, value);
}

PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC piglit_dispatch_glProgramUniformMatrix4x3dv = stub_glProgramUniformMatrix4x3dv;

static void*
resolve_glProgramUniformMatrix4x3dvEXT(void)
{
	/* glProgramUniformMatrix4x3dvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniformMatrix4x3dvEXT");
	}

	unsupported("glProgramUniformMatrix4x3dvEXT");
	return piglit_dispatch_glProgramUniformMatrix4x3dvEXT;
}

static void APIENTRY
stub_glProgramUniformMatrix4x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniformMatrix4x3dvEXT = resolve_glProgramUniformMatrix4x3dvEXT();
	piglit_dispatch_glProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value);
}

PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC piglit_dispatch_glProgramUniformMatrix4x3dvEXT = stub_glProgramUniformMatrix4x3dvEXT;

static void*
resolve_glProgramUniformMatrix4x3fv(void)
{
	/* glProgramUniformMatrix4x3fv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProgramUniformMatrix4x3fv", 41);
	}

	/* glProgramUniformMatrix4x3fv (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glProgramUniformMatrix4x3fv", 31);
	}

	/* glProgramUniformMatrix4x3fv (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glProgramUniformMatrix4x3fv");
	}

	/* glProgramUniformMatrix4x3fvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glProgramUniformMatrix4x3fvEXT");
	}

	/* glProgramUniformMatrix4x3fvEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glProgramUniformMatrix4x3fvEXT");
	}

	unsupported("glProgramUniformMatrix4x3fv");
	return piglit_dispatch_glProgramUniformMatrix4x3fv;
}

static void APIENTRY
stub_glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniformMatrix4x3fv = resolve_glProgramUniformMatrix4x3fv();
	piglit_dispatch_glProgramUniformMatrix4x3fv(program, location, count, transpose, value);
}

PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC piglit_dispatch_glProgramUniformMatrix4x3fv = stub_glProgramUniformMatrix4x3fv;

static void*
resolve_glProgramUniformui64NV(void)
{
	/* glProgramUniformui64NV (GL_NV_shader_buffer_load) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_shader_buffer_load")) {
		return get_ext_proc("glProgramUniformui64NV");
	}

	unsupported("glProgramUniformui64NV");
	return piglit_dispatch_glProgramUniformui64NV;
}

static void APIENTRY
stub_glProgramUniformui64NV(GLuint program, GLint location, GLuint64EXT value)
{
	check_initialized();
	piglit_dispatch_glProgramUniformui64NV = resolve_glProgramUniformui64NV();
	piglit_dispatch_glProgramUniformui64NV(program, location, value);
}

PFNGLPROGRAMUNIFORMUI64NVPROC piglit_dispatch_glProgramUniformui64NV = stub_glProgramUniformui64NV;

static void*
resolve_glProgramUniformui64vNV(void)
{
	/* glProgramUniformui64vNV (GL_NV_shader_buffer_load) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_shader_buffer_load")) {
		return get_ext_proc("glProgramUniformui64vNV");
	}

	unsupported("glProgramUniformui64vNV");
	return piglit_dispatch_glProgramUniformui64vNV;
}

static void APIENTRY
stub_glProgramUniformui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value)
{
	check_initialized();
	piglit_dispatch_glProgramUniformui64vNV = resolve_glProgramUniformui64vNV();
	piglit_dispatch_glProgramUniformui64vNV(program, location, count, value);
}

PFNGLPROGRAMUNIFORMUI64VNVPROC piglit_dispatch_glProgramUniformui64vNV = stub_glProgramUniformui64vNV;

static void*
resolve_glProgramVertexLimitNV(void)
{
	/* glProgramVertexLimitNV (GL_NV_geometry_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_geometry_program4")) {
		return get_ext_proc("glProgramVertexLimitNV");
	}

	unsupported("glProgramVertexLimitNV");
	return piglit_dispatch_glProgramVertexLimitNV;
}

static void APIENTRY
stub_glProgramVertexLimitNV(GLenum target, GLint limit)
{
	check_initialized();
	piglit_dispatch_glProgramVertexLimitNV = resolve_glProgramVertexLimitNV();
	piglit_dispatch_glProgramVertexLimitNV(target, limit);
}

PFNGLPROGRAMVERTEXLIMITNVPROC piglit_dispatch_glProgramVertexLimitNV = stub_glProgramVertexLimitNV;

static void*
resolve_glProvokingVertex(void)
{
	/* glProvokingVertex (GL_VERSION_3_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glProvokingVertex", 32);
	}

	/* glProvokingVertex (GL_ARB_provoking_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_provoking_vertex")) {
		return get_ext_proc("glProvokingVertex");
	}

	/* glProvokingVertexEXT (GL_EXT_provoking_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_provoking_vertex")) {
		return get_ext_proc("glProvokingVertexEXT");
	}

	unsupported("glProvokingVertex");
	return piglit_dispatch_glProvokingVertex;
}

static void APIENTRY
stub_glProvokingVertex(GLenum mode)
{
	check_initialized();
	piglit_dispatch_glProvokingVertex = resolve_glProvokingVertex();
	piglit_dispatch_glProvokingVertex(mode);
}

PFNGLPROVOKINGVERTEXPROC piglit_dispatch_glProvokingVertex = stub_glProvokingVertex;

static void*
resolve_glPushAttrib(void)
{
	/* glPushAttrib (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glPushAttrib", 10);
	}

	unsupported("glPushAttrib");
	return piglit_dispatch_glPushAttrib;
}

static void APIENTRY
stub_glPushAttrib(GLbitfield mask)
{
	check_initialized();
	piglit_dispatch_glPushAttrib = resolve_glPushAttrib();
	piglit_dispatch_glPushAttrib(mask);
}

PFNGLPUSHATTRIBPROC piglit_dispatch_glPushAttrib = stub_glPushAttrib;

static void*
resolve_glPushClientAttrib(void)
{
	/* glPushClientAttrib (GL_VERSION_1_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glPushClientAttrib", 11);
	}

	unsupported("glPushClientAttrib");
	return piglit_dispatch_glPushClientAttrib;
}

static void APIENTRY
stub_glPushClientAttrib(GLbitfield mask)
{
	check_initialized();
	piglit_dispatch_glPushClientAttrib = resolve_glPushClientAttrib();
	piglit_dispatch_glPushClientAttrib(mask);
}

PFNGLPUSHCLIENTATTRIBPROC piglit_dispatch_glPushClientAttrib = stub_glPushClientAttrib;

static void*
resolve_glPushClientAttribDefaultEXT(void)
{
	/* glPushClientAttribDefaultEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glPushClientAttribDefaultEXT");
	}

	unsupported("glPushClientAttribDefaultEXT");
	return piglit_dispatch_glPushClientAttribDefaultEXT;
}

static void APIENTRY
stub_glPushClientAttribDefaultEXT(GLbitfield mask)
{
	check_initialized();
	piglit_dispatch_glPushClientAttribDefaultEXT = resolve_glPushClientAttribDefaultEXT();
	piglit_dispatch_glPushClientAttribDefaultEXT(mask);
}

PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC piglit_dispatch_glPushClientAttribDefaultEXT = stub_glPushClientAttribDefaultEXT;

static void*
resolve_glPushDebugGroup(void)
{
	/* glPushDebugGroup (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glPushDebugGroup", 43);
	}

	/* glPushDebugGroup (GL_KHR_debug) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_KHR_debug")) {
		return get_ext_proc("glPushDebugGroup");
	}

	/* glPushDebugGroupKHR (GL_KHR_debug) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_KHR_debug")) {
		return get_ext_proc("glPushDebugGroupKHR");
	}

	unsupported("glPushDebugGroup");
	return piglit_dispatch_glPushDebugGroup;
}

static void APIENTRY
stub_glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar * message)
{
	check_initialized();
	piglit_dispatch_glPushDebugGroup = resolve_glPushDebugGroup();
	piglit_dispatch_glPushDebugGroup(source, id, length, message);
}

PFNGLPUSHDEBUGGROUPPROC piglit_dispatch_glPushDebugGroup = stub_glPushDebugGroup;

static void*
resolve_glPushGroupMarkerEXT(void)
{
	/* glPushGroupMarkerEXT (GL_EXT_debug_marker) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_debug_marker")) {
		return get_ext_proc("glPushGroupMarkerEXT");
	}

	unsupported("glPushGroupMarkerEXT");
	return piglit_dispatch_glPushGroupMarkerEXT;
}

static void APIENTRY
stub_glPushGroupMarkerEXT(GLsizei length, const GLchar * marker)
{
	check_initialized();
	piglit_dispatch_glPushGroupMarkerEXT = resolve_glPushGroupMarkerEXT();
	piglit_dispatch_glPushGroupMarkerEXT(length, marker);
}

PFNGLPUSHGROUPMARKEREXTPROC piglit_dispatch_glPushGroupMarkerEXT = stub_glPushGroupMarkerEXT;

static void*
resolve_glPushMatrix(void)
{
	/* glPushMatrix (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glPushMatrix", 10);
	}

	/* glPushMatrix (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glPushMatrix", 10);
	}

	unsupported("glPushMatrix");
	return piglit_dispatch_glPushMatrix;
}

static void APIENTRY
stub_glPushMatrix()
{
	check_initialized();
	piglit_dispatch_glPushMatrix = resolve_glPushMatrix();
	piglit_dispatch_glPushMatrix();
}

PFNGLPUSHMATRIXPROC piglit_dispatch_glPushMatrix = stub_glPushMatrix;

static void*
resolve_glPushName(void)
{
	/* glPushName (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glPushName", 10);
	}

	unsupported("glPushName");
	return piglit_dispatch_glPushName;
}

static void APIENTRY
stub_glPushName(GLuint name)
{
	check_initialized();
	piglit_dispatch_glPushName = resolve_glPushName();
	piglit_dispatch_glPushName(name);
}

PFNGLPUSHNAMEPROC piglit_dispatch_glPushName = stub_glPushName;

static void*
resolve_glQueryCounter(void)
{
	/* glQueryCounter (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glQueryCounter", 33);
	}

	/* glQueryCounter (GL_ARB_timer_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_timer_query")) {
		return get_ext_proc("glQueryCounter");
	}

	/* glQueryCounterEXT (GL_EXT_disjoint_timer_query) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_disjoint_timer_query")) {
		return get_ext_proc("glQueryCounterEXT");
	}

	unsupported("glQueryCounter");
	return piglit_dispatch_glQueryCounter;
}

static void APIENTRY
stub_glQueryCounter(GLuint id, GLenum target)
{
	check_initialized();
	piglit_dispatch_glQueryCounter = resolve_glQueryCounter();
	piglit_dispatch_glQueryCounter(id, target);
}

PFNGLQUERYCOUNTERPROC piglit_dispatch_glQueryCounter = stub_glQueryCounter;

static void*
resolve_glQueryMatrixxOES(void)
{
	/* glQueryMatrixxOES (GL_OES_query_matrix) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_query_matrix")) {
		return get_ext_proc("glQueryMatrixxOES");
	}

	unsupported("glQueryMatrixxOES");
	return piglit_dispatch_glQueryMatrixxOES;
}

static GLbitfield APIENTRY
stub_glQueryMatrixxOES(GLfixed * mantissa, GLint * exponent)
{
	check_initialized();
	piglit_dispatch_glQueryMatrixxOES = resolve_glQueryMatrixxOES();
	return piglit_dispatch_glQueryMatrixxOES(mantissa, exponent);
}

PFNGLQUERYMATRIXXOESPROC piglit_dispatch_glQueryMatrixxOES = stub_glQueryMatrixxOES;

static void*
resolve_glQueryObjectParameteruiAMD(void)
{
	/* glQueryObjectParameteruiAMD (GL_AMD_occlusion_query_event) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_occlusion_query_event")) {
		return get_ext_proc("glQueryObjectParameteruiAMD");
	}

	unsupported("glQueryObjectParameteruiAMD");
	return piglit_dispatch_glQueryObjectParameteruiAMD;
}

static void APIENTRY
stub_glQueryObjectParameteruiAMD(GLenum target, GLuint id, GLenum pname, GLuint param)
{
	check_initialized();
	piglit_dispatch_glQueryObjectParameteruiAMD = resolve_glQueryObjectParameteruiAMD();
	piglit_dispatch_glQueryObjectParameteruiAMD(target, id, pname, param);
}

PFNGLQUERYOBJECTPARAMETERUIAMDPROC piglit_dispatch_glQueryObjectParameteruiAMD = stub_glQueryObjectParameteruiAMD;

static void*
resolve_glRasterPos2d(void)
{
	/* glRasterPos2d (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRasterPos2d", 10);
	}

	unsupported("glRasterPos2d");
	return piglit_dispatch_glRasterPos2d;
}

static void APIENTRY
stub_glRasterPos2d(GLdouble x, GLdouble y)
{
	check_initialized();
	piglit_dispatch_glRasterPos2d = resolve_glRasterPos2d();
	piglit_dispatch_glRasterPos2d(x, y);
}

PFNGLRASTERPOS2DPROC piglit_dispatch_glRasterPos2d = stub_glRasterPos2d;

static void*
resolve_glRasterPos2dv(void)
{
	/* glRasterPos2dv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRasterPos2dv", 10);
	}

	unsupported("glRasterPos2dv");
	return piglit_dispatch_glRasterPos2dv;
}

static void APIENTRY
stub_glRasterPos2dv(const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glRasterPos2dv = resolve_glRasterPos2dv();
	piglit_dispatch_glRasterPos2dv(v);
}

PFNGLRASTERPOS2DVPROC piglit_dispatch_glRasterPos2dv = stub_glRasterPos2dv;

static void*
resolve_glRasterPos2f(void)
{
	/* glRasterPos2f (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRasterPos2f", 10);
	}

	unsupported("glRasterPos2f");
	return piglit_dispatch_glRasterPos2f;
}

static void APIENTRY
stub_glRasterPos2f(GLfloat x, GLfloat y)
{
	check_initialized();
	piglit_dispatch_glRasterPos2f = resolve_glRasterPos2f();
	piglit_dispatch_glRasterPos2f(x, y);
}

PFNGLRASTERPOS2FPROC piglit_dispatch_glRasterPos2f = stub_glRasterPos2f;

static void*
resolve_glRasterPos2fv(void)
{
	/* glRasterPos2fv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRasterPos2fv", 10);
	}

	unsupported("glRasterPos2fv");
	return piglit_dispatch_glRasterPos2fv;
}

static void APIENTRY
stub_glRasterPos2fv(const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glRasterPos2fv = resolve_glRasterPos2fv();
	piglit_dispatch_glRasterPos2fv(v);
}

PFNGLRASTERPOS2FVPROC piglit_dispatch_glRasterPos2fv = stub_glRasterPos2fv;

static void*
resolve_glRasterPos2i(void)
{
	/* glRasterPos2i (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRasterPos2i", 10);
	}

	unsupported("glRasterPos2i");
	return piglit_dispatch_glRasterPos2i;
}

static void APIENTRY
stub_glRasterPos2i(GLint x, GLint y)
{
	check_initialized();
	piglit_dispatch_glRasterPos2i = resolve_glRasterPos2i();
	piglit_dispatch_glRasterPos2i(x, y);
}

PFNGLRASTERPOS2IPROC piglit_dispatch_glRasterPos2i = stub_glRasterPos2i;

static void*
resolve_glRasterPos2iv(void)
{
	/* glRasterPos2iv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRasterPos2iv", 10);
	}

	unsupported("glRasterPos2iv");
	return piglit_dispatch_glRasterPos2iv;
}

static void APIENTRY
stub_glRasterPos2iv(const GLint * v)
{
	check_initialized();
	piglit_dispatch_glRasterPos2iv = resolve_glRasterPos2iv();
	piglit_dispatch_glRasterPos2iv(v);
}

PFNGLRASTERPOS2IVPROC piglit_dispatch_glRasterPos2iv = stub_glRasterPos2iv;

static void*
resolve_glRasterPos2s(void)
{
	/* glRasterPos2s (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRasterPos2s", 10);
	}

	unsupported("glRasterPos2s");
	return piglit_dispatch_glRasterPos2s;
}

static void APIENTRY
stub_glRasterPos2s(GLshort x, GLshort y)
{
	check_initialized();
	piglit_dispatch_glRasterPos2s = resolve_glRasterPos2s();
	piglit_dispatch_glRasterPos2s(x, y);
}

PFNGLRASTERPOS2SPROC piglit_dispatch_glRasterPos2s = stub_glRasterPos2s;

static void*
resolve_glRasterPos2sv(void)
{
	/* glRasterPos2sv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRasterPos2sv", 10);
	}

	unsupported("glRasterPos2sv");
	return piglit_dispatch_glRasterPos2sv;
}

static void APIENTRY
stub_glRasterPos2sv(const GLshort * v)
{
	check_initialized();
	piglit_dispatch_glRasterPos2sv = resolve_glRasterPos2sv();
	piglit_dispatch_glRasterPos2sv(v);
}

PFNGLRASTERPOS2SVPROC piglit_dispatch_glRasterPos2sv = stub_glRasterPos2sv;

static void*
resolve_glRasterPos2xOES(void)
{
	/* glRasterPos2xOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glRasterPos2xOES");
	}

	unsupported("glRasterPos2xOES");
	return piglit_dispatch_glRasterPos2xOES;
}

static void APIENTRY
stub_glRasterPos2xOES(GLfixed x, GLfixed y)
{
	check_initialized();
	piglit_dispatch_glRasterPos2xOES = resolve_glRasterPos2xOES();
	piglit_dispatch_glRasterPos2xOES(x, y);
}

PFNGLRASTERPOS2XOESPROC piglit_dispatch_glRasterPos2xOES = stub_glRasterPos2xOES;

static void*
resolve_glRasterPos2xvOES(void)
{
	/* glRasterPos2xvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glRasterPos2xvOES");
	}

	unsupported("glRasterPos2xvOES");
	return piglit_dispatch_glRasterPos2xvOES;
}

static void APIENTRY
stub_glRasterPos2xvOES(const GLfixed * coords)
{
	check_initialized();
	piglit_dispatch_glRasterPos2xvOES = resolve_glRasterPos2xvOES();
	piglit_dispatch_glRasterPos2xvOES(coords);
}

PFNGLRASTERPOS2XVOESPROC piglit_dispatch_glRasterPos2xvOES = stub_glRasterPos2xvOES;

static void*
resolve_glRasterPos3d(void)
{
	/* glRasterPos3d (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRasterPos3d", 10);
	}

	unsupported("glRasterPos3d");
	return piglit_dispatch_glRasterPos3d;
}

static void APIENTRY
stub_glRasterPos3d(GLdouble x, GLdouble y, GLdouble z)
{
	check_initialized();
	piglit_dispatch_glRasterPos3d = resolve_glRasterPos3d();
	piglit_dispatch_glRasterPos3d(x, y, z);
}

PFNGLRASTERPOS3DPROC piglit_dispatch_glRasterPos3d = stub_glRasterPos3d;

static void*
resolve_glRasterPos3dv(void)
{
	/* glRasterPos3dv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRasterPos3dv", 10);
	}

	unsupported("glRasterPos3dv");
	return piglit_dispatch_glRasterPos3dv;
}

static void APIENTRY
stub_glRasterPos3dv(const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glRasterPos3dv = resolve_glRasterPos3dv();
	piglit_dispatch_glRasterPos3dv(v);
}

PFNGLRASTERPOS3DVPROC piglit_dispatch_glRasterPos3dv = stub_glRasterPos3dv;

static void*
resolve_glRasterPos3f(void)
{
	/* glRasterPos3f (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRasterPos3f", 10);
	}

	unsupported("glRasterPos3f");
	return piglit_dispatch_glRasterPos3f;
}

static void APIENTRY
stub_glRasterPos3f(GLfloat x, GLfloat y, GLfloat z)
{
	check_initialized();
	piglit_dispatch_glRasterPos3f = resolve_glRasterPos3f();
	piglit_dispatch_glRasterPos3f(x, y, z);
}

PFNGLRASTERPOS3FPROC piglit_dispatch_glRasterPos3f = stub_glRasterPos3f;

static void*
resolve_glRasterPos3fv(void)
{
	/* glRasterPos3fv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRasterPos3fv", 10);
	}

	unsupported("glRasterPos3fv");
	return piglit_dispatch_glRasterPos3fv;
}

static void APIENTRY
stub_glRasterPos3fv(const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glRasterPos3fv = resolve_glRasterPos3fv();
	piglit_dispatch_glRasterPos3fv(v);
}

PFNGLRASTERPOS3FVPROC piglit_dispatch_glRasterPos3fv = stub_glRasterPos3fv;

static void*
resolve_glRasterPos3i(void)
{
	/* glRasterPos3i (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRasterPos3i", 10);
	}

	unsupported("glRasterPos3i");
	return piglit_dispatch_glRasterPos3i;
}

static void APIENTRY
stub_glRasterPos3i(GLint x, GLint y, GLint z)
{
	check_initialized();
	piglit_dispatch_glRasterPos3i = resolve_glRasterPos3i();
	piglit_dispatch_glRasterPos3i(x, y, z);
}

PFNGLRASTERPOS3IPROC piglit_dispatch_glRasterPos3i = stub_glRasterPos3i;

static void*
resolve_glRasterPos3iv(void)
{
	/* glRasterPos3iv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRasterPos3iv", 10);
	}

	unsupported("glRasterPos3iv");
	return piglit_dispatch_glRasterPos3iv;
}

static void APIENTRY
stub_glRasterPos3iv(const GLint * v)
{
	check_initialized();
	piglit_dispatch_glRasterPos3iv = resolve_glRasterPos3iv();
	piglit_dispatch_glRasterPos3iv(v);
}

PFNGLRASTERPOS3IVPROC piglit_dispatch_glRasterPos3iv = stub_glRasterPos3iv;

static void*
resolve_glRasterPos3s(void)
{
	/* glRasterPos3s (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRasterPos3s", 10);
	}

	unsupported("glRasterPos3s");
	return piglit_dispatch_glRasterPos3s;
}

static void APIENTRY
stub_glRasterPos3s(GLshort x, GLshort y, GLshort z)
{
	check_initialized();
	piglit_dispatch_glRasterPos3s = resolve_glRasterPos3s();
	piglit_dispatch_glRasterPos3s(x, y, z);
}

PFNGLRASTERPOS3SPROC piglit_dispatch_glRasterPos3s = stub_glRasterPos3s;

static void*
resolve_glRasterPos3sv(void)
{
	/* glRasterPos3sv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRasterPos3sv", 10);
	}

	unsupported("glRasterPos3sv");
	return piglit_dispatch_glRasterPos3sv;
}

static void APIENTRY
stub_glRasterPos3sv(const GLshort * v)
{
	check_initialized();
	piglit_dispatch_glRasterPos3sv = resolve_glRasterPos3sv();
	piglit_dispatch_glRasterPos3sv(v);
}

PFNGLRASTERPOS3SVPROC piglit_dispatch_glRasterPos3sv = stub_glRasterPos3sv;

static void*
resolve_glRasterPos3xOES(void)
{
	/* glRasterPos3xOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glRasterPos3xOES");
	}

	unsupported("glRasterPos3xOES");
	return piglit_dispatch_glRasterPos3xOES;
}

static void APIENTRY
stub_glRasterPos3xOES(GLfixed x, GLfixed y, GLfixed z)
{
	check_initialized();
	piglit_dispatch_glRasterPos3xOES = resolve_glRasterPos3xOES();
	piglit_dispatch_glRasterPos3xOES(x, y, z);
}

PFNGLRASTERPOS3XOESPROC piglit_dispatch_glRasterPos3xOES = stub_glRasterPos3xOES;

static void*
resolve_glRasterPos3xvOES(void)
{
	/* glRasterPos3xvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glRasterPos3xvOES");
	}

	unsupported("glRasterPos3xvOES");
	return piglit_dispatch_glRasterPos3xvOES;
}

static void APIENTRY
stub_glRasterPos3xvOES(const GLfixed * coords)
{
	check_initialized();
	piglit_dispatch_glRasterPos3xvOES = resolve_glRasterPos3xvOES();
	piglit_dispatch_glRasterPos3xvOES(coords);
}

PFNGLRASTERPOS3XVOESPROC piglit_dispatch_glRasterPos3xvOES = stub_glRasterPos3xvOES;

static void*
resolve_glRasterPos4d(void)
{
	/* glRasterPos4d (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRasterPos4d", 10);
	}

	unsupported("glRasterPos4d");
	return piglit_dispatch_glRasterPos4d;
}

static void APIENTRY
stub_glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
	check_initialized();
	piglit_dispatch_glRasterPos4d = resolve_glRasterPos4d();
	piglit_dispatch_glRasterPos4d(x, y, z, w);
}

PFNGLRASTERPOS4DPROC piglit_dispatch_glRasterPos4d = stub_glRasterPos4d;

static void*
resolve_glRasterPos4dv(void)
{
	/* glRasterPos4dv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRasterPos4dv", 10);
	}

	unsupported("glRasterPos4dv");
	return piglit_dispatch_glRasterPos4dv;
}

static void APIENTRY
stub_glRasterPos4dv(const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glRasterPos4dv = resolve_glRasterPos4dv();
	piglit_dispatch_glRasterPos4dv(v);
}

PFNGLRASTERPOS4DVPROC piglit_dispatch_glRasterPos4dv = stub_glRasterPos4dv;

static void*
resolve_glRasterPos4f(void)
{
	/* glRasterPos4f (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRasterPos4f", 10);
	}

	unsupported("glRasterPos4f");
	return piglit_dispatch_glRasterPos4f;
}

static void APIENTRY
stub_glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
	check_initialized();
	piglit_dispatch_glRasterPos4f = resolve_glRasterPos4f();
	piglit_dispatch_glRasterPos4f(x, y, z, w);
}

PFNGLRASTERPOS4FPROC piglit_dispatch_glRasterPos4f = stub_glRasterPos4f;

static void*
resolve_glRasterPos4fv(void)
{
	/* glRasterPos4fv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRasterPos4fv", 10);
	}

	unsupported("glRasterPos4fv");
	return piglit_dispatch_glRasterPos4fv;
}

static void APIENTRY
stub_glRasterPos4fv(const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glRasterPos4fv = resolve_glRasterPos4fv();
	piglit_dispatch_glRasterPos4fv(v);
}

PFNGLRASTERPOS4FVPROC piglit_dispatch_glRasterPos4fv = stub_glRasterPos4fv;

static void*
resolve_glRasterPos4i(void)
{
	/* glRasterPos4i (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRasterPos4i", 10);
	}

	unsupported("glRasterPos4i");
	return piglit_dispatch_glRasterPos4i;
}

static void APIENTRY
stub_glRasterPos4i(GLint x, GLint y, GLint z, GLint w)
{
	check_initialized();
	piglit_dispatch_glRasterPos4i = resolve_glRasterPos4i();
	piglit_dispatch_glRasterPos4i(x, y, z, w);
}

PFNGLRASTERPOS4IPROC piglit_dispatch_glRasterPos4i = stub_glRasterPos4i;

static void*
resolve_glRasterPos4iv(void)
{
	/* glRasterPos4iv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRasterPos4iv", 10);
	}

	unsupported("glRasterPos4iv");
	return piglit_dispatch_glRasterPos4iv;
}

static void APIENTRY
stub_glRasterPos4iv(const GLint * v)
{
	check_initialized();
	piglit_dispatch_glRasterPos4iv = resolve_glRasterPos4iv();
	piglit_dispatch_glRasterPos4iv(v);
}

PFNGLRASTERPOS4IVPROC piglit_dispatch_glRasterPos4iv = stub_glRasterPos4iv;

static void*
resolve_glRasterPos4s(void)
{
	/* glRasterPos4s (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRasterPos4s", 10);
	}

	unsupported("glRasterPos4s");
	return piglit_dispatch_glRasterPos4s;
}

static void APIENTRY
stub_glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w)
{
	check_initialized();
	piglit_dispatch_glRasterPos4s = resolve_glRasterPos4s();
	piglit_dispatch_glRasterPos4s(x, y, z, w);
}

PFNGLRASTERPOS4SPROC piglit_dispatch_glRasterPos4s = stub_glRasterPos4s;

static void*
resolve_glRasterPos4sv(void)
{
	/* glRasterPos4sv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRasterPos4sv", 10);
	}

	unsupported("glRasterPos4sv");
	return piglit_dispatch_glRasterPos4sv;
}

static void APIENTRY
stub_glRasterPos4sv(const GLshort * v)
{
	check_initialized();
	piglit_dispatch_glRasterPos4sv = resolve_glRasterPos4sv();
	piglit_dispatch_glRasterPos4sv(v);
}

PFNGLRASTERPOS4SVPROC piglit_dispatch_glRasterPos4sv = stub_glRasterPos4sv;

static void*
resolve_glRasterPos4xOES(void)
{
	/* glRasterPos4xOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glRasterPos4xOES");
	}

	unsupported("glRasterPos4xOES");
	return piglit_dispatch_glRasterPos4xOES;
}

static void APIENTRY
stub_glRasterPos4xOES(GLfixed x, GLfixed y, GLfixed z, GLfixed w)
{
	check_initialized();
	piglit_dispatch_glRasterPos4xOES = resolve_glRasterPos4xOES();
	piglit_dispatch_glRasterPos4xOES(x, y, z, w);
}

PFNGLRASTERPOS4XOESPROC piglit_dispatch_glRasterPos4xOES = stub_glRasterPos4xOES;

static void*
resolve_glRasterPos4xvOES(void)
{
	/* glRasterPos4xvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glRasterPos4xvOES");
	}

	unsupported("glRasterPos4xvOES");
	return piglit_dispatch_glRasterPos4xvOES;
}

static void APIENTRY
stub_glRasterPos4xvOES(const GLfixed * coords)
{
	check_initialized();
	piglit_dispatch_glRasterPos4xvOES = resolve_glRasterPos4xvOES();
	piglit_dispatch_glRasterPos4xvOES(coords);
}

PFNGLRASTERPOS4XVOESPROC piglit_dispatch_glRasterPos4xvOES = stub_glRasterPos4xvOES;

static void*
resolve_glReadBuffer(void)
{
	/* glReadBuffer (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glReadBuffer", 10);
	}

	/* glReadBuffer (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glReadBuffer", 30);
	}

	unsupported("glReadBuffer");
	return piglit_dispatch_glReadBuffer;
}

static void APIENTRY
stub_glReadBuffer(GLenum mode)
{
	check_initialized();
	piglit_dispatch_glReadBuffer = resolve_glReadBuffer();
	piglit_dispatch_glReadBuffer(mode);
}

PFNGLREADBUFFERPROC piglit_dispatch_glReadBuffer = stub_glReadBuffer;

static void*
resolve_glReadBufferIndexedEXT(void)
{
	/* glReadBufferIndexedEXT (GL_EXT_multiview_draw_buffers) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_multiview_draw_buffers")) {
		return get_ext_proc("glReadBufferIndexedEXT");
	}

	unsupported("glReadBufferIndexedEXT");
	return piglit_dispatch_glReadBufferIndexedEXT;
}

static void APIENTRY
stub_glReadBufferIndexedEXT(GLenum src, GLint index)
{
	check_initialized();
	piglit_dispatch_glReadBufferIndexedEXT = resolve_glReadBufferIndexedEXT();
	piglit_dispatch_glReadBufferIndexedEXT(src, index);
}

PFNGLREADBUFFERINDEXEDEXTPROC piglit_dispatch_glReadBufferIndexedEXT = stub_glReadBufferIndexedEXT;

static void*
resolve_glReadBufferNV(void)
{
	/* glReadBufferNV (GL_NV_read_buffer) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_NV_read_buffer")) {
		return get_ext_proc("glReadBufferNV");
	}

	unsupported("glReadBufferNV");
	return piglit_dispatch_glReadBufferNV;
}

static void APIENTRY
stub_glReadBufferNV(GLenum mode)
{
	check_initialized();
	piglit_dispatch_glReadBufferNV = resolve_glReadBufferNV();
	piglit_dispatch_glReadBufferNV(mode);
}

PFNGLREADBUFFERNVPROC piglit_dispatch_glReadBufferNV = stub_glReadBufferNV;

static void*
resolve_glReadInstrumentsSGIX(void)
{
	/* glReadInstrumentsSGIX (GL_SGIX_instruments) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_instruments")) {
		return get_ext_proc("glReadInstrumentsSGIX");
	}

	unsupported("glReadInstrumentsSGIX");
	return piglit_dispatch_glReadInstrumentsSGIX;
}

static void APIENTRY
stub_glReadInstrumentsSGIX(GLint marker)
{
	check_initialized();
	piglit_dispatch_glReadInstrumentsSGIX = resolve_glReadInstrumentsSGIX();
	piglit_dispatch_glReadInstrumentsSGIX(marker);
}

PFNGLREADINSTRUMENTSSGIXPROC piglit_dispatch_glReadInstrumentsSGIX = stub_glReadInstrumentsSGIX;

static void*
resolve_glReadPixels(void)
{
	/* glReadPixels (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glReadPixels", 10);
	}

	/* glReadPixels (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glReadPixels", 10);
	}

	/* glReadPixels (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glReadPixels", 20);
	}

	unsupported("glReadPixels");
	return piglit_dispatch_glReadPixels;
}

static void APIENTRY
stub_glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels)
{
	check_initialized();
	piglit_dispatch_glReadPixels = resolve_glReadPixels();
	piglit_dispatch_glReadPixels(x, y, width, height, format, type, pixels);
}

PFNGLREADPIXELSPROC piglit_dispatch_glReadPixels = stub_glReadPixels;

static void*
resolve_glReadnPixelsARB(void)
{
	/* glReadnPixelsARB (GL_ARB_robustness) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_robustness")) {
		return get_ext_proc("glReadnPixelsARB");
	}

	unsupported("glReadnPixelsARB");
	return piglit_dispatch_glReadnPixelsARB;
}

static void APIENTRY
stub_glReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data)
{
	check_initialized();
	piglit_dispatch_glReadnPixelsARB = resolve_glReadnPixelsARB();
	piglit_dispatch_glReadnPixelsARB(x, y, width, height, format, type, bufSize, data);
}

PFNGLREADNPIXELSARBPROC piglit_dispatch_glReadnPixelsARB = stub_glReadnPixelsARB;

static void*
resolve_glReadnPixelsEXT(void)
{
	/* glReadnPixelsEXT (GL_EXT_robustness) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_robustness")) {
		return get_ext_proc("glReadnPixelsEXT");
	}

	unsupported("glReadnPixelsEXT");
	return piglit_dispatch_glReadnPixelsEXT;
}

static void APIENTRY
stub_glReadnPixelsEXT(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data)
{
	check_initialized();
	piglit_dispatch_glReadnPixelsEXT = resolve_glReadnPixelsEXT();
	piglit_dispatch_glReadnPixelsEXT(x, y, width, height, format, type, bufSize, data);
}

PFNGLREADNPIXELSEXTPROC piglit_dispatch_glReadnPixelsEXT = stub_glReadnPixelsEXT;

static void*
resolve_glRectd(void)
{
	/* glRectd (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRectd", 10);
	}

	unsupported("glRectd");
	return piglit_dispatch_glRectd;
}

static void APIENTRY
stub_glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)
{
	check_initialized();
	piglit_dispatch_glRectd = resolve_glRectd();
	piglit_dispatch_glRectd(x1, y1, x2, y2);
}

PFNGLRECTDPROC piglit_dispatch_glRectd = stub_glRectd;

static void*
resolve_glRectdv(void)
{
	/* glRectdv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRectdv", 10);
	}

	unsupported("glRectdv");
	return piglit_dispatch_glRectdv;
}

static void APIENTRY
stub_glRectdv(const GLdouble * v1, const GLdouble * v2)
{
	check_initialized();
	piglit_dispatch_glRectdv = resolve_glRectdv();
	piglit_dispatch_glRectdv(v1, v2);
}

PFNGLRECTDVPROC piglit_dispatch_glRectdv = stub_glRectdv;

static void*
resolve_glRectf(void)
{
	/* glRectf (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRectf", 10);
	}

	unsupported("glRectf");
	return piglit_dispatch_glRectf;
}

static void APIENTRY
stub_glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)
{
	check_initialized();
	piglit_dispatch_glRectf = resolve_glRectf();
	piglit_dispatch_glRectf(x1, y1, x2, y2);
}

PFNGLRECTFPROC piglit_dispatch_glRectf = stub_glRectf;

static void*
resolve_glRectfv(void)
{
	/* glRectfv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRectfv", 10);
	}

	unsupported("glRectfv");
	return piglit_dispatch_glRectfv;
}

static void APIENTRY
stub_glRectfv(const GLfloat * v1, const GLfloat * v2)
{
	check_initialized();
	piglit_dispatch_glRectfv = resolve_glRectfv();
	piglit_dispatch_glRectfv(v1, v2);
}

PFNGLRECTFVPROC piglit_dispatch_glRectfv = stub_glRectfv;

static void*
resolve_glRecti(void)
{
	/* glRecti (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRecti", 10);
	}

	unsupported("glRecti");
	return piglit_dispatch_glRecti;
}

static void APIENTRY
stub_glRecti(GLint x1, GLint y1, GLint x2, GLint y2)
{
	check_initialized();
	piglit_dispatch_glRecti = resolve_glRecti();
	piglit_dispatch_glRecti(x1, y1, x2, y2);
}

PFNGLRECTIPROC piglit_dispatch_glRecti = stub_glRecti;

static void*
resolve_glRectiv(void)
{
	/* glRectiv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRectiv", 10);
	}

	unsupported("glRectiv");
	return piglit_dispatch_glRectiv;
}

static void APIENTRY
stub_glRectiv(const GLint * v1, const GLint * v2)
{
	check_initialized();
	piglit_dispatch_glRectiv = resolve_glRectiv();
	piglit_dispatch_glRectiv(v1, v2);
}

PFNGLRECTIVPROC piglit_dispatch_glRectiv = stub_glRectiv;

static void*
resolve_glRects(void)
{
	/* glRects (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRects", 10);
	}

	unsupported("glRects");
	return piglit_dispatch_glRects;
}

static void APIENTRY
stub_glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2)
{
	check_initialized();
	piglit_dispatch_glRects = resolve_glRects();
	piglit_dispatch_glRects(x1, y1, x2, y2);
}

PFNGLRECTSPROC piglit_dispatch_glRects = stub_glRects;

static void*
resolve_glRectsv(void)
{
	/* glRectsv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRectsv", 10);
	}

	unsupported("glRectsv");
	return piglit_dispatch_glRectsv;
}

static void APIENTRY
stub_glRectsv(const GLshort * v1, const GLshort * v2)
{
	check_initialized();
	piglit_dispatch_glRectsv = resolve_glRectsv();
	piglit_dispatch_glRectsv(v1, v2);
}

PFNGLRECTSVPROC piglit_dispatch_glRectsv = stub_glRectsv;

static void*
resolve_glRectxOES(void)
{
	/* glRectxOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glRectxOES");
	}

	unsupported("glRectxOES");
	return piglit_dispatch_glRectxOES;
}

static void APIENTRY
stub_glRectxOES(GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2)
{
	check_initialized();
	piglit_dispatch_glRectxOES = resolve_glRectxOES();
	piglit_dispatch_glRectxOES(x1, y1, x2, y2);
}

PFNGLRECTXOESPROC piglit_dispatch_glRectxOES = stub_glRectxOES;

static void*
resolve_glRectxvOES(void)
{
	/* glRectxvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glRectxvOES");
	}

	unsupported("glRectxvOES");
	return piglit_dispatch_glRectxvOES;
}

static void APIENTRY
stub_glRectxvOES(const GLfixed * v1, const GLfixed * v2)
{
	check_initialized();
	piglit_dispatch_glRectxvOES = resolve_glRectxvOES();
	piglit_dispatch_glRectxvOES(v1, v2);
}

PFNGLRECTXVOESPROC piglit_dispatch_glRectxvOES = stub_glRectxvOES;

static void*
resolve_glReferencePlaneSGIX(void)
{
	/* glReferencePlaneSGIX (GL_SGIX_reference_plane) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_reference_plane")) {
		return get_ext_proc("glReferencePlaneSGIX");
	}

	unsupported("glReferencePlaneSGIX");
	return piglit_dispatch_glReferencePlaneSGIX;
}

static void APIENTRY
stub_glReferencePlaneSGIX(const GLdouble * equation)
{
	check_initialized();
	piglit_dispatch_glReferencePlaneSGIX = resolve_glReferencePlaneSGIX();
	piglit_dispatch_glReferencePlaneSGIX(equation);
}

PFNGLREFERENCEPLANESGIXPROC piglit_dispatch_glReferencePlaneSGIX = stub_glReferencePlaneSGIX;

static void*
resolve_glReleaseShaderCompiler(void)
{
	/* glReleaseShaderCompiler (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glReleaseShaderCompiler", 41);
	}

	/* glReleaseShaderCompiler (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glReleaseShaderCompiler", 20);
	}

	/* glReleaseShaderCompiler (GL_ARB_ES2_compatibility) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_ES2_compatibility")) {
		return get_ext_proc("glReleaseShaderCompiler");
	}

	unsupported("glReleaseShaderCompiler");
	return piglit_dispatch_glReleaseShaderCompiler;
}

static void APIENTRY
stub_glReleaseShaderCompiler()
{
	check_initialized();
	piglit_dispatch_glReleaseShaderCompiler = resolve_glReleaseShaderCompiler();
	piglit_dispatch_glReleaseShaderCompiler();
}

PFNGLRELEASESHADERCOMPILERPROC piglit_dispatch_glReleaseShaderCompiler = stub_glReleaseShaderCompiler;

static void*
resolve_glRenderMode(void)
{
	/* glRenderMode (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRenderMode", 10);
	}

	unsupported("glRenderMode");
	return piglit_dispatch_glRenderMode;
}

static GLint APIENTRY
stub_glRenderMode(GLenum mode)
{
	check_initialized();
	piglit_dispatch_glRenderMode = resolve_glRenderMode();
	return piglit_dispatch_glRenderMode(mode);
}

PFNGLRENDERMODEPROC piglit_dispatch_glRenderMode = stub_glRenderMode;

static void*
resolve_glRenderbufferStorage(void)
{
	/* glRenderbufferStorage (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glRenderbufferStorage", 30);
	}

	/* glRenderbufferStorage (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glRenderbufferStorage", 20);
	}

	/* glRenderbufferStorage (GL_ARB_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_framebuffer_object")) {
		return get_ext_proc("glRenderbufferStorage");
	}

	/* glRenderbufferStorageEXT (GL_EXT_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_framebuffer_object")) {
		return get_ext_proc("glRenderbufferStorageEXT");
	}

	unsupported("glRenderbufferStorage");
	return piglit_dispatch_glRenderbufferStorage;
}

static void APIENTRY
stub_glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
	check_initialized();
	piglit_dispatch_glRenderbufferStorage = resolve_glRenderbufferStorage();
	piglit_dispatch_glRenderbufferStorage(target, internalformat, width, height);
}

PFNGLRENDERBUFFERSTORAGEPROC piglit_dispatch_glRenderbufferStorage = stub_glRenderbufferStorage;

static void*
resolve_glRenderbufferStorageMultisample(void)
{
	/* glRenderbufferStorageMultisample (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glRenderbufferStorageMultisample", 30);
	}

	/* glRenderbufferStorageMultisample (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glRenderbufferStorageMultisample", 30);
	}

	/* glRenderbufferStorageMultisample (GL_ARB_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_framebuffer_object")) {
		return get_ext_proc("glRenderbufferStorageMultisample");
	}

	/* glRenderbufferStorageMultisampleEXT (GL_EXT_framebuffer_multisample) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_framebuffer_multisample")) {
		return get_ext_proc("glRenderbufferStorageMultisampleEXT");
	}

	/* glRenderbufferStorageMultisampleEXT (GL_EXT_multisampled_render_to_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_multisampled_render_to_texture")) {
		return get_ext_proc("glRenderbufferStorageMultisampleEXT");
	}

	/* glRenderbufferStorageMultisampleNV (GL_NV_framebuffer_multisample) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_NV_framebuffer_multisample")) {
		return get_ext_proc("glRenderbufferStorageMultisampleNV");
	}

	unsupported("glRenderbufferStorageMultisample");
	return piglit_dispatch_glRenderbufferStorageMultisample;
}

static void APIENTRY
stub_glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
	check_initialized();
	piglit_dispatch_glRenderbufferStorageMultisample = resolve_glRenderbufferStorageMultisample();
	piglit_dispatch_glRenderbufferStorageMultisample(target, samples, internalformat, width, height);
}

PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC piglit_dispatch_glRenderbufferStorageMultisample = stub_glRenderbufferStorageMultisample;

static void*
resolve_glRenderbufferStorageMultisampleANGLE(void)
{
	/* glRenderbufferStorageMultisampleANGLE (GL_ANGLE_framebuffer_multisample) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_ANGLE_framebuffer_multisample")) {
		return get_ext_proc("glRenderbufferStorageMultisampleANGLE");
	}

	unsupported("glRenderbufferStorageMultisampleANGLE");
	return piglit_dispatch_glRenderbufferStorageMultisampleANGLE;
}

static void APIENTRY
stub_glRenderbufferStorageMultisampleANGLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
	check_initialized();
	piglit_dispatch_glRenderbufferStorageMultisampleANGLE = resolve_glRenderbufferStorageMultisampleANGLE();
	piglit_dispatch_glRenderbufferStorageMultisampleANGLE(target, samples, internalformat, width, height);
}

PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC piglit_dispatch_glRenderbufferStorageMultisampleANGLE = stub_glRenderbufferStorageMultisampleANGLE;

static void*
resolve_glRenderbufferStorageMultisampleAPPLE(void)
{
	/* glRenderbufferStorageMultisampleAPPLE (GL_APPLE_framebuffer_multisample) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_APPLE_framebuffer_multisample")) {
		return get_ext_proc("glRenderbufferStorageMultisampleAPPLE");
	}

	unsupported("glRenderbufferStorageMultisampleAPPLE");
	return piglit_dispatch_glRenderbufferStorageMultisampleAPPLE;
}

static void APIENTRY
stub_glRenderbufferStorageMultisampleAPPLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
	check_initialized();
	piglit_dispatch_glRenderbufferStorageMultisampleAPPLE = resolve_glRenderbufferStorageMultisampleAPPLE();
	piglit_dispatch_glRenderbufferStorageMultisampleAPPLE(target, samples, internalformat, width, height);
}

PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC piglit_dispatch_glRenderbufferStorageMultisampleAPPLE = stub_glRenderbufferStorageMultisampleAPPLE;

static void*
resolve_glRenderbufferStorageMultisampleCoverageNV(void)
{
	/* glRenderbufferStorageMultisampleCoverageNV (GL_NV_framebuffer_multisample_coverage) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_framebuffer_multisample_coverage")) {
		return get_ext_proc("glRenderbufferStorageMultisampleCoverageNV");
	}

	unsupported("glRenderbufferStorageMultisampleCoverageNV");
	return piglit_dispatch_glRenderbufferStorageMultisampleCoverageNV;
}

static void APIENTRY
stub_glRenderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
{
	check_initialized();
	piglit_dispatch_glRenderbufferStorageMultisampleCoverageNV = resolve_glRenderbufferStorageMultisampleCoverageNV();
	piglit_dispatch_glRenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height);
}

PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC piglit_dispatch_glRenderbufferStorageMultisampleCoverageNV = stub_glRenderbufferStorageMultisampleCoverageNV;

static void*
resolve_glRenderbufferStorageMultisampleIMG(void)
{
	/* glRenderbufferStorageMultisampleIMG (GL_IMG_multisampled_render_to_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_IMG_multisampled_render_to_texture")) {
		return get_ext_proc("glRenderbufferStorageMultisampleIMG");
	}

	unsupported("glRenderbufferStorageMultisampleIMG");
	return piglit_dispatch_glRenderbufferStorageMultisampleIMG;
}

static void APIENTRY
stub_glRenderbufferStorageMultisampleIMG(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
	check_initialized();
	piglit_dispatch_glRenderbufferStorageMultisampleIMG = resolve_glRenderbufferStorageMultisampleIMG();
	piglit_dispatch_glRenderbufferStorageMultisampleIMG(target, samples, internalformat, width, height);
}

PFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC piglit_dispatch_glRenderbufferStorageMultisampleIMG = stub_glRenderbufferStorageMultisampleIMG;

static void*
resolve_glRenderbufferStorageOES(void)
{
	/* glRenderbufferStorageOES (GL_OES_framebuffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_framebuffer_object")) {
		return get_ext_proc("glRenderbufferStorageOES");
	}

	unsupported("glRenderbufferStorageOES");
	return piglit_dispatch_glRenderbufferStorageOES;
}

static void APIENTRY
stub_glRenderbufferStorageOES(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
	check_initialized();
	piglit_dispatch_glRenderbufferStorageOES = resolve_glRenderbufferStorageOES();
	piglit_dispatch_glRenderbufferStorageOES(target, internalformat, width, height);
}

PFNGLRENDERBUFFERSTORAGEOESPROC piglit_dispatch_glRenderbufferStorageOES = stub_glRenderbufferStorageOES;

static void*
resolve_glReplacementCodePointerSUN(void)
{
	/* glReplacementCodePointerSUN (GL_SUN_triangle_list) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_triangle_list")) {
		return get_ext_proc("glReplacementCodePointerSUN");
	}

	unsupported("glReplacementCodePointerSUN");
	return piglit_dispatch_glReplacementCodePointerSUN;
}

static void APIENTRY
stub_glReplacementCodePointerSUN(GLenum type, GLsizei stride, const void ** pointer)
{
	check_initialized();
	piglit_dispatch_glReplacementCodePointerSUN = resolve_glReplacementCodePointerSUN();
	piglit_dispatch_glReplacementCodePointerSUN(type, stride, pointer);
}

PFNGLREPLACEMENTCODEPOINTERSUNPROC piglit_dispatch_glReplacementCodePointerSUN = stub_glReplacementCodePointerSUN;

static void*
resolve_glReplacementCodeubSUN(void)
{
	/* glReplacementCodeubSUN (GL_SUN_triangle_list) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_triangle_list")) {
		return get_ext_proc("glReplacementCodeubSUN");
	}

	unsupported("glReplacementCodeubSUN");
	return piglit_dispatch_glReplacementCodeubSUN;
}

static void APIENTRY
stub_glReplacementCodeubSUN(GLubyte code)
{
	check_initialized();
	piglit_dispatch_glReplacementCodeubSUN = resolve_glReplacementCodeubSUN();
	piglit_dispatch_glReplacementCodeubSUN(code);
}

PFNGLREPLACEMENTCODEUBSUNPROC piglit_dispatch_glReplacementCodeubSUN = stub_glReplacementCodeubSUN;

static void*
resolve_glReplacementCodeubvSUN(void)
{
	/* glReplacementCodeubvSUN (GL_SUN_triangle_list) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_triangle_list")) {
		return get_ext_proc("glReplacementCodeubvSUN");
	}

	unsupported("glReplacementCodeubvSUN");
	return piglit_dispatch_glReplacementCodeubvSUN;
}

static void APIENTRY
stub_glReplacementCodeubvSUN(const GLubyte * code)
{
	check_initialized();
	piglit_dispatch_glReplacementCodeubvSUN = resolve_glReplacementCodeubvSUN();
	piglit_dispatch_glReplacementCodeubvSUN(code);
}

PFNGLREPLACEMENTCODEUBVSUNPROC piglit_dispatch_glReplacementCodeubvSUN = stub_glReplacementCodeubvSUN;

static void*
resolve_glReplacementCodeuiColor3fVertex3fSUN(void)
{
	/* glReplacementCodeuiColor3fVertex3fSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glReplacementCodeuiColor3fVertex3fSUN");
	}

	unsupported("glReplacementCodeuiColor3fVertex3fSUN");
	return piglit_dispatch_glReplacementCodeuiColor3fVertex3fSUN;
}

static void APIENTRY
stub_glReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
{
	check_initialized();
	piglit_dispatch_glReplacementCodeuiColor3fVertex3fSUN = resolve_glReplacementCodeuiColor3fVertex3fSUN();
	piglit_dispatch_glReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z);
}

PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC piglit_dispatch_glReplacementCodeuiColor3fVertex3fSUN = stub_glReplacementCodeuiColor3fVertex3fSUN;

static void*
resolve_glReplacementCodeuiColor3fVertex3fvSUN(void)
{
	/* glReplacementCodeuiColor3fVertex3fvSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glReplacementCodeuiColor3fVertex3fvSUN");
	}

	unsupported("glReplacementCodeuiColor3fVertex3fvSUN");
	return piglit_dispatch_glReplacementCodeuiColor3fVertex3fvSUN;
}

static void APIENTRY
stub_glReplacementCodeuiColor3fVertex3fvSUN(const GLuint * rc, const GLfloat * c, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glReplacementCodeuiColor3fVertex3fvSUN = resolve_glReplacementCodeuiColor3fVertex3fvSUN();
	piglit_dispatch_glReplacementCodeuiColor3fVertex3fvSUN(rc, c, v);
}

PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC piglit_dispatch_glReplacementCodeuiColor3fVertex3fvSUN = stub_glReplacementCodeuiColor3fVertex3fvSUN;

static void*
resolve_glReplacementCodeuiColor4fNormal3fVertex3fSUN(void)
{
	/* glReplacementCodeuiColor4fNormal3fVertex3fSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glReplacementCodeuiColor4fNormal3fVertex3fSUN");
	}

	unsupported("glReplacementCodeuiColor4fNormal3fVertex3fSUN");
	return piglit_dispatch_glReplacementCodeuiColor4fNormal3fVertex3fSUN;
}

static void APIENTRY
stub_glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
	check_initialized();
	piglit_dispatch_glReplacementCodeuiColor4fNormal3fVertex3fSUN = resolve_glReplacementCodeuiColor4fNormal3fVertex3fSUN();
	piglit_dispatch_glReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z);
}

PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC piglit_dispatch_glReplacementCodeuiColor4fNormal3fVertex3fSUN = stub_glReplacementCodeuiColor4fNormal3fVertex3fSUN;

static void*
resolve_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(void)
{
	/* glReplacementCodeuiColor4fNormal3fVertex3fvSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glReplacementCodeuiColor4fNormal3fVertex3fvSUN");
	}

	unsupported("glReplacementCodeuiColor4fNormal3fVertex3fvSUN");
	return piglit_dispatch_glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
}

static void APIENTRY
stub_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * c, const GLfloat * n, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glReplacementCodeuiColor4fNormal3fVertex3fvSUN = resolve_glReplacementCodeuiColor4fNormal3fVertex3fvSUN();
	piglit_dispatch_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v);
}

PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC piglit_dispatch_glReplacementCodeuiColor4fNormal3fVertex3fvSUN = stub_glReplacementCodeuiColor4fNormal3fVertex3fvSUN;

static void*
resolve_glReplacementCodeuiColor4ubVertex3fSUN(void)
{
	/* glReplacementCodeuiColor4ubVertex3fSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glReplacementCodeuiColor4ubVertex3fSUN");
	}

	unsupported("glReplacementCodeuiColor4ubVertex3fSUN");
	return piglit_dispatch_glReplacementCodeuiColor4ubVertex3fSUN;
}

static void APIENTRY
stub_glReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
{
	check_initialized();
	piglit_dispatch_glReplacementCodeuiColor4ubVertex3fSUN = resolve_glReplacementCodeuiColor4ubVertex3fSUN();
	piglit_dispatch_glReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z);
}

PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC piglit_dispatch_glReplacementCodeuiColor4ubVertex3fSUN = stub_glReplacementCodeuiColor4ubVertex3fSUN;

static void*
resolve_glReplacementCodeuiColor4ubVertex3fvSUN(void)
{
	/* glReplacementCodeuiColor4ubVertex3fvSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glReplacementCodeuiColor4ubVertex3fvSUN");
	}

	unsupported("glReplacementCodeuiColor4ubVertex3fvSUN");
	return piglit_dispatch_glReplacementCodeuiColor4ubVertex3fvSUN;
}

static void APIENTRY
stub_glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint * rc, const GLubyte * c, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glReplacementCodeuiColor4ubVertex3fvSUN = resolve_glReplacementCodeuiColor4ubVertex3fvSUN();
	piglit_dispatch_glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v);
}

PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC piglit_dispatch_glReplacementCodeuiColor4ubVertex3fvSUN = stub_glReplacementCodeuiColor4ubVertex3fvSUN;

static void*
resolve_glReplacementCodeuiNormal3fVertex3fSUN(void)
{
	/* glReplacementCodeuiNormal3fVertex3fSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glReplacementCodeuiNormal3fVertex3fSUN");
	}

	unsupported("glReplacementCodeuiNormal3fVertex3fSUN");
	return piglit_dispatch_glReplacementCodeuiNormal3fVertex3fSUN;
}

static void APIENTRY
stub_glReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
	check_initialized();
	piglit_dispatch_glReplacementCodeuiNormal3fVertex3fSUN = resolve_glReplacementCodeuiNormal3fVertex3fSUN();
	piglit_dispatch_glReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z);
}

PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC piglit_dispatch_glReplacementCodeuiNormal3fVertex3fSUN = stub_glReplacementCodeuiNormal3fVertex3fSUN;

static void*
resolve_glReplacementCodeuiNormal3fVertex3fvSUN(void)
{
	/* glReplacementCodeuiNormal3fVertex3fvSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glReplacementCodeuiNormal3fVertex3fvSUN");
	}

	unsupported("glReplacementCodeuiNormal3fVertex3fvSUN");
	return piglit_dispatch_glReplacementCodeuiNormal3fVertex3fvSUN;
}

static void APIENTRY
stub_glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * n, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glReplacementCodeuiNormal3fVertex3fvSUN = resolve_glReplacementCodeuiNormal3fVertex3fvSUN();
	piglit_dispatch_glReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v);
}

PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC piglit_dispatch_glReplacementCodeuiNormal3fVertex3fvSUN = stub_glReplacementCodeuiNormal3fVertex3fvSUN;

static void*
resolve_glReplacementCodeuiSUN(void)
{
	/* glReplacementCodeuiSUN (GL_SUN_triangle_list) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_triangle_list")) {
		return get_ext_proc("glReplacementCodeuiSUN");
	}

	unsupported("glReplacementCodeuiSUN");
	return piglit_dispatch_glReplacementCodeuiSUN;
}

static void APIENTRY
stub_glReplacementCodeuiSUN(GLuint code)
{
	check_initialized();
	piglit_dispatch_glReplacementCodeuiSUN = resolve_glReplacementCodeuiSUN();
	piglit_dispatch_glReplacementCodeuiSUN(code);
}

PFNGLREPLACEMENTCODEUISUNPROC piglit_dispatch_glReplacementCodeuiSUN = stub_glReplacementCodeuiSUN;

static void*
resolve_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(void)
{
	/* glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN");
	}

	unsupported("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN");
	return piglit_dispatch_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
}

static void APIENTRY
stub_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
	check_initialized();
	piglit_dispatch_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = resolve_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN();
	piglit_dispatch_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
}

PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC piglit_dispatch_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = stub_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;

static void*
resolve_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(void)
{
	/* glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN");
	}

	unsupported("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN");
	return piglit_dispatch_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
}

static void APIENTRY
stub_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = resolve_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN();
	piglit_dispatch_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v);
}

PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC piglit_dispatch_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = stub_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;

static void*
resolve_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(void)
{
	/* glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN");
	}

	unsupported("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN");
	return piglit_dispatch_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
}

static void APIENTRY
stub_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
	check_initialized();
	piglit_dispatch_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = resolve_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN();
	piglit_dispatch_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z);
}

PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC piglit_dispatch_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = stub_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;

static void*
resolve_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(void)
{
	/* glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN");
	}

	unsupported("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN");
	return piglit_dispatch_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
}

static void APIENTRY
stub_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * tc, const GLfloat * n, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = resolve_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN();
	piglit_dispatch_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v);
}

PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC piglit_dispatch_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = stub_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;

static void*
resolve_glReplacementCodeuiTexCoord2fVertex3fSUN(void)
{
	/* glReplacementCodeuiTexCoord2fVertex3fSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glReplacementCodeuiTexCoord2fVertex3fSUN");
	}

	unsupported("glReplacementCodeuiTexCoord2fVertex3fSUN");
	return piglit_dispatch_glReplacementCodeuiTexCoord2fVertex3fSUN;
}

static void APIENTRY
stub_glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
{
	check_initialized();
	piglit_dispatch_glReplacementCodeuiTexCoord2fVertex3fSUN = resolve_glReplacementCodeuiTexCoord2fVertex3fSUN();
	piglit_dispatch_glReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z);
}

PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC piglit_dispatch_glReplacementCodeuiTexCoord2fVertex3fSUN = stub_glReplacementCodeuiTexCoord2fVertex3fSUN;

static void*
resolve_glReplacementCodeuiTexCoord2fVertex3fvSUN(void)
{
	/* glReplacementCodeuiTexCoord2fVertex3fvSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glReplacementCodeuiTexCoord2fVertex3fvSUN");
	}

	unsupported("glReplacementCodeuiTexCoord2fVertex3fvSUN");
	return piglit_dispatch_glReplacementCodeuiTexCoord2fVertex3fvSUN;
}

static void APIENTRY
stub_glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint * rc, const GLfloat * tc, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glReplacementCodeuiTexCoord2fVertex3fvSUN = resolve_glReplacementCodeuiTexCoord2fVertex3fvSUN();
	piglit_dispatch_glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v);
}

PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC piglit_dispatch_glReplacementCodeuiTexCoord2fVertex3fvSUN = stub_glReplacementCodeuiTexCoord2fVertex3fvSUN;

static void*
resolve_glReplacementCodeuiVertex3fSUN(void)
{
	/* glReplacementCodeuiVertex3fSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glReplacementCodeuiVertex3fSUN");
	}

	unsupported("glReplacementCodeuiVertex3fSUN");
	return piglit_dispatch_glReplacementCodeuiVertex3fSUN;
}

static void APIENTRY
stub_glReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z)
{
	check_initialized();
	piglit_dispatch_glReplacementCodeuiVertex3fSUN = resolve_glReplacementCodeuiVertex3fSUN();
	piglit_dispatch_glReplacementCodeuiVertex3fSUN(rc, x, y, z);
}

PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC piglit_dispatch_glReplacementCodeuiVertex3fSUN = stub_glReplacementCodeuiVertex3fSUN;

static void*
resolve_glReplacementCodeuiVertex3fvSUN(void)
{
	/* glReplacementCodeuiVertex3fvSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glReplacementCodeuiVertex3fvSUN");
	}

	unsupported("glReplacementCodeuiVertex3fvSUN");
	return piglit_dispatch_glReplacementCodeuiVertex3fvSUN;
}

static void APIENTRY
stub_glReplacementCodeuiVertex3fvSUN(const GLuint * rc, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glReplacementCodeuiVertex3fvSUN = resolve_glReplacementCodeuiVertex3fvSUN();
	piglit_dispatch_glReplacementCodeuiVertex3fvSUN(rc, v);
}

PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC piglit_dispatch_glReplacementCodeuiVertex3fvSUN = stub_glReplacementCodeuiVertex3fvSUN;

static void*
resolve_glReplacementCodeuivSUN(void)
{
	/* glReplacementCodeuivSUN (GL_SUN_triangle_list) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_triangle_list")) {
		return get_ext_proc("glReplacementCodeuivSUN");
	}

	unsupported("glReplacementCodeuivSUN");
	return piglit_dispatch_glReplacementCodeuivSUN;
}

static void APIENTRY
stub_glReplacementCodeuivSUN(const GLuint * code)
{
	check_initialized();
	piglit_dispatch_glReplacementCodeuivSUN = resolve_glReplacementCodeuivSUN();
	piglit_dispatch_glReplacementCodeuivSUN(code);
}

PFNGLREPLACEMENTCODEUIVSUNPROC piglit_dispatch_glReplacementCodeuivSUN = stub_glReplacementCodeuivSUN;

static void*
resolve_glReplacementCodeusSUN(void)
{
	/* glReplacementCodeusSUN (GL_SUN_triangle_list) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_triangle_list")) {
		return get_ext_proc("glReplacementCodeusSUN");
	}

	unsupported("glReplacementCodeusSUN");
	return piglit_dispatch_glReplacementCodeusSUN;
}

static void APIENTRY
stub_glReplacementCodeusSUN(GLushort code)
{
	check_initialized();
	piglit_dispatch_glReplacementCodeusSUN = resolve_glReplacementCodeusSUN();
	piglit_dispatch_glReplacementCodeusSUN(code);
}

PFNGLREPLACEMENTCODEUSSUNPROC piglit_dispatch_glReplacementCodeusSUN = stub_glReplacementCodeusSUN;

static void*
resolve_glReplacementCodeusvSUN(void)
{
	/* glReplacementCodeusvSUN (GL_SUN_triangle_list) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_triangle_list")) {
		return get_ext_proc("glReplacementCodeusvSUN");
	}

	unsupported("glReplacementCodeusvSUN");
	return piglit_dispatch_glReplacementCodeusvSUN;
}

static void APIENTRY
stub_glReplacementCodeusvSUN(const GLushort * code)
{
	check_initialized();
	piglit_dispatch_glReplacementCodeusvSUN = resolve_glReplacementCodeusvSUN();
	piglit_dispatch_glReplacementCodeusvSUN(code);
}

PFNGLREPLACEMENTCODEUSVSUNPROC piglit_dispatch_glReplacementCodeusvSUN = stub_glReplacementCodeusvSUN;

static void*
resolve_glRequestResidentProgramsNV(void)
{
	/* glRequestResidentProgramsNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glRequestResidentProgramsNV");
	}

	unsupported("glRequestResidentProgramsNV");
	return piglit_dispatch_glRequestResidentProgramsNV;
}

static void APIENTRY
stub_glRequestResidentProgramsNV(GLsizei n, const GLuint * programs)
{
	check_initialized();
	piglit_dispatch_glRequestResidentProgramsNV = resolve_glRequestResidentProgramsNV();
	piglit_dispatch_glRequestResidentProgramsNV(n, programs);
}

PFNGLREQUESTRESIDENTPROGRAMSNVPROC piglit_dispatch_glRequestResidentProgramsNV = stub_glRequestResidentProgramsNV;

static void*
resolve_glResetHistogram(void)
{
	/* glResetHistogram (GL_ARB_imaging) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_imaging")) {
		return get_ext_proc("glResetHistogram");
	}

	/* glResetHistogramEXT (GL_EXT_histogram) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_histogram")) {
		return get_ext_proc("glResetHistogramEXT");
	}

	unsupported("glResetHistogram");
	return piglit_dispatch_glResetHistogram;
}

static void APIENTRY
stub_glResetHistogram(GLenum target)
{
	check_initialized();
	piglit_dispatch_glResetHistogram = resolve_glResetHistogram();
	piglit_dispatch_glResetHistogram(target);
}

PFNGLRESETHISTOGRAMPROC piglit_dispatch_glResetHistogram = stub_glResetHistogram;

static void*
resolve_glResetMinmax(void)
{
	/* glResetMinmax (GL_ARB_imaging) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_imaging")) {
		return get_ext_proc("glResetMinmax");
	}

	/* glResetMinmaxEXT (GL_EXT_histogram) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_histogram")) {
		return get_ext_proc("glResetMinmaxEXT");
	}

	unsupported("glResetMinmax");
	return piglit_dispatch_glResetMinmax;
}

static void APIENTRY
stub_glResetMinmax(GLenum target)
{
	check_initialized();
	piglit_dispatch_glResetMinmax = resolve_glResetMinmax();
	piglit_dispatch_glResetMinmax(target);
}

PFNGLRESETMINMAXPROC piglit_dispatch_glResetMinmax = stub_glResetMinmax;

static void*
resolve_glResizeBuffersMESA(void)
{
	/* glResizeBuffersMESA (GL_MESA_resize_buffers) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_MESA_resize_buffers")) {
		return get_ext_proc("glResizeBuffersMESA");
	}

	unsupported("glResizeBuffersMESA");
	return piglit_dispatch_glResizeBuffersMESA;
}

static void APIENTRY
stub_glResizeBuffersMESA()
{
	check_initialized();
	piglit_dispatch_glResizeBuffersMESA = resolve_glResizeBuffersMESA();
	piglit_dispatch_glResizeBuffersMESA();
}

PFNGLRESIZEBUFFERSMESAPROC piglit_dispatch_glResizeBuffersMESA = stub_glResizeBuffersMESA;

static void*
resolve_glResolveMultisampleFramebufferAPPLE(void)
{
	/* glResolveMultisampleFramebufferAPPLE (GL_APPLE_framebuffer_multisample) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_APPLE_framebuffer_multisample")) {
		return get_ext_proc("glResolveMultisampleFramebufferAPPLE");
	}

	unsupported("glResolveMultisampleFramebufferAPPLE");
	return piglit_dispatch_glResolveMultisampleFramebufferAPPLE;
}

static void APIENTRY
stub_glResolveMultisampleFramebufferAPPLE()
{
	check_initialized();
	piglit_dispatch_glResolveMultisampleFramebufferAPPLE = resolve_glResolveMultisampleFramebufferAPPLE();
	piglit_dispatch_glResolveMultisampleFramebufferAPPLE();
}

PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC piglit_dispatch_glResolveMultisampleFramebufferAPPLE = stub_glResolveMultisampleFramebufferAPPLE;

static void*
resolve_glResumeTransformFeedback(void)
{
	/* glResumeTransformFeedback (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glResumeTransformFeedback", 40);
	}

	/* glResumeTransformFeedback (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glResumeTransformFeedback", 30);
	}

	/* glResumeTransformFeedback (GL_ARB_transform_feedback2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_transform_feedback2")) {
		return get_ext_proc("glResumeTransformFeedback");
	}

	/* glResumeTransformFeedbackNV (GL_NV_transform_feedback2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_transform_feedback2")) {
		return get_ext_proc("glResumeTransformFeedbackNV");
	}

	unsupported("glResumeTransformFeedback");
	return piglit_dispatch_glResumeTransformFeedback;
}

static void APIENTRY
stub_glResumeTransformFeedback()
{
	check_initialized();
	piglit_dispatch_glResumeTransformFeedback = resolve_glResumeTransformFeedback();
	piglit_dispatch_glResumeTransformFeedback();
}

PFNGLRESUMETRANSFORMFEEDBACKPROC piglit_dispatch_glResumeTransformFeedback = stub_glResumeTransformFeedback;

static void*
resolve_glRotated(void)
{
	/* glRotated (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRotated", 10);
	}

	unsupported("glRotated");
	return piglit_dispatch_glRotated;
}

static void APIENTRY
stub_glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
	check_initialized();
	piglit_dispatch_glRotated = resolve_glRotated();
	piglit_dispatch_glRotated(angle, x, y, z);
}

PFNGLROTATEDPROC piglit_dispatch_glRotated = stub_glRotated;

static void*
resolve_glRotatef(void)
{
	/* glRotatef (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glRotatef", 10);
	}

	/* glRotatef (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glRotatef", 10);
	}

	unsupported("glRotatef");
	return piglit_dispatch_glRotatef;
}

static void APIENTRY
stub_glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
	check_initialized();
	piglit_dispatch_glRotatef = resolve_glRotatef();
	piglit_dispatch_glRotatef(angle, x, y, z);
}

PFNGLROTATEFPROC piglit_dispatch_glRotatef = stub_glRotatef;

static void*
resolve_glRotatex(void)
{
	/* glRotatex (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glRotatex", 10);
	}

	unsupported("glRotatex");
	return piglit_dispatch_glRotatex;
}

static void APIENTRY
stub_glRotatex(GLfixed angle, GLfixed x, GLfixed y, GLfixed z)
{
	check_initialized();
	piglit_dispatch_glRotatex = resolve_glRotatex();
	piglit_dispatch_glRotatex(angle, x, y, z);
}

PFNGLROTATEXPROC piglit_dispatch_glRotatex = stub_glRotatex;

static void*
resolve_glRotatexOES(void)
{
	/* glRotatexOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glRotatexOES");
	}

	unsupported("glRotatexOES");
	return piglit_dispatch_glRotatexOES;
}

static void APIENTRY
stub_glRotatexOES(GLfixed angle, GLfixed x, GLfixed y, GLfixed z)
{
	check_initialized();
	piglit_dispatch_glRotatexOES = resolve_glRotatexOES();
	piglit_dispatch_glRotatexOES(angle, x, y, z);
}

PFNGLROTATEXOESPROC piglit_dispatch_glRotatexOES = stub_glRotatexOES;

static void*
resolve_glSampleCoverage(void)
{
	/* glSampleCoverage (GL_VERSION_1_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glSampleCoverage", 13);
	}

	/* glSampleCoverage (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glSampleCoverage", 10);
	}

	/* glSampleCoverage (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glSampleCoverage", 20);
	}

	/* glSampleCoverageARB (GL_ARB_multisample) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_multisample")) {
		return get_ext_proc("glSampleCoverageARB");
	}

	unsupported("glSampleCoverage");
	return piglit_dispatch_glSampleCoverage;
}

static void APIENTRY
stub_glSampleCoverage(GLfloat value, GLboolean invert)
{
	check_initialized();
	piglit_dispatch_glSampleCoverage = resolve_glSampleCoverage();
	piglit_dispatch_glSampleCoverage(value, invert);
}

PFNGLSAMPLECOVERAGEPROC piglit_dispatch_glSampleCoverage = stub_glSampleCoverage;

static void*
resolve_glSampleCoverageOES(void)
{
	/* glSampleCoverageOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glSampleCoverageOES");
	}

	unsupported("glSampleCoverageOES");
	return piglit_dispatch_glSampleCoverageOES;
}

static void APIENTRY
stub_glSampleCoverageOES(GLfixed value, GLboolean invert)
{
	check_initialized();
	piglit_dispatch_glSampleCoverageOES = resolve_glSampleCoverageOES();
	piglit_dispatch_glSampleCoverageOES(value, invert);
}

PFNGLSAMPLECOVERAGEOESPROC piglit_dispatch_glSampleCoverageOES = stub_glSampleCoverageOES;

static void*
resolve_glSampleCoveragex(void)
{
	/* glSampleCoveragex (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glSampleCoveragex", 10);
	}

	unsupported("glSampleCoveragex");
	return piglit_dispatch_glSampleCoveragex;
}

static void APIENTRY
stub_glSampleCoveragex(GLclampx value, GLboolean invert)
{
	check_initialized();
	piglit_dispatch_glSampleCoveragex = resolve_glSampleCoveragex();
	piglit_dispatch_glSampleCoveragex(value, invert);
}

PFNGLSAMPLECOVERAGEXPROC piglit_dispatch_glSampleCoveragex = stub_glSampleCoveragex;

static void*
resolve_glSampleCoveragexOES(void)
{
	/* glSampleCoveragexOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glSampleCoveragexOES");
	}

	unsupported("glSampleCoveragexOES");
	return piglit_dispatch_glSampleCoveragexOES;
}

static void APIENTRY
stub_glSampleCoveragexOES(GLclampx value, GLboolean invert)
{
	check_initialized();
	piglit_dispatch_glSampleCoveragexOES = resolve_glSampleCoveragexOES();
	piglit_dispatch_glSampleCoveragexOES(value, invert);
}

PFNGLSAMPLECOVERAGEXOESPROC piglit_dispatch_glSampleCoveragexOES = stub_glSampleCoveragexOES;

static void*
resolve_glSampleMapATI(void)
{
	/* glSampleMapATI (GL_ATI_fragment_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_fragment_shader")) {
		return get_ext_proc("glSampleMapATI");
	}

	unsupported("glSampleMapATI");
	return piglit_dispatch_glSampleMapATI;
}

static void APIENTRY
stub_glSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle)
{
	check_initialized();
	piglit_dispatch_glSampleMapATI = resolve_glSampleMapATI();
	piglit_dispatch_glSampleMapATI(dst, interp, swizzle);
}

PFNGLSAMPLEMAPATIPROC piglit_dispatch_glSampleMapATI = stub_glSampleMapATI;

static void*
resolve_glSampleMaskEXT(void)
{
	/* glSampleMaskEXT (GL_EXT_multisample) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_multisample")) {
		return get_ext_proc("glSampleMaskEXT");
	}

	/* glSampleMaskSGIS (GL_SGIS_multisample) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIS_multisample")) {
		return get_ext_proc("glSampleMaskSGIS");
	}

	unsupported("glSampleMaskEXT");
	return piglit_dispatch_glSampleMaskEXT;
}

static void APIENTRY
stub_glSampleMaskEXT(GLclampf value, GLboolean invert)
{
	check_initialized();
	piglit_dispatch_glSampleMaskEXT = resolve_glSampleMaskEXT();
	piglit_dispatch_glSampleMaskEXT(value, invert);
}

PFNGLSAMPLEMASKEXTPROC piglit_dispatch_glSampleMaskEXT = stub_glSampleMaskEXT;

static void*
resolve_glSampleMaskIndexedNV(void)
{
	/* glSampleMaskIndexedNV (GL_NV_explicit_multisample) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_explicit_multisample")) {
		return get_ext_proc("glSampleMaskIndexedNV");
	}

	unsupported("glSampleMaskIndexedNV");
	return piglit_dispatch_glSampleMaskIndexedNV;
}

static void APIENTRY
stub_glSampleMaskIndexedNV(GLuint index, GLbitfield mask)
{
	check_initialized();
	piglit_dispatch_glSampleMaskIndexedNV = resolve_glSampleMaskIndexedNV();
	piglit_dispatch_glSampleMaskIndexedNV(index, mask);
}

PFNGLSAMPLEMASKINDEXEDNVPROC piglit_dispatch_glSampleMaskIndexedNV = stub_glSampleMaskIndexedNV;

static void*
resolve_glSampleMaski(void)
{
	/* glSampleMaski (GL_VERSION_3_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glSampleMaski", 32);
	}

	/* glSampleMaski (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glSampleMaski", 31);
	}

	/* glSampleMaski (GL_ARB_texture_multisample) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_texture_multisample")) {
		return get_ext_proc("glSampleMaski");
	}

	unsupported("glSampleMaski");
	return piglit_dispatch_glSampleMaski;
}

static void APIENTRY
stub_glSampleMaski(GLuint maskNumber, GLbitfield mask)
{
	check_initialized();
	piglit_dispatch_glSampleMaski = resolve_glSampleMaski();
	piglit_dispatch_glSampleMaski(maskNumber, mask);
}

PFNGLSAMPLEMASKIPROC piglit_dispatch_glSampleMaski = stub_glSampleMaski;

static void*
resolve_glSamplePatternEXT(void)
{
	/* glSamplePatternEXT (GL_EXT_multisample) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_multisample")) {
		return get_ext_proc("glSamplePatternEXT");
	}

	/* glSamplePatternSGIS (GL_SGIS_multisample) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIS_multisample")) {
		return get_ext_proc("glSamplePatternSGIS");
	}

	unsupported("glSamplePatternEXT");
	return piglit_dispatch_glSamplePatternEXT;
}

static void APIENTRY
stub_glSamplePatternEXT(GLenum pattern)
{
	check_initialized();
	piglit_dispatch_glSamplePatternEXT = resolve_glSamplePatternEXT();
	piglit_dispatch_glSamplePatternEXT(pattern);
}

PFNGLSAMPLEPATTERNEXTPROC piglit_dispatch_glSamplePatternEXT = stub_glSamplePatternEXT;

static void*
resolve_glSamplerParameterIiv(void)
{
	/* glSamplerParameterIiv (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glSamplerParameterIiv", 33);
	}

	/* glSamplerParameterIiv (GL_ARB_sampler_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_sampler_objects")) {
		return get_ext_proc("glSamplerParameterIiv");
	}

	/* glSamplerParameterIivEXT (GL_EXT_texture_border_clamp) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_texture_border_clamp")) {
		return get_ext_proc("glSamplerParameterIivEXT");
	}

	unsupported("glSamplerParameterIiv");
	return piglit_dispatch_glSamplerParameterIiv;
}

static void APIENTRY
stub_glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint * param)
{
	check_initialized();
	piglit_dispatch_glSamplerParameterIiv = resolve_glSamplerParameterIiv();
	piglit_dispatch_glSamplerParameterIiv(sampler, pname, param);
}

PFNGLSAMPLERPARAMETERIIVPROC piglit_dispatch_glSamplerParameterIiv = stub_glSamplerParameterIiv;

static void*
resolve_glSamplerParameterIuiv(void)
{
	/* glSamplerParameterIuiv (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glSamplerParameterIuiv", 33);
	}

	/* glSamplerParameterIuiv (GL_ARB_sampler_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_sampler_objects")) {
		return get_ext_proc("glSamplerParameterIuiv");
	}

	/* glSamplerParameterIuivEXT (GL_EXT_texture_border_clamp) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_texture_border_clamp")) {
		return get_ext_proc("glSamplerParameterIuivEXT");
	}

	unsupported("glSamplerParameterIuiv");
	return piglit_dispatch_glSamplerParameterIuiv;
}

static void APIENTRY
stub_glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint * param)
{
	check_initialized();
	piglit_dispatch_glSamplerParameterIuiv = resolve_glSamplerParameterIuiv();
	piglit_dispatch_glSamplerParameterIuiv(sampler, pname, param);
}

PFNGLSAMPLERPARAMETERIUIVPROC piglit_dispatch_glSamplerParameterIuiv = stub_glSamplerParameterIuiv;

static void*
resolve_glSamplerParameterf(void)
{
	/* glSamplerParameterf (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glSamplerParameterf", 33);
	}

	/* glSamplerParameterf (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glSamplerParameterf", 30);
	}

	/* glSamplerParameterf (GL_ARB_sampler_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_sampler_objects")) {
		return get_ext_proc("glSamplerParameterf");
	}

	unsupported("glSamplerParameterf");
	return piglit_dispatch_glSamplerParameterf;
}

static void APIENTRY
stub_glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param)
{
	check_initialized();
	piglit_dispatch_glSamplerParameterf = resolve_glSamplerParameterf();
	piglit_dispatch_glSamplerParameterf(sampler, pname, param);
}

PFNGLSAMPLERPARAMETERFPROC piglit_dispatch_glSamplerParameterf = stub_glSamplerParameterf;

static void*
resolve_glSamplerParameterfv(void)
{
	/* glSamplerParameterfv (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glSamplerParameterfv", 33);
	}

	/* glSamplerParameterfv (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glSamplerParameterfv", 30);
	}

	/* glSamplerParameterfv (GL_ARB_sampler_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_sampler_objects")) {
		return get_ext_proc("glSamplerParameterfv");
	}

	unsupported("glSamplerParameterfv");
	return piglit_dispatch_glSamplerParameterfv;
}

static void APIENTRY
stub_glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat * param)
{
	check_initialized();
	piglit_dispatch_glSamplerParameterfv = resolve_glSamplerParameterfv();
	piglit_dispatch_glSamplerParameterfv(sampler, pname, param);
}

PFNGLSAMPLERPARAMETERFVPROC piglit_dispatch_glSamplerParameterfv = stub_glSamplerParameterfv;

static void*
resolve_glSamplerParameteri(void)
{
	/* glSamplerParameteri (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glSamplerParameteri", 33);
	}

	/* glSamplerParameteri (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glSamplerParameteri", 30);
	}

	/* glSamplerParameteri (GL_ARB_sampler_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_sampler_objects")) {
		return get_ext_proc("glSamplerParameteri");
	}

	unsupported("glSamplerParameteri");
	return piglit_dispatch_glSamplerParameteri;
}

static void APIENTRY
stub_glSamplerParameteri(GLuint sampler, GLenum pname, GLint param)
{
	check_initialized();
	piglit_dispatch_glSamplerParameteri = resolve_glSamplerParameteri();
	piglit_dispatch_glSamplerParameteri(sampler, pname, param);
}

PFNGLSAMPLERPARAMETERIPROC piglit_dispatch_glSamplerParameteri = stub_glSamplerParameteri;

static void*
resolve_glSamplerParameteriv(void)
{
	/* glSamplerParameteriv (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glSamplerParameteriv", 33);
	}

	/* glSamplerParameteriv (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glSamplerParameteriv", 30);
	}

	/* glSamplerParameteriv (GL_ARB_sampler_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_sampler_objects")) {
		return get_ext_proc("glSamplerParameteriv");
	}

	unsupported("glSamplerParameteriv");
	return piglit_dispatch_glSamplerParameteriv;
}

static void APIENTRY
stub_glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint * param)
{
	check_initialized();
	piglit_dispatch_glSamplerParameteriv = resolve_glSamplerParameteriv();
	piglit_dispatch_glSamplerParameteriv(sampler, pname, param);
}

PFNGLSAMPLERPARAMETERIVPROC piglit_dispatch_glSamplerParameteriv = stub_glSamplerParameteriv;

static void*
resolve_glScaled(void)
{
	/* glScaled (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glScaled", 10);
	}

	unsupported("glScaled");
	return piglit_dispatch_glScaled;
}

static void APIENTRY
stub_glScaled(GLdouble x, GLdouble y, GLdouble z)
{
	check_initialized();
	piglit_dispatch_glScaled = resolve_glScaled();
	piglit_dispatch_glScaled(x, y, z);
}

PFNGLSCALEDPROC piglit_dispatch_glScaled = stub_glScaled;

static void*
resolve_glScalef(void)
{
	/* glScalef (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glScalef", 10);
	}

	/* glScalef (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glScalef", 10);
	}

	unsupported("glScalef");
	return piglit_dispatch_glScalef;
}

static void APIENTRY
stub_glScalef(GLfloat x, GLfloat y, GLfloat z)
{
	check_initialized();
	piglit_dispatch_glScalef = resolve_glScalef();
	piglit_dispatch_glScalef(x, y, z);
}

PFNGLSCALEFPROC piglit_dispatch_glScalef = stub_glScalef;

static void*
resolve_glScalex(void)
{
	/* glScalex (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glScalex", 10);
	}

	unsupported("glScalex");
	return piglit_dispatch_glScalex;
}

static void APIENTRY
stub_glScalex(GLfixed x, GLfixed y, GLfixed z)
{
	check_initialized();
	piglit_dispatch_glScalex = resolve_glScalex();
	piglit_dispatch_glScalex(x, y, z);
}

PFNGLSCALEXPROC piglit_dispatch_glScalex = stub_glScalex;

static void*
resolve_glScalexOES(void)
{
	/* glScalexOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glScalexOES");
	}

	unsupported("glScalexOES");
	return piglit_dispatch_glScalexOES;
}

static void APIENTRY
stub_glScalexOES(GLfixed x, GLfixed y, GLfixed z)
{
	check_initialized();
	piglit_dispatch_glScalexOES = resolve_glScalexOES();
	piglit_dispatch_glScalexOES(x, y, z);
}

PFNGLSCALEXOESPROC piglit_dispatch_glScalexOES = stub_glScalexOES;

static void*
resolve_glScissor(void)
{
	/* glScissor (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glScissor", 10);
	}

	/* glScissor (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glScissor", 10);
	}

	/* glScissor (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glScissor", 20);
	}

	unsupported("glScissor");
	return piglit_dispatch_glScissor;
}

static void APIENTRY
stub_glScissor(GLint x, GLint y, GLsizei width, GLsizei height)
{
	check_initialized();
	piglit_dispatch_glScissor = resolve_glScissor();
	piglit_dispatch_glScissor(x, y, width, height);
}

PFNGLSCISSORPROC piglit_dispatch_glScissor = stub_glScissor;

static void*
resolve_glScissorArrayv(void)
{
	/* glScissorArrayv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glScissorArrayv", 41);
	}

	/* glScissorArrayv (GL_ARB_viewport_array) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_viewport_array")) {
		return get_ext_proc("glScissorArrayv");
	}

	unsupported("glScissorArrayv");
	return piglit_dispatch_glScissorArrayv;
}

static void APIENTRY
stub_glScissorArrayv(GLuint first, GLsizei count, const GLint * v)
{
	check_initialized();
	piglit_dispatch_glScissorArrayv = resolve_glScissorArrayv();
	piglit_dispatch_glScissorArrayv(first, count, v);
}

PFNGLSCISSORARRAYVPROC piglit_dispatch_glScissorArrayv = stub_glScissorArrayv;

static void*
resolve_glScissorIndexed(void)
{
	/* glScissorIndexed (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glScissorIndexed", 41);
	}

	/* glScissorIndexed (GL_ARB_viewport_array) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_viewport_array")) {
		return get_ext_proc("glScissorIndexed");
	}

	unsupported("glScissorIndexed");
	return piglit_dispatch_glScissorIndexed;
}

static void APIENTRY
stub_glScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)
{
	check_initialized();
	piglit_dispatch_glScissorIndexed = resolve_glScissorIndexed();
	piglit_dispatch_glScissorIndexed(index, left, bottom, width, height);
}

PFNGLSCISSORINDEXEDPROC piglit_dispatch_glScissorIndexed = stub_glScissorIndexed;

static void*
resolve_glScissorIndexedv(void)
{
	/* glScissorIndexedv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glScissorIndexedv", 41);
	}

	/* glScissorIndexedv (GL_ARB_viewport_array) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_viewport_array")) {
		return get_ext_proc("glScissorIndexedv");
	}

	unsupported("glScissorIndexedv");
	return piglit_dispatch_glScissorIndexedv;
}

static void APIENTRY
stub_glScissorIndexedv(GLuint index, const GLint * v)
{
	check_initialized();
	piglit_dispatch_glScissorIndexedv = resolve_glScissorIndexedv();
	piglit_dispatch_glScissorIndexedv(index, v);
}

PFNGLSCISSORINDEXEDVPROC piglit_dispatch_glScissorIndexedv = stub_glScissorIndexedv;

static void*
resolve_glSecondaryColor3b(void)
{
	/* glSecondaryColor3b (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glSecondaryColor3b", 14);
	}

	/* glSecondaryColor3bEXT (GL_EXT_secondary_color) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_secondary_color")) {
		return get_ext_proc("glSecondaryColor3bEXT");
	}

	unsupported("glSecondaryColor3b");
	return piglit_dispatch_glSecondaryColor3b;
}

static void APIENTRY
stub_glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue)
{
	check_initialized();
	piglit_dispatch_glSecondaryColor3b = resolve_glSecondaryColor3b();
	piglit_dispatch_glSecondaryColor3b(red, green, blue);
}

PFNGLSECONDARYCOLOR3BPROC piglit_dispatch_glSecondaryColor3b = stub_glSecondaryColor3b;

static void*
resolve_glSecondaryColor3bv(void)
{
	/* glSecondaryColor3bv (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glSecondaryColor3bv", 14);
	}

	/* glSecondaryColor3bvEXT (GL_EXT_secondary_color) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_secondary_color")) {
		return get_ext_proc("glSecondaryColor3bvEXT");
	}

	unsupported("glSecondaryColor3bv");
	return piglit_dispatch_glSecondaryColor3bv;
}

static void APIENTRY
stub_glSecondaryColor3bv(const GLbyte * v)
{
	check_initialized();
	piglit_dispatch_glSecondaryColor3bv = resolve_glSecondaryColor3bv();
	piglit_dispatch_glSecondaryColor3bv(v);
}

PFNGLSECONDARYCOLOR3BVPROC piglit_dispatch_glSecondaryColor3bv = stub_glSecondaryColor3bv;

static void*
resolve_glSecondaryColor3d(void)
{
	/* glSecondaryColor3d (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glSecondaryColor3d", 14);
	}

	/* glSecondaryColor3dEXT (GL_EXT_secondary_color) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_secondary_color")) {
		return get_ext_proc("glSecondaryColor3dEXT");
	}

	unsupported("glSecondaryColor3d");
	return piglit_dispatch_glSecondaryColor3d;
}

static void APIENTRY
stub_glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue)
{
	check_initialized();
	piglit_dispatch_glSecondaryColor3d = resolve_glSecondaryColor3d();
	piglit_dispatch_glSecondaryColor3d(red, green, blue);
}

PFNGLSECONDARYCOLOR3DPROC piglit_dispatch_glSecondaryColor3d = stub_glSecondaryColor3d;

static void*
resolve_glSecondaryColor3dv(void)
{
	/* glSecondaryColor3dv (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glSecondaryColor3dv", 14);
	}

	/* glSecondaryColor3dvEXT (GL_EXT_secondary_color) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_secondary_color")) {
		return get_ext_proc("glSecondaryColor3dvEXT");
	}

	unsupported("glSecondaryColor3dv");
	return piglit_dispatch_glSecondaryColor3dv;
}

static void APIENTRY
stub_glSecondaryColor3dv(const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glSecondaryColor3dv = resolve_glSecondaryColor3dv();
	piglit_dispatch_glSecondaryColor3dv(v);
}

PFNGLSECONDARYCOLOR3DVPROC piglit_dispatch_glSecondaryColor3dv = stub_glSecondaryColor3dv;

static void*
resolve_glSecondaryColor3f(void)
{
	/* glSecondaryColor3f (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glSecondaryColor3f", 14);
	}

	/* glSecondaryColor3fEXT (GL_EXT_secondary_color) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_secondary_color")) {
		return get_ext_proc("glSecondaryColor3fEXT");
	}

	unsupported("glSecondaryColor3f");
	return piglit_dispatch_glSecondaryColor3f;
}

static void APIENTRY
stub_glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue)
{
	check_initialized();
	piglit_dispatch_glSecondaryColor3f = resolve_glSecondaryColor3f();
	piglit_dispatch_glSecondaryColor3f(red, green, blue);
}

PFNGLSECONDARYCOLOR3FPROC piglit_dispatch_glSecondaryColor3f = stub_glSecondaryColor3f;

static void*
resolve_glSecondaryColor3fv(void)
{
	/* glSecondaryColor3fv (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glSecondaryColor3fv", 14);
	}

	/* glSecondaryColor3fvEXT (GL_EXT_secondary_color) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_secondary_color")) {
		return get_ext_proc("glSecondaryColor3fvEXT");
	}

	unsupported("glSecondaryColor3fv");
	return piglit_dispatch_glSecondaryColor3fv;
}

static void APIENTRY
stub_glSecondaryColor3fv(const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glSecondaryColor3fv = resolve_glSecondaryColor3fv();
	piglit_dispatch_glSecondaryColor3fv(v);
}

PFNGLSECONDARYCOLOR3FVPROC piglit_dispatch_glSecondaryColor3fv = stub_glSecondaryColor3fv;

static void*
resolve_glSecondaryColor3hNV(void)
{
	/* glSecondaryColor3hNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glSecondaryColor3hNV");
	}

	unsupported("glSecondaryColor3hNV");
	return piglit_dispatch_glSecondaryColor3hNV;
}

static void APIENTRY
stub_glSecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
{
	check_initialized();
	piglit_dispatch_glSecondaryColor3hNV = resolve_glSecondaryColor3hNV();
	piglit_dispatch_glSecondaryColor3hNV(red, green, blue);
}

PFNGLSECONDARYCOLOR3HNVPROC piglit_dispatch_glSecondaryColor3hNV = stub_glSecondaryColor3hNV;

static void*
resolve_glSecondaryColor3hvNV(void)
{
	/* glSecondaryColor3hvNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glSecondaryColor3hvNV");
	}

	unsupported("glSecondaryColor3hvNV");
	return piglit_dispatch_glSecondaryColor3hvNV;
}

static void APIENTRY
stub_glSecondaryColor3hvNV(const GLhalfNV * v)
{
	check_initialized();
	piglit_dispatch_glSecondaryColor3hvNV = resolve_glSecondaryColor3hvNV();
	piglit_dispatch_glSecondaryColor3hvNV(v);
}

PFNGLSECONDARYCOLOR3HVNVPROC piglit_dispatch_glSecondaryColor3hvNV = stub_glSecondaryColor3hvNV;

static void*
resolve_glSecondaryColor3i(void)
{
	/* glSecondaryColor3i (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glSecondaryColor3i", 14);
	}

	/* glSecondaryColor3iEXT (GL_EXT_secondary_color) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_secondary_color")) {
		return get_ext_proc("glSecondaryColor3iEXT");
	}

	unsupported("glSecondaryColor3i");
	return piglit_dispatch_glSecondaryColor3i;
}

static void APIENTRY
stub_glSecondaryColor3i(GLint red, GLint green, GLint blue)
{
	check_initialized();
	piglit_dispatch_glSecondaryColor3i = resolve_glSecondaryColor3i();
	piglit_dispatch_glSecondaryColor3i(red, green, blue);
}

PFNGLSECONDARYCOLOR3IPROC piglit_dispatch_glSecondaryColor3i = stub_glSecondaryColor3i;

static void*
resolve_glSecondaryColor3iv(void)
{
	/* glSecondaryColor3iv (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glSecondaryColor3iv", 14);
	}

	/* glSecondaryColor3ivEXT (GL_EXT_secondary_color) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_secondary_color")) {
		return get_ext_proc("glSecondaryColor3ivEXT");
	}

	unsupported("glSecondaryColor3iv");
	return piglit_dispatch_glSecondaryColor3iv;
}

static void APIENTRY
stub_glSecondaryColor3iv(const GLint * v)
{
	check_initialized();
	piglit_dispatch_glSecondaryColor3iv = resolve_glSecondaryColor3iv();
	piglit_dispatch_glSecondaryColor3iv(v);
}

PFNGLSECONDARYCOLOR3IVPROC piglit_dispatch_glSecondaryColor3iv = stub_glSecondaryColor3iv;

static void*
resolve_glSecondaryColor3s(void)
{
	/* glSecondaryColor3s (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glSecondaryColor3s", 14);
	}

	/* glSecondaryColor3sEXT (GL_EXT_secondary_color) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_secondary_color")) {
		return get_ext_proc("glSecondaryColor3sEXT");
	}

	unsupported("glSecondaryColor3s");
	return piglit_dispatch_glSecondaryColor3s;
}

static void APIENTRY
stub_glSecondaryColor3s(GLshort red, GLshort green, GLshort blue)
{
	check_initialized();
	piglit_dispatch_glSecondaryColor3s = resolve_glSecondaryColor3s();
	piglit_dispatch_glSecondaryColor3s(red, green, blue);
}

PFNGLSECONDARYCOLOR3SPROC piglit_dispatch_glSecondaryColor3s = stub_glSecondaryColor3s;

static void*
resolve_glSecondaryColor3sv(void)
{
	/* glSecondaryColor3sv (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glSecondaryColor3sv", 14);
	}

	/* glSecondaryColor3svEXT (GL_EXT_secondary_color) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_secondary_color")) {
		return get_ext_proc("glSecondaryColor3svEXT");
	}

	unsupported("glSecondaryColor3sv");
	return piglit_dispatch_glSecondaryColor3sv;
}

static void APIENTRY
stub_glSecondaryColor3sv(const GLshort * v)
{
	check_initialized();
	piglit_dispatch_glSecondaryColor3sv = resolve_glSecondaryColor3sv();
	piglit_dispatch_glSecondaryColor3sv(v);
}

PFNGLSECONDARYCOLOR3SVPROC piglit_dispatch_glSecondaryColor3sv = stub_glSecondaryColor3sv;

static void*
resolve_glSecondaryColor3ub(void)
{
	/* glSecondaryColor3ub (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glSecondaryColor3ub", 14);
	}

	/* glSecondaryColor3ubEXT (GL_EXT_secondary_color) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_secondary_color")) {
		return get_ext_proc("glSecondaryColor3ubEXT");
	}

	unsupported("glSecondaryColor3ub");
	return piglit_dispatch_glSecondaryColor3ub;
}

static void APIENTRY
stub_glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue)
{
	check_initialized();
	piglit_dispatch_glSecondaryColor3ub = resolve_glSecondaryColor3ub();
	piglit_dispatch_glSecondaryColor3ub(red, green, blue);
}

PFNGLSECONDARYCOLOR3UBPROC piglit_dispatch_glSecondaryColor3ub = stub_glSecondaryColor3ub;

static void*
resolve_glSecondaryColor3ubv(void)
{
	/* glSecondaryColor3ubv (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glSecondaryColor3ubv", 14);
	}

	/* glSecondaryColor3ubvEXT (GL_EXT_secondary_color) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_secondary_color")) {
		return get_ext_proc("glSecondaryColor3ubvEXT");
	}

	unsupported("glSecondaryColor3ubv");
	return piglit_dispatch_glSecondaryColor3ubv;
}

static void APIENTRY
stub_glSecondaryColor3ubv(const GLubyte * v)
{
	check_initialized();
	piglit_dispatch_glSecondaryColor3ubv = resolve_glSecondaryColor3ubv();
	piglit_dispatch_glSecondaryColor3ubv(v);
}

PFNGLSECONDARYCOLOR3UBVPROC piglit_dispatch_glSecondaryColor3ubv = stub_glSecondaryColor3ubv;

static void*
resolve_glSecondaryColor3ui(void)
{
	/* glSecondaryColor3ui (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glSecondaryColor3ui", 14);
	}

	/* glSecondaryColor3uiEXT (GL_EXT_secondary_color) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_secondary_color")) {
		return get_ext_proc("glSecondaryColor3uiEXT");
	}

	unsupported("glSecondaryColor3ui");
	return piglit_dispatch_glSecondaryColor3ui;
}

static void APIENTRY
stub_glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue)
{
	check_initialized();
	piglit_dispatch_glSecondaryColor3ui = resolve_glSecondaryColor3ui();
	piglit_dispatch_glSecondaryColor3ui(red, green, blue);
}

PFNGLSECONDARYCOLOR3UIPROC piglit_dispatch_glSecondaryColor3ui = stub_glSecondaryColor3ui;

static void*
resolve_glSecondaryColor3uiv(void)
{
	/* glSecondaryColor3uiv (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glSecondaryColor3uiv", 14);
	}

	/* glSecondaryColor3uivEXT (GL_EXT_secondary_color) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_secondary_color")) {
		return get_ext_proc("glSecondaryColor3uivEXT");
	}

	unsupported("glSecondaryColor3uiv");
	return piglit_dispatch_glSecondaryColor3uiv;
}

static void APIENTRY
stub_glSecondaryColor3uiv(const GLuint * v)
{
	check_initialized();
	piglit_dispatch_glSecondaryColor3uiv = resolve_glSecondaryColor3uiv();
	piglit_dispatch_glSecondaryColor3uiv(v);
}

PFNGLSECONDARYCOLOR3UIVPROC piglit_dispatch_glSecondaryColor3uiv = stub_glSecondaryColor3uiv;

static void*
resolve_glSecondaryColor3us(void)
{
	/* glSecondaryColor3us (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glSecondaryColor3us", 14);
	}

	/* glSecondaryColor3usEXT (GL_EXT_secondary_color) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_secondary_color")) {
		return get_ext_proc("glSecondaryColor3usEXT");
	}

	unsupported("glSecondaryColor3us");
	return piglit_dispatch_glSecondaryColor3us;
}

static void APIENTRY
stub_glSecondaryColor3us(GLushort red, GLushort green, GLushort blue)
{
	check_initialized();
	piglit_dispatch_glSecondaryColor3us = resolve_glSecondaryColor3us();
	piglit_dispatch_glSecondaryColor3us(red, green, blue);
}

PFNGLSECONDARYCOLOR3USPROC piglit_dispatch_glSecondaryColor3us = stub_glSecondaryColor3us;

static void*
resolve_glSecondaryColor3usv(void)
{
	/* glSecondaryColor3usv (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glSecondaryColor3usv", 14);
	}

	/* glSecondaryColor3usvEXT (GL_EXT_secondary_color) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_secondary_color")) {
		return get_ext_proc("glSecondaryColor3usvEXT");
	}

	unsupported("glSecondaryColor3usv");
	return piglit_dispatch_glSecondaryColor3usv;
}

static void APIENTRY
stub_glSecondaryColor3usv(const GLushort * v)
{
	check_initialized();
	piglit_dispatch_glSecondaryColor3usv = resolve_glSecondaryColor3usv();
	piglit_dispatch_glSecondaryColor3usv(v);
}

PFNGLSECONDARYCOLOR3USVPROC piglit_dispatch_glSecondaryColor3usv = stub_glSecondaryColor3usv;

static void*
resolve_glSecondaryColorFormatNV(void)
{
	/* glSecondaryColorFormatNV (GL_NV_vertex_buffer_unified_memory) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_buffer_unified_memory")) {
		return get_ext_proc("glSecondaryColorFormatNV");
	}

	unsupported("glSecondaryColorFormatNV");
	return piglit_dispatch_glSecondaryColorFormatNV;
}

static void APIENTRY
stub_glSecondaryColorFormatNV(GLint size, GLenum type, GLsizei stride)
{
	check_initialized();
	piglit_dispatch_glSecondaryColorFormatNV = resolve_glSecondaryColorFormatNV();
	piglit_dispatch_glSecondaryColorFormatNV(size, type, stride);
}

PFNGLSECONDARYCOLORFORMATNVPROC piglit_dispatch_glSecondaryColorFormatNV = stub_glSecondaryColorFormatNV;

static void*
resolve_glSecondaryColorP3ui(void)
{
	/* glSecondaryColorP3ui (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glSecondaryColorP3ui", 33);
	}

	/* glSecondaryColorP3ui (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glSecondaryColorP3ui");
	}

	unsupported("glSecondaryColorP3ui");
	return piglit_dispatch_glSecondaryColorP3ui;
}

static void APIENTRY
stub_glSecondaryColorP3ui(GLenum type, GLuint color)
{
	check_initialized();
	piglit_dispatch_glSecondaryColorP3ui = resolve_glSecondaryColorP3ui();
	piglit_dispatch_glSecondaryColorP3ui(type, color);
}

PFNGLSECONDARYCOLORP3UIPROC piglit_dispatch_glSecondaryColorP3ui = stub_glSecondaryColorP3ui;

static void*
resolve_glSecondaryColorP3uiv(void)
{
	/* glSecondaryColorP3uiv (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glSecondaryColorP3uiv", 33);
	}

	/* glSecondaryColorP3uiv (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glSecondaryColorP3uiv");
	}

	unsupported("glSecondaryColorP3uiv");
	return piglit_dispatch_glSecondaryColorP3uiv;
}

static void APIENTRY
stub_glSecondaryColorP3uiv(GLenum type, const GLuint * color)
{
	check_initialized();
	piglit_dispatch_glSecondaryColorP3uiv = resolve_glSecondaryColorP3uiv();
	piglit_dispatch_glSecondaryColorP3uiv(type, color);
}

PFNGLSECONDARYCOLORP3UIVPROC piglit_dispatch_glSecondaryColorP3uiv = stub_glSecondaryColorP3uiv;

static void*
resolve_glSecondaryColorPointer(void)
{
	/* glSecondaryColorPointer (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glSecondaryColorPointer", 14);
	}

	/* glSecondaryColorPointerEXT (GL_EXT_secondary_color) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_secondary_color")) {
		return get_ext_proc("glSecondaryColorPointerEXT");
	}

	unsupported("glSecondaryColorPointer");
	return piglit_dispatch_glSecondaryColorPointer;
}

static void APIENTRY
stub_glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const void * pointer)
{
	check_initialized();
	piglit_dispatch_glSecondaryColorPointer = resolve_glSecondaryColorPointer();
	piglit_dispatch_glSecondaryColorPointer(size, type, stride, pointer);
}

PFNGLSECONDARYCOLORPOINTERPROC piglit_dispatch_glSecondaryColorPointer = stub_glSecondaryColorPointer;

static void*
resolve_glSecondaryColorPointerListIBM(void)
{
	/* glSecondaryColorPointerListIBM (GL_IBM_vertex_array_lists) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_IBM_vertex_array_lists")) {
		return get_ext_proc("glSecondaryColorPointerListIBM");
	}

	unsupported("glSecondaryColorPointerListIBM");
	return piglit_dispatch_glSecondaryColorPointerListIBM;
}

static void APIENTRY
stub_glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride)
{
	check_initialized();
	piglit_dispatch_glSecondaryColorPointerListIBM = resolve_glSecondaryColorPointerListIBM();
	piglit_dispatch_glSecondaryColorPointerListIBM(size, type, stride, pointer, ptrstride);
}

PFNGLSECONDARYCOLORPOINTERLISTIBMPROC piglit_dispatch_glSecondaryColorPointerListIBM = stub_glSecondaryColorPointerListIBM;

static void*
resolve_glSelectBuffer(void)
{
	/* glSelectBuffer (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glSelectBuffer", 10);
	}

	unsupported("glSelectBuffer");
	return piglit_dispatch_glSelectBuffer;
}

static void APIENTRY
stub_glSelectBuffer(GLsizei size, GLuint * buffer)
{
	check_initialized();
	piglit_dispatch_glSelectBuffer = resolve_glSelectBuffer();
	piglit_dispatch_glSelectBuffer(size, buffer);
}

PFNGLSELECTBUFFERPROC piglit_dispatch_glSelectBuffer = stub_glSelectBuffer;

static void*
resolve_glSelectPerfMonitorCountersAMD(void)
{
	/* glSelectPerfMonitorCountersAMD (GL_AMD_performance_monitor) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_AMD_performance_monitor")) {
		return get_ext_proc("glSelectPerfMonitorCountersAMD");
	}

	unsupported("glSelectPerfMonitorCountersAMD");
	return piglit_dispatch_glSelectPerfMonitorCountersAMD;
}

static void APIENTRY
stub_glSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint * counterList)
{
	check_initialized();
	piglit_dispatch_glSelectPerfMonitorCountersAMD = resolve_glSelectPerfMonitorCountersAMD();
	piglit_dispatch_glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList);
}

PFNGLSELECTPERFMONITORCOUNTERSAMDPROC piglit_dispatch_glSelectPerfMonitorCountersAMD = stub_glSelectPerfMonitorCountersAMD;

static void*
resolve_glSeparableFilter2D(void)
{
	/* glSeparableFilter2D (GL_ARB_imaging) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_imaging")) {
		return get_ext_proc("glSeparableFilter2D");
	}

	/* glSeparableFilter2DEXT (GL_EXT_convolution) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_convolution")) {
		return get_ext_proc("glSeparableFilter2DEXT");
	}

	unsupported("glSeparableFilter2D");
	return piglit_dispatch_glSeparableFilter2D;
}

static void APIENTRY
stub_glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * row, const void * column)
{
	check_initialized();
	piglit_dispatch_glSeparableFilter2D = resolve_glSeparableFilter2D();
	piglit_dispatch_glSeparableFilter2D(target, internalformat, width, height, format, type, row, column);
}

PFNGLSEPARABLEFILTER2DPROC piglit_dispatch_glSeparableFilter2D = stub_glSeparableFilter2D;

static void*
resolve_glSetFenceAPPLE(void)
{
	/* glSetFenceAPPLE (GL_APPLE_fence) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_APPLE_fence")) {
		return get_ext_proc("glSetFenceAPPLE");
	}

	unsupported("glSetFenceAPPLE");
	return piglit_dispatch_glSetFenceAPPLE;
}

static void APIENTRY
stub_glSetFenceAPPLE(GLuint fence)
{
	check_initialized();
	piglit_dispatch_glSetFenceAPPLE = resolve_glSetFenceAPPLE();
	piglit_dispatch_glSetFenceAPPLE(fence);
}

PFNGLSETFENCEAPPLEPROC piglit_dispatch_glSetFenceAPPLE = stub_glSetFenceAPPLE;

static void*
resolve_glSetFenceNV(void)
{
	/* glSetFenceNV (GL_NV_fence) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_NV_fence")) {
		return get_ext_proc("glSetFenceNV");
	}

	unsupported("glSetFenceNV");
	return piglit_dispatch_glSetFenceNV;
}

static void APIENTRY
stub_glSetFenceNV(GLuint fence, GLenum condition)
{
	check_initialized();
	piglit_dispatch_glSetFenceNV = resolve_glSetFenceNV();
	piglit_dispatch_glSetFenceNV(fence, condition);
}

PFNGLSETFENCENVPROC piglit_dispatch_glSetFenceNV = stub_glSetFenceNV;

static void*
resolve_glSetFragmentShaderConstantATI(void)
{
	/* glSetFragmentShaderConstantATI (GL_ATI_fragment_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_fragment_shader")) {
		return get_ext_proc("glSetFragmentShaderConstantATI");
	}

	unsupported("glSetFragmentShaderConstantATI");
	return piglit_dispatch_glSetFragmentShaderConstantATI;
}

static void APIENTRY
stub_glSetFragmentShaderConstantATI(GLuint dst, const GLfloat * value)
{
	check_initialized();
	piglit_dispatch_glSetFragmentShaderConstantATI = resolve_glSetFragmentShaderConstantATI();
	piglit_dispatch_glSetFragmentShaderConstantATI(dst, value);
}

PFNGLSETFRAGMENTSHADERCONSTANTATIPROC piglit_dispatch_glSetFragmentShaderConstantATI = stub_glSetFragmentShaderConstantATI;

static void*
resolve_glSetInvariantEXT(void)
{
	/* glSetInvariantEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glSetInvariantEXT");
	}

	unsupported("glSetInvariantEXT");
	return piglit_dispatch_glSetInvariantEXT;
}

static void APIENTRY
stub_glSetInvariantEXT(GLuint id, GLenum type, const void * addr)
{
	check_initialized();
	piglit_dispatch_glSetInvariantEXT = resolve_glSetInvariantEXT();
	piglit_dispatch_glSetInvariantEXT(id, type, addr);
}

PFNGLSETINVARIANTEXTPROC piglit_dispatch_glSetInvariantEXT = stub_glSetInvariantEXT;

static void*
resolve_glSetLocalConstantEXT(void)
{
	/* glSetLocalConstantEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glSetLocalConstantEXT");
	}

	unsupported("glSetLocalConstantEXT");
	return piglit_dispatch_glSetLocalConstantEXT;
}

static void APIENTRY
stub_glSetLocalConstantEXT(GLuint id, GLenum type, const void * addr)
{
	check_initialized();
	piglit_dispatch_glSetLocalConstantEXT = resolve_glSetLocalConstantEXT();
	piglit_dispatch_glSetLocalConstantEXT(id, type, addr);
}

PFNGLSETLOCALCONSTANTEXTPROC piglit_dispatch_glSetLocalConstantEXT = stub_glSetLocalConstantEXT;

static void*
resolve_glSetMultisamplefvAMD(void)
{
	/* glSetMultisamplefvAMD (GL_AMD_sample_positions) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_sample_positions")) {
		return get_ext_proc("glSetMultisamplefvAMD");
	}

	unsupported("glSetMultisamplefvAMD");
	return piglit_dispatch_glSetMultisamplefvAMD;
}

static void APIENTRY
stub_glSetMultisamplefvAMD(GLenum pname, GLuint index, const GLfloat * val)
{
	check_initialized();
	piglit_dispatch_glSetMultisamplefvAMD = resolve_glSetMultisamplefvAMD();
	piglit_dispatch_glSetMultisamplefvAMD(pname, index, val);
}

PFNGLSETMULTISAMPLEFVAMDPROC piglit_dispatch_glSetMultisamplefvAMD = stub_glSetMultisamplefvAMD;

static void*
resolve_glShadeModel(void)
{
	/* glShadeModel (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glShadeModel", 10);
	}

	/* glShadeModel (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glShadeModel", 10);
	}

	unsupported("glShadeModel");
	return piglit_dispatch_glShadeModel;
}

static void APIENTRY
stub_glShadeModel(GLenum mode)
{
	check_initialized();
	piglit_dispatch_glShadeModel = resolve_glShadeModel();
	piglit_dispatch_glShadeModel(mode);
}

PFNGLSHADEMODELPROC piglit_dispatch_glShadeModel = stub_glShadeModel;

static void*
resolve_glShaderBinary(void)
{
	/* glShaderBinary (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glShaderBinary", 41);
	}

	/* glShaderBinary (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glShaderBinary", 20);
	}

	/* glShaderBinary (GL_ARB_ES2_compatibility) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_ES2_compatibility")) {
		return get_ext_proc("glShaderBinary");
	}

	unsupported("glShaderBinary");
	return piglit_dispatch_glShaderBinary;
}

static void APIENTRY
stub_glShaderBinary(GLsizei count, const GLuint * shaders, GLenum binaryformat, const void * binary, GLsizei length)
{
	check_initialized();
	piglit_dispatch_glShaderBinary = resolve_glShaderBinary();
	piglit_dispatch_glShaderBinary(count, shaders, binaryformat, binary, length);
}

PFNGLSHADERBINARYPROC piglit_dispatch_glShaderBinary = stub_glShaderBinary;

static void*
resolve_glShaderOp1EXT(void)
{
	/* glShaderOp1EXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glShaderOp1EXT");
	}

	unsupported("glShaderOp1EXT");
	return piglit_dispatch_glShaderOp1EXT;
}

static void APIENTRY
stub_glShaderOp1EXT(GLenum op, GLuint res, GLuint arg1)
{
	check_initialized();
	piglit_dispatch_glShaderOp1EXT = resolve_glShaderOp1EXT();
	piglit_dispatch_glShaderOp1EXT(op, res, arg1);
}

PFNGLSHADEROP1EXTPROC piglit_dispatch_glShaderOp1EXT = stub_glShaderOp1EXT;

static void*
resolve_glShaderOp2EXT(void)
{
	/* glShaderOp2EXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glShaderOp2EXT");
	}

	unsupported("glShaderOp2EXT");
	return piglit_dispatch_glShaderOp2EXT;
}

static void APIENTRY
stub_glShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2)
{
	check_initialized();
	piglit_dispatch_glShaderOp2EXT = resolve_glShaderOp2EXT();
	piglit_dispatch_glShaderOp2EXT(op, res, arg1, arg2);
}

PFNGLSHADEROP2EXTPROC piglit_dispatch_glShaderOp2EXT = stub_glShaderOp2EXT;

static void*
resolve_glShaderOp3EXT(void)
{
	/* glShaderOp3EXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glShaderOp3EXT");
	}

	unsupported("glShaderOp3EXT");
	return piglit_dispatch_glShaderOp3EXT;
}

static void APIENTRY
stub_glShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3)
{
	check_initialized();
	piglit_dispatch_glShaderOp3EXT = resolve_glShaderOp3EXT();
	piglit_dispatch_glShaderOp3EXT(op, res, arg1, arg2, arg3);
}

PFNGLSHADEROP3EXTPROC piglit_dispatch_glShaderOp3EXT = stub_glShaderOp3EXT;

static void*
resolve_glShaderSource(void)
{
	/* glShaderSource (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glShaderSource", 20);
	}

	/* glShaderSource (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glShaderSource", 20);
	}

	/* glShaderSourceARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glShaderSourceARB");
	}

	unsupported("glShaderSource");
	return piglit_dispatch_glShaderSource;
}

static void APIENTRY
stub_glShaderSource(GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length)
{
	check_initialized();
	piglit_dispatch_glShaderSource = resolve_glShaderSource();
	piglit_dispatch_glShaderSource(shader, count, string, length);
}

PFNGLSHADERSOURCEPROC piglit_dispatch_glShaderSource = stub_glShaderSource;

static void*
resolve_glShaderStorageBlockBinding(void)
{
	/* glShaderStorageBlockBinding (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glShaderStorageBlockBinding", 43);
	}

	/* glShaderStorageBlockBinding (GL_ARB_shader_storage_buffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_storage_buffer_object")) {
		return get_ext_proc("glShaderStorageBlockBinding");
	}

	unsupported("glShaderStorageBlockBinding");
	return piglit_dispatch_glShaderStorageBlockBinding;
}

static void APIENTRY
stub_glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)
{
	check_initialized();
	piglit_dispatch_glShaderStorageBlockBinding = resolve_glShaderStorageBlockBinding();
	piglit_dispatch_glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding);
}

PFNGLSHADERSTORAGEBLOCKBINDINGPROC piglit_dispatch_glShaderStorageBlockBinding = stub_glShaderStorageBlockBinding;

static void*
resolve_glSharpenTexFuncSGIS(void)
{
	/* glSharpenTexFuncSGIS (GL_SGIS_sharpen_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIS_sharpen_texture")) {
		return get_ext_proc("glSharpenTexFuncSGIS");
	}

	unsupported("glSharpenTexFuncSGIS");
	return piglit_dispatch_glSharpenTexFuncSGIS;
}

static void APIENTRY
stub_glSharpenTexFuncSGIS(GLenum target, GLsizei n, const GLfloat * points)
{
	check_initialized();
	piglit_dispatch_glSharpenTexFuncSGIS = resolve_glSharpenTexFuncSGIS();
	piglit_dispatch_glSharpenTexFuncSGIS(target, n, points);
}

PFNGLSHARPENTEXFUNCSGISPROC piglit_dispatch_glSharpenTexFuncSGIS = stub_glSharpenTexFuncSGIS;

static void*
resolve_glSpriteParameterfSGIX(void)
{
	/* glSpriteParameterfSGIX (GL_SGIX_sprite) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_sprite")) {
		return get_ext_proc("glSpriteParameterfSGIX");
	}

	unsupported("glSpriteParameterfSGIX");
	return piglit_dispatch_glSpriteParameterfSGIX;
}

static void APIENTRY
stub_glSpriteParameterfSGIX(GLenum pname, GLfloat param)
{
	check_initialized();
	piglit_dispatch_glSpriteParameterfSGIX = resolve_glSpriteParameterfSGIX();
	piglit_dispatch_glSpriteParameterfSGIX(pname, param);
}

PFNGLSPRITEPARAMETERFSGIXPROC piglit_dispatch_glSpriteParameterfSGIX = stub_glSpriteParameterfSGIX;

static void*
resolve_glSpriteParameterfvSGIX(void)
{
	/* glSpriteParameterfvSGIX (GL_SGIX_sprite) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_sprite")) {
		return get_ext_proc("glSpriteParameterfvSGIX");
	}

	unsupported("glSpriteParameterfvSGIX");
	return piglit_dispatch_glSpriteParameterfvSGIX;
}

static void APIENTRY
stub_glSpriteParameterfvSGIX(GLenum pname, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glSpriteParameterfvSGIX = resolve_glSpriteParameterfvSGIX();
	piglit_dispatch_glSpriteParameterfvSGIX(pname, params);
}

PFNGLSPRITEPARAMETERFVSGIXPROC piglit_dispatch_glSpriteParameterfvSGIX = stub_glSpriteParameterfvSGIX;

static void*
resolve_glSpriteParameteriSGIX(void)
{
	/* glSpriteParameteriSGIX (GL_SGIX_sprite) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_sprite")) {
		return get_ext_proc("glSpriteParameteriSGIX");
	}

	unsupported("glSpriteParameteriSGIX");
	return piglit_dispatch_glSpriteParameteriSGIX;
}

static void APIENTRY
stub_glSpriteParameteriSGIX(GLenum pname, GLint param)
{
	check_initialized();
	piglit_dispatch_glSpriteParameteriSGIX = resolve_glSpriteParameteriSGIX();
	piglit_dispatch_glSpriteParameteriSGIX(pname, param);
}

PFNGLSPRITEPARAMETERISGIXPROC piglit_dispatch_glSpriteParameteriSGIX = stub_glSpriteParameteriSGIX;

static void*
resolve_glSpriteParameterivSGIX(void)
{
	/* glSpriteParameterivSGIX (GL_SGIX_sprite) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_sprite")) {
		return get_ext_proc("glSpriteParameterivSGIX");
	}

	unsupported("glSpriteParameterivSGIX");
	return piglit_dispatch_glSpriteParameterivSGIX;
}

static void APIENTRY
stub_glSpriteParameterivSGIX(GLenum pname, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glSpriteParameterivSGIX = resolve_glSpriteParameterivSGIX();
	piglit_dispatch_glSpriteParameterivSGIX(pname, params);
}

PFNGLSPRITEPARAMETERIVSGIXPROC piglit_dispatch_glSpriteParameterivSGIX = stub_glSpriteParameterivSGIX;

static void*
resolve_glStartInstrumentsSGIX(void)
{
	/* glStartInstrumentsSGIX (GL_SGIX_instruments) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_instruments")) {
		return get_ext_proc("glStartInstrumentsSGIX");
	}

	unsupported("glStartInstrumentsSGIX");
	return piglit_dispatch_glStartInstrumentsSGIX;
}

static void APIENTRY
stub_glStartInstrumentsSGIX()
{
	check_initialized();
	piglit_dispatch_glStartInstrumentsSGIX = resolve_glStartInstrumentsSGIX();
	piglit_dispatch_glStartInstrumentsSGIX();
}

PFNGLSTARTINSTRUMENTSSGIXPROC piglit_dispatch_glStartInstrumentsSGIX = stub_glStartInstrumentsSGIX;

static void*
resolve_glStartTilingQCOM(void)
{
	/* glStartTilingQCOM (GL_QCOM_tiled_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_QCOM_tiled_rendering")) {
		return get_ext_proc("glStartTilingQCOM");
	}

	unsupported("glStartTilingQCOM");
	return piglit_dispatch_glStartTilingQCOM;
}

static void APIENTRY
stub_glStartTilingQCOM(GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask)
{
	check_initialized();
	piglit_dispatch_glStartTilingQCOM = resolve_glStartTilingQCOM();
	piglit_dispatch_glStartTilingQCOM(x, y, width, height, preserveMask);
}

PFNGLSTARTTILINGQCOMPROC piglit_dispatch_glStartTilingQCOM = stub_glStartTilingQCOM;

static void*
resolve_glStencilClearTagEXT(void)
{
	/* glStencilClearTagEXT (GL_EXT_stencil_clear_tag) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_stencil_clear_tag")) {
		return get_ext_proc("glStencilClearTagEXT");
	}

	unsupported("glStencilClearTagEXT");
	return piglit_dispatch_glStencilClearTagEXT;
}

static void APIENTRY
stub_glStencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag)
{
	check_initialized();
	piglit_dispatch_glStencilClearTagEXT = resolve_glStencilClearTagEXT();
	piglit_dispatch_glStencilClearTagEXT(stencilTagBits, stencilClearTag);
}

PFNGLSTENCILCLEARTAGEXTPROC piglit_dispatch_glStencilClearTagEXT = stub_glStencilClearTagEXT;

static void*
resolve_glStencilFillPathInstancedNV(void)
{
	/* glStencilFillPathInstancedNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glStencilFillPathInstancedNV");
	}

	unsupported("glStencilFillPathInstancedNV");
	return piglit_dispatch_glStencilFillPathInstancedNV;
}

static void APIENTRY
stub_glStencilFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat * transformValues)
{
	check_initialized();
	piglit_dispatch_glStencilFillPathInstancedNV = resolve_glStencilFillPathInstancedNV();
	piglit_dispatch_glStencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
}

PFNGLSTENCILFILLPATHINSTANCEDNVPROC piglit_dispatch_glStencilFillPathInstancedNV = stub_glStencilFillPathInstancedNV;

static void*
resolve_glStencilFillPathNV(void)
{
	/* glStencilFillPathNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glStencilFillPathNV");
	}

	unsupported("glStencilFillPathNV");
	return piglit_dispatch_glStencilFillPathNV;
}

static void APIENTRY
stub_glStencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask)
{
	check_initialized();
	piglit_dispatch_glStencilFillPathNV = resolve_glStencilFillPathNV();
	piglit_dispatch_glStencilFillPathNV(path, fillMode, mask);
}

PFNGLSTENCILFILLPATHNVPROC piglit_dispatch_glStencilFillPathNV = stub_glStencilFillPathNV;

static void*
resolve_glStencilFunc(void)
{
	/* glStencilFunc (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glStencilFunc", 10);
	}

	/* glStencilFunc (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glStencilFunc", 10);
	}

	/* glStencilFunc (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glStencilFunc", 20);
	}

	unsupported("glStencilFunc");
	return piglit_dispatch_glStencilFunc;
}

static void APIENTRY
stub_glStencilFunc(GLenum func, GLint ref, GLuint mask)
{
	check_initialized();
	piglit_dispatch_glStencilFunc = resolve_glStencilFunc();
	piglit_dispatch_glStencilFunc(func, ref, mask);
}

PFNGLSTENCILFUNCPROC piglit_dispatch_glStencilFunc = stub_glStencilFunc;

static void*
resolve_glStencilFuncSeparate(void)
{
	/* glStencilFuncSeparate (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glStencilFuncSeparate", 20);
	}

	/* glStencilFuncSeparate (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glStencilFuncSeparate", 20);
	}

	unsupported("glStencilFuncSeparate");
	return piglit_dispatch_glStencilFuncSeparate;
}

static void APIENTRY
stub_glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)
{
	check_initialized();
	piglit_dispatch_glStencilFuncSeparate = resolve_glStencilFuncSeparate();
	piglit_dispatch_glStencilFuncSeparate(face, func, ref, mask);
}

PFNGLSTENCILFUNCSEPARATEPROC piglit_dispatch_glStencilFuncSeparate = stub_glStencilFuncSeparate;

static void*
resolve_glStencilFuncSeparateATI(void)
{
	/* glStencilFuncSeparateATI (GL_ATI_separate_stencil) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_separate_stencil")) {
		return get_ext_proc("glStencilFuncSeparateATI");
	}

	unsupported("glStencilFuncSeparateATI");
	return piglit_dispatch_glStencilFuncSeparateATI;
}

static void APIENTRY
stub_glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)
{
	check_initialized();
	piglit_dispatch_glStencilFuncSeparateATI = resolve_glStencilFuncSeparateATI();
	piglit_dispatch_glStencilFuncSeparateATI(frontfunc, backfunc, ref, mask);
}

PFNGLSTENCILFUNCSEPARATEATIPROC piglit_dispatch_glStencilFuncSeparateATI = stub_glStencilFuncSeparateATI;

static void*
resolve_glStencilMask(void)
{
	/* glStencilMask (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glStencilMask", 10);
	}

	/* glStencilMask (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glStencilMask", 10);
	}

	/* glStencilMask (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glStencilMask", 20);
	}

	unsupported("glStencilMask");
	return piglit_dispatch_glStencilMask;
}

static void APIENTRY
stub_glStencilMask(GLuint mask)
{
	check_initialized();
	piglit_dispatch_glStencilMask = resolve_glStencilMask();
	piglit_dispatch_glStencilMask(mask);
}

PFNGLSTENCILMASKPROC piglit_dispatch_glStencilMask = stub_glStencilMask;

static void*
resolve_glStencilMaskSeparate(void)
{
	/* glStencilMaskSeparate (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glStencilMaskSeparate", 20);
	}

	/* glStencilMaskSeparate (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glStencilMaskSeparate", 20);
	}

	unsupported("glStencilMaskSeparate");
	return piglit_dispatch_glStencilMaskSeparate;
}

static void APIENTRY
stub_glStencilMaskSeparate(GLenum face, GLuint mask)
{
	check_initialized();
	piglit_dispatch_glStencilMaskSeparate = resolve_glStencilMaskSeparate();
	piglit_dispatch_glStencilMaskSeparate(face, mask);
}

PFNGLSTENCILMASKSEPARATEPROC piglit_dispatch_glStencilMaskSeparate = stub_glStencilMaskSeparate;

static void*
resolve_glStencilOp(void)
{
	/* glStencilOp (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glStencilOp", 10);
	}

	/* glStencilOp (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glStencilOp", 10);
	}

	/* glStencilOp (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glStencilOp", 20);
	}

	unsupported("glStencilOp");
	return piglit_dispatch_glStencilOp;
}

static void APIENTRY
stub_glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)
{
	check_initialized();
	piglit_dispatch_glStencilOp = resolve_glStencilOp();
	piglit_dispatch_glStencilOp(fail, zfail, zpass);
}

PFNGLSTENCILOPPROC piglit_dispatch_glStencilOp = stub_glStencilOp;

static void*
resolve_glStencilOpSeparate(void)
{
	/* glStencilOpSeparate (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glStencilOpSeparate", 20);
	}

	/* glStencilOpSeparate (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glStencilOpSeparate", 20);
	}

	/* glStencilOpSeparateATI (GL_ATI_separate_stencil) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_separate_stencil")) {
		return get_ext_proc("glStencilOpSeparateATI");
	}

	unsupported("glStencilOpSeparate");
	return piglit_dispatch_glStencilOpSeparate;
}

static void APIENTRY
stub_glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
{
	check_initialized();
	piglit_dispatch_glStencilOpSeparate = resolve_glStencilOpSeparate();
	piglit_dispatch_glStencilOpSeparate(face, sfail, dpfail, dppass);
}

PFNGLSTENCILOPSEPARATEPROC piglit_dispatch_glStencilOpSeparate = stub_glStencilOpSeparate;

static void*
resolve_glStencilOpValueAMD(void)
{
	/* glStencilOpValueAMD (GL_AMD_stencil_operation_extended) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_stencil_operation_extended")) {
		return get_ext_proc("glStencilOpValueAMD");
	}

	unsupported("glStencilOpValueAMD");
	return piglit_dispatch_glStencilOpValueAMD;
}

static void APIENTRY
stub_glStencilOpValueAMD(GLenum face, GLuint value)
{
	check_initialized();
	piglit_dispatch_glStencilOpValueAMD = resolve_glStencilOpValueAMD();
	piglit_dispatch_glStencilOpValueAMD(face, value);
}

PFNGLSTENCILOPVALUEAMDPROC piglit_dispatch_glStencilOpValueAMD = stub_glStencilOpValueAMD;

static void*
resolve_glStencilStrokePathInstancedNV(void)
{
	/* glStencilStrokePathInstancedNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glStencilStrokePathInstancedNV");
	}

	unsupported("glStencilStrokePathInstancedNV");
	return piglit_dispatch_glStencilStrokePathInstancedNV;
}

static void APIENTRY
stub_glStencilStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat * transformValues)
{
	check_initialized();
	piglit_dispatch_glStencilStrokePathInstancedNV = resolve_glStencilStrokePathInstancedNV();
	piglit_dispatch_glStencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
}

PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC piglit_dispatch_glStencilStrokePathInstancedNV = stub_glStencilStrokePathInstancedNV;

static void*
resolve_glStencilStrokePathNV(void)
{
	/* glStencilStrokePathNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glStencilStrokePathNV");
	}

	unsupported("glStencilStrokePathNV");
	return piglit_dispatch_glStencilStrokePathNV;
}

static void APIENTRY
stub_glStencilStrokePathNV(GLuint path, GLint reference, GLuint mask)
{
	check_initialized();
	piglit_dispatch_glStencilStrokePathNV = resolve_glStencilStrokePathNV();
	piglit_dispatch_glStencilStrokePathNV(path, reference, mask);
}

PFNGLSTENCILSTROKEPATHNVPROC piglit_dispatch_glStencilStrokePathNV = stub_glStencilStrokePathNV;

static void*
resolve_glStopInstrumentsSGIX(void)
{
	/* glStopInstrumentsSGIX (GL_SGIX_instruments) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_instruments")) {
		return get_ext_proc("glStopInstrumentsSGIX");
	}

	unsupported("glStopInstrumentsSGIX");
	return piglit_dispatch_glStopInstrumentsSGIX;
}

static void APIENTRY
stub_glStopInstrumentsSGIX(GLint marker)
{
	check_initialized();
	piglit_dispatch_glStopInstrumentsSGIX = resolve_glStopInstrumentsSGIX();
	piglit_dispatch_glStopInstrumentsSGIX(marker);
}

PFNGLSTOPINSTRUMENTSSGIXPROC piglit_dispatch_glStopInstrumentsSGIX = stub_glStopInstrumentsSGIX;

static void*
resolve_glStringMarkerGREMEDY(void)
{
	/* glStringMarkerGREMEDY (GL_GREMEDY_string_marker) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_GREMEDY_string_marker")) {
		return get_ext_proc("glStringMarkerGREMEDY");
	}

	unsupported("glStringMarkerGREMEDY");
	return piglit_dispatch_glStringMarkerGREMEDY;
}

static void APIENTRY
stub_glStringMarkerGREMEDY(GLsizei len, const void * string)
{
	check_initialized();
	piglit_dispatch_glStringMarkerGREMEDY = resolve_glStringMarkerGREMEDY();
	piglit_dispatch_glStringMarkerGREMEDY(len, string);
}

PFNGLSTRINGMARKERGREMEDYPROC piglit_dispatch_glStringMarkerGREMEDY = stub_glStringMarkerGREMEDY;

static void*
resolve_glSwizzleEXT(void)
{
	/* glSwizzleEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glSwizzleEXT");
	}

	unsupported("glSwizzleEXT");
	return piglit_dispatch_glSwizzleEXT;
}

static void APIENTRY
stub_glSwizzleEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
{
	check_initialized();
	piglit_dispatch_glSwizzleEXT = resolve_glSwizzleEXT();
	piglit_dispatch_glSwizzleEXT(res, in, outX, outY, outZ, outW);
}

PFNGLSWIZZLEEXTPROC piglit_dispatch_glSwizzleEXT = stub_glSwizzleEXT;

static void*
resolve_glSyncTextureINTEL(void)
{
	/* glSyncTextureINTEL (GL_INTEL_map_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_INTEL_map_texture")) {
		return get_ext_proc("glSyncTextureINTEL");
	}

	unsupported("glSyncTextureINTEL");
	return piglit_dispatch_glSyncTextureINTEL;
}

static void APIENTRY
stub_glSyncTextureINTEL(GLuint texture)
{
	check_initialized();
	piglit_dispatch_glSyncTextureINTEL = resolve_glSyncTextureINTEL();
	piglit_dispatch_glSyncTextureINTEL(texture);
}

PFNGLSYNCTEXTUREINTELPROC piglit_dispatch_glSyncTextureINTEL = stub_glSyncTextureINTEL;

static void*
resolve_glTagSampleBufferSGIX(void)
{
	/* glTagSampleBufferSGIX (GL_SGIX_tag_sample_buffer) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIX_tag_sample_buffer")) {
		return get_ext_proc("glTagSampleBufferSGIX");
	}

	unsupported("glTagSampleBufferSGIX");
	return piglit_dispatch_glTagSampleBufferSGIX;
}

static void APIENTRY
stub_glTagSampleBufferSGIX()
{
	check_initialized();
	piglit_dispatch_glTagSampleBufferSGIX = resolve_glTagSampleBufferSGIX();
	piglit_dispatch_glTagSampleBufferSGIX();
}

PFNGLTAGSAMPLEBUFFERSGIXPROC piglit_dispatch_glTagSampleBufferSGIX = stub_glTagSampleBufferSGIX;

static void*
resolve_glTangent3bEXT(void)
{
	/* glTangent3bEXT (GL_EXT_coordinate_frame) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_coordinate_frame")) {
		return get_ext_proc("glTangent3bEXT");
	}

	unsupported("glTangent3bEXT");
	return piglit_dispatch_glTangent3bEXT;
}

static void APIENTRY
stub_glTangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz)
{
	check_initialized();
	piglit_dispatch_glTangent3bEXT = resolve_glTangent3bEXT();
	piglit_dispatch_glTangent3bEXT(tx, ty, tz);
}

PFNGLTANGENT3BEXTPROC piglit_dispatch_glTangent3bEXT = stub_glTangent3bEXT;

static void*
resolve_glTangent3bvEXT(void)
{
	/* glTangent3bvEXT (GL_EXT_coordinate_frame) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_coordinate_frame")) {
		return get_ext_proc("glTangent3bvEXT");
	}

	unsupported("glTangent3bvEXT");
	return piglit_dispatch_glTangent3bvEXT;
}

static void APIENTRY
stub_glTangent3bvEXT(const GLbyte * v)
{
	check_initialized();
	piglit_dispatch_glTangent3bvEXT = resolve_glTangent3bvEXT();
	piglit_dispatch_glTangent3bvEXT(v);
}

PFNGLTANGENT3BVEXTPROC piglit_dispatch_glTangent3bvEXT = stub_glTangent3bvEXT;

static void*
resolve_glTangent3dEXT(void)
{
	/* glTangent3dEXT (GL_EXT_coordinate_frame) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_coordinate_frame")) {
		return get_ext_proc("glTangent3dEXT");
	}

	unsupported("glTangent3dEXT");
	return piglit_dispatch_glTangent3dEXT;
}

static void APIENTRY
stub_glTangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz)
{
	check_initialized();
	piglit_dispatch_glTangent3dEXT = resolve_glTangent3dEXT();
	piglit_dispatch_glTangent3dEXT(tx, ty, tz);
}

PFNGLTANGENT3DEXTPROC piglit_dispatch_glTangent3dEXT = stub_glTangent3dEXT;

static void*
resolve_glTangent3dvEXT(void)
{
	/* glTangent3dvEXT (GL_EXT_coordinate_frame) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_coordinate_frame")) {
		return get_ext_proc("glTangent3dvEXT");
	}

	unsupported("glTangent3dvEXT");
	return piglit_dispatch_glTangent3dvEXT;
}

static void APIENTRY
stub_glTangent3dvEXT(const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glTangent3dvEXT = resolve_glTangent3dvEXT();
	piglit_dispatch_glTangent3dvEXT(v);
}

PFNGLTANGENT3DVEXTPROC piglit_dispatch_glTangent3dvEXT = stub_glTangent3dvEXT;

static void*
resolve_glTangent3fEXT(void)
{
	/* glTangent3fEXT (GL_EXT_coordinate_frame) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_coordinate_frame")) {
		return get_ext_proc("glTangent3fEXT");
	}

	unsupported("glTangent3fEXT");
	return piglit_dispatch_glTangent3fEXT;
}

static void APIENTRY
stub_glTangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz)
{
	check_initialized();
	piglit_dispatch_glTangent3fEXT = resolve_glTangent3fEXT();
	piglit_dispatch_glTangent3fEXT(tx, ty, tz);
}

PFNGLTANGENT3FEXTPROC piglit_dispatch_glTangent3fEXT = stub_glTangent3fEXT;

static void*
resolve_glTangent3fvEXT(void)
{
	/* glTangent3fvEXT (GL_EXT_coordinate_frame) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_coordinate_frame")) {
		return get_ext_proc("glTangent3fvEXT");
	}

	unsupported("glTangent3fvEXT");
	return piglit_dispatch_glTangent3fvEXT;
}

static void APIENTRY
stub_glTangent3fvEXT(const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glTangent3fvEXT = resolve_glTangent3fvEXT();
	piglit_dispatch_glTangent3fvEXT(v);
}

PFNGLTANGENT3FVEXTPROC piglit_dispatch_glTangent3fvEXT = stub_glTangent3fvEXT;

static void*
resolve_glTangent3iEXT(void)
{
	/* glTangent3iEXT (GL_EXT_coordinate_frame) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_coordinate_frame")) {
		return get_ext_proc("glTangent3iEXT");
	}

	unsupported("glTangent3iEXT");
	return piglit_dispatch_glTangent3iEXT;
}

static void APIENTRY
stub_glTangent3iEXT(GLint tx, GLint ty, GLint tz)
{
	check_initialized();
	piglit_dispatch_glTangent3iEXT = resolve_glTangent3iEXT();
	piglit_dispatch_glTangent3iEXT(tx, ty, tz);
}

PFNGLTANGENT3IEXTPROC piglit_dispatch_glTangent3iEXT = stub_glTangent3iEXT;

static void*
resolve_glTangent3ivEXT(void)
{
	/* glTangent3ivEXT (GL_EXT_coordinate_frame) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_coordinate_frame")) {
		return get_ext_proc("glTangent3ivEXT");
	}

	unsupported("glTangent3ivEXT");
	return piglit_dispatch_glTangent3ivEXT;
}

static void APIENTRY
stub_glTangent3ivEXT(const GLint * v)
{
	check_initialized();
	piglit_dispatch_glTangent3ivEXT = resolve_glTangent3ivEXT();
	piglit_dispatch_glTangent3ivEXT(v);
}

PFNGLTANGENT3IVEXTPROC piglit_dispatch_glTangent3ivEXT = stub_glTangent3ivEXT;

static void*
resolve_glTangent3sEXT(void)
{
	/* glTangent3sEXT (GL_EXT_coordinate_frame) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_coordinate_frame")) {
		return get_ext_proc("glTangent3sEXT");
	}

	unsupported("glTangent3sEXT");
	return piglit_dispatch_glTangent3sEXT;
}

static void APIENTRY
stub_glTangent3sEXT(GLshort tx, GLshort ty, GLshort tz)
{
	check_initialized();
	piglit_dispatch_glTangent3sEXT = resolve_glTangent3sEXT();
	piglit_dispatch_glTangent3sEXT(tx, ty, tz);
}

PFNGLTANGENT3SEXTPROC piglit_dispatch_glTangent3sEXT = stub_glTangent3sEXT;

static void*
resolve_glTangent3svEXT(void)
{
	/* glTangent3svEXT (GL_EXT_coordinate_frame) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_coordinate_frame")) {
		return get_ext_proc("glTangent3svEXT");
	}

	unsupported("glTangent3svEXT");
	return piglit_dispatch_glTangent3svEXT;
}

static void APIENTRY
stub_glTangent3svEXT(const GLshort * v)
{
	check_initialized();
	piglit_dispatch_glTangent3svEXT = resolve_glTangent3svEXT();
	piglit_dispatch_glTangent3svEXT(v);
}

PFNGLTANGENT3SVEXTPROC piglit_dispatch_glTangent3svEXT = stub_glTangent3svEXT;

static void*
resolve_glTangentPointerEXT(void)
{
	/* glTangentPointerEXT (GL_EXT_coordinate_frame) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_coordinate_frame")) {
		return get_ext_proc("glTangentPointerEXT");
	}

	unsupported("glTangentPointerEXT");
	return piglit_dispatch_glTangentPointerEXT;
}

static void APIENTRY
stub_glTangentPointerEXT(GLenum type, GLsizei stride, const void * pointer)
{
	check_initialized();
	piglit_dispatch_glTangentPointerEXT = resolve_glTangentPointerEXT();
	piglit_dispatch_glTangentPointerEXT(type, stride, pointer);
}

PFNGLTANGENTPOINTEREXTPROC piglit_dispatch_glTangentPointerEXT = stub_glTangentPointerEXT;

static void*
resolve_glTbufferMask3DFX(void)
{
	/* glTbufferMask3DFX (GL_3DFX_tbuffer) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_3DFX_tbuffer")) {
		return get_ext_proc("glTbufferMask3DFX");
	}

	unsupported("glTbufferMask3DFX");
	return piglit_dispatch_glTbufferMask3DFX;
}

static void APIENTRY
stub_glTbufferMask3DFX(GLuint mask)
{
	check_initialized();
	piglit_dispatch_glTbufferMask3DFX = resolve_glTbufferMask3DFX();
	piglit_dispatch_glTbufferMask3DFX(mask);
}

PFNGLTBUFFERMASK3DFXPROC piglit_dispatch_glTbufferMask3DFX = stub_glTbufferMask3DFX;

static void*
resolve_glTessellationFactorAMD(void)
{
	/* glTessellationFactorAMD (GL_AMD_vertex_shader_tessellator) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_vertex_shader_tessellator")) {
		return get_ext_proc("glTessellationFactorAMD");
	}

	unsupported("glTessellationFactorAMD");
	return piglit_dispatch_glTessellationFactorAMD;
}

static void APIENTRY
stub_glTessellationFactorAMD(GLfloat factor)
{
	check_initialized();
	piglit_dispatch_glTessellationFactorAMD = resolve_glTessellationFactorAMD();
	piglit_dispatch_glTessellationFactorAMD(factor);
}

PFNGLTESSELLATIONFACTORAMDPROC piglit_dispatch_glTessellationFactorAMD = stub_glTessellationFactorAMD;

static void*
resolve_glTessellationModeAMD(void)
{
	/* glTessellationModeAMD (GL_AMD_vertex_shader_tessellator) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_vertex_shader_tessellator")) {
		return get_ext_proc("glTessellationModeAMD");
	}

	unsupported("glTessellationModeAMD");
	return piglit_dispatch_glTessellationModeAMD;
}

static void APIENTRY
stub_glTessellationModeAMD(GLenum mode)
{
	check_initialized();
	piglit_dispatch_glTessellationModeAMD = resolve_glTessellationModeAMD();
	piglit_dispatch_glTessellationModeAMD(mode);
}

PFNGLTESSELLATIONMODEAMDPROC piglit_dispatch_glTessellationModeAMD = stub_glTessellationModeAMD;

static void*
resolve_glTestFenceAPPLE(void)
{
	/* glTestFenceAPPLE (GL_APPLE_fence) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_APPLE_fence")) {
		return get_ext_proc("glTestFenceAPPLE");
	}

	unsupported("glTestFenceAPPLE");
	return piglit_dispatch_glTestFenceAPPLE;
}

static GLboolean APIENTRY
stub_glTestFenceAPPLE(GLuint fence)
{
	check_initialized();
	piglit_dispatch_glTestFenceAPPLE = resolve_glTestFenceAPPLE();
	return piglit_dispatch_glTestFenceAPPLE(fence);
}

PFNGLTESTFENCEAPPLEPROC piglit_dispatch_glTestFenceAPPLE = stub_glTestFenceAPPLE;

static void*
resolve_glTestFenceNV(void)
{
	/* glTestFenceNV (GL_NV_fence) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_NV_fence")) {
		return get_ext_proc("glTestFenceNV");
	}

	unsupported("glTestFenceNV");
	return piglit_dispatch_glTestFenceNV;
}

static GLboolean APIENTRY
stub_glTestFenceNV(GLuint fence)
{
	check_initialized();
	piglit_dispatch_glTestFenceNV = resolve_glTestFenceNV();
	return piglit_dispatch_glTestFenceNV(fence);
}

PFNGLTESTFENCENVPROC piglit_dispatch_glTestFenceNV = stub_glTestFenceNV;

static void*
resolve_glTestObjectAPPLE(void)
{
	/* glTestObjectAPPLE (GL_APPLE_fence) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_APPLE_fence")) {
		return get_ext_proc("glTestObjectAPPLE");
	}

	unsupported("glTestObjectAPPLE");
	return piglit_dispatch_glTestObjectAPPLE;
}

static GLboolean APIENTRY
stub_glTestObjectAPPLE(GLenum object, GLuint name)
{
	check_initialized();
	piglit_dispatch_glTestObjectAPPLE = resolve_glTestObjectAPPLE();
	return piglit_dispatch_glTestObjectAPPLE(object, name);
}

PFNGLTESTOBJECTAPPLEPROC piglit_dispatch_glTestObjectAPPLE = stub_glTestObjectAPPLE;

static void*
resolve_glTexBuffer(void)
{
	/* glTexBuffer (GL_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glTexBuffer", 31);
	}

	/* glTexBufferARB (GL_ARB_texture_buffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_texture_buffer_object")) {
		return get_ext_proc("glTexBufferARB");
	}

	/* glTexBufferEXT (GL_EXT_texture_buffer) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_texture_buffer")) {
		return get_ext_proc("glTexBufferEXT");
	}

	/* glTexBufferEXT (GL_EXT_texture_buffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_texture_buffer_object")) {
		return get_ext_proc("glTexBufferEXT");
	}

	unsupported("glTexBuffer");
	return piglit_dispatch_glTexBuffer;
}

static void APIENTRY
stub_glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer)
{
	check_initialized();
	piglit_dispatch_glTexBuffer = resolve_glTexBuffer();
	piglit_dispatch_glTexBuffer(target, internalformat, buffer);
}

PFNGLTEXBUFFERPROC piglit_dispatch_glTexBuffer = stub_glTexBuffer;

static void*
resolve_glTexBufferRange(void)
{
	/* glTexBufferRange (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glTexBufferRange", 43);
	}

	/* glTexBufferRange (GL_ARB_texture_buffer_range) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_texture_buffer_range")) {
		return get_ext_proc("glTexBufferRange");
	}

	/* glTexBufferRangeEXT (GL_EXT_texture_buffer) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_texture_buffer")) {
		return get_ext_proc("glTexBufferRangeEXT");
	}

	unsupported("glTexBufferRange");
	return piglit_dispatch_glTexBufferRange;
}

static void APIENTRY
stub_glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
	check_initialized();
	piglit_dispatch_glTexBufferRange = resolve_glTexBufferRange();
	piglit_dispatch_glTexBufferRange(target, internalformat, buffer, offset, size);
}

PFNGLTEXBUFFERRANGEPROC piglit_dispatch_glTexBufferRange = stub_glTexBufferRange;

static void*
resolve_glTexBumpParameterfvATI(void)
{
	/* glTexBumpParameterfvATI (GL_ATI_envmap_bumpmap) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_envmap_bumpmap")) {
		return get_ext_proc("glTexBumpParameterfvATI");
	}

	unsupported("glTexBumpParameterfvATI");
	return piglit_dispatch_glTexBumpParameterfvATI;
}

static void APIENTRY
stub_glTexBumpParameterfvATI(GLenum pname, const GLfloat * param)
{
	check_initialized();
	piglit_dispatch_glTexBumpParameterfvATI = resolve_glTexBumpParameterfvATI();
	piglit_dispatch_glTexBumpParameterfvATI(pname, param);
}

PFNGLTEXBUMPPARAMETERFVATIPROC piglit_dispatch_glTexBumpParameterfvATI = stub_glTexBumpParameterfvATI;

static void*
resolve_glTexBumpParameterivATI(void)
{
	/* glTexBumpParameterivATI (GL_ATI_envmap_bumpmap) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_envmap_bumpmap")) {
		return get_ext_proc("glTexBumpParameterivATI");
	}

	unsupported("glTexBumpParameterivATI");
	return piglit_dispatch_glTexBumpParameterivATI;
}

static void APIENTRY
stub_glTexBumpParameterivATI(GLenum pname, const GLint * param)
{
	check_initialized();
	piglit_dispatch_glTexBumpParameterivATI = resolve_glTexBumpParameterivATI();
	piglit_dispatch_glTexBumpParameterivATI(pname, param);
}

PFNGLTEXBUMPPARAMETERIVATIPROC piglit_dispatch_glTexBumpParameterivATI = stub_glTexBumpParameterivATI;

static void*
resolve_glTexCoord1bOES(void)
{
	/* glTexCoord1bOES (GL_OES_byte_coordinates) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_byte_coordinates")) {
		return get_ext_proc("glTexCoord1bOES");
	}

	unsupported("glTexCoord1bOES");
	return piglit_dispatch_glTexCoord1bOES;
}

static void APIENTRY
stub_glTexCoord1bOES(GLbyte s)
{
	check_initialized();
	piglit_dispatch_glTexCoord1bOES = resolve_glTexCoord1bOES();
	piglit_dispatch_glTexCoord1bOES(s);
}

PFNGLTEXCOORD1BOESPROC piglit_dispatch_glTexCoord1bOES = stub_glTexCoord1bOES;

static void*
resolve_glTexCoord1bvOES(void)
{
	/* glTexCoord1bvOES (GL_OES_byte_coordinates) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_byte_coordinates")) {
		return get_ext_proc("glTexCoord1bvOES");
	}

	unsupported("glTexCoord1bvOES");
	return piglit_dispatch_glTexCoord1bvOES;
}

static void APIENTRY
stub_glTexCoord1bvOES(const GLbyte * coords)
{
	check_initialized();
	piglit_dispatch_glTexCoord1bvOES = resolve_glTexCoord1bvOES();
	piglit_dispatch_glTexCoord1bvOES(coords);
}

PFNGLTEXCOORD1BVOESPROC piglit_dispatch_glTexCoord1bvOES = stub_glTexCoord1bvOES;

static void*
resolve_glTexCoord1d(void)
{
	/* glTexCoord1d (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexCoord1d", 10);
	}

	unsupported("glTexCoord1d");
	return piglit_dispatch_glTexCoord1d;
}

static void APIENTRY
stub_glTexCoord1d(GLdouble s)
{
	check_initialized();
	piglit_dispatch_glTexCoord1d = resolve_glTexCoord1d();
	piglit_dispatch_glTexCoord1d(s);
}

PFNGLTEXCOORD1DPROC piglit_dispatch_glTexCoord1d = stub_glTexCoord1d;

static void*
resolve_glTexCoord1dv(void)
{
	/* glTexCoord1dv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexCoord1dv", 10);
	}

	unsupported("glTexCoord1dv");
	return piglit_dispatch_glTexCoord1dv;
}

static void APIENTRY
stub_glTexCoord1dv(const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glTexCoord1dv = resolve_glTexCoord1dv();
	piglit_dispatch_glTexCoord1dv(v);
}

PFNGLTEXCOORD1DVPROC piglit_dispatch_glTexCoord1dv = stub_glTexCoord1dv;

static void*
resolve_glTexCoord1f(void)
{
	/* glTexCoord1f (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexCoord1f", 10);
	}

	unsupported("glTexCoord1f");
	return piglit_dispatch_glTexCoord1f;
}

static void APIENTRY
stub_glTexCoord1f(GLfloat s)
{
	check_initialized();
	piglit_dispatch_glTexCoord1f = resolve_glTexCoord1f();
	piglit_dispatch_glTexCoord1f(s);
}

PFNGLTEXCOORD1FPROC piglit_dispatch_glTexCoord1f = stub_glTexCoord1f;

static void*
resolve_glTexCoord1fv(void)
{
	/* glTexCoord1fv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexCoord1fv", 10);
	}

	unsupported("glTexCoord1fv");
	return piglit_dispatch_glTexCoord1fv;
}

static void APIENTRY
stub_glTexCoord1fv(const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glTexCoord1fv = resolve_glTexCoord1fv();
	piglit_dispatch_glTexCoord1fv(v);
}

PFNGLTEXCOORD1FVPROC piglit_dispatch_glTexCoord1fv = stub_glTexCoord1fv;

static void*
resolve_glTexCoord1hNV(void)
{
	/* glTexCoord1hNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glTexCoord1hNV");
	}

	unsupported("glTexCoord1hNV");
	return piglit_dispatch_glTexCoord1hNV;
}

static void APIENTRY
stub_glTexCoord1hNV(GLhalfNV s)
{
	check_initialized();
	piglit_dispatch_glTexCoord1hNV = resolve_glTexCoord1hNV();
	piglit_dispatch_glTexCoord1hNV(s);
}

PFNGLTEXCOORD1HNVPROC piglit_dispatch_glTexCoord1hNV = stub_glTexCoord1hNV;

static void*
resolve_glTexCoord1hvNV(void)
{
	/* glTexCoord1hvNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glTexCoord1hvNV");
	}

	unsupported("glTexCoord1hvNV");
	return piglit_dispatch_glTexCoord1hvNV;
}

static void APIENTRY
stub_glTexCoord1hvNV(const GLhalfNV * v)
{
	check_initialized();
	piglit_dispatch_glTexCoord1hvNV = resolve_glTexCoord1hvNV();
	piglit_dispatch_glTexCoord1hvNV(v);
}

PFNGLTEXCOORD1HVNVPROC piglit_dispatch_glTexCoord1hvNV = stub_glTexCoord1hvNV;

static void*
resolve_glTexCoord1i(void)
{
	/* glTexCoord1i (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexCoord1i", 10);
	}

	unsupported("glTexCoord1i");
	return piglit_dispatch_glTexCoord1i;
}

static void APIENTRY
stub_glTexCoord1i(GLint s)
{
	check_initialized();
	piglit_dispatch_glTexCoord1i = resolve_glTexCoord1i();
	piglit_dispatch_glTexCoord1i(s);
}

PFNGLTEXCOORD1IPROC piglit_dispatch_glTexCoord1i = stub_glTexCoord1i;

static void*
resolve_glTexCoord1iv(void)
{
	/* glTexCoord1iv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexCoord1iv", 10);
	}

	unsupported("glTexCoord1iv");
	return piglit_dispatch_glTexCoord1iv;
}

static void APIENTRY
stub_glTexCoord1iv(const GLint * v)
{
	check_initialized();
	piglit_dispatch_glTexCoord1iv = resolve_glTexCoord1iv();
	piglit_dispatch_glTexCoord1iv(v);
}

PFNGLTEXCOORD1IVPROC piglit_dispatch_glTexCoord1iv = stub_glTexCoord1iv;

static void*
resolve_glTexCoord1s(void)
{
	/* glTexCoord1s (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexCoord1s", 10);
	}

	unsupported("glTexCoord1s");
	return piglit_dispatch_glTexCoord1s;
}

static void APIENTRY
stub_glTexCoord1s(GLshort s)
{
	check_initialized();
	piglit_dispatch_glTexCoord1s = resolve_glTexCoord1s();
	piglit_dispatch_glTexCoord1s(s);
}

PFNGLTEXCOORD1SPROC piglit_dispatch_glTexCoord1s = stub_glTexCoord1s;

static void*
resolve_glTexCoord1sv(void)
{
	/* glTexCoord1sv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexCoord1sv", 10);
	}

	unsupported("glTexCoord1sv");
	return piglit_dispatch_glTexCoord1sv;
}

static void APIENTRY
stub_glTexCoord1sv(const GLshort * v)
{
	check_initialized();
	piglit_dispatch_glTexCoord1sv = resolve_glTexCoord1sv();
	piglit_dispatch_glTexCoord1sv(v);
}

PFNGLTEXCOORD1SVPROC piglit_dispatch_glTexCoord1sv = stub_glTexCoord1sv;

static void*
resolve_glTexCoord1xOES(void)
{
	/* glTexCoord1xOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glTexCoord1xOES");
	}

	unsupported("glTexCoord1xOES");
	return piglit_dispatch_glTexCoord1xOES;
}

static void APIENTRY
stub_glTexCoord1xOES(GLfixed s)
{
	check_initialized();
	piglit_dispatch_glTexCoord1xOES = resolve_glTexCoord1xOES();
	piglit_dispatch_glTexCoord1xOES(s);
}

PFNGLTEXCOORD1XOESPROC piglit_dispatch_glTexCoord1xOES = stub_glTexCoord1xOES;

static void*
resolve_glTexCoord1xvOES(void)
{
	/* glTexCoord1xvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glTexCoord1xvOES");
	}

	unsupported("glTexCoord1xvOES");
	return piglit_dispatch_glTexCoord1xvOES;
}

static void APIENTRY
stub_glTexCoord1xvOES(const GLfixed * coords)
{
	check_initialized();
	piglit_dispatch_glTexCoord1xvOES = resolve_glTexCoord1xvOES();
	piglit_dispatch_glTexCoord1xvOES(coords);
}

PFNGLTEXCOORD1XVOESPROC piglit_dispatch_glTexCoord1xvOES = stub_glTexCoord1xvOES;

static void*
resolve_glTexCoord2bOES(void)
{
	/* glTexCoord2bOES (GL_OES_byte_coordinates) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_byte_coordinates")) {
		return get_ext_proc("glTexCoord2bOES");
	}

	unsupported("glTexCoord2bOES");
	return piglit_dispatch_glTexCoord2bOES;
}

static void APIENTRY
stub_glTexCoord2bOES(GLbyte s, GLbyte t)
{
	check_initialized();
	piglit_dispatch_glTexCoord2bOES = resolve_glTexCoord2bOES();
	piglit_dispatch_glTexCoord2bOES(s, t);
}

PFNGLTEXCOORD2BOESPROC piglit_dispatch_glTexCoord2bOES = stub_glTexCoord2bOES;

static void*
resolve_glTexCoord2bvOES(void)
{
	/* glTexCoord2bvOES (GL_OES_byte_coordinates) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_byte_coordinates")) {
		return get_ext_proc("glTexCoord2bvOES");
	}

	unsupported("glTexCoord2bvOES");
	return piglit_dispatch_glTexCoord2bvOES;
}

static void APIENTRY
stub_glTexCoord2bvOES(const GLbyte * coords)
{
	check_initialized();
	piglit_dispatch_glTexCoord2bvOES = resolve_glTexCoord2bvOES();
	piglit_dispatch_glTexCoord2bvOES(coords);
}

PFNGLTEXCOORD2BVOESPROC piglit_dispatch_glTexCoord2bvOES = stub_glTexCoord2bvOES;

static void*
resolve_glTexCoord2d(void)
{
	/* glTexCoord2d (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexCoord2d", 10);
	}

	unsupported("glTexCoord2d");
	return piglit_dispatch_glTexCoord2d;
}

static void APIENTRY
stub_glTexCoord2d(GLdouble s, GLdouble t)
{
	check_initialized();
	piglit_dispatch_glTexCoord2d = resolve_glTexCoord2d();
	piglit_dispatch_glTexCoord2d(s, t);
}

PFNGLTEXCOORD2DPROC piglit_dispatch_glTexCoord2d = stub_glTexCoord2d;

static void*
resolve_glTexCoord2dv(void)
{
	/* glTexCoord2dv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexCoord2dv", 10);
	}

	unsupported("glTexCoord2dv");
	return piglit_dispatch_glTexCoord2dv;
}

static void APIENTRY
stub_glTexCoord2dv(const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glTexCoord2dv = resolve_glTexCoord2dv();
	piglit_dispatch_glTexCoord2dv(v);
}

PFNGLTEXCOORD2DVPROC piglit_dispatch_glTexCoord2dv = stub_glTexCoord2dv;

static void*
resolve_glTexCoord2f(void)
{
	/* glTexCoord2f (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexCoord2f", 10);
	}

	unsupported("glTexCoord2f");
	return piglit_dispatch_glTexCoord2f;
}

static void APIENTRY
stub_glTexCoord2f(GLfloat s, GLfloat t)
{
	check_initialized();
	piglit_dispatch_glTexCoord2f = resolve_glTexCoord2f();
	piglit_dispatch_glTexCoord2f(s, t);
}

PFNGLTEXCOORD2FPROC piglit_dispatch_glTexCoord2f = stub_glTexCoord2f;

static void*
resolve_glTexCoord2fColor3fVertex3fSUN(void)
{
	/* glTexCoord2fColor3fVertex3fSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glTexCoord2fColor3fVertex3fSUN");
	}

	unsupported("glTexCoord2fColor3fVertex3fSUN");
	return piglit_dispatch_glTexCoord2fColor3fVertex3fSUN;
}

static void APIENTRY
stub_glTexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
{
	check_initialized();
	piglit_dispatch_glTexCoord2fColor3fVertex3fSUN = resolve_glTexCoord2fColor3fVertex3fSUN();
	piglit_dispatch_glTexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z);
}

PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC piglit_dispatch_glTexCoord2fColor3fVertex3fSUN = stub_glTexCoord2fColor3fVertex3fSUN;

static void*
resolve_glTexCoord2fColor3fVertex3fvSUN(void)
{
	/* glTexCoord2fColor3fVertex3fvSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glTexCoord2fColor3fVertex3fvSUN");
	}

	unsupported("glTexCoord2fColor3fVertex3fvSUN");
	return piglit_dispatch_glTexCoord2fColor3fVertex3fvSUN;
}

static void APIENTRY
stub_glTexCoord2fColor3fVertex3fvSUN(const GLfloat * tc, const GLfloat * c, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glTexCoord2fColor3fVertex3fvSUN = resolve_glTexCoord2fColor3fVertex3fvSUN();
	piglit_dispatch_glTexCoord2fColor3fVertex3fvSUN(tc, c, v);
}

PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC piglit_dispatch_glTexCoord2fColor3fVertex3fvSUN = stub_glTexCoord2fColor3fVertex3fvSUN;

static void*
resolve_glTexCoord2fColor4fNormal3fVertex3fSUN(void)
{
	/* glTexCoord2fColor4fNormal3fVertex3fSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glTexCoord2fColor4fNormal3fVertex3fSUN");
	}

	unsupported("glTexCoord2fColor4fNormal3fVertex3fSUN");
	return piglit_dispatch_glTexCoord2fColor4fNormal3fVertex3fSUN;
}

static void APIENTRY
stub_glTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
	check_initialized();
	piglit_dispatch_glTexCoord2fColor4fNormal3fVertex3fSUN = resolve_glTexCoord2fColor4fNormal3fVertex3fSUN();
	piglit_dispatch_glTexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z);
}

PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC piglit_dispatch_glTexCoord2fColor4fNormal3fVertex3fSUN = stub_glTexCoord2fColor4fNormal3fVertex3fSUN;

static void*
resolve_glTexCoord2fColor4fNormal3fVertex3fvSUN(void)
{
	/* glTexCoord2fColor4fNormal3fVertex3fvSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glTexCoord2fColor4fNormal3fVertex3fvSUN");
	}

	unsupported("glTexCoord2fColor4fNormal3fVertex3fvSUN");
	return piglit_dispatch_glTexCoord2fColor4fNormal3fVertex3fvSUN;
}

static void APIENTRY
stub_glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glTexCoord2fColor4fNormal3fVertex3fvSUN = resolve_glTexCoord2fColor4fNormal3fVertex3fvSUN();
	piglit_dispatch_glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v);
}

PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC piglit_dispatch_glTexCoord2fColor4fNormal3fVertex3fvSUN = stub_glTexCoord2fColor4fNormal3fVertex3fvSUN;

static void*
resolve_glTexCoord2fColor4ubVertex3fSUN(void)
{
	/* glTexCoord2fColor4ubVertex3fSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glTexCoord2fColor4ubVertex3fSUN");
	}

	unsupported("glTexCoord2fColor4ubVertex3fSUN");
	return piglit_dispatch_glTexCoord2fColor4ubVertex3fSUN;
}

static void APIENTRY
stub_glTexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
{
	check_initialized();
	piglit_dispatch_glTexCoord2fColor4ubVertex3fSUN = resolve_glTexCoord2fColor4ubVertex3fSUN();
	piglit_dispatch_glTexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z);
}

PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC piglit_dispatch_glTexCoord2fColor4ubVertex3fSUN = stub_glTexCoord2fColor4ubVertex3fSUN;

static void*
resolve_glTexCoord2fColor4ubVertex3fvSUN(void)
{
	/* glTexCoord2fColor4ubVertex3fvSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glTexCoord2fColor4ubVertex3fvSUN");
	}

	unsupported("glTexCoord2fColor4ubVertex3fvSUN");
	return piglit_dispatch_glTexCoord2fColor4ubVertex3fvSUN;
}

static void APIENTRY
stub_glTexCoord2fColor4ubVertex3fvSUN(const GLfloat * tc, const GLubyte * c, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glTexCoord2fColor4ubVertex3fvSUN = resolve_glTexCoord2fColor4ubVertex3fvSUN();
	piglit_dispatch_glTexCoord2fColor4ubVertex3fvSUN(tc, c, v);
}

PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC piglit_dispatch_glTexCoord2fColor4ubVertex3fvSUN = stub_glTexCoord2fColor4ubVertex3fvSUN;

static void*
resolve_glTexCoord2fNormal3fVertex3fSUN(void)
{
	/* glTexCoord2fNormal3fVertex3fSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glTexCoord2fNormal3fVertex3fSUN");
	}

	unsupported("glTexCoord2fNormal3fVertex3fSUN");
	return piglit_dispatch_glTexCoord2fNormal3fVertex3fSUN;
}

static void APIENTRY
stub_glTexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
	check_initialized();
	piglit_dispatch_glTexCoord2fNormal3fVertex3fSUN = resolve_glTexCoord2fNormal3fVertex3fSUN();
	piglit_dispatch_glTexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z);
}

PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC piglit_dispatch_glTexCoord2fNormal3fVertex3fSUN = stub_glTexCoord2fNormal3fVertex3fSUN;

static void*
resolve_glTexCoord2fNormal3fVertex3fvSUN(void)
{
	/* glTexCoord2fNormal3fVertex3fvSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glTexCoord2fNormal3fVertex3fvSUN");
	}

	unsupported("glTexCoord2fNormal3fVertex3fvSUN");
	return piglit_dispatch_glTexCoord2fNormal3fVertex3fvSUN;
}

static void APIENTRY
stub_glTexCoord2fNormal3fVertex3fvSUN(const GLfloat * tc, const GLfloat * n, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glTexCoord2fNormal3fVertex3fvSUN = resolve_glTexCoord2fNormal3fVertex3fvSUN();
	piglit_dispatch_glTexCoord2fNormal3fVertex3fvSUN(tc, n, v);
}

PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC piglit_dispatch_glTexCoord2fNormal3fVertex3fvSUN = stub_glTexCoord2fNormal3fVertex3fvSUN;

static void*
resolve_glTexCoord2fVertex3fSUN(void)
{
	/* glTexCoord2fVertex3fSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glTexCoord2fVertex3fSUN");
	}

	unsupported("glTexCoord2fVertex3fSUN");
	return piglit_dispatch_glTexCoord2fVertex3fSUN;
}

static void APIENTRY
stub_glTexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
{
	check_initialized();
	piglit_dispatch_glTexCoord2fVertex3fSUN = resolve_glTexCoord2fVertex3fSUN();
	piglit_dispatch_glTexCoord2fVertex3fSUN(s, t, x, y, z);
}

PFNGLTEXCOORD2FVERTEX3FSUNPROC piglit_dispatch_glTexCoord2fVertex3fSUN = stub_glTexCoord2fVertex3fSUN;

static void*
resolve_glTexCoord2fVertex3fvSUN(void)
{
	/* glTexCoord2fVertex3fvSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glTexCoord2fVertex3fvSUN");
	}

	unsupported("glTexCoord2fVertex3fvSUN");
	return piglit_dispatch_glTexCoord2fVertex3fvSUN;
}

static void APIENTRY
stub_glTexCoord2fVertex3fvSUN(const GLfloat * tc, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glTexCoord2fVertex3fvSUN = resolve_glTexCoord2fVertex3fvSUN();
	piglit_dispatch_glTexCoord2fVertex3fvSUN(tc, v);
}

PFNGLTEXCOORD2FVERTEX3FVSUNPROC piglit_dispatch_glTexCoord2fVertex3fvSUN = stub_glTexCoord2fVertex3fvSUN;

static void*
resolve_glTexCoord2fv(void)
{
	/* glTexCoord2fv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexCoord2fv", 10);
	}

	unsupported("glTexCoord2fv");
	return piglit_dispatch_glTexCoord2fv;
}

static void APIENTRY
stub_glTexCoord2fv(const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glTexCoord2fv = resolve_glTexCoord2fv();
	piglit_dispatch_glTexCoord2fv(v);
}

PFNGLTEXCOORD2FVPROC piglit_dispatch_glTexCoord2fv = stub_glTexCoord2fv;

static void*
resolve_glTexCoord2hNV(void)
{
	/* glTexCoord2hNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glTexCoord2hNV");
	}

	unsupported("glTexCoord2hNV");
	return piglit_dispatch_glTexCoord2hNV;
}

static void APIENTRY
stub_glTexCoord2hNV(GLhalfNV s, GLhalfNV t)
{
	check_initialized();
	piglit_dispatch_glTexCoord2hNV = resolve_glTexCoord2hNV();
	piglit_dispatch_glTexCoord2hNV(s, t);
}

PFNGLTEXCOORD2HNVPROC piglit_dispatch_glTexCoord2hNV = stub_glTexCoord2hNV;

static void*
resolve_glTexCoord2hvNV(void)
{
	/* glTexCoord2hvNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glTexCoord2hvNV");
	}

	unsupported("glTexCoord2hvNV");
	return piglit_dispatch_glTexCoord2hvNV;
}

static void APIENTRY
stub_glTexCoord2hvNV(const GLhalfNV * v)
{
	check_initialized();
	piglit_dispatch_glTexCoord2hvNV = resolve_glTexCoord2hvNV();
	piglit_dispatch_glTexCoord2hvNV(v);
}

PFNGLTEXCOORD2HVNVPROC piglit_dispatch_glTexCoord2hvNV = stub_glTexCoord2hvNV;

static void*
resolve_glTexCoord2i(void)
{
	/* glTexCoord2i (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexCoord2i", 10);
	}

	unsupported("glTexCoord2i");
	return piglit_dispatch_glTexCoord2i;
}

static void APIENTRY
stub_glTexCoord2i(GLint s, GLint t)
{
	check_initialized();
	piglit_dispatch_glTexCoord2i = resolve_glTexCoord2i();
	piglit_dispatch_glTexCoord2i(s, t);
}

PFNGLTEXCOORD2IPROC piglit_dispatch_glTexCoord2i = stub_glTexCoord2i;

static void*
resolve_glTexCoord2iv(void)
{
	/* glTexCoord2iv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexCoord2iv", 10);
	}

	unsupported("glTexCoord2iv");
	return piglit_dispatch_glTexCoord2iv;
}

static void APIENTRY
stub_glTexCoord2iv(const GLint * v)
{
	check_initialized();
	piglit_dispatch_glTexCoord2iv = resolve_glTexCoord2iv();
	piglit_dispatch_glTexCoord2iv(v);
}

PFNGLTEXCOORD2IVPROC piglit_dispatch_glTexCoord2iv = stub_glTexCoord2iv;

static void*
resolve_glTexCoord2s(void)
{
	/* glTexCoord2s (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexCoord2s", 10);
	}

	unsupported("glTexCoord2s");
	return piglit_dispatch_glTexCoord2s;
}

static void APIENTRY
stub_glTexCoord2s(GLshort s, GLshort t)
{
	check_initialized();
	piglit_dispatch_glTexCoord2s = resolve_glTexCoord2s();
	piglit_dispatch_glTexCoord2s(s, t);
}

PFNGLTEXCOORD2SPROC piglit_dispatch_glTexCoord2s = stub_glTexCoord2s;

static void*
resolve_glTexCoord2sv(void)
{
	/* glTexCoord2sv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexCoord2sv", 10);
	}

	unsupported("glTexCoord2sv");
	return piglit_dispatch_glTexCoord2sv;
}

static void APIENTRY
stub_glTexCoord2sv(const GLshort * v)
{
	check_initialized();
	piglit_dispatch_glTexCoord2sv = resolve_glTexCoord2sv();
	piglit_dispatch_glTexCoord2sv(v);
}

PFNGLTEXCOORD2SVPROC piglit_dispatch_glTexCoord2sv = stub_glTexCoord2sv;

static void*
resolve_glTexCoord2xOES(void)
{
	/* glTexCoord2xOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glTexCoord2xOES");
	}

	unsupported("glTexCoord2xOES");
	return piglit_dispatch_glTexCoord2xOES;
}

static void APIENTRY
stub_glTexCoord2xOES(GLfixed s, GLfixed t)
{
	check_initialized();
	piglit_dispatch_glTexCoord2xOES = resolve_glTexCoord2xOES();
	piglit_dispatch_glTexCoord2xOES(s, t);
}

PFNGLTEXCOORD2XOESPROC piglit_dispatch_glTexCoord2xOES = stub_glTexCoord2xOES;

static void*
resolve_glTexCoord2xvOES(void)
{
	/* glTexCoord2xvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glTexCoord2xvOES");
	}

	unsupported("glTexCoord2xvOES");
	return piglit_dispatch_glTexCoord2xvOES;
}

static void APIENTRY
stub_glTexCoord2xvOES(const GLfixed * coords)
{
	check_initialized();
	piglit_dispatch_glTexCoord2xvOES = resolve_glTexCoord2xvOES();
	piglit_dispatch_glTexCoord2xvOES(coords);
}

PFNGLTEXCOORD2XVOESPROC piglit_dispatch_glTexCoord2xvOES = stub_glTexCoord2xvOES;

static void*
resolve_glTexCoord3bOES(void)
{
	/* glTexCoord3bOES (GL_OES_byte_coordinates) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_byte_coordinates")) {
		return get_ext_proc("glTexCoord3bOES");
	}

	unsupported("glTexCoord3bOES");
	return piglit_dispatch_glTexCoord3bOES;
}

static void APIENTRY
stub_glTexCoord3bOES(GLbyte s, GLbyte t, GLbyte r)
{
	check_initialized();
	piglit_dispatch_glTexCoord3bOES = resolve_glTexCoord3bOES();
	piglit_dispatch_glTexCoord3bOES(s, t, r);
}

PFNGLTEXCOORD3BOESPROC piglit_dispatch_glTexCoord3bOES = stub_glTexCoord3bOES;

static void*
resolve_glTexCoord3bvOES(void)
{
	/* glTexCoord3bvOES (GL_OES_byte_coordinates) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_byte_coordinates")) {
		return get_ext_proc("glTexCoord3bvOES");
	}

	unsupported("glTexCoord3bvOES");
	return piglit_dispatch_glTexCoord3bvOES;
}

static void APIENTRY
stub_glTexCoord3bvOES(const GLbyte * coords)
{
	check_initialized();
	piglit_dispatch_glTexCoord3bvOES = resolve_glTexCoord3bvOES();
	piglit_dispatch_glTexCoord3bvOES(coords);
}

PFNGLTEXCOORD3BVOESPROC piglit_dispatch_glTexCoord3bvOES = stub_glTexCoord3bvOES;

static void*
resolve_glTexCoord3d(void)
{
	/* glTexCoord3d (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexCoord3d", 10);
	}

	unsupported("glTexCoord3d");
	return piglit_dispatch_glTexCoord3d;
}

static void APIENTRY
stub_glTexCoord3d(GLdouble s, GLdouble t, GLdouble r)
{
	check_initialized();
	piglit_dispatch_glTexCoord3d = resolve_glTexCoord3d();
	piglit_dispatch_glTexCoord3d(s, t, r);
}

PFNGLTEXCOORD3DPROC piglit_dispatch_glTexCoord3d = stub_glTexCoord3d;

static void*
resolve_glTexCoord3dv(void)
{
	/* glTexCoord3dv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexCoord3dv", 10);
	}

	unsupported("glTexCoord3dv");
	return piglit_dispatch_glTexCoord3dv;
}

static void APIENTRY
stub_glTexCoord3dv(const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glTexCoord3dv = resolve_glTexCoord3dv();
	piglit_dispatch_glTexCoord3dv(v);
}

PFNGLTEXCOORD3DVPROC piglit_dispatch_glTexCoord3dv = stub_glTexCoord3dv;

static void*
resolve_glTexCoord3f(void)
{
	/* glTexCoord3f (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexCoord3f", 10);
	}

	unsupported("glTexCoord3f");
	return piglit_dispatch_glTexCoord3f;
}

static void APIENTRY
stub_glTexCoord3f(GLfloat s, GLfloat t, GLfloat r)
{
	check_initialized();
	piglit_dispatch_glTexCoord3f = resolve_glTexCoord3f();
	piglit_dispatch_glTexCoord3f(s, t, r);
}

PFNGLTEXCOORD3FPROC piglit_dispatch_glTexCoord3f = stub_glTexCoord3f;

static void*
resolve_glTexCoord3fv(void)
{
	/* glTexCoord3fv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexCoord3fv", 10);
	}

	unsupported("glTexCoord3fv");
	return piglit_dispatch_glTexCoord3fv;
}

static void APIENTRY
stub_glTexCoord3fv(const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glTexCoord3fv = resolve_glTexCoord3fv();
	piglit_dispatch_glTexCoord3fv(v);
}

PFNGLTEXCOORD3FVPROC piglit_dispatch_glTexCoord3fv = stub_glTexCoord3fv;

static void*
resolve_glTexCoord3hNV(void)
{
	/* glTexCoord3hNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glTexCoord3hNV");
	}

	unsupported("glTexCoord3hNV");
	return piglit_dispatch_glTexCoord3hNV;
}

static void APIENTRY
stub_glTexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r)
{
	check_initialized();
	piglit_dispatch_glTexCoord3hNV = resolve_glTexCoord3hNV();
	piglit_dispatch_glTexCoord3hNV(s, t, r);
}

PFNGLTEXCOORD3HNVPROC piglit_dispatch_glTexCoord3hNV = stub_glTexCoord3hNV;

static void*
resolve_glTexCoord3hvNV(void)
{
	/* glTexCoord3hvNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glTexCoord3hvNV");
	}

	unsupported("glTexCoord3hvNV");
	return piglit_dispatch_glTexCoord3hvNV;
}

static void APIENTRY
stub_glTexCoord3hvNV(const GLhalfNV * v)
{
	check_initialized();
	piglit_dispatch_glTexCoord3hvNV = resolve_glTexCoord3hvNV();
	piglit_dispatch_glTexCoord3hvNV(v);
}

PFNGLTEXCOORD3HVNVPROC piglit_dispatch_glTexCoord3hvNV = stub_glTexCoord3hvNV;

static void*
resolve_glTexCoord3i(void)
{
	/* glTexCoord3i (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexCoord3i", 10);
	}

	unsupported("glTexCoord3i");
	return piglit_dispatch_glTexCoord3i;
}

static void APIENTRY
stub_glTexCoord3i(GLint s, GLint t, GLint r)
{
	check_initialized();
	piglit_dispatch_glTexCoord3i = resolve_glTexCoord3i();
	piglit_dispatch_glTexCoord3i(s, t, r);
}

PFNGLTEXCOORD3IPROC piglit_dispatch_glTexCoord3i = stub_glTexCoord3i;

static void*
resolve_glTexCoord3iv(void)
{
	/* glTexCoord3iv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexCoord3iv", 10);
	}

	unsupported("glTexCoord3iv");
	return piglit_dispatch_glTexCoord3iv;
}

static void APIENTRY
stub_glTexCoord3iv(const GLint * v)
{
	check_initialized();
	piglit_dispatch_glTexCoord3iv = resolve_glTexCoord3iv();
	piglit_dispatch_glTexCoord3iv(v);
}

PFNGLTEXCOORD3IVPROC piglit_dispatch_glTexCoord3iv = stub_glTexCoord3iv;

static void*
resolve_glTexCoord3s(void)
{
	/* glTexCoord3s (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexCoord3s", 10);
	}

	unsupported("glTexCoord3s");
	return piglit_dispatch_glTexCoord3s;
}

static void APIENTRY
stub_glTexCoord3s(GLshort s, GLshort t, GLshort r)
{
	check_initialized();
	piglit_dispatch_glTexCoord3s = resolve_glTexCoord3s();
	piglit_dispatch_glTexCoord3s(s, t, r);
}

PFNGLTEXCOORD3SPROC piglit_dispatch_glTexCoord3s = stub_glTexCoord3s;

static void*
resolve_glTexCoord3sv(void)
{
	/* glTexCoord3sv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexCoord3sv", 10);
	}

	unsupported("glTexCoord3sv");
	return piglit_dispatch_glTexCoord3sv;
}

static void APIENTRY
stub_glTexCoord3sv(const GLshort * v)
{
	check_initialized();
	piglit_dispatch_glTexCoord3sv = resolve_glTexCoord3sv();
	piglit_dispatch_glTexCoord3sv(v);
}

PFNGLTEXCOORD3SVPROC piglit_dispatch_glTexCoord3sv = stub_glTexCoord3sv;

static void*
resolve_glTexCoord3xOES(void)
{
	/* glTexCoord3xOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glTexCoord3xOES");
	}

	unsupported("glTexCoord3xOES");
	return piglit_dispatch_glTexCoord3xOES;
}

static void APIENTRY
stub_glTexCoord3xOES(GLfixed s, GLfixed t, GLfixed r)
{
	check_initialized();
	piglit_dispatch_glTexCoord3xOES = resolve_glTexCoord3xOES();
	piglit_dispatch_glTexCoord3xOES(s, t, r);
}

PFNGLTEXCOORD3XOESPROC piglit_dispatch_glTexCoord3xOES = stub_glTexCoord3xOES;

static void*
resolve_glTexCoord3xvOES(void)
{
	/* glTexCoord3xvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glTexCoord3xvOES");
	}

	unsupported("glTexCoord3xvOES");
	return piglit_dispatch_glTexCoord3xvOES;
}

static void APIENTRY
stub_glTexCoord3xvOES(const GLfixed * coords)
{
	check_initialized();
	piglit_dispatch_glTexCoord3xvOES = resolve_glTexCoord3xvOES();
	piglit_dispatch_glTexCoord3xvOES(coords);
}

PFNGLTEXCOORD3XVOESPROC piglit_dispatch_glTexCoord3xvOES = stub_glTexCoord3xvOES;

static void*
resolve_glTexCoord4bOES(void)
{
	/* glTexCoord4bOES (GL_OES_byte_coordinates) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_byte_coordinates")) {
		return get_ext_proc("glTexCoord4bOES");
	}

	unsupported("glTexCoord4bOES");
	return piglit_dispatch_glTexCoord4bOES;
}

static void APIENTRY
stub_glTexCoord4bOES(GLbyte s, GLbyte t, GLbyte r, GLbyte q)
{
	check_initialized();
	piglit_dispatch_glTexCoord4bOES = resolve_glTexCoord4bOES();
	piglit_dispatch_glTexCoord4bOES(s, t, r, q);
}

PFNGLTEXCOORD4BOESPROC piglit_dispatch_glTexCoord4bOES = stub_glTexCoord4bOES;

static void*
resolve_glTexCoord4bvOES(void)
{
	/* glTexCoord4bvOES (GL_OES_byte_coordinates) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_byte_coordinates")) {
		return get_ext_proc("glTexCoord4bvOES");
	}

	unsupported("glTexCoord4bvOES");
	return piglit_dispatch_glTexCoord4bvOES;
}

static void APIENTRY
stub_glTexCoord4bvOES(const GLbyte * coords)
{
	check_initialized();
	piglit_dispatch_glTexCoord4bvOES = resolve_glTexCoord4bvOES();
	piglit_dispatch_glTexCoord4bvOES(coords);
}

PFNGLTEXCOORD4BVOESPROC piglit_dispatch_glTexCoord4bvOES = stub_glTexCoord4bvOES;

static void*
resolve_glTexCoord4d(void)
{
	/* glTexCoord4d (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexCoord4d", 10);
	}

	unsupported("glTexCoord4d");
	return piglit_dispatch_glTexCoord4d;
}

static void APIENTRY
stub_glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
	check_initialized();
	piglit_dispatch_glTexCoord4d = resolve_glTexCoord4d();
	piglit_dispatch_glTexCoord4d(s, t, r, q);
}

PFNGLTEXCOORD4DPROC piglit_dispatch_glTexCoord4d = stub_glTexCoord4d;

static void*
resolve_glTexCoord4dv(void)
{
	/* glTexCoord4dv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexCoord4dv", 10);
	}

	unsupported("glTexCoord4dv");
	return piglit_dispatch_glTexCoord4dv;
}

static void APIENTRY
stub_glTexCoord4dv(const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glTexCoord4dv = resolve_glTexCoord4dv();
	piglit_dispatch_glTexCoord4dv(v);
}

PFNGLTEXCOORD4DVPROC piglit_dispatch_glTexCoord4dv = stub_glTexCoord4dv;

static void*
resolve_glTexCoord4f(void)
{
	/* glTexCoord4f (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexCoord4f", 10);
	}

	unsupported("glTexCoord4f");
	return piglit_dispatch_glTexCoord4f;
}

static void APIENTRY
stub_glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
	check_initialized();
	piglit_dispatch_glTexCoord4f = resolve_glTexCoord4f();
	piglit_dispatch_glTexCoord4f(s, t, r, q);
}

PFNGLTEXCOORD4FPROC piglit_dispatch_glTexCoord4f = stub_glTexCoord4f;

static void*
resolve_glTexCoord4fColor4fNormal3fVertex4fSUN(void)
{
	/* glTexCoord4fColor4fNormal3fVertex4fSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glTexCoord4fColor4fNormal3fVertex4fSUN");
	}

	unsupported("glTexCoord4fColor4fNormal3fVertex4fSUN");
	return piglit_dispatch_glTexCoord4fColor4fNormal3fVertex4fSUN;
}

static void APIENTRY
stub_glTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
	check_initialized();
	piglit_dispatch_glTexCoord4fColor4fNormal3fVertex4fSUN = resolve_glTexCoord4fColor4fNormal3fVertex4fSUN();
	piglit_dispatch_glTexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
}

PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC piglit_dispatch_glTexCoord4fColor4fNormal3fVertex4fSUN = stub_glTexCoord4fColor4fNormal3fVertex4fSUN;

static void*
resolve_glTexCoord4fColor4fNormal3fVertex4fvSUN(void)
{
	/* glTexCoord4fColor4fNormal3fVertex4fvSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glTexCoord4fColor4fNormal3fVertex4fvSUN");
	}

	unsupported("glTexCoord4fColor4fNormal3fVertex4fvSUN");
	return piglit_dispatch_glTexCoord4fColor4fNormal3fVertex4fvSUN;
}

static void APIENTRY
stub_glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glTexCoord4fColor4fNormal3fVertex4fvSUN = resolve_glTexCoord4fColor4fNormal3fVertex4fvSUN();
	piglit_dispatch_glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v);
}

PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC piglit_dispatch_glTexCoord4fColor4fNormal3fVertex4fvSUN = stub_glTexCoord4fColor4fNormal3fVertex4fvSUN;

static void*
resolve_glTexCoord4fVertex4fSUN(void)
{
	/* glTexCoord4fVertex4fSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glTexCoord4fVertex4fSUN");
	}

	unsupported("glTexCoord4fVertex4fSUN");
	return piglit_dispatch_glTexCoord4fVertex4fSUN;
}

static void APIENTRY
stub_glTexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
	check_initialized();
	piglit_dispatch_glTexCoord4fVertex4fSUN = resolve_glTexCoord4fVertex4fSUN();
	piglit_dispatch_glTexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w);
}

PFNGLTEXCOORD4FVERTEX4FSUNPROC piglit_dispatch_glTexCoord4fVertex4fSUN = stub_glTexCoord4fVertex4fSUN;

static void*
resolve_glTexCoord4fVertex4fvSUN(void)
{
	/* glTexCoord4fVertex4fvSUN (GL_SUN_vertex) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SUN_vertex")) {
		return get_ext_proc("glTexCoord4fVertex4fvSUN");
	}

	unsupported("glTexCoord4fVertex4fvSUN");
	return piglit_dispatch_glTexCoord4fVertex4fvSUN;
}

static void APIENTRY
stub_glTexCoord4fVertex4fvSUN(const GLfloat * tc, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glTexCoord4fVertex4fvSUN = resolve_glTexCoord4fVertex4fvSUN();
	piglit_dispatch_glTexCoord4fVertex4fvSUN(tc, v);
}

PFNGLTEXCOORD4FVERTEX4FVSUNPROC piglit_dispatch_glTexCoord4fVertex4fvSUN = stub_glTexCoord4fVertex4fvSUN;

static void*
resolve_glTexCoord4fv(void)
{
	/* glTexCoord4fv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexCoord4fv", 10);
	}

	unsupported("glTexCoord4fv");
	return piglit_dispatch_glTexCoord4fv;
}

static void APIENTRY
stub_glTexCoord4fv(const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glTexCoord4fv = resolve_glTexCoord4fv();
	piglit_dispatch_glTexCoord4fv(v);
}

PFNGLTEXCOORD4FVPROC piglit_dispatch_glTexCoord4fv = stub_glTexCoord4fv;

static void*
resolve_glTexCoord4hNV(void)
{
	/* glTexCoord4hNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glTexCoord4hNV");
	}

	unsupported("glTexCoord4hNV");
	return piglit_dispatch_glTexCoord4hNV;
}

static void APIENTRY
stub_glTexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
{
	check_initialized();
	piglit_dispatch_glTexCoord4hNV = resolve_glTexCoord4hNV();
	piglit_dispatch_glTexCoord4hNV(s, t, r, q);
}

PFNGLTEXCOORD4HNVPROC piglit_dispatch_glTexCoord4hNV = stub_glTexCoord4hNV;

static void*
resolve_glTexCoord4hvNV(void)
{
	/* glTexCoord4hvNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glTexCoord4hvNV");
	}

	unsupported("glTexCoord4hvNV");
	return piglit_dispatch_glTexCoord4hvNV;
}

static void APIENTRY
stub_glTexCoord4hvNV(const GLhalfNV * v)
{
	check_initialized();
	piglit_dispatch_glTexCoord4hvNV = resolve_glTexCoord4hvNV();
	piglit_dispatch_glTexCoord4hvNV(v);
}

PFNGLTEXCOORD4HVNVPROC piglit_dispatch_glTexCoord4hvNV = stub_glTexCoord4hvNV;

static void*
resolve_glTexCoord4i(void)
{
	/* glTexCoord4i (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexCoord4i", 10);
	}

	unsupported("glTexCoord4i");
	return piglit_dispatch_glTexCoord4i;
}

static void APIENTRY
stub_glTexCoord4i(GLint s, GLint t, GLint r, GLint q)
{
	check_initialized();
	piglit_dispatch_glTexCoord4i = resolve_glTexCoord4i();
	piglit_dispatch_glTexCoord4i(s, t, r, q);
}

PFNGLTEXCOORD4IPROC piglit_dispatch_glTexCoord4i = stub_glTexCoord4i;

static void*
resolve_glTexCoord4iv(void)
{
	/* glTexCoord4iv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexCoord4iv", 10);
	}

	unsupported("glTexCoord4iv");
	return piglit_dispatch_glTexCoord4iv;
}

static void APIENTRY
stub_glTexCoord4iv(const GLint * v)
{
	check_initialized();
	piglit_dispatch_glTexCoord4iv = resolve_glTexCoord4iv();
	piglit_dispatch_glTexCoord4iv(v);
}

PFNGLTEXCOORD4IVPROC piglit_dispatch_glTexCoord4iv = stub_glTexCoord4iv;

static void*
resolve_glTexCoord4s(void)
{
	/* glTexCoord4s (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexCoord4s", 10);
	}

	unsupported("glTexCoord4s");
	return piglit_dispatch_glTexCoord4s;
}

static void APIENTRY
stub_glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q)
{
	check_initialized();
	piglit_dispatch_glTexCoord4s = resolve_glTexCoord4s();
	piglit_dispatch_glTexCoord4s(s, t, r, q);
}

PFNGLTEXCOORD4SPROC piglit_dispatch_glTexCoord4s = stub_glTexCoord4s;

static void*
resolve_glTexCoord4sv(void)
{
	/* glTexCoord4sv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexCoord4sv", 10);
	}

	unsupported("glTexCoord4sv");
	return piglit_dispatch_glTexCoord4sv;
}

static void APIENTRY
stub_glTexCoord4sv(const GLshort * v)
{
	check_initialized();
	piglit_dispatch_glTexCoord4sv = resolve_glTexCoord4sv();
	piglit_dispatch_glTexCoord4sv(v);
}

PFNGLTEXCOORD4SVPROC piglit_dispatch_glTexCoord4sv = stub_glTexCoord4sv;

static void*
resolve_glTexCoord4xOES(void)
{
	/* glTexCoord4xOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glTexCoord4xOES");
	}

	unsupported("glTexCoord4xOES");
	return piglit_dispatch_glTexCoord4xOES;
}

static void APIENTRY
stub_glTexCoord4xOES(GLfixed s, GLfixed t, GLfixed r, GLfixed q)
{
	check_initialized();
	piglit_dispatch_glTexCoord4xOES = resolve_glTexCoord4xOES();
	piglit_dispatch_glTexCoord4xOES(s, t, r, q);
}

PFNGLTEXCOORD4XOESPROC piglit_dispatch_glTexCoord4xOES = stub_glTexCoord4xOES;

static void*
resolve_glTexCoord4xvOES(void)
{
	/* glTexCoord4xvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glTexCoord4xvOES");
	}

	unsupported("glTexCoord4xvOES");
	return piglit_dispatch_glTexCoord4xvOES;
}

static void APIENTRY
stub_glTexCoord4xvOES(const GLfixed * coords)
{
	check_initialized();
	piglit_dispatch_glTexCoord4xvOES = resolve_glTexCoord4xvOES();
	piglit_dispatch_glTexCoord4xvOES(coords);
}

PFNGLTEXCOORD4XVOESPROC piglit_dispatch_glTexCoord4xvOES = stub_glTexCoord4xvOES;

static void*
resolve_glTexCoordFormatNV(void)
{
	/* glTexCoordFormatNV (GL_NV_vertex_buffer_unified_memory) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_buffer_unified_memory")) {
		return get_ext_proc("glTexCoordFormatNV");
	}

	unsupported("glTexCoordFormatNV");
	return piglit_dispatch_glTexCoordFormatNV;
}

static void APIENTRY
stub_glTexCoordFormatNV(GLint size, GLenum type, GLsizei stride)
{
	check_initialized();
	piglit_dispatch_glTexCoordFormatNV = resolve_glTexCoordFormatNV();
	piglit_dispatch_glTexCoordFormatNV(size, type, stride);
}

PFNGLTEXCOORDFORMATNVPROC piglit_dispatch_glTexCoordFormatNV = stub_glTexCoordFormatNV;

static void*
resolve_glTexCoordP1ui(void)
{
	/* glTexCoordP1ui (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glTexCoordP1ui", 33);
	}

	/* glTexCoordP1ui (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glTexCoordP1ui");
	}

	unsupported("glTexCoordP1ui");
	return piglit_dispatch_glTexCoordP1ui;
}

static void APIENTRY
stub_glTexCoordP1ui(GLenum type, GLuint coords)
{
	check_initialized();
	piglit_dispatch_glTexCoordP1ui = resolve_glTexCoordP1ui();
	piglit_dispatch_glTexCoordP1ui(type, coords);
}

PFNGLTEXCOORDP1UIPROC piglit_dispatch_glTexCoordP1ui = stub_glTexCoordP1ui;

static void*
resolve_glTexCoordP1uiv(void)
{
	/* glTexCoordP1uiv (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glTexCoordP1uiv", 33);
	}

	/* glTexCoordP1uiv (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glTexCoordP1uiv");
	}

	unsupported("glTexCoordP1uiv");
	return piglit_dispatch_glTexCoordP1uiv;
}

static void APIENTRY
stub_glTexCoordP1uiv(GLenum type, const GLuint * coords)
{
	check_initialized();
	piglit_dispatch_glTexCoordP1uiv = resolve_glTexCoordP1uiv();
	piglit_dispatch_glTexCoordP1uiv(type, coords);
}

PFNGLTEXCOORDP1UIVPROC piglit_dispatch_glTexCoordP1uiv = stub_glTexCoordP1uiv;

static void*
resolve_glTexCoordP2ui(void)
{
	/* glTexCoordP2ui (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glTexCoordP2ui", 33);
	}

	/* glTexCoordP2ui (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glTexCoordP2ui");
	}

	unsupported("glTexCoordP2ui");
	return piglit_dispatch_glTexCoordP2ui;
}

static void APIENTRY
stub_glTexCoordP2ui(GLenum type, GLuint coords)
{
	check_initialized();
	piglit_dispatch_glTexCoordP2ui = resolve_glTexCoordP2ui();
	piglit_dispatch_glTexCoordP2ui(type, coords);
}

PFNGLTEXCOORDP2UIPROC piglit_dispatch_glTexCoordP2ui = stub_glTexCoordP2ui;

static void*
resolve_glTexCoordP2uiv(void)
{
	/* glTexCoordP2uiv (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glTexCoordP2uiv", 33);
	}

	/* glTexCoordP2uiv (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glTexCoordP2uiv");
	}

	unsupported("glTexCoordP2uiv");
	return piglit_dispatch_glTexCoordP2uiv;
}

static void APIENTRY
stub_glTexCoordP2uiv(GLenum type, const GLuint * coords)
{
	check_initialized();
	piglit_dispatch_glTexCoordP2uiv = resolve_glTexCoordP2uiv();
	piglit_dispatch_glTexCoordP2uiv(type, coords);
}

PFNGLTEXCOORDP2UIVPROC piglit_dispatch_glTexCoordP2uiv = stub_glTexCoordP2uiv;

static void*
resolve_glTexCoordP3ui(void)
{
	/* glTexCoordP3ui (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glTexCoordP3ui", 33);
	}

	/* glTexCoordP3ui (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glTexCoordP3ui");
	}

	unsupported("glTexCoordP3ui");
	return piglit_dispatch_glTexCoordP3ui;
}

static void APIENTRY
stub_glTexCoordP3ui(GLenum type, GLuint coords)
{
	check_initialized();
	piglit_dispatch_glTexCoordP3ui = resolve_glTexCoordP3ui();
	piglit_dispatch_glTexCoordP3ui(type, coords);
}

PFNGLTEXCOORDP3UIPROC piglit_dispatch_glTexCoordP3ui = stub_glTexCoordP3ui;

static void*
resolve_glTexCoordP3uiv(void)
{
	/* glTexCoordP3uiv (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glTexCoordP3uiv", 33);
	}

	/* glTexCoordP3uiv (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glTexCoordP3uiv");
	}

	unsupported("glTexCoordP3uiv");
	return piglit_dispatch_glTexCoordP3uiv;
}

static void APIENTRY
stub_glTexCoordP3uiv(GLenum type, const GLuint * coords)
{
	check_initialized();
	piglit_dispatch_glTexCoordP3uiv = resolve_glTexCoordP3uiv();
	piglit_dispatch_glTexCoordP3uiv(type, coords);
}

PFNGLTEXCOORDP3UIVPROC piglit_dispatch_glTexCoordP3uiv = stub_glTexCoordP3uiv;

static void*
resolve_glTexCoordP4ui(void)
{
	/* glTexCoordP4ui (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glTexCoordP4ui", 33);
	}

	/* glTexCoordP4ui (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glTexCoordP4ui");
	}

	unsupported("glTexCoordP4ui");
	return piglit_dispatch_glTexCoordP4ui;
}

static void APIENTRY
stub_glTexCoordP4ui(GLenum type, GLuint coords)
{
	check_initialized();
	piglit_dispatch_glTexCoordP4ui = resolve_glTexCoordP4ui();
	piglit_dispatch_glTexCoordP4ui(type, coords);
}

PFNGLTEXCOORDP4UIPROC piglit_dispatch_glTexCoordP4ui = stub_glTexCoordP4ui;

static void*
resolve_glTexCoordP4uiv(void)
{
	/* glTexCoordP4uiv (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glTexCoordP4uiv", 33);
	}

	/* glTexCoordP4uiv (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glTexCoordP4uiv");
	}

	unsupported("glTexCoordP4uiv");
	return piglit_dispatch_glTexCoordP4uiv;
}

static void APIENTRY
stub_glTexCoordP4uiv(GLenum type, const GLuint * coords)
{
	check_initialized();
	piglit_dispatch_glTexCoordP4uiv = resolve_glTexCoordP4uiv();
	piglit_dispatch_glTexCoordP4uiv(type, coords);
}

PFNGLTEXCOORDP4UIVPROC piglit_dispatch_glTexCoordP4uiv = stub_glTexCoordP4uiv;

static void*
resolve_glTexCoordPointer(void)
{
	/* glTexCoordPointer (GL_VERSION_1_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glTexCoordPointer", 11);
	}

	/* glTexCoordPointer (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glTexCoordPointer", 10);
	}

	unsupported("glTexCoordPointer");
	return piglit_dispatch_glTexCoordPointer;
}

static void APIENTRY
stub_glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const void * pointer)
{
	check_initialized();
	piglit_dispatch_glTexCoordPointer = resolve_glTexCoordPointer();
	piglit_dispatch_glTexCoordPointer(size, type, stride, pointer);
}

PFNGLTEXCOORDPOINTERPROC piglit_dispatch_glTexCoordPointer = stub_glTexCoordPointer;

static void*
resolve_glTexCoordPointerEXT(void)
{
	/* glTexCoordPointerEXT (GL_EXT_vertex_array) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_array")) {
		return get_ext_proc("glTexCoordPointerEXT");
	}

	unsupported("glTexCoordPointerEXT");
	return piglit_dispatch_glTexCoordPointerEXT;
}

static void APIENTRY
stub_glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer)
{
	check_initialized();
	piglit_dispatch_glTexCoordPointerEXT = resolve_glTexCoordPointerEXT();
	piglit_dispatch_glTexCoordPointerEXT(size, type, stride, count, pointer);
}

PFNGLTEXCOORDPOINTEREXTPROC piglit_dispatch_glTexCoordPointerEXT = stub_glTexCoordPointerEXT;

static void*
resolve_glTexCoordPointerListIBM(void)
{
	/* glTexCoordPointerListIBM (GL_IBM_vertex_array_lists) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_IBM_vertex_array_lists")) {
		return get_ext_proc("glTexCoordPointerListIBM");
	}

	unsupported("glTexCoordPointerListIBM");
	return piglit_dispatch_glTexCoordPointerListIBM;
}

static void APIENTRY
stub_glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride)
{
	check_initialized();
	piglit_dispatch_glTexCoordPointerListIBM = resolve_glTexCoordPointerListIBM();
	piglit_dispatch_glTexCoordPointerListIBM(size, type, stride, pointer, ptrstride);
}

PFNGLTEXCOORDPOINTERLISTIBMPROC piglit_dispatch_glTexCoordPointerListIBM = stub_glTexCoordPointerListIBM;

static void*
resolve_glTexCoordPointervINTEL(void)
{
	/* glTexCoordPointervINTEL (GL_INTEL_parallel_arrays) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_INTEL_parallel_arrays")) {
		return get_ext_proc("glTexCoordPointervINTEL");
	}

	unsupported("glTexCoordPointervINTEL");
	return piglit_dispatch_glTexCoordPointervINTEL;
}

static void APIENTRY
stub_glTexCoordPointervINTEL(GLint size, GLenum type, const void ** pointer)
{
	check_initialized();
	piglit_dispatch_glTexCoordPointervINTEL = resolve_glTexCoordPointervINTEL();
	piglit_dispatch_glTexCoordPointervINTEL(size, type, pointer);
}

PFNGLTEXCOORDPOINTERVINTELPROC piglit_dispatch_glTexCoordPointervINTEL = stub_glTexCoordPointervINTEL;

static void*
resolve_glTexEnvf(void)
{
	/* glTexEnvf (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexEnvf", 10);
	}

	/* glTexEnvf (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glTexEnvf", 10);
	}

	unsupported("glTexEnvf");
	return piglit_dispatch_glTexEnvf;
}

static void APIENTRY
stub_glTexEnvf(GLenum target, GLenum pname, GLfloat param)
{
	check_initialized();
	piglit_dispatch_glTexEnvf = resolve_glTexEnvf();
	piglit_dispatch_glTexEnvf(target, pname, param);
}

PFNGLTEXENVFPROC piglit_dispatch_glTexEnvf = stub_glTexEnvf;

static void*
resolve_glTexEnvfv(void)
{
	/* glTexEnvfv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexEnvfv", 10);
	}

	/* glTexEnvfv (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glTexEnvfv", 10);
	}

	unsupported("glTexEnvfv");
	return piglit_dispatch_glTexEnvfv;
}

static void APIENTRY
stub_glTexEnvfv(GLenum target, GLenum pname, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glTexEnvfv = resolve_glTexEnvfv();
	piglit_dispatch_glTexEnvfv(target, pname, params);
}

PFNGLTEXENVFVPROC piglit_dispatch_glTexEnvfv = stub_glTexEnvfv;

static void*
resolve_glTexEnvi(void)
{
	/* glTexEnvi (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexEnvi", 10);
	}

	/* glTexEnvi (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glTexEnvi", 10);
	}

	unsupported("glTexEnvi");
	return piglit_dispatch_glTexEnvi;
}

static void APIENTRY
stub_glTexEnvi(GLenum target, GLenum pname, GLint param)
{
	check_initialized();
	piglit_dispatch_glTexEnvi = resolve_glTexEnvi();
	piglit_dispatch_glTexEnvi(target, pname, param);
}

PFNGLTEXENVIPROC piglit_dispatch_glTexEnvi = stub_glTexEnvi;

static void*
resolve_glTexEnviv(void)
{
	/* glTexEnviv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexEnviv", 10);
	}

	/* glTexEnviv (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glTexEnviv", 10);
	}

	unsupported("glTexEnviv");
	return piglit_dispatch_glTexEnviv;
}

static void APIENTRY
stub_glTexEnviv(GLenum target, GLenum pname, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glTexEnviv = resolve_glTexEnviv();
	piglit_dispatch_glTexEnviv(target, pname, params);
}

PFNGLTEXENVIVPROC piglit_dispatch_glTexEnviv = stub_glTexEnviv;

static void*
resolve_glTexEnvx(void)
{
	/* glTexEnvx (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glTexEnvx", 10);
	}

	unsupported("glTexEnvx");
	return piglit_dispatch_glTexEnvx;
}

static void APIENTRY
stub_glTexEnvx(GLenum target, GLenum pname, GLfixed param)
{
	check_initialized();
	piglit_dispatch_glTexEnvx = resolve_glTexEnvx();
	piglit_dispatch_glTexEnvx(target, pname, param);
}

PFNGLTEXENVXPROC piglit_dispatch_glTexEnvx = stub_glTexEnvx;

static void*
resolve_glTexEnvxOES(void)
{
	/* glTexEnvxOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glTexEnvxOES");
	}

	unsupported("glTexEnvxOES");
	return piglit_dispatch_glTexEnvxOES;
}

static void APIENTRY
stub_glTexEnvxOES(GLenum target, GLenum pname, GLfixed param)
{
	check_initialized();
	piglit_dispatch_glTexEnvxOES = resolve_glTexEnvxOES();
	piglit_dispatch_glTexEnvxOES(target, pname, param);
}

PFNGLTEXENVXOESPROC piglit_dispatch_glTexEnvxOES = stub_glTexEnvxOES;

static void*
resolve_glTexEnvxv(void)
{
	/* glTexEnvxv (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glTexEnvxv", 10);
	}

	unsupported("glTexEnvxv");
	return piglit_dispatch_glTexEnvxv;
}

static void APIENTRY
stub_glTexEnvxv(GLenum target, GLenum pname, const GLfixed * params)
{
	check_initialized();
	piglit_dispatch_glTexEnvxv = resolve_glTexEnvxv();
	piglit_dispatch_glTexEnvxv(target, pname, params);
}

PFNGLTEXENVXVPROC piglit_dispatch_glTexEnvxv = stub_glTexEnvxv;

static void*
resolve_glTexEnvxvOES(void)
{
	/* glTexEnvxvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glTexEnvxvOES");
	}

	unsupported("glTexEnvxvOES");
	return piglit_dispatch_glTexEnvxvOES;
}

static void APIENTRY
stub_glTexEnvxvOES(GLenum target, GLenum pname, const GLfixed * params)
{
	check_initialized();
	piglit_dispatch_glTexEnvxvOES = resolve_glTexEnvxvOES();
	piglit_dispatch_glTexEnvxvOES(target, pname, params);
}

PFNGLTEXENVXVOESPROC piglit_dispatch_glTexEnvxvOES = stub_glTexEnvxvOES;

static void*
resolve_glTexFilterFuncSGIS(void)
{
	/* glTexFilterFuncSGIS (GL_SGIS_texture_filter4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIS_texture_filter4")) {
		return get_ext_proc("glTexFilterFuncSGIS");
	}

	unsupported("glTexFilterFuncSGIS");
	return piglit_dispatch_glTexFilterFuncSGIS;
}

static void APIENTRY
stub_glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, const GLfloat * weights)
{
	check_initialized();
	piglit_dispatch_glTexFilterFuncSGIS = resolve_glTexFilterFuncSGIS();
	piglit_dispatch_glTexFilterFuncSGIS(target, filter, n, weights);
}

PFNGLTEXFILTERFUNCSGISPROC piglit_dispatch_glTexFilterFuncSGIS = stub_glTexFilterFuncSGIS;

static void*
resolve_glTexGend(void)
{
	/* glTexGend (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexGend", 10);
	}

	unsupported("glTexGend");
	return piglit_dispatch_glTexGend;
}

static void APIENTRY
stub_glTexGend(GLenum coord, GLenum pname, GLdouble param)
{
	check_initialized();
	piglit_dispatch_glTexGend = resolve_glTexGend();
	piglit_dispatch_glTexGend(coord, pname, param);
}

PFNGLTEXGENDPROC piglit_dispatch_glTexGend = stub_glTexGend;

static void*
resolve_glTexGendv(void)
{
	/* glTexGendv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexGendv", 10);
	}

	unsupported("glTexGendv");
	return piglit_dispatch_glTexGendv;
}

static void APIENTRY
stub_glTexGendv(GLenum coord, GLenum pname, const GLdouble * params)
{
	check_initialized();
	piglit_dispatch_glTexGendv = resolve_glTexGendv();
	piglit_dispatch_glTexGendv(coord, pname, params);
}

PFNGLTEXGENDVPROC piglit_dispatch_glTexGendv = stub_glTexGendv;

static void*
resolve_glTexGenf(void)
{
	/* glTexGenf (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexGenf", 10);
	}

	unsupported("glTexGenf");
	return piglit_dispatch_glTexGenf;
}

static void APIENTRY
stub_glTexGenf(GLenum coord, GLenum pname, GLfloat param)
{
	check_initialized();
	piglit_dispatch_glTexGenf = resolve_glTexGenf();
	piglit_dispatch_glTexGenf(coord, pname, param);
}

PFNGLTEXGENFPROC piglit_dispatch_glTexGenf = stub_glTexGenf;

static void*
resolve_glTexGenfOES(void)
{
	/* glTexGenfOES (GL_OES_texture_cube_map) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_texture_cube_map")) {
		return get_ext_proc("glTexGenfOES");
	}

	unsupported("glTexGenfOES");
	return piglit_dispatch_glTexGenfOES;
}

static void APIENTRY
stub_glTexGenfOES(GLenum coord, GLenum pname, GLfloat param)
{
	check_initialized();
	piglit_dispatch_glTexGenfOES = resolve_glTexGenfOES();
	piglit_dispatch_glTexGenfOES(coord, pname, param);
}

PFNGLTEXGENFOESPROC piglit_dispatch_glTexGenfOES = stub_glTexGenfOES;

static void*
resolve_glTexGenfv(void)
{
	/* glTexGenfv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexGenfv", 10);
	}

	unsupported("glTexGenfv");
	return piglit_dispatch_glTexGenfv;
}

static void APIENTRY
stub_glTexGenfv(GLenum coord, GLenum pname, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glTexGenfv = resolve_glTexGenfv();
	piglit_dispatch_glTexGenfv(coord, pname, params);
}

PFNGLTEXGENFVPROC piglit_dispatch_glTexGenfv = stub_glTexGenfv;

static void*
resolve_glTexGenfvOES(void)
{
	/* glTexGenfvOES (GL_OES_texture_cube_map) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_texture_cube_map")) {
		return get_ext_proc("glTexGenfvOES");
	}

	unsupported("glTexGenfvOES");
	return piglit_dispatch_glTexGenfvOES;
}

static void APIENTRY
stub_glTexGenfvOES(GLenum coord, GLenum pname, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glTexGenfvOES = resolve_glTexGenfvOES();
	piglit_dispatch_glTexGenfvOES(coord, pname, params);
}

PFNGLTEXGENFVOESPROC piglit_dispatch_glTexGenfvOES = stub_glTexGenfvOES;

static void*
resolve_glTexGeni(void)
{
	/* glTexGeni (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexGeni", 10);
	}

	unsupported("glTexGeni");
	return piglit_dispatch_glTexGeni;
}

static void APIENTRY
stub_glTexGeni(GLenum coord, GLenum pname, GLint param)
{
	check_initialized();
	piglit_dispatch_glTexGeni = resolve_glTexGeni();
	piglit_dispatch_glTexGeni(coord, pname, param);
}

PFNGLTEXGENIPROC piglit_dispatch_glTexGeni = stub_glTexGeni;

static void*
resolve_glTexGeniOES(void)
{
	/* glTexGeniOES (GL_OES_texture_cube_map) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_texture_cube_map")) {
		return get_ext_proc("glTexGeniOES");
	}

	unsupported("glTexGeniOES");
	return piglit_dispatch_glTexGeniOES;
}

static void APIENTRY
stub_glTexGeniOES(GLenum coord, GLenum pname, GLint param)
{
	check_initialized();
	piglit_dispatch_glTexGeniOES = resolve_glTexGeniOES();
	piglit_dispatch_glTexGeniOES(coord, pname, param);
}

PFNGLTEXGENIOESPROC piglit_dispatch_glTexGeniOES = stub_glTexGeniOES;

static void*
resolve_glTexGeniv(void)
{
	/* glTexGeniv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexGeniv", 10);
	}

	unsupported("glTexGeniv");
	return piglit_dispatch_glTexGeniv;
}

static void APIENTRY
stub_glTexGeniv(GLenum coord, GLenum pname, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glTexGeniv = resolve_glTexGeniv();
	piglit_dispatch_glTexGeniv(coord, pname, params);
}

PFNGLTEXGENIVPROC piglit_dispatch_glTexGeniv = stub_glTexGeniv;

static void*
resolve_glTexGenivOES(void)
{
	/* glTexGenivOES (GL_OES_texture_cube_map) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_texture_cube_map")) {
		return get_ext_proc("glTexGenivOES");
	}

	unsupported("glTexGenivOES");
	return piglit_dispatch_glTexGenivOES;
}

static void APIENTRY
stub_glTexGenivOES(GLenum coord, GLenum pname, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glTexGenivOES = resolve_glTexGenivOES();
	piglit_dispatch_glTexGenivOES(coord, pname, params);
}

PFNGLTEXGENIVOESPROC piglit_dispatch_glTexGenivOES = stub_glTexGenivOES;

static void*
resolve_glTexGenxOES(void)
{
	/* glTexGenxOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glTexGenxOES");
	}

	/* glTexGenxOES (GL_OES_texture_cube_map) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_texture_cube_map")) {
		return get_ext_proc("glTexGenxOES");
	}

	unsupported("glTexGenxOES");
	return piglit_dispatch_glTexGenxOES;
}

static void APIENTRY
stub_glTexGenxOES(GLenum coord, GLenum pname, GLfixed param)
{
	check_initialized();
	piglit_dispatch_glTexGenxOES = resolve_glTexGenxOES();
	piglit_dispatch_glTexGenxOES(coord, pname, param);
}

PFNGLTEXGENXOESPROC piglit_dispatch_glTexGenxOES = stub_glTexGenxOES;

static void*
resolve_glTexGenxvOES(void)
{
	/* glTexGenxvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glTexGenxvOES");
	}

	/* glTexGenxvOES (GL_OES_texture_cube_map) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_texture_cube_map")) {
		return get_ext_proc("glTexGenxvOES");
	}

	unsupported("glTexGenxvOES");
	return piglit_dispatch_glTexGenxvOES;
}

static void APIENTRY
stub_glTexGenxvOES(GLenum coord, GLenum pname, const GLfixed * params)
{
	check_initialized();
	piglit_dispatch_glTexGenxvOES = resolve_glTexGenxvOES();
	piglit_dispatch_glTexGenxvOES(coord, pname, params);
}

PFNGLTEXGENXVOESPROC piglit_dispatch_glTexGenxvOES = stub_glTexGenxvOES;

static void*
resolve_glTexImage1D(void)
{
	/* glTexImage1D (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexImage1D", 10);
	}

	unsupported("glTexImage1D");
	return piglit_dispatch_glTexImage1D;
}

static void APIENTRY
stub_glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels)
{
	check_initialized();
	piglit_dispatch_glTexImage1D = resolve_glTexImage1D();
	piglit_dispatch_glTexImage1D(target, level, internalformat, width, border, format, type, pixels);
}

PFNGLTEXIMAGE1DPROC piglit_dispatch_glTexImage1D = stub_glTexImage1D;

static void*
resolve_glTexImage2D(void)
{
	/* glTexImage2D (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexImage2D", 10);
	}

	/* glTexImage2D (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glTexImage2D", 10);
	}

	/* glTexImage2D (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glTexImage2D", 20);
	}

	unsupported("glTexImage2D");
	return piglit_dispatch_glTexImage2D;
}

static void APIENTRY
stub_glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels)
{
	check_initialized();
	piglit_dispatch_glTexImage2D = resolve_glTexImage2D();
	piglit_dispatch_glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
}

PFNGLTEXIMAGE2DPROC piglit_dispatch_glTexImage2D = stub_glTexImage2D;

static void*
resolve_glTexImage2DMultisample(void)
{
	/* glTexImage2DMultisample (GL_VERSION_3_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glTexImage2DMultisample", 32);
	}

	/* glTexImage2DMultisample (GL_ARB_texture_multisample) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_texture_multisample")) {
		return get_ext_proc("glTexImage2DMultisample");
	}

	unsupported("glTexImage2DMultisample");
	return piglit_dispatch_glTexImage2DMultisample;
}

static void APIENTRY
stub_glTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
	check_initialized();
	piglit_dispatch_glTexImage2DMultisample = resolve_glTexImage2DMultisample();
	piglit_dispatch_glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
}

PFNGLTEXIMAGE2DMULTISAMPLEPROC piglit_dispatch_glTexImage2DMultisample = stub_glTexImage2DMultisample;

static void*
resolve_glTexImage2DMultisampleCoverageNV(void)
{
	/* glTexImage2DMultisampleCoverageNV (GL_NV_texture_multisample) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_texture_multisample")) {
		return get_ext_proc("glTexImage2DMultisampleCoverageNV");
	}

	unsupported("glTexImage2DMultisampleCoverageNV");
	return piglit_dispatch_glTexImage2DMultisampleCoverageNV;
}

static void APIENTRY
stub_glTexImage2DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
{
	check_initialized();
	piglit_dispatch_glTexImage2DMultisampleCoverageNV = resolve_glTexImage2DMultisampleCoverageNV();
	piglit_dispatch_glTexImage2DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
}

PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC piglit_dispatch_glTexImage2DMultisampleCoverageNV = stub_glTexImage2DMultisampleCoverageNV;

static void*
resolve_glTexImage3D(void)
{
	/* glTexImage3D (GL_VERSION_1_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glTexImage3D", 12);
	}

	/* glTexImage3D (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glTexImage3D", 30);
	}

	/* glTexImage3DOES (GL_OES_texture_3D) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_OES_texture_3D")) {
		return get_ext_proc("glTexImage3DOES");
	}

	/* glTexImage3DEXT (GL_EXT_texture3D) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_texture3D")) {
		return get_ext_proc("glTexImage3DEXT");
	}

	unsupported("glTexImage3D");
	return piglit_dispatch_glTexImage3D;
}

static void APIENTRY
stub_glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels)
{
	check_initialized();
	piglit_dispatch_glTexImage3D = resolve_glTexImage3D();
	piglit_dispatch_glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);
}

PFNGLTEXIMAGE3DPROC piglit_dispatch_glTexImage3D = stub_glTexImage3D;

static void*
resolve_glTexImage3DMultisample(void)
{
	/* glTexImage3DMultisample (GL_VERSION_3_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glTexImage3DMultisample", 32);
	}

	/* glTexImage3DMultisample (GL_ARB_texture_multisample) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_texture_multisample")) {
		return get_ext_proc("glTexImage3DMultisample");
	}

	unsupported("glTexImage3DMultisample");
	return piglit_dispatch_glTexImage3DMultisample;
}

static void APIENTRY
stub_glTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
	check_initialized();
	piglit_dispatch_glTexImage3DMultisample = resolve_glTexImage3DMultisample();
	piglit_dispatch_glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}

PFNGLTEXIMAGE3DMULTISAMPLEPROC piglit_dispatch_glTexImage3DMultisample = stub_glTexImage3DMultisample;

static void*
resolve_glTexImage3DMultisampleCoverageNV(void)
{
	/* glTexImage3DMultisampleCoverageNV (GL_NV_texture_multisample) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_texture_multisample")) {
		return get_ext_proc("glTexImage3DMultisampleCoverageNV");
	}

	unsupported("glTexImage3DMultisampleCoverageNV");
	return piglit_dispatch_glTexImage3DMultisampleCoverageNV;
}

static void APIENTRY
stub_glTexImage3DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
{
	check_initialized();
	piglit_dispatch_glTexImage3DMultisampleCoverageNV = resolve_glTexImage3DMultisampleCoverageNV();
	piglit_dispatch_glTexImage3DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
}

PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC piglit_dispatch_glTexImage3DMultisampleCoverageNV = stub_glTexImage3DMultisampleCoverageNV;

static void*
resolve_glTexImage4DSGIS(void)
{
	/* glTexImage4DSGIS (GL_SGIS_texture4D) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIS_texture4D")) {
		return get_ext_proc("glTexImage4DSGIS");
	}

	unsupported("glTexImage4DSGIS");
	return piglit_dispatch_glTexImage4DSGIS;
}

static void APIENTRY
stub_glTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void * pixels)
{
	check_initialized();
	piglit_dispatch_glTexImage4DSGIS = resolve_glTexImage4DSGIS();
	piglit_dispatch_glTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
}

PFNGLTEXIMAGE4DSGISPROC piglit_dispatch_glTexImage4DSGIS = stub_glTexImage4DSGIS;

static void*
resolve_glTexPageCommitmentARB(void)
{
	/* glTexPageCommitmentARB (GL_ARB_sparse_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_sparse_texture")) {
		return get_ext_proc("glTexPageCommitmentARB");
	}

	unsupported("glTexPageCommitmentARB");
	return piglit_dispatch_glTexPageCommitmentARB;
}

static void APIENTRY
stub_glTexPageCommitmentARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean resident)
{
	check_initialized();
	piglit_dispatch_glTexPageCommitmentARB = resolve_glTexPageCommitmentARB();
	piglit_dispatch_glTexPageCommitmentARB(target, level, xoffset, yoffset, zoffset, width, height, depth, resident);
}

PFNGLTEXPAGECOMMITMENTARBPROC piglit_dispatch_glTexPageCommitmentARB = stub_glTexPageCommitmentARB;

static void*
resolve_glTexParameterIiv(void)
{
	/* glTexParameterIiv (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glTexParameterIiv", 30);
	}

	/* glTexParameterIivEXT (GL_EXT_texture_border_clamp) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_texture_border_clamp")) {
		return get_ext_proc("glTexParameterIivEXT");
	}

	/* glTexParameterIivEXT (GL_EXT_texture_integer) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_texture_integer")) {
		return get_ext_proc("glTexParameterIivEXT");
	}

	unsupported("glTexParameterIiv");
	return piglit_dispatch_glTexParameterIiv;
}

static void APIENTRY
stub_glTexParameterIiv(GLenum target, GLenum pname, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glTexParameterIiv = resolve_glTexParameterIiv();
	piglit_dispatch_glTexParameterIiv(target, pname, params);
}

PFNGLTEXPARAMETERIIVPROC piglit_dispatch_glTexParameterIiv = stub_glTexParameterIiv;

static void*
resolve_glTexParameterIuiv(void)
{
	/* glTexParameterIuiv (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glTexParameterIuiv", 30);
	}

	/* glTexParameterIuivEXT (GL_EXT_texture_border_clamp) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_texture_border_clamp")) {
		return get_ext_proc("glTexParameterIuivEXT");
	}

	/* glTexParameterIuivEXT (GL_EXT_texture_integer) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_texture_integer")) {
		return get_ext_proc("glTexParameterIuivEXT");
	}

	unsupported("glTexParameterIuiv");
	return piglit_dispatch_glTexParameterIuiv;
}

static void APIENTRY
stub_glTexParameterIuiv(GLenum target, GLenum pname, const GLuint * params)
{
	check_initialized();
	piglit_dispatch_glTexParameterIuiv = resolve_glTexParameterIuiv();
	piglit_dispatch_glTexParameterIuiv(target, pname, params);
}

PFNGLTEXPARAMETERIUIVPROC piglit_dispatch_glTexParameterIuiv = stub_glTexParameterIuiv;

static void*
resolve_glTexParameterf(void)
{
	/* glTexParameterf (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexParameterf", 10);
	}

	/* glTexParameterf (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glTexParameterf", 10);
	}

	/* glTexParameterf (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glTexParameterf", 20);
	}

	unsupported("glTexParameterf");
	return piglit_dispatch_glTexParameterf;
}

static void APIENTRY
stub_glTexParameterf(GLenum target, GLenum pname, GLfloat param)
{
	check_initialized();
	piglit_dispatch_glTexParameterf = resolve_glTexParameterf();
	piglit_dispatch_glTexParameterf(target, pname, param);
}

PFNGLTEXPARAMETERFPROC piglit_dispatch_glTexParameterf = stub_glTexParameterf;

static void*
resolve_glTexParameterfv(void)
{
	/* glTexParameterfv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexParameterfv", 10);
	}

	/* glTexParameterfv (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glTexParameterfv", 10);
	}

	/* glTexParameterfv (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glTexParameterfv", 20);
	}

	unsupported("glTexParameterfv");
	return piglit_dispatch_glTexParameterfv;
}

static void APIENTRY
stub_glTexParameterfv(GLenum target, GLenum pname, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glTexParameterfv = resolve_glTexParameterfv();
	piglit_dispatch_glTexParameterfv(target, pname, params);
}

PFNGLTEXPARAMETERFVPROC piglit_dispatch_glTexParameterfv = stub_glTexParameterfv;

static void*
resolve_glTexParameteri(void)
{
	/* glTexParameteri (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexParameteri", 10);
	}

	/* glTexParameteri (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glTexParameteri", 10);
	}

	/* glTexParameteri (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glTexParameteri", 20);
	}

	unsupported("glTexParameteri");
	return piglit_dispatch_glTexParameteri;
}

static void APIENTRY
stub_glTexParameteri(GLenum target, GLenum pname, GLint param)
{
	check_initialized();
	piglit_dispatch_glTexParameteri = resolve_glTexParameteri();
	piglit_dispatch_glTexParameteri(target, pname, param);
}

PFNGLTEXPARAMETERIPROC piglit_dispatch_glTexParameteri = stub_glTexParameteri;

static void*
resolve_glTexParameteriv(void)
{
	/* glTexParameteriv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTexParameteriv", 10);
	}

	/* glTexParameteriv (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glTexParameteriv", 10);
	}

	/* glTexParameteriv (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glTexParameteriv", 20);
	}

	unsupported("glTexParameteriv");
	return piglit_dispatch_glTexParameteriv;
}

static void APIENTRY
stub_glTexParameteriv(GLenum target, GLenum pname, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glTexParameteriv = resolve_glTexParameteriv();
	piglit_dispatch_glTexParameteriv(target, pname, params);
}

PFNGLTEXPARAMETERIVPROC piglit_dispatch_glTexParameteriv = stub_glTexParameteriv;

static void*
resolve_glTexParameterx(void)
{
	/* glTexParameterx (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glTexParameterx", 10);
	}

	unsupported("glTexParameterx");
	return piglit_dispatch_glTexParameterx;
}

static void APIENTRY
stub_glTexParameterx(GLenum target, GLenum pname, GLfixed param)
{
	check_initialized();
	piglit_dispatch_glTexParameterx = resolve_glTexParameterx();
	piglit_dispatch_glTexParameterx(target, pname, param);
}

PFNGLTEXPARAMETERXPROC piglit_dispatch_glTexParameterx = stub_glTexParameterx;

static void*
resolve_glTexParameterxOES(void)
{
	/* glTexParameterxOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glTexParameterxOES");
	}

	unsupported("glTexParameterxOES");
	return piglit_dispatch_glTexParameterxOES;
}

static void APIENTRY
stub_glTexParameterxOES(GLenum target, GLenum pname, GLfixed param)
{
	check_initialized();
	piglit_dispatch_glTexParameterxOES = resolve_glTexParameterxOES();
	piglit_dispatch_glTexParameterxOES(target, pname, param);
}

PFNGLTEXPARAMETERXOESPROC piglit_dispatch_glTexParameterxOES = stub_glTexParameterxOES;

static void*
resolve_glTexParameterxv(void)
{
	/* glTexParameterxv (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glTexParameterxv", 10);
	}

	unsupported("glTexParameterxv");
	return piglit_dispatch_glTexParameterxv;
}

static void APIENTRY
stub_glTexParameterxv(GLenum target, GLenum pname, const GLfixed * params)
{
	check_initialized();
	piglit_dispatch_glTexParameterxv = resolve_glTexParameterxv();
	piglit_dispatch_glTexParameterxv(target, pname, params);
}

PFNGLTEXPARAMETERXVPROC piglit_dispatch_glTexParameterxv = stub_glTexParameterxv;

static void*
resolve_glTexParameterxvOES(void)
{
	/* glTexParameterxvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glTexParameterxvOES");
	}

	unsupported("glTexParameterxvOES");
	return piglit_dispatch_glTexParameterxvOES;
}

static void APIENTRY
stub_glTexParameterxvOES(GLenum target, GLenum pname, const GLfixed * params)
{
	check_initialized();
	piglit_dispatch_glTexParameterxvOES = resolve_glTexParameterxvOES();
	piglit_dispatch_glTexParameterxvOES(target, pname, params);
}

PFNGLTEXPARAMETERXVOESPROC piglit_dispatch_glTexParameterxvOES = stub_glTexParameterxvOES;

static void*
resolve_glTexRenderbufferNV(void)
{
	/* glTexRenderbufferNV (GL_NV_explicit_multisample) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_explicit_multisample")) {
		return get_ext_proc("glTexRenderbufferNV");
	}

	unsupported("glTexRenderbufferNV");
	return piglit_dispatch_glTexRenderbufferNV;
}

static void APIENTRY
stub_glTexRenderbufferNV(GLenum target, GLuint renderbuffer)
{
	check_initialized();
	piglit_dispatch_glTexRenderbufferNV = resolve_glTexRenderbufferNV();
	piglit_dispatch_glTexRenderbufferNV(target, renderbuffer);
}

PFNGLTEXRENDERBUFFERNVPROC piglit_dispatch_glTexRenderbufferNV = stub_glTexRenderbufferNV;

static void*
resolve_glTexStorage1D(void)
{
	/* glTexStorage1D (GL_VERSION_4_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glTexStorage1D", 42);
	}

	/* glTexStorage1D (GL_ARB_texture_storage) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_texture_storage")) {
		return get_ext_proc("glTexStorage1D");
	}

	/* glTexStorage1DEXT (GL_EXT_texture_storage) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_texture_storage")) {
		return get_ext_proc("glTexStorage1DEXT");
	}

	unsupported("glTexStorage1D");
	return piglit_dispatch_glTexStorage1D;
}

static void APIENTRY
stub_glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
	check_initialized();
	piglit_dispatch_glTexStorage1D = resolve_glTexStorage1D();
	piglit_dispatch_glTexStorage1D(target, levels, internalformat, width);
}

PFNGLTEXSTORAGE1DPROC piglit_dispatch_glTexStorage1D = stub_glTexStorage1D;

static void*
resolve_glTexStorage2D(void)
{
	/* glTexStorage2D (GL_VERSION_4_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glTexStorage2D", 42);
	}

	/* glTexStorage2D (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glTexStorage2D", 30);
	}

	/* glTexStorage2D (GL_ARB_texture_storage) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_texture_storage")) {
		return get_ext_proc("glTexStorage2D");
	}

	/* glTexStorage2DEXT (GL_EXT_texture_storage) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_texture_storage")) {
		return get_ext_proc("glTexStorage2DEXT");
	}

	unsupported("glTexStorage2D");
	return piglit_dispatch_glTexStorage2D;
}

static void APIENTRY
stub_glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
	check_initialized();
	piglit_dispatch_glTexStorage2D = resolve_glTexStorage2D();
	piglit_dispatch_glTexStorage2D(target, levels, internalformat, width, height);
}

PFNGLTEXSTORAGE2DPROC piglit_dispatch_glTexStorage2D = stub_glTexStorage2D;

static void*
resolve_glTexStorage2DMultisample(void)
{
	/* glTexStorage2DMultisample (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glTexStorage2DMultisample", 43);
	}

	/* glTexStorage2DMultisample (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glTexStorage2DMultisample", 31);
	}

	/* glTexStorage2DMultisample (GL_ARB_texture_storage_multisample) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_texture_storage_multisample")) {
		return get_ext_proc("glTexStorage2DMultisample");
	}

	unsupported("glTexStorage2DMultisample");
	return piglit_dispatch_glTexStorage2DMultisample;
}

static void APIENTRY
stub_glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
	check_initialized();
	piglit_dispatch_glTexStorage2DMultisample = resolve_glTexStorage2DMultisample();
	piglit_dispatch_glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
}

PFNGLTEXSTORAGE2DMULTISAMPLEPROC piglit_dispatch_glTexStorage2DMultisample = stub_glTexStorage2DMultisample;

static void*
resolve_glTexStorage3D(void)
{
	/* glTexStorage3D (GL_VERSION_4_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glTexStorage3D", 42);
	}

	/* glTexStorage3D (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glTexStorage3D", 30);
	}

	/* glTexStorage3D (GL_ARB_texture_storage) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_texture_storage")) {
		return get_ext_proc("glTexStorage3D");
	}

	/* glTexStorage3DEXT (GL_EXT_texture_storage) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_texture_storage")) {
		return get_ext_proc("glTexStorage3DEXT");
	}

	unsupported("glTexStorage3D");
	return piglit_dispatch_glTexStorage3D;
}

static void APIENTRY
stub_glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
	check_initialized();
	piglit_dispatch_glTexStorage3D = resolve_glTexStorage3D();
	piglit_dispatch_glTexStorage3D(target, levels, internalformat, width, height, depth);
}

PFNGLTEXSTORAGE3DPROC piglit_dispatch_glTexStorage3D = stub_glTexStorage3D;

static void*
resolve_glTexStorage3DMultisample(void)
{
	/* glTexStorage3DMultisample (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glTexStorage3DMultisample", 43);
	}

	/* glTexStorage3DMultisample (GL_ARB_texture_storage_multisample) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_texture_storage_multisample")) {
		return get_ext_proc("glTexStorage3DMultisample");
	}

	/* glTexStorage3DMultisampleOES (GL_OES_texture_storage_multisample_2d_array) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_OES_texture_storage_multisample_2d_array")) {
		return get_ext_proc("glTexStorage3DMultisampleOES");
	}

	unsupported("glTexStorage3DMultisample");
	return piglit_dispatch_glTexStorage3DMultisample;
}

static void APIENTRY
stub_glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
	check_initialized();
	piglit_dispatch_glTexStorage3DMultisample = resolve_glTexStorage3DMultisample();
	piglit_dispatch_glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}

PFNGLTEXSTORAGE3DMULTISAMPLEPROC piglit_dispatch_glTexStorage3DMultisample = stub_glTexStorage3DMultisample;

static void*
resolve_glTexStorageSparseAMD(void)
{
	/* glTexStorageSparseAMD (GL_AMD_sparse_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_sparse_texture")) {
		return get_ext_proc("glTexStorageSparseAMD");
	}

	unsupported("glTexStorageSparseAMD");
	return piglit_dispatch_glTexStorageSparseAMD;
}

static void APIENTRY
stub_glTexStorageSparseAMD(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)
{
	check_initialized();
	piglit_dispatch_glTexStorageSparseAMD = resolve_glTexStorageSparseAMD();
	piglit_dispatch_glTexStorageSparseAMD(target, internalFormat, width, height, depth, layers, flags);
}

PFNGLTEXSTORAGESPARSEAMDPROC piglit_dispatch_glTexStorageSparseAMD = stub_glTexStorageSparseAMD;

static void*
resolve_glTexSubImage1D(void)
{
	/* glTexSubImage1D (GL_VERSION_1_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glTexSubImage1D", 11);
	}

	/* glTexSubImage1DEXT (GL_EXT_subtexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_subtexture")) {
		return get_ext_proc("glTexSubImage1DEXT");
	}

	unsupported("glTexSubImage1D");
	return piglit_dispatch_glTexSubImage1D;
}

static void APIENTRY
stub_glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels)
{
	check_initialized();
	piglit_dispatch_glTexSubImage1D = resolve_glTexSubImage1D();
	piglit_dispatch_glTexSubImage1D(target, level, xoffset, width, format, type, pixels);
}

PFNGLTEXSUBIMAGE1DPROC piglit_dispatch_glTexSubImage1D = stub_glTexSubImage1D;

static void*
resolve_glTexSubImage2D(void)
{
	/* glTexSubImage2D (GL_VERSION_1_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glTexSubImage2D", 11);
	}

	/* glTexSubImage2D (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glTexSubImage2D", 10);
	}

	/* glTexSubImage2D (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glTexSubImage2D", 20);
	}

	/* glTexSubImage2DEXT (GL_EXT_subtexture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_subtexture")) {
		return get_ext_proc("glTexSubImage2DEXT");
	}

	unsupported("glTexSubImage2D");
	return piglit_dispatch_glTexSubImage2D;
}

static void APIENTRY
stub_glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels)
{
	check_initialized();
	piglit_dispatch_glTexSubImage2D = resolve_glTexSubImage2D();
	piglit_dispatch_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
}

PFNGLTEXSUBIMAGE2DPROC piglit_dispatch_glTexSubImage2D = stub_glTexSubImage2D;

static void*
resolve_glTexSubImage3D(void)
{
	/* glTexSubImage3D (GL_VERSION_1_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glTexSubImage3D", 12);
	}

	/* glTexSubImage3D (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glTexSubImage3D", 30);
	}

	/* glTexSubImage3DOES (GL_OES_texture_3D) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_OES_texture_3D")) {
		return get_ext_proc("glTexSubImage3DOES");
	}

	/* glTexSubImage3DEXT (GL_EXT_texture3D) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_texture3D")) {
		return get_ext_proc("glTexSubImage3DEXT");
	}

	unsupported("glTexSubImage3D");
	return piglit_dispatch_glTexSubImage3D;
}

static void APIENTRY
stub_glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels)
{
	check_initialized();
	piglit_dispatch_glTexSubImage3D = resolve_glTexSubImage3D();
	piglit_dispatch_glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

PFNGLTEXSUBIMAGE3DPROC piglit_dispatch_glTexSubImage3D = stub_glTexSubImage3D;

static void*
resolve_glTexSubImage4DSGIS(void)
{
	/* glTexSubImage4DSGIS (GL_SGIS_texture4D) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIS_texture4D")) {
		return get_ext_proc("glTexSubImage4DSGIS");
	}

	unsupported("glTexSubImage4DSGIS");
	return piglit_dispatch_glTexSubImage4DSGIS;
}

static void APIENTRY
stub_glTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void * pixels)
{
	check_initialized();
	piglit_dispatch_glTexSubImage4DSGIS = resolve_glTexSubImage4DSGIS();
	piglit_dispatch_glTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
}

PFNGLTEXSUBIMAGE4DSGISPROC piglit_dispatch_glTexSubImage4DSGIS = stub_glTexSubImage4DSGIS;

static void*
resolve_glTextureBarrierNV(void)
{
	/* glTextureBarrierNV (GL_NV_texture_barrier) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_texture_barrier")) {
		return get_ext_proc("glTextureBarrierNV");
	}

	unsupported("glTextureBarrierNV");
	return piglit_dispatch_glTextureBarrierNV;
}

static void APIENTRY
stub_glTextureBarrierNV()
{
	check_initialized();
	piglit_dispatch_glTextureBarrierNV = resolve_glTextureBarrierNV();
	piglit_dispatch_glTextureBarrierNV();
}

PFNGLTEXTUREBARRIERNVPROC piglit_dispatch_glTextureBarrierNV = stub_glTextureBarrierNV;

static void*
resolve_glTextureBufferEXT(void)
{
	/* glTextureBufferEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glTextureBufferEXT");
	}

	unsupported("glTextureBufferEXT");
	return piglit_dispatch_glTextureBufferEXT;
}

static void APIENTRY
stub_glTextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer)
{
	check_initialized();
	piglit_dispatch_glTextureBufferEXT = resolve_glTextureBufferEXT();
	piglit_dispatch_glTextureBufferEXT(texture, target, internalformat, buffer);
}

PFNGLTEXTUREBUFFEREXTPROC piglit_dispatch_glTextureBufferEXT = stub_glTextureBufferEXT;

static void*
resolve_glTextureBufferRangeEXT(void)
{
	/* glTextureBufferRangeEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glTextureBufferRangeEXT");
	}

	unsupported("glTextureBufferRangeEXT");
	return piglit_dispatch_glTextureBufferRangeEXT;
}

static void APIENTRY
stub_glTextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
	check_initialized();
	piglit_dispatch_glTextureBufferRangeEXT = resolve_glTextureBufferRangeEXT();
	piglit_dispatch_glTextureBufferRangeEXT(texture, target, internalformat, buffer, offset, size);
}

PFNGLTEXTUREBUFFERRANGEEXTPROC piglit_dispatch_glTextureBufferRangeEXT = stub_glTextureBufferRangeEXT;

static void*
resolve_glTextureColorMaskSGIS(void)
{
	/* glTextureColorMaskSGIS (GL_SGIS_texture_color_mask) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_SGIS_texture_color_mask")) {
		return get_ext_proc("glTextureColorMaskSGIS");
	}

	unsupported("glTextureColorMaskSGIS");
	return piglit_dispatch_glTextureColorMaskSGIS;
}

static void APIENTRY
stub_glTextureColorMaskSGIS(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
	check_initialized();
	piglit_dispatch_glTextureColorMaskSGIS = resolve_glTextureColorMaskSGIS();
	piglit_dispatch_glTextureColorMaskSGIS(red, green, blue, alpha);
}

PFNGLTEXTURECOLORMASKSGISPROC piglit_dispatch_glTextureColorMaskSGIS = stub_glTextureColorMaskSGIS;

static void*
resolve_glTextureImage1DEXT(void)
{
	/* glTextureImage1DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glTextureImage1DEXT");
	}

	unsupported("glTextureImage1DEXT");
	return piglit_dispatch_glTextureImage1DEXT;
}

static void APIENTRY
stub_glTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels)
{
	check_initialized();
	piglit_dispatch_glTextureImage1DEXT = resolve_glTextureImage1DEXT();
	piglit_dispatch_glTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels);
}

PFNGLTEXTUREIMAGE1DEXTPROC piglit_dispatch_glTextureImage1DEXT = stub_glTextureImage1DEXT;

static void*
resolve_glTextureImage2DEXT(void)
{
	/* glTextureImage2DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glTextureImage2DEXT");
	}

	unsupported("glTextureImage2DEXT");
	return piglit_dispatch_glTextureImage2DEXT;
}

static void APIENTRY
stub_glTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels)
{
	check_initialized();
	piglit_dispatch_glTextureImage2DEXT = resolve_glTextureImage2DEXT();
	piglit_dispatch_glTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels);
}

PFNGLTEXTUREIMAGE2DEXTPROC piglit_dispatch_glTextureImage2DEXT = stub_glTextureImage2DEXT;

static void*
resolve_glTextureImage2DMultisampleCoverageNV(void)
{
	/* glTextureImage2DMultisampleCoverageNV (GL_NV_texture_multisample) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_texture_multisample")) {
		return get_ext_proc("glTextureImage2DMultisampleCoverageNV");
	}

	unsupported("glTextureImage2DMultisampleCoverageNV");
	return piglit_dispatch_glTextureImage2DMultisampleCoverageNV;
}

static void APIENTRY
stub_glTextureImage2DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
{
	check_initialized();
	piglit_dispatch_glTextureImage2DMultisampleCoverageNV = resolve_glTextureImage2DMultisampleCoverageNV();
	piglit_dispatch_glTextureImage2DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
}

PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC piglit_dispatch_glTextureImage2DMultisampleCoverageNV = stub_glTextureImage2DMultisampleCoverageNV;

static void*
resolve_glTextureImage2DMultisampleNV(void)
{
	/* glTextureImage2DMultisampleNV (GL_NV_texture_multisample) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_texture_multisample")) {
		return get_ext_proc("glTextureImage2DMultisampleNV");
	}

	unsupported("glTextureImage2DMultisampleNV");
	return piglit_dispatch_glTextureImage2DMultisampleNV;
}

static void APIENTRY
stub_glTextureImage2DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
{
	check_initialized();
	piglit_dispatch_glTextureImage2DMultisampleNV = resolve_glTextureImage2DMultisampleNV();
	piglit_dispatch_glTextureImage2DMultisampleNV(texture, target, samples, internalFormat, width, height, fixedSampleLocations);
}

PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC piglit_dispatch_glTextureImage2DMultisampleNV = stub_glTextureImage2DMultisampleNV;

static void*
resolve_glTextureImage3DEXT(void)
{
	/* glTextureImage3DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glTextureImage3DEXT");
	}

	unsupported("glTextureImage3DEXT");
	return piglit_dispatch_glTextureImage3DEXT;
}

static void APIENTRY
stub_glTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels)
{
	check_initialized();
	piglit_dispatch_glTextureImage3DEXT = resolve_glTextureImage3DEXT();
	piglit_dispatch_glTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
}

PFNGLTEXTUREIMAGE3DEXTPROC piglit_dispatch_glTextureImage3DEXT = stub_glTextureImage3DEXT;

static void*
resolve_glTextureImage3DMultisampleCoverageNV(void)
{
	/* glTextureImage3DMultisampleCoverageNV (GL_NV_texture_multisample) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_texture_multisample")) {
		return get_ext_proc("glTextureImage3DMultisampleCoverageNV");
	}

	unsupported("glTextureImage3DMultisampleCoverageNV");
	return piglit_dispatch_glTextureImage3DMultisampleCoverageNV;
}

static void APIENTRY
stub_glTextureImage3DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
{
	check_initialized();
	piglit_dispatch_glTextureImage3DMultisampleCoverageNV = resolve_glTextureImage3DMultisampleCoverageNV();
	piglit_dispatch_glTextureImage3DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
}

PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC piglit_dispatch_glTextureImage3DMultisampleCoverageNV = stub_glTextureImage3DMultisampleCoverageNV;

static void*
resolve_glTextureImage3DMultisampleNV(void)
{
	/* glTextureImage3DMultisampleNV (GL_NV_texture_multisample) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_texture_multisample")) {
		return get_ext_proc("glTextureImage3DMultisampleNV");
	}

	unsupported("glTextureImage3DMultisampleNV");
	return piglit_dispatch_glTextureImage3DMultisampleNV;
}

static void APIENTRY
stub_glTextureImage3DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
{
	check_initialized();
	piglit_dispatch_glTextureImage3DMultisampleNV = resolve_glTextureImage3DMultisampleNV();
	piglit_dispatch_glTextureImage3DMultisampleNV(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);
}

PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC piglit_dispatch_glTextureImage3DMultisampleNV = stub_glTextureImage3DMultisampleNV;

static void*
resolve_glTextureLightEXT(void)
{
	/* glTextureLightEXT (GL_EXT_light_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_light_texture")) {
		return get_ext_proc("glTextureLightEXT");
	}

	unsupported("glTextureLightEXT");
	return piglit_dispatch_glTextureLightEXT;
}

static void APIENTRY
stub_glTextureLightEXT(GLenum pname)
{
	check_initialized();
	piglit_dispatch_glTextureLightEXT = resolve_glTextureLightEXT();
	piglit_dispatch_glTextureLightEXT(pname);
}

PFNGLTEXTURELIGHTEXTPROC piglit_dispatch_glTextureLightEXT = stub_glTextureLightEXT;

static void*
resolve_glTextureMaterialEXT(void)
{
	/* glTextureMaterialEXT (GL_EXT_light_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_light_texture")) {
		return get_ext_proc("glTextureMaterialEXT");
	}

	unsupported("glTextureMaterialEXT");
	return piglit_dispatch_glTextureMaterialEXT;
}

static void APIENTRY
stub_glTextureMaterialEXT(GLenum face, GLenum mode)
{
	check_initialized();
	piglit_dispatch_glTextureMaterialEXT = resolve_glTextureMaterialEXT();
	piglit_dispatch_glTextureMaterialEXT(face, mode);
}

PFNGLTEXTUREMATERIALEXTPROC piglit_dispatch_glTextureMaterialEXT = stub_glTextureMaterialEXT;

static void*
resolve_glTextureNormalEXT(void)
{
	/* glTextureNormalEXT (GL_EXT_texture_perturb_normal) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_texture_perturb_normal")) {
		return get_ext_proc("glTextureNormalEXT");
	}

	unsupported("glTextureNormalEXT");
	return piglit_dispatch_glTextureNormalEXT;
}

static void APIENTRY
stub_glTextureNormalEXT(GLenum mode)
{
	check_initialized();
	piglit_dispatch_glTextureNormalEXT = resolve_glTextureNormalEXT();
	piglit_dispatch_glTextureNormalEXT(mode);
}

PFNGLTEXTURENORMALEXTPROC piglit_dispatch_glTextureNormalEXT = stub_glTextureNormalEXT;

static void*
resolve_glTexturePageCommitmentEXT(void)
{
	/* glTexturePageCommitmentEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glTexturePageCommitmentEXT");
	}

	unsupported("glTexturePageCommitmentEXT");
	return piglit_dispatch_glTexturePageCommitmentEXT;
}

static void APIENTRY
stub_glTexturePageCommitmentEXT(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean resident)
{
	check_initialized();
	piglit_dispatch_glTexturePageCommitmentEXT = resolve_glTexturePageCommitmentEXT();
	piglit_dispatch_glTexturePageCommitmentEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, resident);
}

PFNGLTEXTUREPAGECOMMITMENTEXTPROC piglit_dispatch_glTexturePageCommitmentEXT = stub_glTexturePageCommitmentEXT;

static void*
resolve_glTextureParameterIivEXT(void)
{
	/* glTextureParameterIivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glTextureParameterIivEXT");
	}

	unsupported("glTextureParameterIivEXT");
	return piglit_dispatch_glTextureParameterIivEXT;
}

static void APIENTRY
stub_glTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glTextureParameterIivEXT = resolve_glTextureParameterIivEXT();
	piglit_dispatch_glTextureParameterIivEXT(texture, target, pname, params);
}

PFNGLTEXTUREPARAMETERIIVEXTPROC piglit_dispatch_glTextureParameterIivEXT = stub_glTextureParameterIivEXT;

static void*
resolve_glTextureParameterIuivEXT(void)
{
	/* glTextureParameterIuivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glTextureParameterIuivEXT");
	}

	unsupported("glTextureParameterIuivEXT");
	return piglit_dispatch_glTextureParameterIuivEXT;
}

static void APIENTRY
stub_glTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint * params)
{
	check_initialized();
	piglit_dispatch_glTextureParameterIuivEXT = resolve_glTextureParameterIuivEXT();
	piglit_dispatch_glTextureParameterIuivEXT(texture, target, pname, params);
}

PFNGLTEXTUREPARAMETERIUIVEXTPROC piglit_dispatch_glTextureParameterIuivEXT = stub_glTextureParameterIuivEXT;

static void*
resolve_glTextureParameterfEXT(void)
{
	/* glTextureParameterfEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glTextureParameterfEXT");
	}

	unsupported("glTextureParameterfEXT");
	return piglit_dispatch_glTextureParameterfEXT;
}

static void APIENTRY
stub_glTextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, GLfloat param)
{
	check_initialized();
	piglit_dispatch_glTextureParameterfEXT = resolve_glTextureParameterfEXT();
	piglit_dispatch_glTextureParameterfEXT(texture, target, pname, param);
}

PFNGLTEXTUREPARAMETERFEXTPROC piglit_dispatch_glTextureParameterfEXT = stub_glTextureParameterfEXT;

static void*
resolve_glTextureParameterfvEXT(void)
{
	/* glTextureParameterfvEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glTextureParameterfvEXT");
	}

	unsupported("glTextureParameterfvEXT");
	return piglit_dispatch_glTextureParameterfvEXT;
}

static void APIENTRY
stub_glTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glTextureParameterfvEXT = resolve_glTextureParameterfvEXT();
	piglit_dispatch_glTextureParameterfvEXT(texture, target, pname, params);
}

PFNGLTEXTUREPARAMETERFVEXTPROC piglit_dispatch_glTextureParameterfvEXT = stub_glTextureParameterfvEXT;

static void*
resolve_glTextureParameteriEXT(void)
{
	/* glTextureParameteriEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glTextureParameteriEXT");
	}

	unsupported("glTextureParameteriEXT");
	return piglit_dispatch_glTextureParameteriEXT;
}

static void APIENTRY
stub_glTextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, GLint param)
{
	check_initialized();
	piglit_dispatch_glTextureParameteriEXT = resolve_glTextureParameteriEXT();
	piglit_dispatch_glTextureParameteriEXT(texture, target, pname, param);
}

PFNGLTEXTUREPARAMETERIEXTPROC piglit_dispatch_glTextureParameteriEXT = stub_glTextureParameteriEXT;

static void*
resolve_glTextureParameterivEXT(void)
{
	/* glTextureParameterivEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glTextureParameterivEXT");
	}

	unsupported("glTextureParameterivEXT");
	return piglit_dispatch_glTextureParameterivEXT;
}

static void APIENTRY
stub_glTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glTextureParameterivEXT = resolve_glTextureParameterivEXT();
	piglit_dispatch_glTextureParameterivEXT(texture, target, pname, params);
}

PFNGLTEXTUREPARAMETERIVEXTPROC piglit_dispatch_glTextureParameterivEXT = stub_glTextureParameterivEXT;

static void*
resolve_glTextureRangeAPPLE(void)
{
	/* glTextureRangeAPPLE (GL_APPLE_texture_range) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_APPLE_texture_range")) {
		return get_ext_proc("glTextureRangeAPPLE");
	}

	unsupported("glTextureRangeAPPLE");
	return piglit_dispatch_glTextureRangeAPPLE;
}

static void APIENTRY
stub_glTextureRangeAPPLE(GLenum target, GLsizei length, const void * pointer)
{
	check_initialized();
	piglit_dispatch_glTextureRangeAPPLE = resolve_glTextureRangeAPPLE();
	piglit_dispatch_glTextureRangeAPPLE(target, length, pointer);
}

PFNGLTEXTURERANGEAPPLEPROC piglit_dispatch_glTextureRangeAPPLE = stub_glTextureRangeAPPLE;

static void*
resolve_glTextureRenderbufferEXT(void)
{
	/* glTextureRenderbufferEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glTextureRenderbufferEXT");
	}

	unsupported("glTextureRenderbufferEXT");
	return piglit_dispatch_glTextureRenderbufferEXT;
}

static void APIENTRY
stub_glTextureRenderbufferEXT(GLuint texture, GLenum target, GLuint renderbuffer)
{
	check_initialized();
	piglit_dispatch_glTextureRenderbufferEXT = resolve_glTextureRenderbufferEXT();
	piglit_dispatch_glTextureRenderbufferEXT(texture, target, renderbuffer);
}

PFNGLTEXTURERENDERBUFFEREXTPROC piglit_dispatch_glTextureRenderbufferEXT = stub_glTextureRenderbufferEXT;

static void*
resolve_glTextureStorage1DEXT(void)
{
	/* glTextureStorage1DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glTextureStorage1DEXT");
	}

	/* glTextureStorage1DEXT (GL_EXT_texture_storage) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_texture_storage")) {
		return get_ext_proc("glTextureStorage1DEXT");
	}

	unsupported("glTextureStorage1DEXT");
	return piglit_dispatch_glTextureStorage1DEXT;
}

static void APIENTRY
stub_glTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
	check_initialized();
	piglit_dispatch_glTextureStorage1DEXT = resolve_glTextureStorage1DEXT();
	piglit_dispatch_glTextureStorage1DEXT(texture, target, levels, internalformat, width);
}

PFNGLTEXTURESTORAGE1DEXTPROC piglit_dispatch_glTextureStorage1DEXT = stub_glTextureStorage1DEXT;

static void*
resolve_glTextureStorage2DEXT(void)
{
	/* glTextureStorage2DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glTextureStorage2DEXT");
	}

	/* glTextureStorage2DEXT (GL_EXT_texture_storage) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_texture_storage")) {
		return get_ext_proc("glTextureStorage2DEXT");
	}

	unsupported("glTextureStorage2DEXT");
	return piglit_dispatch_glTextureStorage2DEXT;
}

static void APIENTRY
stub_glTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
	check_initialized();
	piglit_dispatch_glTextureStorage2DEXT = resolve_glTextureStorage2DEXT();
	piglit_dispatch_glTextureStorage2DEXT(texture, target, levels, internalformat, width, height);
}

PFNGLTEXTURESTORAGE2DEXTPROC piglit_dispatch_glTextureStorage2DEXT = stub_glTextureStorage2DEXT;

static void*
resolve_glTextureStorage2DMultisampleEXT(void)
{
	/* glTextureStorage2DMultisampleEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glTextureStorage2DMultisampleEXT");
	}

	unsupported("glTextureStorage2DMultisampleEXT");
	return piglit_dispatch_glTextureStorage2DMultisampleEXT;
}

static void APIENTRY
stub_glTextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
	check_initialized();
	piglit_dispatch_glTextureStorage2DMultisampleEXT = resolve_glTextureStorage2DMultisampleEXT();
	piglit_dispatch_glTextureStorage2DMultisampleEXT(texture, target, samples, internalformat, width, height, fixedsamplelocations);
}

PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC piglit_dispatch_glTextureStorage2DMultisampleEXT = stub_glTextureStorage2DMultisampleEXT;

static void*
resolve_glTextureStorage3DEXT(void)
{
	/* glTextureStorage3DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glTextureStorage3DEXT");
	}

	/* glTextureStorage3DEXT (GL_EXT_texture_storage) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_texture_storage")) {
		return get_ext_proc("glTextureStorage3DEXT");
	}

	unsupported("glTextureStorage3DEXT");
	return piglit_dispatch_glTextureStorage3DEXT;
}

static void APIENTRY
stub_glTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
	check_initialized();
	piglit_dispatch_glTextureStorage3DEXT = resolve_glTextureStorage3DEXT();
	piglit_dispatch_glTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth);
}

PFNGLTEXTURESTORAGE3DEXTPROC piglit_dispatch_glTextureStorage3DEXT = stub_glTextureStorage3DEXT;

static void*
resolve_glTextureStorage3DMultisampleEXT(void)
{
	/* glTextureStorage3DMultisampleEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glTextureStorage3DMultisampleEXT");
	}

	unsupported("glTextureStorage3DMultisampleEXT");
	return piglit_dispatch_glTextureStorage3DMultisampleEXT;
}

static void APIENTRY
stub_glTextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
	check_initialized();
	piglit_dispatch_glTextureStorage3DMultisampleEXT = resolve_glTextureStorage3DMultisampleEXT();
	piglit_dispatch_glTextureStorage3DMultisampleEXT(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
}

PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC piglit_dispatch_glTextureStorage3DMultisampleEXT = stub_glTextureStorage3DMultisampleEXT;

static void*
resolve_glTextureStorageSparseAMD(void)
{
	/* glTextureStorageSparseAMD (GL_AMD_sparse_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_sparse_texture")) {
		return get_ext_proc("glTextureStorageSparseAMD");
	}

	unsupported("glTextureStorageSparseAMD");
	return piglit_dispatch_glTextureStorageSparseAMD;
}

static void APIENTRY
stub_glTextureStorageSparseAMD(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)
{
	check_initialized();
	piglit_dispatch_glTextureStorageSparseAMD = resolve_glTextureStorageSparseAMD();
	piglit_dispatch_glTextureStorageSparseAMD(texture, target, internalFormat, width, height, depth, layers, flags);
}

PFNGLTEXTURESTORAGESPARSEAMDPROC piglit_dispatch_glTextureStorageSparseAMD = stub_glTextureStorageSparseAMD;

static void*
resolve_glTextureSubImage1DEXT(void)
{
	/* glTextureSubImage1DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glTextureSubImage1DEXT");
	}

	unsupported("glTextureSubImage1DEXT");
	return piglit_dispatch_glTextureSubImage1DEXT;
}

static void APIENTRY
stub_glTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels)
{
	check_initialized();
	piglit_dispatch_glTextureSubImage1DEXT = resolve_glTextureSubImage1DEXT();
	piglit_dispatch_glTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels);
}

PFNGLTEXTURESUBIMAGE1DEXTPROC piglit_dispatch_glTextureSubImage1DEXT = stub_glTextureSubImage1DEXT;

static void*
resolve_glTextureSubImage2DEXT(void)
{
	/* glTextureSubImage2DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glTextureSubImage2DEXT");
	}

	unsupported("glTextureSubImage2DEXT");
	return piglit_dispatch_glTextureSubImage2DEXT;
}

static void APIENTRY
stub_glTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels)
{
	check_initialized();
	piglit_dispatch_glTextureSubImage2DEXT = resolve_glTextureSubImage2DEXT();
	piglit_dispatch_glTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
}

PFNGLTEXTURESUBIMAGE2DEXTPROC piglit_dispatch_glTextureSubImage2DEXT = stub_glTextureSubImage2DEXT;

static void*
resolve_glTextureSubImage3DEXT(void)
{
	/* glTextureSubImage3DEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glTextureSubImage3DEXT");
	}

	unsupported("glTextureSubImage3DEXT");
	return piglit_dispatch_glTextureSubImage3DEXT;
}

static void APIENTRY
stub_glTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels)
{
	check_initialized();
	piglit_dispatch_glTextureSubImage3DEXT = resolve_glTextureSubImage3DEXT();
	piglit_dispatch_glTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

PFNGLTEXTURESUBIMAGE3DEXTPROC piglit_dispatch_glTextureSubImage3DEXT = stub_glTextureSubImage3DEXT;

static void*
resolve_glTextureView(void)
{
	/* glTextureView (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glTextureView", 43);
	}

	/* glTextureView (GL_ARB_texture_view) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_texture_view")) {
		return get_ext_proc("glTextureView");
	}

	/* glTextureViewEXT (GL_EXT_texture_view) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_texture_view")) {
		return get_ext_proc("glTextureViewEXT");
	}

	unsupported("glTextureView");
	return piglit_dispatch_glTextureView;
}

static void APIENTRY
stub_glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
{
	check_initialized();
	piglit_dispatch_glTextureView = resolve_glTextureView();
	piglit_dispatch_glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
}

PFNGLTEXTUREVIEWPROC piglit_dispatch_glTextureView = stub_glTextureView;

static void*
resolve_glTrackMatrixNV(void)
{
	/* glTrackMatrixNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glTrackMatrixNV");
	}

	unsupported("glTrackMatrixNV");
	return piglit_dispatch_glTrackMatrixNV;
}

static void APIENTRY
stub_glTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform)
{
	check_initialized();
	piglit_dispatch_glTrackMatrixNV = resolve_glTrackMatrixNV();
	piglit_dispatch_glTrackMatrixNV(target, address, matrix, transform);
}

PFNGLTRACKMATRIXNVPROC piglit_dispatch_glTrackMatrixNV = stub_glTrackMatrixNV;

static void*
resolve_glTransformFeedbackAttribsNV(void)
{
	/* glTransformFeedbackAttribsNV (GL_NV_transform_feedback) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_transform_feedback")) {
		return get_ext_proc("glTransformFeedbackAttribsNV");
	}

	unsupported("glTransformFeedbackAttribsNV");
	return piglit_dispatch_glTransformFeedbackAttribsNV;
}

static void APIENTRY
stub_glTransformFeedbackAttribsNV(GLuint count, const GLint * attribs, GLenum bufferMode)
{
	check_initialized();
	piglit_dispatch_glTransformFeedbackAttribsNV = resolve_glTransformFeedbackAttribsNV();
	piglit_dispatch_glTransformFeedbackAttribsNV(count, attribs, bufferMode);
}

PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC piglit_dispatch_glTransformFeedbackAttribsNV = stub_glTransformFeedbackAttribsNV;

static void*
resolve_glTransformFeedbackStreamAttribsNV(void)
{
	/* glTransformFeedbackStreamAttribsNV (GL_NV_transform_feedback) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_transform_feedback")) {
		return get_ext_proc("glTransformFeedbackStreamAttribsNV");
	}

	unsupported("glTransformFeedbackStreamAttribsNV");
	return piglit_dispatch_glTransformFeedbackStreamAttribsNV;
}

static void APIENTRY
stub_glTransformFeedbackStreamAttribsNV(GLsizei count, const GLint * attribs, GLsizei nbuffers, const GLint * bufstreams, GLenum bufferMode)
{
	check_initialized();
	piglit_dispatch_glTransformFeedbackStreamAttribsNV = resolve_glTransformFeedbackStreamAttribsNV();
	piglit_dispatch_glTransformFeedbackStreamAttribsNV(count, attribs, nbuffers, bufstreams, bufferMode);
}

PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC piglit_dispatch_glTransformFeedbackStreamAttribsNV = stub_glTransformFeedbackStreamAttribsNV;

static void*
resolve_glTransformFeedbackVaryings(void)
{
	/* glTransformFeedbackVaryings (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glTransformFeedbackVaryings", 30);
	}

	/* glTransformFeedbackVaryings (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glTransformFeedbackVaryings", 30);
	}

	/* glTransformFeedbackVaryingsEXT (GL_EXT_transform_feedback) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_transform_feedback")) {
		return get_ext_proc("glTransformFeedbackVaryingsEXT");
	}

	unsupported("glTransformFeedbackVaryings");
	return piglit_dispatch_glTransformFeedbackVaryings;
}

static void APIENTRY
stub_glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode)
{
	check_initialized();
	piglit_dispatch_glTransformFeedbackVaryings = resolve_glTransformFeedbackVaryings();
	piglit_dispatch_glTransformFeedbackVaryings(program, count, varyings, bufferMode);
}

PFNGLTRANSFORMFEEDBACKVARYINGSPROC piglit_dispatch_glTransformFeedbackVaryings = stub_glTransformFeedbackVaryings;

static void*
resolve_glTransformFeedbackVaryingsNV(void)
{
	/* glTransformFeedbackVaryingsNV (GL_NV_transform_feedback) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_transform_feedback")) {
		return get_ext_proc("glTransformFeedbackVaryingsNV");
	}

	unsupported("glTransformFeedbackVaryingsNV");
	return piglit_dispatch_glTransformFeedbackVaryingsNV;
}

static void APIENTRY
stub_glTransformFeedbackVaryingsNV(GLuint program, GLsizei count, const GLint * locations, GLenum bufferMode)
{
	check_initialized();
	piglit_dispatch_glTransformFeedbackVaryingsNV = resolve_glTransformFeedbackVaryingsNV();
	piglit_dispatch_glTransformFeedbackVaryingsNV(program, count, locations, bufferMode);
}

PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC piglit_dispatch_glTransformFeedbackVaryingsNV = stub_glTransformFeedbackVaryingsNV;

static void*
resolve_glTransformPathNV(void)
{
	/* glTransformPathNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glTransformPathNV");
	}

	unsupported("glTransformPathNV");
	return piglit_dispatch_glTransformPathNV;
}

static void APIENTRY
stub_glTransformPathNV(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat * transformValues)
{
	check_initialized();
	piglit_dispatch_glTransformPathNV = resolve_glTransformPathNV();
	piglit_dispatch_glTransformPathNV(resultPath, srcPath, transformType, transformValues);
}

PFNGLTRANSFORMPATHNVPROC piglit_dispatch_glTransformPathNV = stub_glTransformPathNV;

static void*
resolve_glTranslated(void)
{
	/* glTranslated (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTranslated", 10);
	}

	unsupported("glTranslated");
	return piglit_dispatch_glTranslated;
}

static void APIENTRY
stub_glTranslated(GLdouble x, GLdouble y, GLdouble z)
{
	check_initialized();
	piglit_dispatch_glTranslated = resolve_glTranslated();
	piglit_dispatch_glTranslated(x, y, z);
}

PFNGLTRANSLATEDPROC piglit_dispatch_glTranslated = stub_glTranslated;

static void*
resolve_glTranslatef(void)
{
	/* glTranslatef (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glTranslatef", 10);
	}

	/* glTranslatef (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glTranslatef", 10);
	}

	unsupported("glTranslatef");
	return piglit_dispatch_glTranslatef;
}

static void APIENTRY
stub_glTranslatef(GLfloat x, GLfloat y, GLfloat z)
{
	check_initialized();
	piglit_dispatch_glTranslatef = resolve_glTranslatef();
	piglit_dispatch_glTranslatef(x, y, z);
}

PFNGLTRANSLATEFPROC piglit_dispatch_glTranslatef = stub_glTranslatef;

static void*
resolve_glTranslatex(void)
{
	/* glTranslatex (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glTranslatex", 10);
	}

	unsupported("glTranslatex");
	return piglit_dispatch_glTranslatex;
}

static void APIENTRY
stub_glTranslatex(GLfixed x, GLfixed y, GLfixed z)
{
	check_initialized();
	piglit_dispatch_glTranslatex = resolve_glTranslatex();
	piglit_dispatch_glTranslatex(x, y, z);
}

PFNGLTRANSLATEXPROC piglit_dispatch_glTranslatex = stub_glTranslatex;

static void*
resolve_glTranslatexOES(void)
{
	/* glTranslatexOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glTranslatexOES");
	}

	unsupported("glTranslatexOES");
	return piglit_dispatch_glTranslatexOES;
}

static void APIENTRY
stub_glTranslatexOES(GLfixed x, GLfixed y, GLfixed z)
{
	check_initialized();
	piglit_dispatch_glTranslatexOES = resolve_glTranslatexOES();
	piglit_dispatch_glTranslatexOES(x, y, z);
}

PFNGLTRANSLATEXOESPROC piglit_dispatch_glTranslatexOES = stub_glTranslatexOES;

static void*
resolve_glUniform1d(void)
{
	/* glUniform1d (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniform1d", 40);
	}

	/* glUniform1d (GL_ARB_gpu_shader_fp64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_gpu_shader_fp64")) {
		return get_ext_proc("glUniform1d");
	}

	unsupported("glUniform1d");
	return piglit_dispatch_glUniform1d;
}

static void APIENTRY
stub_glUniform1d(GLint location, GLdouble x)
{
	check_initialized();
	piglit_dispatch_glUniform1d = resolve_glUniform1d();
	piglit_dispatch_glUniform1d(location, x);
}

PFNGLUNIFORM1DPROC piglit_dispatch_glUniform1d = stub_glUniform1d;

static void*
resolve_glUniform1dv(void)
{
	/* glUniform1dv (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniform1dv", 40);
	}

	/* glUniform1dv (GL_ARB_gpu_shader_fp64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_gpu_shader_fp64")) {
		return get_ext_proc("glUniform1dv");
	}

	unsupported("glUniform1dv");
	return piglit_dispatch_glUniform1dv;
}

static void APIENTRY
stub_glUniform1dv(GLint location, GLsizei count, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glUniform1dv = resolve_glUniform1dv();
	piglit_dispatch_glUniform1dv(location, count, value);
}

PFNGLUNIFORM1DVPROC piglit_dispatch_glUniform1dv = stub_glUniform1dv;

static void*
resolve_glUniform1f(void)
{
	/* glUniform1f (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniform1f", 20);
	}

	/* glUniform1f (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glUniform1f", 20);
	}

	/* glUniform1fARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glUniform1fARB");
	}

	unsupported("glUniform1f");
	return piglit_dispatch_glUniform1f;
}

static void APIENTRY
stub_glUniform1f(GLint location, GLfloat v0)
{
	check_initialized();
	piglit_dispatch_glUniform1f = resolve_glUniform1f();
	piglit_dispatch_glUniform1f(location, v0);
}

PFNGLUNIFORM1FPROC piglit_dispatch_glUniform1f = stub_glUniform1f;

static void*
resolve_glUniform1fv(void)
{
	/* glUniform1fv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniform1fv", 20);
	}

	/* glUniform1fv (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glUniform1fv", 20);
	}

	/* glUniform1fvARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glUniform1fvARB");
	}

	unsupported("glUniform1fv");
	return piglit_dispatch_glUniform1fv;
}

static void APIENTRY
stub_glUniform1fv(GLint location, GLsizei count, const GLfloat * value)
{
	check_initialized();
	piglit_dispatch_glUniform1fv = resolve_glUniform1fv();
	piglit_dispatch_glUniform1fv(location, count, value);
}

PFNGLUNIFORM1FVPROC piglit_dispatch_glUniform1fv = stub_glUniform1fv;

static void*
resolve_glUniform1i(void)
{
	/* glUniform1i (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniform1i", 20);
	}

	/* glUniform1i (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glUniform1i", 20);
	}

	/* glUniform1iARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glUniform1iARB");
	}

	unsupported("glUniform1i");
	return piglit_dispatch_glUniform1i;
}

static void APIENTRY
stub_glUniform1i(GLint location, GLint v0)
{
	check_initialized();
	piglit_dispatch_glUniform1i = resolve_glUniform1i();
	piglit_dispatch_glUniform1i(location, v0);
}

PFNGLUNIFORM1IPROC piglit_dispatch_glUniform1i = stub_glUniform1i;

static void*
resolve_glUniform1i64NV(void)
{
	/* glUniform1i64NV (GL_AMD_gpu_shader_int64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_gpu_shader_int64")) {
		return get_ext_proc("glUniform1i64NV");
	}

	/* glUniform1i64NV (GL_NV_gpu_shader5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_shader5")) {
		return get_ext_proc("glUniform1i64NV");
	}

	unsupported("glUniform1i64NV");
	return piglit_dispatch_glUniform1i64NV;
}

static void APIENTRY
stub_glUniform1i64NV(GLint location, GLint64EXT x)
{
	check_initialized();
	piglit_dispatch_glUniform1i64NV = resolve_glUniform1i64NV();
	piglit_dispatch_glUniform1i64NV(location, x);
}

PFNGLUNIFORM1I64NVPROC piglit_dispatch_glUniform1i64NV = stub_glUniform1i64NV;

static void*
resolve_glUniform1i64vNV(void)
{
	/* glUniform1i64vNV (GL_AMD_gpu_shader_int64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_gpu_shader_int64")) {
		return get_ext_proc("glUniform1i64vNV");
	}

	/* glUniform1i64vNV (GL_NV_gpu_shader5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_shader5")) {
		return get_ext_proc("glUniform1i64vNV");
	}

	unsupported("glUniform1i64vNV");
	return piglit_dispatch_glUniform1i64vNV;
}

static void APIENTRY
stub_glUniform1i64vNV(GLint location, GLsizei count, const GLint64EXT * value)
{
	check_initialized();
	piglit_dispatch_glUniform1i64vNV = resolve_glUniform1i64vNV();
	piglit_dispatch_glUniform1i64vNV(location, count, value);
}

PFNGLUNIFORM1I64VNVPROC piglit_dispatch_glUniform1i64vNV = stub_glUniform1i64vNV;

static void*
resolve_glUniform1iv(void)
{
	/* glUniform1iv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniform1iv", 20);
	}

	/* glUniform1iv (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glUniform1iv", 20);
	}

	/* glUniform1ivARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glUniform1ivARB");
	}

	unsupported("glUniform1iv");
	return piglit_dispatch_glUniform1iv;
}

static void APIENTRY
stub_glUniform1iv(GLint location, GLsizei count, const GLint * value)
{
	check_initialized();
	piglit_dispatch_glUniform1iv = resolve_glUniform1iv();
	piglit_dispatch_glUniform1iv(location, count, value);
}

PFNGLUNIFORM1IVPROC piglit_dispatch_glUniform1iv = stub_glUniform1iv;

static void*
resolve_glUniform1ui(void)
{
	/* glUniform1ui (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniform1ui", 30);
	}

	/* glUniform1ui (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glUniform1ui", 30);
	}

	/* glUniform1uiEXT (GL_EXT_gpu_shader4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_gpu_shader4")) {
		return get_ext_proc("glUniform1uiEXT");
	}

	unsupported("glUniform1ui");
	return piglit_dispatch_glUniform1ui;
}

static void APIENTRY
stub_glUniform1ui(GLint location, GLuint v0)
{
	check_initialized();
	piglit_dispatch_glUniform1ui = resolve_glUniform1ui();
	piglit_dispatch_glUniform1ui(location, v0);
}

PFNGLUNIFORM1UIPROC piglit_dispatch_glUniform1ui = stub_glUniform1ui;

static void*
resolve_glUniform1ui64NV(void)
{
	/* glUniform1ui64NV (GL_AMD_gpu_shader_int64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_gpu_shader_int64")) {
		return get_ext_proc("glUniform1ui64NV");
	}

	/* glUniform1ui64NV (GL_NV_gpu_shader5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_shader5")) {
		return get_ext_proc("glUniform1ui64NV");
	}

	unsupported("glUniform1ui64NV");
	return piglit_dispatch_glUniform1ui64NV;
}

static void APIENTRY
stub_glUniform1ui64NV(GLint location, GLuint64EXT x)
{
	check_initialized();
	piglit_dispatch_glUniform1ui64NV = resolve_glUniform1ui64NV();
	piglit_dispatch_glUniform1ui64NV(location, x);
}

PFNGLUNIFORM1UI64NVPROC piglit_dispatch_glUniform1ui64NV = stub_glUniform1ui64NV;

static void*
resolve_glUniform1ui64vNV(void)
{
	/* glUniform1ui64vNV (GL_AMD_gpu_shader_int64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_gpu_shader_int64")) {
		return get_ext_proc("glUniform1ui64vNV");
	}

	/* glUniform1ui64vNV (GL_NV_gpu_shader5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_shader5")) {
		return get_ext_proc("glUniform1ui64vNV");
	}

	unsupported("glUniform1ui64vNV");
	return piglit_dispatch_glUniform1ui64vNV;
}

static void APIENTRY
stub_glUniform1ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value)
{
	check_initialized();
	piglit_dispatch_glUniform1ui64vNV = resolve_glUniform1ui64vNV();
	piglit_dispatch_glUniform1ui64vNV(location, count, value);
}

PFNGLUNIFORM1UI64VNVPROC piglit_dispatch_glUniform1ui64vNV = stub_glUniform1ui64vNV;

static void*
resolve_glUniform1uiv(void)
{
	/* glUniform1uiv (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniform1uiv", 30);
	}

	/* glUniform1uiv (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glUniform1uiv", 30);
	}

	/* glUniform1uivEXT (GL_EXT_gpu_shader4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_gpu_shader4")) {
		return get_ext_proc("glUniform1uivEXT");
	}

	unsupported("glUniform1uiv");
	return piglit_dispatch_glUniform1uiv;
}

static void APIENTRY
stub_glUniform1uiv(GLint location, GLsizei count, const GLuint * value)
{
	check_initialized();
	piglit_dispatch_glUniform1uiv = resolve_glUniform1uiv();
	piglit_dispatch_glUniform1uiv(location, count, value);
}

PFNGLUNIFORM1UIVPROC piglit_dispatch_glUniform1uiv = stub_glUniform1uiv;

static void*
resolve_glUniform2d(void)
{
	/* glUniform2d (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniform2d", 40);
	}

	/* glUniform2d (GL_ARB_gpu_shader_fp64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_gpu_shader_fp64")) {
		return get_ext_proc("glUniform2d");
	}

	unsupported("glUniform2d");
	return piglit_dispatch_glUniform2d;
}

static void APIENTRY
stub_glUniform2d(GLint location, GLdouble x, GLdouble y)
{
	check_initialized();
	piglit_dispatch_glUniform2d = resolve_glUniform2d();
	piglit_dispatch_glUniform2d(location, x, y);
}

PFNGLUNIFORM2DPROC piglit_dispatch_glUniform2d = stub_glUniform2d;

static void*
resolve_glUniform2dv(void)
{
	/* glUniform2dv (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniform2dv", 40);
	}

	/* glUniform2dv (GL_ARB_gpu_shader_fp64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_gpu_shader_fp64")) {
		return get_ext_proc("glUniform2dv");
	}

	unsupported("glUniform2dv");
	return piglit_dispatch_glUniform2dv;
}

static void APIENTRY
stub_glUniform2dv(GLint location, GLsizei count, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glUniform2dv = resolve_glUniform2dv();
	piglit_dispatch_glUniform2dv(location, count, value);
}

PFNGLUNIFORM2DVPROC piglit_dispatch_glUniform2dv = stub_glUniform2dv;

static void*
resolve_glUniform2f(void)
{
	/* glUniform2f (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniform2f", 20);
	}

	/* glUniform2f (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glUniform2f", 20);
	}

	/* glUniform2fARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glUniform2fARB");
	}

	unsupported("glUniform2f");
	return piglit_dispatch_glUniform2f;
}

static void APIENTRY
stub_glUniform2f(GLint location, GLfloat v0, GLfloat v1)
{
	check_initialized();
	piglit_dispatch_glUniform2f = resolve_glUniform2f();
	piglit_dispatch_glUniform2f(location, v0, v1);
}

PFNGLUNIFORM2FPROC piglit_dispatch_glUniform2f = stub_glUniform2f;

static void*
resolve_glUniform2fv(void)
{
	/* glUniform2fv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniform2fv", 20);
	}

	/* glUniform2fv (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glUniform2fv", 20);
	}

	/* glUniform2fvARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glUniform2fvARB");
	}

	unsupported("glUniform2fv");
	return piglit_dispatch_glUniform2fv;
}

static void APIENTRY
stub_glUniform2fv(GLint location, GLsizei count, const GLfloat * value)
{
	check_initialized();
	piglit_dispatch_glUniform2fv = resolve_glUniform2fv();
	piglit_dispatch_glUniform2fv(location, count, value);
}

PFNGLUNIFORM2FVPROC piglit_dispatch_glUniform2fv = stub_glUniform2fv;

static void*
resolve_glUniform2i(void)
{
	/* glUniform2i (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniform2i", 20);
	}

	/* glUniform2i (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glUniform2i", 20);
	}

	/* glUniform2iARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glUniform2iARB");
	}

	unsupported("glUniform2i");
	return piglit_dispatch_glUniform2i;
}

static void APIENTRY
stub_glUniform2i(GLint location, GLint v0, GLint v1)
{
	check_initialized();
	piglit_dispatch_glUniform2i = resolve_glUniform2i();
	piglit_dispatch_glUniform2i(location, v0, v1);
}

PFNGLUNIFORM2IPROC piglit_dispatch_glUniform2i = stub_glUniform2i;

static void*
resolve_glUniform2i64NV(void)
{
	/* glUniform2i64NV (GL_AMD_gpu_shader_int64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_gpu_shader_int64")) {
		return get_ext_proc("glUniform2i64NV");
	}

	/* glUniform2i64NV (GL_NV_gpu_shader5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_shader5")) {
		return get_ext_proc("glUniform2i64NV");
	}

	unsupported("glUniform2i64NV");
	return piglit_dispatch_glUniform2i64NV;
}

static void APIENTRY
stub_glUniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y)
{
	check_initialized();
	piglit_dispatch_glUniform2i64NV = resolve_glUniform2i64NV();
	piglit_dispatch_glUniform2i64NV(location, x, y);
}

PFNGLUNIFORM2I64NVPROC piglit_dispatch_glUniform2i64NV = stub_glUniform2i64NV;

static void*
resolve_glUniform2i64vNV(void)
{
	/* glUniform2i64vNV (GL_AMD_gpu_shader_int64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_gpu_shader_int64")) {
		return get_ext_proc("glUniform2i64vNV");
	}

	/* glUniform2i64vNV (GL_NV_gpu_shader5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_shader5")) {
		return get_ext_proc("glUniform2i64vNV");
	}

	unsupported("glUniform2i64vNV");
	return piglit_dispatch_glUniform2i64vNV;
}

static void APIENTRY
stub_glUniform2i64vNV(GLint location, GLsizei count, const GLint64EXT * value)
{
	check_initialized();
	piglit_dispatch_glUniform2i64vNV = resolve_glUniform2i64vNV();
	piglit_dispatch_glUniform2i64vNV(location, count, value);
}

PFNGLUNIFORM2I64VNVPROC piglit_dispatch_glUniform2i64vNV = stub_glUniform2i64vNV;

static void*
resolve_glUniform2iv(void)
{
	/* glUniform2iv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniform2iv", 20);
	}

	/* glUniform2iv (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glUniform2iv", 20);
	}

	/* glUniform2ivARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glUniform2ivARB");
	}

	unsupported("glUniform2iv");
	return piglit_dispatch_glUniform2iv;
}

static void APIENTRY
stub_glUniform2iv(GLint location, GLsizei count, const GLint * value)
{
	check_initialized();
	piglit_dispatch_glUniform2iv = resolve_glUniform2iv();
	piglit_dispatch_glUniform2iv(location, count, value);
}

PFNGLUNIFORM2IVPROC piglit_dispatch_glUniform2iv = stub_glUniform2iv;

static void*
resolve_glUniform2ui(void)
{
	/* glUniform2ui (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniform2ui", 30);
	}

	/* glUniform2ui (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glUniform2ui", 30);
	}

	/* glUniform2uiEXT (GL_EXT_gpu_shader4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_gpu_shader4")) {
		return get_ext_proc("glUniform2uiEXT");
	}

	unsupported("glUniform2ui");
	return piglit_dispatch_glUniform2ui;
}

static void APIENTRY
stub_glUniform2ui(GLint location, GLuint v0, GLuint v1)
{
	check_initialized();
	piglit_dispatch_glUniform2ui = resolve_glUniform2ui();
	piglit_dispatch_glUniform2ui(location, v0, v1);
}

PFNGLUNIFORM2UIPROC piglit_dispatch_glUniform2ui = stub_glUniform2ui;

static void*
resolve_glUniform2ui64NV(void)
{
	/* glUniform2ui64NV (GL_AMD_gpu_shader_int64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_gpu_shader_int64")) {
		return get_ext_proc("glUniform2ui64NV");
	}

	/* glUniform2ui64NV (GL_NV_gpu_shader5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_shader5")) {
		return get_ext_proc("glUniform2ui64NV");
	}

	unsupported("glUniform2ui64NV");
	return piglit_dispatch_glUniform2ui64NV;
}

static void APIENTRY
stub_glUniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y)
{
	check_initialized();
	piglit_dispatch_glUniform2ui64NV = resolve_glUniform2ui64NV();
	piglit_dispatch_glUniform2ui64NV(location, x, y);
}

PFNGLUNIFORM2UI64NVPROC piglit_dispatch_glUniform2ui64NV = stub_glUniform2ui64NV;

static void*
resolve_glUniform2ui64vNV(void)
{
	/* glUniform2ui64vNV (GL_AMD_gpu_shader_int64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_gpu_shader_int64")) {
		return get_ext_proc("glUniform2ui64vNV");
	}

	/* glUniform2ui64vNV (GL_NV_gpu_shader5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_shader5")) {
		return get_ext_proc("glUniform2ui64vNV");
	}

	unsupported("glUniform2ui64vNV");
	return piglit_dispatch_glUniform2ui64vNV;
}

static void APIENTRY
stub_glUniform2ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value)
{
	check_initialized();
	piglit_dispatch_glUniform2ui64vNV = resolve_glUniform2ui64vNV();
	piglit_dispatch_glUniform2ui64vNV(location, count, value);
}

PFNGLUNIFORM2UI64VNVPROC piglit_dispatch_glUniform2ui64vNV = stub_glUniform2ui64vNV;

static void*
resolve_glUniform2uiv(void)
{
	/* glUniform2uiv (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniform2uiv", 30);
	}

	/* glUniform2uiv (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glUniform2uiv", 30);
	}

	/* glUniform2uivEXT (GL_EXT_gpu_shader4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_gpu_shader4")) {
		return get_ext_proc("glUniform2uivEXT");
	}

	unsupported("glUniform2uiv");
	return piglit_dispatch_glUniform2uiv;
}

static void APIENTRY
stub_glUniform2uiv(GLint location, GLsizei count, const GLuint * value)
{
	check_initialized();
	piglit_dispatch_glUniform2uiv = resolve_glUniform2uiv();
	piglit_dispatch_glUniform2uiv(location, count, value);
}

PFNGLUNIFORM2UIVPROC piglit_dispatch_glUniform2uiv = stub_glUniform2uiv;

static void*
resolve_glUniform3d(void)
{
	/* glUniform3d (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniform3d", 40);
	}

	/* glUniform3d (GL_ARB_gpu_shader_fp64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_gpu_shader_fp64")) {
		return get_ext_proc("glUniform3d");
	}

	unsupported("glUniform3d");
	return piglit_dispatch_glUniform3d;
}

static void APIENTRY
stub_glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z)
{
	check_initialized();
	piglit_dispatch_glUniform3d = resolve_glUniform3d();
	piglit_dispatch_glUniform3d(location, x, y, z);
}

PFNGLUNIFORM3DPROC piglit_dispatch_glUniform3d = stub_glUniform3d;

static void*
resolve_glUniform3dv(void)
{
	/* glUniform3dv (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniform3dv", 40);
	}

	/* glUniform3dv (GL_ARB_gpu_shader_fp64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_gpu_shader_fp64")) {
		return get_ext_proc("glUniform3dv");
	}

	unsupported("glUniform3dv");
	return piglit_dispatch_glUniform3dv;
}

static void APIENTRY
stub_glUniform3dv(GLint location, GLsizei count, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glUniform3dv = resolve_glUniform3dv();
	piglit_dispatch_glUniform3dv(location, count, value);
}

PFNGLUNIFORM3DVPROC piglit_dispatch_glUniform3dv = stub_glUniform3dv;

static void*
resolve_glUniform3f(void)
{
	/* glUniform3f (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniform3f", 20);
	}

	/* glUniform3f (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glUniform3f", 20);
	}

	/* glUniform3fARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glUniform3fARB");
	}

	unsupported("glUniform3f");
	return piglit_dispatch_glUniform3f;
}

static void APIENTRY
stub_glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
	check_initialized();
	piglit_dispatch_glUniform3f = resolve_glUniform3f();
	piglit_dispatch_glUniform3f(location, v0, v1, v2);
}

PFNGLUNIFORM3FPROC piglit_dispatch_glUniform3f = stub_glUniform3f;

static void*
resolve_glUniform3fv(void)
{
	/* glUniform3fv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniform3fv", 20);
	}

	/* glUniform3fv (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glUniform3fv", 20);
	}

	/* glUniform3fvARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glUniform3fvARB");
	}

	unsupported("glUniform3fv");
	return piglit_dispatch_glUniform3fv;
}

static void APIENTRY
stub_glUniform3fv(GLint location, GLsizei count, const GLfloat * value)
{
	check_initialized();
	piglit_dispatch_glUniform3fv = resolve_glUniform3fv();
	piglit_dispatch_glUniform3fv(location, count, value);
}

PFNGLUNIFORM3FVPROC piglit_dispatch_glUniform3fv = stub_glUniform3fv;

static void*
resolve_glUniform3i(void)
{
	/* glUniform3i (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniform3i", 20);
	}

	/* glUniform3i (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glUniform3i", 20);
	}

	/* glUniform3iARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glUniform3iARB");
	}

	unsupported("glUniform3i");
	return piglit_dispatch_glUniform3i;
}

static void APIENTRY
stub_glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)
{
	check_initialized();
	piglit_dispatch_glUniform3i = resolve_glUniform3i();
	piglit_dispatch_glUniform3i(location, v0, v1, v2);
}

PFNGLUNIFORM3IPROC piglit_dispatch_glUniform3i = stub_glUniform3i;

static void*
resolve_glUniform3i64NV(void)
{
	/* glUniform3i64NV (GL_AMD_gpu_shader_int64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_gpu_shader_int64")) {
		return get_ext_proc("glUniform3i64NV");
	}

	/* glUniform3i64NV (GL_NV_gpu_shader5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_shader5")) {
		return get_ext_proc("glUniform3i64NV");
	}

	unsupported("glUniform3i64NV");
	return piglit_dispatch_glUniform3i64NV;
}

static void APIENTRY
stub_glUniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
	check_initialized();
	piglit_dispatch_glUniform3i64NV = resolve_glUniform3i64NV();
	piglit_dispatch_glUniform3i64NV(location, x, y, z);
}

PFNGLUNIFORM3I64NVPROC piglit_dispatch_glUniform3i64NV = stub_glUniform3i64NV;

static void*
resolve_glUniform3i64vNV(void)
{
	/* glUniform3i64vNV (GL_AMD_gpu_shader_int64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_gpu_shader_int64")) {
		return get_ext_proc("glUniform3i64vNV");
	}

	/* glUniform3i64vNV (GL_NV_gpu_shader5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_shader5")) {
		return get_ext_proc("glUniform3i64vNV");
	}

	unsupported("glUniform3i64vNV");
	return piglit_dispatch_glUniform3i64vNV;
}

static void APIENTRY
stub_glUniform3i64vNV(GLint location, GLsizei count, const GLint64EXT * value)
{
	check_initialized();
	piglit_dispatch_glUniform3i64vNV = resolve_glUniform3i64vNV();
	piglit_dispatch_glUniform3i64vNV(location, count, value);
}

PFNGLUNIFORM3I64VNVPROC piglit_dispatch_glUniform3i64vNV = stub_glUniform3i64vNV;

static void*
resolve_glUniform3iv(void)
{
	/* glUniform3iv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniform3iv", 20);
	}

	/* glUniform3iv (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glUniform3iv", 20);
	}

	/* glUniform3ivARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glUniform3ivARB");
	}

	unsupported("glUniform3iv");
	return piglit_dispatch_glUniform3iv;
}

static void APIENTRY
stub_glUniform3iv(GLint location, GLsizei count, const GLint * value)
{
	check_initialized();
	piglit_dispatch_glUniform3iv = resolve_glUniform3iv();
	piglit_dispatch_glUniform3iv(location, count, value);
}

PFNGLUNIFORM3IVPROC piglit_dispatch_glUniform3iv = stub_glUniform3iv;

static void*
resolve_glUniform3ui(void)
{
	/* glUniform3ui (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniform3ui", 30);
	}

	/* glUniform3ui (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glUniform3ui", 30);
	}

	/* glUniform3uiEXT (GL_EXT_gpu_shader4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_gpu_shader4")) {
		return get_ext_proc("glUniform3uiEXT");
	}

	unsupported("glUniform3ui");
	return piglit_dispatch_glUniform3ui;
}

static void APIENTRY
stub_glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2)
{
	check_initialized();
	piglit_dispatch_glUniform3ui = resolve_glUniform3ui();
	piglit_dispatch_glUniform3ui(location, v0, v1, v2);
}

PFNGLUNIFORM3UIPROC piglit_dispatch_glUniform3ui = stub_glUniform3ui;

static void*
resolve_glUniform3ui64NV(void)
{
	/* glUniform3ui64NV (GL_AMD_gpu_shader_int64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_gpu_shader_int64")) {
		return get_ext_proc("glUniform3ui64NV");
	}

	/* glUniform3ui64NV (GL_NV_gpu_shader5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_shader5")) {
		return get_ext_proc("glUniform3ui64NV");
	}

	unsupported("glUniform3ui64NV");
	return piglit_dispatch_glUniform3ui64NV;
}

static void APIENTRY
stub_glUniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
	check_initialized();
	piglit_dispatch_glUniform3ui64NV = resolve_glUniform3ui64NV();
	piglit_dispatch_glUniform3ui64NV(location, x, y, z);
}

PFNGLUNIFORM3UI64NVPROC piglit_dispatch_glUniform3ui64NV = stub_glUniform3ui64NV;

static void*
resolve_glUniform3ui64vNV(void)
{
	/* glUniform3ui64vNV (GL_AMD_gpu_shader_int64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_gpu_shader_int64")) {
		return get_ext_proc("glUniform3ui64vNV");
	}

	/* glUniform3ui64vNV (GL_NV_gpu_shader5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_shader5")) {
		return get_ext_proc("glUniform3ui64vNV");
	}

	unsupported("glUniform3ui64vNV");
	return piglit_dispatch_glUniform3ui64vNV;
}

static void APIENTRY
stub_glUniform3ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value)
{
	check_initialized();
	piglit_dispatch_glUniform3ui64vNV = resolve_glUniform3ui64vNV();
	piglit_dispatch_glUniform3ui64vNV(location, count, value);
}

PFNGLUNIFORM3UI64VNVPROC piglit_dispatch_glUniform3ui64vNV = stub_glUniform3ui64vNV;

static void*
resolve_glUniform3uiv(void)
{
	/* glUniform3uiv (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniform3uiv", 30);
	}

	/* glUniform3uiv (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glUniform3uiv", 30);
	}

	/* glUniform3uivEXT (GL_EXT_gpu_shader4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_gpu_shader4")) {
		return get_ext_proc("glUniform3uivEXT");
	}

	unsupported("glUniform3uiv");
	return piglit_dispatch_glUniform3uiv;
}

static void APIENTRY
stub_glUniform3uiv(GLint location, GLsizei count, const GLuint * value)
{
	check_initialized();
	piglit_dispatch_glUniform3uiv = resolve_glUniform3uiv();
	piglit_dispatch_glUniform3uiv(location, count, value);
}

PFNGLUNIFORM3UIVPROC piglit_dispatch_glUniform3uiv = stub_glUniform3uiv;

static void*
resolve_glUniform4d(void)
{
	/* glUniform4d (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniform4d", 40);
	}

	/* glUniform4d (GL_ARB_gpu_shader_fp64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_gpu_shader_fp64")) {
		return get_ext_proc("glUniform4d");
	}

	unsupported("glUniform4d");
	return piglit_dispatch_glUniform4d;
}

static void APIENTRY
stub_glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
	check_initialized();
	piglit_dispatch_glUniform4d = resolve_glUniform4d();
	piglit_dispatch_glUniform4d(location, x, y, z, w);
}

PFNGLUNIFORM4DPROC piglit_dispatch_glUniform4d = stub_glUniform4d;

static void*
resolve_glUniform4dv(void)
{
	/* glUniform4dv (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniform4dv", 40);
	}

	/* glUniform4dv (GL_ARB_gpu_shader_fp64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_gpu_shader_fp64")) {
		return get_ext_proc("glUniform4dv");
	}

	unsupported("glUniform4dv");
	return piglit_dispatch_glUniform4dv;
}

static void APIENTRY
stub_glUniform4dv(GLint location, GLsizei count, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glUniform4dv = resolve_glUniform4dv();
	piglit_dispatch_glUniform4dv(location, count, value);
}

PFNGLUNIFORM4DVPROC piglit_dispatch_glUniform4dv = stub_glUniform4dv;

static void*
resolve_glUniform4f(void)
{
	/* glUniform4f (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniform4f", 20);
	}

	/* glUniform4f (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glUniform4f", 20);
	}

	/* glUniform4fARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glUniform4fARB");
	}

	unsupported("glUniform4f");
	return piglit_dispatch_glUniform4f;
}

static void APIENTRY
stub_glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
	check_initialized();
	piglit_dispatch_glUniform4f = resolve_glUniform4f();
	piglit_dispatch_glUniform4f(location, v0, v1, v2, v3);
}

PFNGLUNIFORM4FPROC piglit_dispatch_glUniform4f = stub_glUniform4f;

static void*
resolve_glUniform4fv(void)
{
	/* glUniform4fv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniform4fv", 20);
	}

	/* glUniform4fv (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glUniform4fv", 20);
	}

	/* glUniform4fvARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glUniform4fvARB");
	}

	unsupported("glUniform4fv");
	return piglit_dispatch_glUniform4fv;
}

static void APIENTRY
stub_glUniform4fv(GLint location, GLsizei count, const GLfloat * value)
{
	check_initialized();
	piglit_dispatch_glUniform4fv = resolve_glUniform4fv();
	piglit_dispatch_glUniform4fv(location, count, value);
}

PFNGLUNIFORM4FVPROC piglit_dispatch_glUniform4fv = stub_glUniform4fv;

static void*
resolve_glUniform4i(void)
{
	/* glUniform4i (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniform4i", 20);
	}

	/* glUniform4i (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glUniform4i", 20);
	}

	/* glUniform4iARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glUniform4iARB");
	}

	unsupported("glUniform4i");
	return piglit_dispatch_glUniform4i;
}

static void APIENTRY
stub_glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
	check_initialized();
	piglit_dispatch_glUniform4i = resolve_glUniform4i();
	piglit_dispatch_glUniform4i(location, v0, v1, v2, v3);
}

PFNGLUNIFORM4IPROC piglit_dispatch_glUniform4i = stub_glUniform4i;

static void*
resolve_glUniform4i64NV(void)
{
	/* glUniform4i64NV (GL_AMD_gpu_shader_int64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_gpu_shader_int64")) {
		return get_ext_proc("glUniform4i64NV");
	}

	/* glUniform4i64NV (GL_NV_gpu_shader5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_shader5")) {
		return get_ext_proc("glUniform4i64NV");
	}

	unsupported("glUniform4i64NV");
	return piglit_dispatch_glUniform4i64NV;
}

static void APIENTRY
stub_glUniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
	check_initialized();
	piglit_dispatch_glUniform4i64NV = resolve_glUniform4i64NV();
	piglit_dispatch_glUniform4i64NV(location, x, y, z, w);
}

PFNGLUNIFORM4I64NVPROC piglit_dispatch_glUniform4i64NV = stub_glUniform4i64NV;

static void*
resolve_glUniform4i64vNV(void)
{
	/* glUniform4i64vNV (GL_AMD_gpu_shader_int64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_gpu_shader_int64")) {
		return get_ext_proc("glUniform4i64vNV");
	}

	/* glUniform4i64vNV (GL_NV_gpu_shader5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_shader5")) {
		return get_ext_proc("glUniform4i64vNV");
	}

	unsupported("glUniform4i64vNV");
	return piglit_dispatch_glUniform4i64vNV;
}

static void APIENTRY
stub_glUniform4i64vNV(GLint location, GLsizei count, const GLint64EXT * value)
{
	check_initialized();
	piglit_dispatch_glUniform4i64vNV = resolve_glUniform4i64vNV();
	piglit_dispatch_glUniform4i64vNV(location, count, value);
}

PFNGLUNIFORM4I64VNVPROC piglit_dispatch_glUniform4i64vNV = stub_glUniform4i64vNV;

static void*
resolve_glUniform4iv(void)
{
	/* glUniform4iv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniform4iv", 20);
	}

	/* glUniform4iv (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glUniform4iv", 20);
	}

	/* glUniform4ivARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glUniform4ivARB");
	}

	unsupported("glUniform4iv");
	return piglit_dispatch_glUniform4iv;
}

static void APIENTRY
stub_glUniform4iv(GLint location, GLsizei count, const GLint * value)
{
	check_initialized();
	piglit_dispatch_glUniform4iv = resolve_glUniform4iv();
	piglit_dispatch_glUniform4iv(location, count, value);
}

PFNGLUNIFORM4IVPROC piglit_dispatch_glUniform4iv = stub_glUniform4iv;

static void*
resolve_glUniform4ui(void)
{
	/* glUniform4ui (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniform4ui", 30);
	}

	/* glUniform4ui (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glUniform4ui", 30);
	}

	/* glUniform4uiEXT (GL_EXT_gpu_shader4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_gpu_shader4")) {
		return get_ext_proc("glUniform4uiEXT");
	}

	unsupported("glUniform4ui");
	return piglit_dispatch_glUniform4ui;
}

static void APIENTRY
stub_glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
	check_initialized();
	piglit_dispatch_glUniform4ui = resolve_glUniform4ui();
	piglit_dispatch_glUniform4ui(location, v0, v1, v2, v3);
}

PFNGLUNIFORM4UIPROC piglit_dispatch_glUniform4ui = stub_glUniform4ui;

static void*
resolve_glUniform4ui64NV(void)
{
	/* glUniform4ui64NV (GL_AMD_gpu_shader_int64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_gpu_shader_int64")) {
		return get_ext_proc("glUniform4ui64NV");
	}

	/* glUniform4ui64NV (GL_NV_gpu_shader5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_shader5")) {
		return get_ext_proc("glUniform4ui64NV");
	}

	unsupported("glUniform4ui64NV");
	return piglit_dispatch_glUniform4ui64NV;
}

static void APIENTRY
stub_glUniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
	check_initialized();
	piglit_dispatch_glUniform4ui64NV = resolve_glUniform4ui64NV();
	piglit_dispatch_glUniform4ui64NV(location, x, y, z, w);
}

PFNGLUNIFORM4UI64NVPROC piglit_dispatch_glUniform4ui64NV = stub_glUniform4ui64NV;

static void*
resolve_glUniform4ui64vNV(void)
{
	/* glUniform4ui64vNV (GL_AMD_gpu_shader_int64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_gpu_shader_int64")) {
		return get_ext_proc("glUniform4ui64vNV");
	}

	/* glUniform4ui64vNV (GL_NV_gpu_shader5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_gpu_shader5")) {
		return get_ext_proc("glUniform4ui64vNV");
	}

	unsupported("glUniform4ui64vNV");
	return piglit_dispatch_glUniform4ui64vNV;
}

static void APIENTRY
stub_glUniform4ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value)
{
	check_initialized();
	piglit_dispatch_glUniform4ui64vNV = resolve_glUniform4ui64vNV();
	piglit_dispatch_glUniform4ui64vNV(location, count, value);
}

PFNGLUNIFORM4UI64VNVPROC piglit_dispatch_glUniform4ui64vNV = stub_glUniform4ui64vNV;

static void*
resolve_glUniform4uiv(void)
{
	/* glUniform4uiv (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniform4uiv", 30);
	}

	/* glUniform4uiv (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glUniform4uiv", 30);
	}

	/* glUniform4uivEXT (GL_EXT_gpu_shader4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_gpu_shader4")) {
		return get_ext_proc("glUniform4uivEXT");
	}

	unsupported("glUniform4uiv");
	return piglit_dispatch_glUniform4uiv;
}

static void APIENTRY
stub_glUniform4uiv(GLint location, GLsizei count, const GLuint * value)
{
	check_initialized();
	piglit_dispatch_glUniform4uiv = resolve_glUniform4uiv();
	piglit_dispatch_glUniform4uiv(location, count, value);
}

PFNGLUNIFORM4UIVPROC piglit_dispatch_glUniform4uiv = stub_glUniform4uiv;

static void*
resolve_glUniformBlockBinding(void)
{
	/* glUniformBlockBinding (GL_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniformBlockBinding", 31);
	}

	/* glUniformBlockBinding (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glUniformBlockBinding", 30);
	}

	/* glUniformBlockBinding (GL_ARB_uniform_buffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_uniform_buffer_object")) {
		return get_ext_proc("glUniformBlockBinding");
	}

	unsupported("glUniformBlockBinding");
	return piglit_dispatch_glUniformBlockBinding;
}

static void APIENTRY
stub_glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
{
	check_initialized();
	piglit_dispatch_glUniformBlockBinding = resolve_glUniformBlockBinding();
	piglit_dispatch_glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
}

PFNGLUNIFORMBLOCKBINDINGPROC piglit_dispatch_glUniformBlockBinding = stub_glUniformBlockBinding;

static void*
resolve_glUniformBufferEXT(void)
{
	/* glUniformBufferEXT (GL_EXT_bindable_uniform) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_bindable_uniform")) {
		return get_ext_proc("glUniformBufferEXT");
	}

	unsupported("glUniformBufferEXT");
	return piglit_dispatch_glUniformBufferEXT;
}

static void APIENTRY
stub_glUniformBufferEXT(GLuint program, GLint location, GLuint buffer)
{
	check_initialized();
	piglit_dispatch_glUniformBufferEXT = resolve_glUniformBufferEXT();
	piglit_dispatch_glUniformBufferEXT(program, location, buffer);
}

PFNGLUNIFORMBUFFEREXTPROC piglit_dispatch_glUniformBufferEXT = stub_glUniformBufferEXT;

static void*
resolve_glUniformHandleui64ARB(void)
{
	/* glUniformHandleui64ARB (GL_ARB_bindless_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_bindless_texture")) {
		return get_ext_proc("glUniformHandleui64ARB");
	}

	unsupported("glUniformHandleui64ARB");
	return piglit_dispatch_glUniformHandleui64ARB;
}

static void APIENTRY
stub_glUniformHandleui64ARB(GLint location, GLuint64 value)
{
	check_initialized();
	piglit_dispatch_glUniformHandleui64ARB = resolve_glUniformHandleui64ARB();
	piglit_dispatch_glUniformHandleui64ARB(location, value);
}

PFNGLUNIFORMHANDLEUI64ARBPROC piglit_dispatch_glUniformHandleui64ARB = stub_glUniformHandleui64ARB;

static void*
resolve_glUniformHandleui64NV(void)
{
	/* glUniformHandleui64NV (GL_NV_bindless_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_bindless_texture")) {
		return get_ext_proc("glUniformHandleui64NV");
	}

	unsupported("glUniformHandleui64NV");
	return piglit_dispatch_glUniformHandleui64NV;
}

static void APIENTRY
stub_glUniformHandleui64NV(GLint location, GLuint64 value)
{
	check_initialized();
	piglit_dispatch_glUniformHandleui64NV = resolve_glUniformHandleui64NV();
	piglit_dispatch_glUniformHandleui64NV(location, value);
}

PFNGLUNIFORMHANDLEUI64NVPROC piglit_dispatch_glUniformHandleui64NV = stub_glUniformHandleui64NV;

static void*
resolve_glUniformHandleui64vARB(void)
{
	/* glUniformHandleui64vARB (GL_ARB_bindless_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_bindless_texture")) {
		return get_ext_proc("glUniformHandleui64vARB");
	}

	unsupported("glUniformHandleui64vARB");
	return piglit_dispatch_glUniformHandleui64vARB;
}

static void APIENTRY
stub_glUniformHandleui64vARB(GLint location, GLsizei count, const GLuint64 * value)
{
	check_initialized();
	piglit_dispatch_glUniformHandleui64vARB = resolve_glUniformHandleui64vARB();
	piglit_dispatch_glUniformHandleui64vARB(location, count, value);
}

PFNGLUNIFORMHANDLEUI64VARBPROC piglit_dispatch_glUniformHandleui64vARB = stub_glUniformHandleui64vARB;

static void*
resolve_glUniformHandleui64vNV(void)
{
	/* glUniformHandleui64vNV (GL_NV_bindless_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_bindless_texture")) {
		return get_ext_proc("glUniformHandleui64vNV");
	}

	unsupported("glUniformHandleui64vNV");
	return piglit_dispatch_glUniformHandleui64vNV;
}

static void APIENTRY
stub_glUniformHandleui64vNV(GLint location, GLsizei count, const GLuint64 * value)
{
	check_initialized();
	piglit_dispatch_glUniformHandleui64vNV = resolve_glUniformHandleui64vNV();
	piglit_dispatch_glUniformHandleui64vNV(location, count, value);
}

PFNGLUNIFORMHANDLEUI64VNVPROC piglit_dispatch_glUniformHandleui64vNV = stub_glUniformHandleui64vNV;

static void*
resolve_glUniformMatrix2dv(void)
{
	/* glUniformMatrix2dv (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniformMatrix2dv", 40);
	}

	/* glUniformMatrix2dv (GL_ARB_gpu_shader_fp64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_gpu_shader_fp64")) {
		return get_ext_proc("glUniformMatrix2dv");
	}

	unsupported("glUniformMatrix2dv");
	return piglit_dispatch_glUniformMatrix2dv;
}

static void APIENTRY
stub_glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glUniformMatrix2dv = resolve_glUniformMatrix2dv();
	piglit_dispatch_glUniformMatrix2dv(location, count, transpose, value);
}

PFNGLUNIFORMMATRIX2DVPROC piglit_dispatch_glUniformMatrix2dv = stub_glUniformMatrix2dv;

static void*
resolve_glUniformMatrix2fv(void)
{
	/* glUniformMatrix2fv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniformMatrix2fv", 20);
	}

	/* glUniformMatrix2fv (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glUniformMatrix2fv", 20);
	}

	/* glUniformMatrix2fvARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glUniformMatrix2fvARB");
	}

	unsupported("glUniformMatrix2fv");
	return piglit_dispatch_glUniformMatrix2fv;
}

static void APIENTRY
stub_glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	check_initialized();
	piglit_dispatch_glUniformMatrix2fv = resolve_glUniformMatrix2fv();
	piglit_dispatch_glUniformMatrix2fv(location, count, transpose, value);
}

PFNGLUNIFORMMATRIX2FVPROC piglit_dispatch_glUniformMatrix2fv = stub_glUniformMatrix2fv;

static void*
resolve_glUniformMatrix2x3dv(void)
{
	/* glUniformMatrix2x3dv (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniformMatrix2x3dv", 40);
	}

	/* glUniformMatrix2x3dv (GL_ARB_gpu_shader_fp64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_gpu_shader_fp64")) {
		return get_ext_proc("glUniformMatrix2x3dv");
	}

	unsupported("glUniformMatrix2x3dv");
	return piglit_dispatch_glUniformMatrix2x3dv;
}

static void APIENTRY
stub_glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glUniformMatrix2x3dv = resolve_glUniformMatrix2x3dv();
	piglit_dispatch_glUniformMatrix2x3dv(location, count, transpose, value);
}

PFNGLUNIFORMMATRIX2X3DVPROC piglit_dispatch_glUniformMatrix2x3dv = stub_glUniformMatrix2x3dv;

static void*
resolve_glUniformMatrix2x3fv(void)
{
	/* glUniformMatrix2x3fv (GL_VERSION_2_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniformMatrix2x3fv", 21);
	}

	/* glUniformMatrix2x3fv (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glUniformMatrix2x3fv", 30);
	}

	/* glUniformMatrix2x3fvNV (GL_NV_non_square_matrices) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_NV_non_square_matrices")) {
		return get_ext_proc("glUniformMatrix2x3fvNV");
	}

	unsupported("glUniformMatrix2x3fv");
	return piglit_dispatch_glUniformMatrix2x3fv;
}

static void APIENTRY
stub_glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	check_initialized();
	piglit_dispatch_glUniformMatrix2x3fv = resolve_glUniformMatrix2x3fv();
	piglit_dispatch_glUniformMatrix2x3fv(location, count, transpose, value);
}

PFNGLUNIFORMMATRIX2X3FVPROC piglit_dispatch_glUniformMatrix2x3fv = stub_glUniformMatrix2x3fv;

static void*
resolve_glUniformMatrix2x4dv(void)
{
	/* glUniformMatrix2x4dv (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniformMatrix2x4dv", 40);
	}

	/* glUniformMatrix2x4dv (GL_ARB_gpu_shader_fp64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_gpu_shader_fp64")) {
		return get_ext_proc("glUniformMatrix2x4dv");
	}

	unsupported("glUniformMatrix2x4dv");
	return piglit_dispatch_glUniformMatrix2x4dv;
}

static void APIENTRY
stub_glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glUniformMatrix2x4dv = resolve_glUniformMatrix2x4dv();
	piglit_dispatch_glUniformMatrix2x4dv(location, count, transpose, value);
}

PFNGLUNIFORMMATRIX2X4DVPROC piglit_dispatch_glUniformMatrix2x4dv = stub_glUniformMatrix2x4dv;

static void*
resolve_glUniformMatrix2x4fv(void)
{
	/* glUniformMatrix2x4fv (GL_VERSION_2_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniformMatrix2x4fv", 21);
	}

	/* glUniformMatrix2x4fv (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glUniformMatrix2x4fv", 30);
	}

	/* glUniformMatrix2x4fvNV (GL_NV_non_square_matrices) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_NV_non_square_matrices")) {
		return get_ext_proc("glUniformMatrix2x4fvNV");
	}

	unsupported("glUniformMatrix2x4fv");
	return piglit_dispatch_glUniformMatrix2x4fv;
}

static void APIENTRY
stub_glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	check_initialized();
	piglit_dispatch_glUniformMatrix2x4fv = resolve_glUniformMatrix2x4fv();
	piglit_dispatch_glUniformMatrix2x4fv(location, count, transpose, value);
}

PFNGLUNIFORMMATRIX2X4FVPROC piglit_dispatch_glUniformMatrix2x4fv = stub_glUniformMatrix2x4fv;

static void*
resolve_glUniformMatrix3dv(void)
{
	/* glUniformMatrix3dv (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniformMatrix3dv", 40);
	}

	/* glUniformMatrix3dv (GL_ARB_gpu_shader_fp64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_gpu_shader_fp64")) {
		return get_ext_proc("glUniformMatrix3dv");
	}

	unsupported("glUniformMatrix3dv");
	return piglit_dispatch_glUniformMatrix3dv;
}

static void APIENTRY
stub_glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glUniformMatrix3dv = resolve_glUniformMatrix3dv();
	piglit_dispatch_glUniformMatrix3dv(location, count, transpose, value);
}

PFNGLUNIFORMMATRIX3DVPROC piglit_dispatch_glUniformMatrix3dv = stub_glUniformMatrix3dv;

static void*
resolve_glUniformMatrix3fv(void)
{
	/* glUniformMatrix3fv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniformMatrix3fv", 20);
	}

	/* glUniformMatrix3fv (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glUniformMatrix3fv", 20);
	}

	/* glUniformMatrix3fvARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glUniformMatrix3fvARB");
	}

	unsupported("glUniformMatrix3fv");
	return piglit_dispatch_glUniformMatrix3fv;
}

static void APIENTRY
stub_glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	check_initialized();
	piglit_dispatch_glUniformMatrix3fv = resolve_glUniformMatrix3fv();
	piglit_dispatch_glUniformMatrix3fv(location, count, transpose, value);
}

PFNGLUNIFORMMATRIX3FVPROC piglit_dispatch_glUniformMatrix3fv = stub_glUniformMatrix3fv;

static void*
resolve_glUniformMatrix3x2dv(void)
{
	/* glUniformMatrix3x2dv (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniformMatrix3x2dv", 40);
	}

	/* glUniformMatrix3x2dv (GL_ARB_gpu_shader_fp64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_gpu_shader_fp64")) {
		return get_ext_proc("glUniformMatrix3x2dv");
	}

	unsupported("glUniformMatrix3x2dv");
	return piglit_dispatch_glUniformMatrix3x2dv;
}

static void APIENTRY
stub_glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glUniformMatrix3x2dv = resolve_glUniformMatrix3x2dv();
	piglit_dispatch_glUniformMatrix3x2dv(location, count, transpose, value);
}

PFNGLUNIFORMMATRIX3X2DVPROC piglit_dispatch_glUniformMatrix3x2dv = stub_glUniformMatrix3x2dv;

static void*
resolve_glUniformMatrix3x2fv(void)
{
	/* glUniformMatrix3x2fv (GL_VERSION_2_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniformMatrix3x2fv", 21);
	}

	/* glUniformMatrix3x2fv (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glUniformMatrix3x2fv", 30);
	}

	/* glUniformMatrix3x2fvNV (GL_NV_non_square_matrices) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_NV_non_square_matrices")) {
		return get_ext_proc("glUniformMatrix3x2fvNV");
	}

	unsupported("glUniformMatrix3x2fv");
	return piglit_dispatch_glUniformMatrix3x2fv;
}

static void APIENTRY
stub_glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	check_initialized();
	piglit_dispatch_glUniformMatrix3x2fv = resolve_glUniformMatrix3x2fv();
	piglit_dispatch_glUniformMatrix3x2fv(location, count, transpose, value);
}

PFNGLUNIFORMMATRIX3X2FVPROC piglit_dispatch_glUniformMatrix3x2fv = stub_glUniformMatrix3x2fv;

static void*
resolve_glUniformMatrix3x4dv(void)
{
	/* glUniformMatrix3x4dv (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniformMatrix3x4dv", 40);
	}

	/* glUniformMatrix3x4dv (GL_ARB_gpu_shader_fp64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_gpu_shader_fp64")) {
		return get_ext_proc("glUniformMatrix3x4dv");
	}

	unsupported("glUniformMatrix3x4dv");
	return piglit_dispatch_glUniformMatrix3x4dv;
}

static void APIENTRY
stub_glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glUniformMatrix3x4dv = resolve_glUniformMatrix3x4dv();
	piglit_dispatch_glUniformMatrix3x4dv(location, count, transpose, value);
}

PFNGLUNIFORMMATRIX3X4DVPROC piglit_dispatch_glUniformMatrix3x4dv = stub_glUniformMatrix3x4dv;

static void*
resolve_glUniformMatrix3x4fv(void)
{
	/* glUniformMatrix3x4fv (GL_VERSION_2_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniformMatrix3x4fv", 21);
	}

	/* glUniformMatrix3x4fv (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glUniformMatrix3x4fv", 30);
	}

	/* glUniformMatrix3x4fvNV (GL_NV_non_square_matrices) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_NV_non_square_matrices")) {
		return get_ext_proc("glUniformMatrix3x4fvNV");
	}

	unsupported("glUniformMatrix3x4fv");
	return piglit_dispatch_glUniformMatrix3x4fv;
}

static void APIENTRY
stub_glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	check_initialized();
	piglit_dispatch_glUniformMatrix3x4fv = resolve_glUniformMatrix3x4fv();
	piglit_dispatch_glUniformMatrix3x4fv(location, count, transpose, value);
}

PFNGLUNIFORMMATRIX3X4FVPROC piglit_dispatch_glUniformMatrix3x4fv = stub_glUniformMatrix3x4fv;

static void*
resolve_glUniformMatrix4dv(void)
{
	/* glUniformMatrix4dv (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniformMatrix4dv", 40);
	}

	/* glUniformMatrix4dv (GL_ARB_gpu_shader_fp64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_gpu_shader_fp64")) {
		return get_ext_proc("glUniformMatrix4dv");
	}

	unsupported("glUniformMatrix4dv");
	return piglit_dispatch_glUniformMatrix4dv;
}

static void APIENTRY
stub_glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glUniformMatrix4dv = resolve_glUniformMatrix4dv();
	piglit_dispatch_glUniformMatrix4dv(location, count, transpose, value);
}

PFNGLUNIFORMMATRIX4DVPROC piglit_dispatch_glUniformMatrix4dv = stub_glUniformMatrix4dv;

static void*
resolve_glUniformMatrix4fv(void)
{
	/* glUniformMatrix4fv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniformMatrix4fv", 20);
	}

	/* glUniformMatrix4fv (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glUniformMatrix4fv", 20);
	}

	/* glUniformMatrix4fvARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glUniformMatrix4fvARB");
	}

	unsupported("glUniformMatrix4fv");
	return piglit_dispatch_glUniformMatrix4fv;
}

static void APIENTRY
stub_glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	check_initialized();
	piglit_dispatch_glUniformMatrix4fv = resolve_glUniformMatrix4fv();
	piglit_dispatch_glUniformMatrix4fv(location, count, transpose, value);
}

PFNGLUNIFORMMATRIX4FVPROC piglit_dispatch_glUniformMatrix4fv = stub_glUniformMatrix4fv;

static void*
resolve_glUniformMatrix4x2dv(void)
{
	/* glUniformMatrix4x2dv (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniformMatrix4x2dv", 40);
	}

	/* glUniformMatrix4x2dv (GL_ARB_gpu_shader_fp64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_gpu_shader_fp64")) {
		return get_ext_proc("glUniformMatrix4x2dv");
	}

	unsupported("glUniformMatrix4x2dv");
	return piglit_dispatch_glUniformMatrix4x2dv;
}

static void APIENTRY
stub_glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glUniformMatrix4x2dv = resolve_glUniformMatrix4x2dv();
	piglit_dispatch_glUniformMatrix4x2dv(location, count, transpose, value);
}

PFNGLUNIFORMMATRIX4X2DVPROC piglit_dispatch_glUniformMatrix4x2dv = stub_glUniformMatrix4x2dv;

static void*
resolve_glUniformMatrix4x2fv(void)
{
	/* glUniformMatrix4x2fv (GL_VERSION_2_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniformMatrix4x2fv", 21);
	}

	/* glUniformMatrix4x2fv (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glUniformMatrix4x2fv", 30);
	}

	/* glUniformMatrix4x2fvNV (GL_NV_non_square_matrices) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_NV_non_square_matrices")) {
		return get_ext_proc("glUniformMatrix4x2fvNV");
	}

	unsupported("glUniformMatrix4x2fv");
	return piglit_dispatch_glUniformMatrix4x2fv;
}

static void APIENTRY
stub_glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	check_initialized();
	piglit_dispatch_glUniformMatrix4x2fv = resolve_glUniformMatrix4x2fv();
	piglit_dispatch_glUniformMatrix4x2fv(location, count, transpose, value);
}

PFNGLUNIFORMMATRIX4X2FVPROC piglit_dispatch_glUniformMatrix4x2fv = stub_glUniformMatrix4x2fv;

static void*
resolve_glUniformMatrix4x3dv(void)
{
	/* glUniformMatrix4x3dv (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniformMatrix4x3dv", 40);
	}

	/* glUniformMatrix4x3dv (GL_ARB_gpu_shader_fp64) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_gpu_shader_fp64")) {
		return get_ext_proc("glUniformMatrix4x3dv");
	}

	unsupported("glUniformMatrix4x3dv");
	return piglit_dispatch_glUniformMatrix4x3dv;
}

static void APIENTRY
stub_glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	check_initialized();
	piglit_dispatch_glUniformMatrix4x3dv = resolve_glUniformMatrix4x3dv();
	piglit_dispatch_glUniformMatrix4x3dv(location, count, transpose, value);
}

PFNGLUNIFORMMATRIX4X3DVPROC piglit_dispatch_glUniformMatrix4x3dv = stub_glUniformMatrix4x3dv;

static void*
resolve_glUniformMatrix4x3fv(void)
{
	/* glUniformMatrix4x3fv (GL_VERSION_2_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniformMatrix4x3fv", 21);
	}

	/* glUniformMatrix4x3fv (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glUniformMatrix4x3fv", 30);
	}

	/* glUniformMatrix4x3fvNV (GL_NV_non_square_matrices) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_NV_non_square_matrices")) {
		return get_ext_proc("glUniformMatrix4x3fvNV");
	}

	unsupported("glUniformMatrix4x3fv");
	return piglit_dispatch_glUniformMatrix4x3fv;
}

static void APIENTRY
stub_glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	check_initialized();
	piglit_dispatch_glUniformMatrix4x3fv = resolve_glUniformMatrix4x3fv();
	piglit_dispatch_glUniformMatrix4x3fv(location, count, transpose, value);
}

PFNGLUNIFORMMATRIX4X3FVPROC piglit_dispatch_glUniformMatrix4x3fv = stub_glUniformMatrix4x3fv;

static void*
resolve_glUniformSubroutinesuiv(void)
{
	/* glUniformSubroutinesuiv (GL_VERSION_4_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUniformSubroutinesuiv", 40);
	}

	/* glUniformSubroutinesuiv (GL_ARB_shader_subroutine) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_subroutine")) {
		return get_ext_proc("glUniformSubroutinesuiv");
	}

	unsupported("glUniformSubroutinesuiv");
	return piglit_dispatch_glUniformSubroutinesuiv;
}

static void APIENTRY
stub_glUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint * indices)
{
	check_initialized();
	piglit_dispatch_glUniformSubroutinesuiv = resolve_glUniformSubroutinesuiv();
	piglit_dispatch_glUniformSubroutinesuiv(shadertype, count, indices);
}

PFNGLUNIFORMSUBROUTINESUIVPROC piglit_dispatch_glUniformSubroutinesuiv = stub_glUniformSubroutinesuiv;

static void*
resolve_glUniformui64NV(void)
{
	/* glUniformui64NV (GL_NV_shader_buffer_load) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_shader_buffer_load")) {
		return get_ext_proc("glUniformui64NV");
	}

	unsupported("glUniformui64NV");
	return piglit_dispatch_glUniformui64NV;
}

static void APIENTRY
stub_glUniformui64NV(GLint location, GLuint64EXT value)
{
	check_initialized();
	piglit_dispatch_glUniformui64NV = resolve_glUniformui64NV();
	piglit_dispatch_glUniformui64NV(location, value);
}

PFNGLUNIFORMUI64NVPROC piglit_dispatch_glUniformui64NV = stub_glUniformui64NV;

static void*
resolve_glUniformui64vNV(void)
{
	/* glUniformui64vNV (GL_NV_shader_buffer_load) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_shader_buffer_load")) {
		return get_ext_proc("glUniformui64vNV");
	}

	unsupported("glUniformui64vNV");
	return piglit_dispatch_glUniformui64vNV;
}

static void APIENTRY
stub_glUniformui64vNV(GLint location, GLsizei count, const GLuint64EXT * value)
{
	check_initialized();
	piglit_dispatch_glUniformui64vNV = resolve_glUniformui64vNV();
	piglit_dispatch_glUniformui64vNV(location, count, value);
}

PFNGLUNIFORMUI64VNVPROC piglit_dispatch_glUniformui64vNV = stub_glUniformui64vNV;

static void*
resolve_glUnlockArraysEXT(void)
{
	/* glUnlockArraysEXT (GL_EXT_compiled_vertex_array) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_compiled_vertex_array")) {
		return get_ext_proc("glUnlockArraysEXT");
	}

	unsupported("glUnlockArraysEXT");
	return piglit_dispatch_glUnlockArraysEXT;
}

static void APIENTRY
stub_glUnlockArraysEXT()
{
	check_initialized();
	piglit_dispatch_glUnlockArraysEXT = resolve_glUnlockArraysEXT();
	piglit_dispatch_glUnlockArraysEXT();
}

PFNGLUNLOCKARRAYSEXTPROC piglit_dispatch_glUnlockArraysEXT = stub_glUnlockArraysEXT;

static void*
resolve_glUnmapBuffer(void)
{
	/* glUnmapBuffer (GL_VERSION_1_5) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUnmapBuffer", 15);
	}

	/* glUnmapBuffer (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glUnmapBuffer", 30);
	}

	/* glUnmapBufferARB (GL_ARB_vertex_buffer_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_buffer_object")) {
		return get_ext_proc("glUnmapBufferARB");
	}

	/* glUnmapBufferOES (GL_OES_mapbuffer) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_OES_mapbuffer")) {
		return get_ext_proc("glUnmapBufferOES");
	}

	unsupported("glUnmapBuffer");
	return piglit_dispatch_glUnmapBuffer;
}

static GLboolean APIENTRY
stub_glUnmapBuffer(GLenum target)
{
	check_initialized();
	piglit_dispatch_glUnmapBuffer = resolve_glUnmapBuffer();
	return piglit_dispatch_glUnmapBuffer(target);
}

PFNGLUNMAPBUFFERPROC piglit_dispatch_glUnmapBuffer = stub_glUnmapBuffer;

static void*
resolve_glUnmapNamedBufferEXT(void)
{
	/* glUnmapNamedBufferEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glUnmapNamedBufferEXT");
	}

	unsupported("glUnmapNamedBufferEXT");
	return piglit_dispatch_glUnmapNamedBufferEXT;
}

static GLboolean APIENTRY
stub_glUnmapNamedBufferEXT(GLuint buffer)
{
	check_initialized();
	piglit_dispatch_glUnmapNamedBufferEXT = resolve_glUnmapNamedBufferEXT();
	return piglit_dispatch_glUnmapNamedBufferEXT(buffer);
}

PFNGLUNMAPNAMEDBUFFEREXTPROC piglit_dispatch_glUnmapNamedBufferEXT = stub_glUnmapNamedBufferEXT;

static void*
resolve_glUnmapObjectBufferATI(void)
{
	/* glUnmapObjectBufferATI (GL_ATI_map_object_buffer) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_map_object_buffer")) {
		return get_ext_proc("glUnmapObjectBufferATI");
	}

	unsupported("glUnmapObjectBufferATI");
	return piglit_dispatch_glUnmapObjectBufferATI;
}

static void APIENTRY
stub_glUnmapObjectBufferATI(GLuint buffer)
{
	check_initialized();
	piglit_dispatch_glUnmapObjectBufferATI = resolve_glUnmapObjectBufferATI();
	piglit_dispatch_glUnmapObjectBufferATI(buffer);
}

PFNGLUNMAPOBJECTBUFFERATIPROC piglit_dispatch_glUnmapObjectBufferATI = stub_glUnmapObjectBufferATI;

static void*
resolve_glUnmapTexture2DINTEL(void)
{
	/* glUnmapTexture2DINTEL (GL_INTEL_map_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_INTEL_map_texture")) {
		return get_ext_proc("glUnmapTexture2DINTEL");
	}

	unsupported("glUnmapTexture2DINTEL");
	return piglit_dispatch_glUnmapTexture2DINTEL;
}

static void APIENTRY
stub_glUnmapTexture2DINTEL(GLuint texture, GLint level)
{
	check_initialized();
	piglit_dispatch_glUnmapTexture2DINTEL = resolve_glUnmapTexture2DINTEL();
	piglit_dispatch_glUnmapTexture2DINTEL(texture, level);
}

PFNGLUNMAPTEXTURE2DINTELPROC piglit_dispatch_glUnmapTexture2DINTEL = stub_glUnmapTexture2DINTEL;

static void*
resolve_glUpdateObjectBufferATI(void)
{
	/* glUpdateObjectBufferATI (GL_ATI_vertex_array_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_array_object")) {
		return get_ext_proc("glUpdateObjectBufferATI");
	}

	unsupported("glUpdateObjectBufferATI");
	return piglit_dispatch_glUpdateObjectBufferATI;
}

static void APIENTRY
stub_glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const void * pointer, GLenum preserve)
{
	check_initialized();
	piglit_dispatch_glUpdateObjectBufferATI = resolve_glUpdateObjectBufferATI();
	piglit_dispatch_glUpdateObjectBufferATI(buffer, offset, size, pointer, preserve);
}

PFNGLUPDATEOBJECTBUFFERATIPROC piglit_dispatch_glUpdateObjectBufferATI = stub_glUpdateObjectBufferATI;

static void*
resolve_glUseProgram(void)
{
	/* glUseProgram (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUseProgram", 20);
	}

	/* glUseProgram (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glUseProgram", 20);
	}

	/* glUseProgramObjectARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glUseProgramObjectARB");
	}

	unsupported("glUseProgram");
	return piglit_dispatch_glUseProgram;
}

static void APIENTRY
stub_glUseProgram(GLuint program)
{
	check_initialized();
	piglit_dispatch_glUseProgram = resolve_glUseProgram();
	piglit_dispatch_glUseProgram(program);
}

PFNGLUSEPROGRAMPROC piglit_dispatch_glUseProgram = stub_glUseProgram;

static void*
resolve_glUseProgramStages(void)
{
	/* glUseProgramStages (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glUseProgramStages", 41);
	}

	/* glUseProgramStages (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glUseProgramStages", 31);
	}

	/* glUseProgramStages (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glUseProgramStages");
	}

	unsupported("glUseProgramStages");
	return piglit_dispatch_glUseProgramStages;
}

static void APIENTRY
stub_glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program)
{
	check_initialized();
	piglit_dispatch_glUseProgramStages = resolve_glUseProgramStages();
	piglit_dispatch_glUseProgramStages(pipeline, stages, program);
}

PFNGLUSEPROGRAMSTAGESPROC piglit_dispatch_glUseProgramStages = stub_glUseProgramStages;

static void*
resolve_glUseProgramStagesEXT(void)
{
	/* glUseProgramStagesEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glUseProgramStagesEXT");
	}

	unsupported("glUseProgramStagesEXT");
	return piglit_dispatch_glUseProgramStagesEXT;
}

static void APIENTRY
stub_glUseProgramStagesEXT(GLuint pipeline, GLbitfield stages, GLuint program)
{
	check_initialized();
	piglit_dispatch_glUseProgramStagesEXT = resolve_glUseProgramStagesEXT();
	piglit_dispatch_glUseProgramStagesEXT(pipeline, stages, program);
}

PFNGLUSEPROGRAMSTAGESEXTPROC piglit_dispatch_glUseProgramStagesEXT = stub_glUseProgramStagesEXT;

static void*
resolve_glUseShaderProgramEXT(void)
{
	/* glUseShaderProgramEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glUseShaderProgramEXT");
	}

	unsupported("glUseShaderProgramEXT");
	return piglit_dispatch_glUseShaderProgramEXT;
}

static void APIENTRY
stub_glUseShaderProgramEXT(GLenum type, GLuint program)
{
	check_initialized();
	piglit_dispatch_glUseShaderProgramEXT = resolve_glUseShaderProgramEXT();
	piglit_dispatch_glUseShaderProgramEXT(type, program);
}

PFNGLUSESHADERPROGRAMEXTPROC piglit_dispatch_glUseShaderProgramEXT = stub_glUseShaderProgramEXT;

static void*
resolve_glVDPAUFiniNV(void)
{
	/* glVDPAUFiniNV (GL_NV_vdpau_interop) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vdpau_interop")) {
		return get_ext_proc("glVDPAUFiniNV");
	}

	unsupported("glVDPAUFiniNV");
	return piglit_dispatch_glVDPAUFiniNV;
}

static void APIENTRY
stub_glVDPAUFiniNV()
{
	check_initialized();
	piglit_dispatch_glVDPAUFiniNV = resolve_glVDPAUFiniNV();
	piglit_dispatch_glVDPAUFiniNV();
}

PFNGLVDPAUFININVPROC piglit_dispatch_glVDPAUFiniNV = stub_glVDPAUFiniNV;

static void*
resolve_glVDPAUGetSurfaceivNV(void)
{
	/* glVDPAUGetSurfaceivNV (GL_NV_vdpau_interop) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vdpau_interop")) {
		return get_ext_proc("glVDPAUGetSurfaceivNV");
	}

	unsupported("glVDPAUGetSurfaceivNV");
	return piglit_dispatch_glVDPAUGetSurfaceivNV;
}

static void APIENTRY
stub_glVDPAUGetSurfaceivNV(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values)
{
	check_initialized();
	piglit_dispatch_glVDPAUGetSurfaceivNV = resolve_glVDPAUGetSurfaceivNV();
	piglit_dispatch_glVDPAUGetSurfaceivNV(surface, pname, bufSize, length, values);
}

PFNGLVDPAUGETSURFACEIVNVPROC piglit_dispatch_glVDPAUGetSurfaceivNV = stub_glVDPAUGetSurfaceivNV;

static void*
resolve_glVDPAUInitNV(void)
{
	/* glVDPAUInitNV (GL_NV_vdpau_interop) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vdpau_interop")) {
		return get_ext_proc("glVDPAUInitNV");
	}

	unsupported("glVDPAUInitNV");
	return piglit_dispatch_glVDPAUInitNV;
}

static void APIENTRY
stub_glVDPAUInitNV(const void * vdpDevice, const void * getProcAddress)
{
	check_initialized();
	piglit_dispatch_glVDPAUInitNV = resolve_glVDPAUInitNV();
	piglit_dispatch_glVDPAUInitNV(vdpDevice, getProcAddress);
}

PFNGLVDPAUINITNVPROC piglit_dispatch_glVDPAUInitNV = stub_glVDPAUInitNV;

static void*
resolve_glVDPAUIsSurfaceNV(void)
{
	/* glVDPAUIsSurfaceNV (GL_NV_vdpau_interop) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vdpau_interop")) {
		return get_ext_proc("glVDPAUIsSurfaceNV");
	}

	unsupported("glVDPAUIsSurfaceNV");
	return piglit_dispatch_glVDPAUIsSurfaceNV;
}

static GLboolean APIENTRY
stub_glVDPAUIsSurfaceNV(GLvdpauSurfaceNV surface)
{
	check_initialized();
	piglit_dispatch_glVDPAUIsSurfaceNV = resolve_glVDPAUIsSurfaceNV();
	return piglit_dispatch_glVDPAUIsSurfaceNV(surface);
}

PFNGLVDPAUISSURFACENVPROC piglit_dispatch_glVDPAUIsSurfaceNV = stub_glVDPAUIsSurfaceNV;

static void*
resolve_glVDPAUMapSurfacesNV(void)
{
	/* glVDPAUMapSurfacesNV (GL_NV_vdpau_interop) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vdpau_interop")) {
		return get_ext_proc("glVDPAUMapSurfacesNV");
	}

	unsupported("glVDPAUMapSurfacesNV");
	return piglit_dispatch_glVDPAUMapSurfacesNV;
}

static void APIENTRY
stub_glVDPAUMapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV * surfaces)
{
	check_initialized();
	piglit_dispatch_glVDPAUMapSurfacesNV = resolve_glVDPAUMapSurfacesNV();
	piglit_dispatch_glVDPAUMapSurfacesNV(numSurfaces, surfaces);
}

PFNGLVDPAUMAPSURFACESNVPROC piglit_dispatch_glVDPAUMapSurfacesNV = stub_glVDPAUMapSurfacesNV;

static void*
resolve_glVDPAURegisterOutputSurfaceNV(void)
{
	/* glVDPAURegisterOutputSurfaceNV (GL_NV_vdpau_interop) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vdpau_interop")) {
		return get_ext_proc("glVDPAURegisterOutputSurfaceNV");
	}

	unsupported("glVDPAURegisterOutputSurfaceNV");
	return piglit_dispatch_glVDPAURegisterOutputSurfaceNV;
}

static GLvdpauSurfaceNV APIENTRY
stub_glVDPAURegisterOutputSurfaceNV(const void * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames)
{
	check_initialized();
	piglit_dispatch_glVDPAURegisterOutputSurfaceNV = resolve_glVDPAURegisterOutputSurfaceNV();
	return piglit_dispatch_glVDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, textureNames);
}

PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC piglit_dispatch_glVDPAURegisterOutputSurfaceNV = stub_glVDPAURegisterOutputSurfaceNV;

static void*
resolve_glVDPAURegisterVideoSurfaceNV(void)
{
	/* glVDPAURegisterVideoSurfaceNV (GL_NV_vdpau_interop) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vdpau_interop")) {
		return get_ext_proc("glVDPAURegisterVideoSurfaceNV");
	}

	unsupported("glVDPAURegisterVideoSurfaceNV");
	return piglit_dispatch_glVDPAURegisterVideoSurfaceNV;
}

static GLvdpauSurfaceNV APIENTRY
stub_glVDPAURegisterVideoSurfaceNV(const void * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames)
{
	check_initialized();
	piglit_dispatch_glVDPAURegisterVideoSurfaceNV = resolve_glVDPAURegisterVideoSurfaceNV();
	return piglit_dispatch_glVDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, textureNames);
}

PFNGLVDPAUREGISTERVIDEOSURFACENVPROC piglit_dispatch_glVDPAURegisterVideoSurfaceNV = stub_glVDPAURegisterVideoSurfaceNV;

static void*
resolve_glVDPAUSurfaceAccessNV(void)
{
	/* glVDPAUSurfaceAccessNV (GL_NV_vdpau_interop) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vdpau_interop")) {
		return get_ext_proc("glVDPAUSurfaceAccessNV");
	}

	unsupported("glVDPAUSurfaceAccessNV");
	return piglit_dispatch_glVDPAUSurfaceAccessNV;
}

static void APIENTRY
stub_glVDPAUSurfaceAccessNV(GLvdpauSurfaceNV surface, GLenum access)
{
	check_initialized();
	piglit_dispatch_glVDPAUSurfaceAccessNV = resolve_glVDPAUSurfaceAccessNV();
	piglit_dispatch_glVDPAUSurfaceAccessNV(surface, access);
}

PFNGLVDPAUSURFACEACCESSNVPROC piglit_dispatch_glVDPAUSurfaceAccessNV = stub_glVDPAUSurfaceAccessNV;

static void*
resolve_glVDPAUUnmapSurfacesNV(void)
{
	/* glVDPAUUnmapSurfacesNV (GL_NV_vdpau_interop) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vdpau_interop")) {
		return get_ext_proc("glVDPAUUnmapSurfacesNV");
	}

	unsupported("glVDPAUUnmapSurfacesNV");
	return piglit_dispatch_glVDPAUUnmapSurfacesNV;
}

static void APIENTRY
stub_glVDPAUUnmapSurfacesNV(GLsizei numSurface, const GLvdpauSurfaceNV * surfaces)
{
	check_initialized();
	piglit_dispatch_glVDPAUUnmapSurfacesNV = resolve_glVDPAUUnmapSurfacesNV();
	piglit_dispatch_glVDPAUUnmapSurfacesNV(numSurface, surfaces);
}

PFNGLVDPAUUNMAPSURFACESNVPROC piglit_dispatch_glVDPAUUnmapSurfacesNV = stub_glVDPAUUnmapSurfacesNV;

static void*
resolve_glVDPAUUnregisterSurfaceNV(void)
{
	/* glVDPAUUnregisterSurfaceNV (GL_NV_vdpau_interop) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vdpau_interop")) {
		return get_ext_proc("glVDPAUUnregisterSurfaceNV");
	}

	unsupported("glVDPAUUnregisterSurfaceNV");
	return piglit_dispatch_glVDPAUUnregisterSurfaceNV;
}

static void APIENTRY
stub_glVDPAUUnregisterSurfaceNV(GLvdpauSurfaceNV surface)
{
	check_initialized();
	piglit_dispatch_glVDPAUUnregisterSurfaceNV = resolve_glVDPAUUnregisterSurfaceNV();
	piglit_dispatch_glVDPAUUnregisterSurfaceNV(surface);
}

PFNGLVDPAUUNREGISTERSURFACENVPROC piglit_dispatch_glVDPAUUnregisterSurfaceNV = stub_glVDPAUUnregisterSurfaceNV;

static void*
resolve_glValidateProgram(void)
{
	/* glValidateProgram (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glValidateProgram", 20);
	}

	/* glValidateProgram (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glValidateProgram", 20);
	}

	/* glValidateProgramARB (GL_ARB_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_shader_objects")) {
		return get_ext_proc("glValidateProgramARB");
	}

	unsupported("glValidateProgram");
	return piglit_dispatch_glValidateProgram;
}

static void APIENTRY
stub_glValidateProgram(GLuint program)
{
	check_initialized();
	piglit_dispatch_glValidateProgram = resolve_glValidateProgram();
	piglit_dispatch_glValidateProgram(program);
}

PFNGLVALIDATEPROGRAMPROC piglit_dispatch_glValidateProgram = stub_glValidateProgram;

static void*
resolve_glValidateProgramPipeline(void)
{
	/* glValidateProgramPipeline (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glValidateProgramPipeline", 41);
	}

	/* glValidateProgramPipeline (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glValidateProgramPipeline", 31);
	}

	/* glValidateProgramPipeline (GL_ARB_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_separate_shader_objects")) {
		return get_ext_proc("glValidateProgramPipeline");
	}

	unsupported("glValidateProgramPipeline");
	return piglit_dispatch_glValidateProgramPipeline;
}

static void APIENTRY
stub_glValidateProgramPipeline(GLuint pipeline)
{
	check_initialized();
	piglit_dispatch_glValidateProgramPipeline = resolve_glValidateProgramPipeline();
	piglit_dispatch_glValidateProgramPipeline(pipeline);
}

PFNGLVALIDATEPROGRAMPIPELINEPROC piglit_dispatch_glValidateProgramPipeline = stub_glValidateProgramPipeline;

static void*
resolve_glValidateProgramPipelineEXT(void)
{
	/* glValidateProgramPipelineEXT (GL_EXT_separate_shader_objects) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_separate_shader_objects")) {
		return get_ext_proc("glValidateProgramPipelineEXT");
	}

	unsupported("glValidateProgramPipelineEXT");
	return piglit_dispatch_glValidateProgramPipelineEXT;
}

static void APIENTRY
stub_glValidateProgramPipelineEXT(GLuint pipeline)
{
	check_initialized();
	piglit_dispatch_glValidateProgramPipelineEXT = resolve_glValidateProgramPipelineEXT();
	piglit_dispatch_glValidateProgramPipelineEXT(pipeline);
}

PFNGLVALIDATEPROGRAMPIPELINEEXTPROC piglit_dispatch_glValidateProgramPipelineEXT = stub_glValidateProgramPipelineEXT;

static void*
resolve_glVariantArrayObjectATI(void)
{
	/* glVariantArrayObjectATI (GL_ATI_vertex_array_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_array_object")) {
		return get_ext_proc("glVariantArrayObjectATI");
	}

	unsupported("glVariantArrayObjectATI");
	return piglit_dispatch_glVariantArrayObjectATI;
}

static void APIENTRY
stub_glVariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
{
	check_initialized();
	piglit_dispatch_glVariantArrayObjectATI = resolve_glVariantArrayObjectATI();
	piglit_dispatch_glVariantArrayObjectATI(id, type, stride, buffer, offset);
}

PFNGLVARIANTARRAYOBJECTATIPROC piglit_dispatch_glVariantArrayObjectATI = stub_glVariantArrayObjectATI;

static void*
resolve_glVariantPointerEXT(void)
{
	/* glVariantPointerEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glVariantPointerEXT");
	}

	unsupported("glVariantPointerEXT");
	return piglit_dispatch_glVariantPointerEXT;
}

static void APIENTRY
stub_glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, const void * addr)
{
	check_initialized();
	piglit_dispatch_glVariantPointerEXT = resolve_glVariantPointerEXT();
	piglit_dispatch_glVariantPointerEXT(id, type, stride, addr);
}

PFNGLVARIANTPOINTEREXTPROC piglit_dispatch_glVariantPointerEXT = stub_glVariantPointerEXT;

static void*
resolve_glVariantbvEXT(void)
{
	/* glVariantbvEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glVariantbvEXT");
	}

	unsupported("glVariantbvEXT");
	return piglit_dispatch_glVariantbvEXT;
}

static void APIENTRY
stub_glVariantbvEXT(GLuint id, const GLbyte * addr)
{
	check_initialized();
	piglit_dispatch_glVariantbvEXT = resolve_glVariantbvEXT();
	piglit_dispatch_glVariantbvEXT(id, addr);
}

PFNGLVARIANTBVEXTPROC piglit_dispatch_glVariantbvEXT = stub_glVariantbvEXT;

static void*
resolve_glVariantdvEXT(void)
{
	/* glVariantdvEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glVariantdvEXT");
	}

	unsupported("glVariantdvEXT");
	return piglit_dispatch_glVariantdvEXT;
}

static void APIENTRY
stub_glVariantdvEXT(GLuint id, const GLdouble * addr)
{
	check_initialized();
	piglit_dispatch_glVariantdvEXT = resolve_glVariantdvEXT();
	piglit_dispatch_glVariantdvEXT(id, addr);
}

PFNGLVARIANTDVEXTPROC piglit_dispatch_glVariantdvEXT = stub_glVariantdvEXT;

static void*
resolve_glVariantfvEXT(void)
{
	/* glVariantfvEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glVariantfvEXT");
	}

	unsupported("glVariantfvEXT");
	return piglit_dispatch_glVariantfvEXT;
}

static void APIENTRY
stub_glVariantfvEXT(GLuint id, const GLfloat * addr)
{
	check_initialized();
	piglit_dispatch_glVariantfvEXT = resolve_glVariantfvEXT();
	piglit_dispatch_glVariantfvEXT(id, addr);
}

PFNGLVARIANTFVEXTPROC piglit_dispatch_glVariantfvEXT = stub_glVariantfvEXT;

static void*
resolve_glVariantivEXT(void)
{
	/* glVariantivEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glVariantivEXT");
	}

	unsupported("glVariantivEXT");
	return piglit_dispatch_glVariantivEXT;
}

static void APIENTRY
stub_glVariantivEXT(GLuint id, const GLint * addr)
{
	check_initialized();
	piglit_dispatch_glVariantivEXT = resolve_glVariantivEXT();
	piglit_dispatch_glVariantivEXT(id, addr);
}

PFNGLVARIANTIVEXTPROC piglit_dispatch_glVariantivEXT = stub_glVariantivEXT;

static void*
resolve_glVariantsvEXT(void)
{
	/* glVariantsvEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glVariantsvEXT");
	}

	unsupported("glVariantsvEXT");
	return piglit_dispatch_glVariantsvEXT;
}

static void APIENTRY
stub_glVariantsvEXT(GLuint id, const GLshort * addr)
{
	check_initialized();
	piglit_dispatch_glVariantsvEXT = resolve_glVariantsvEXT();
	piglit_dispatch_glVariantsvEXT(id, addr);
}

PFNGLVARIANTSVEXTPROC piglit_dispatch_glVariantsvEXT = stub_glVariantsvEXT;

static void*
resolve_glVariantubvEXT(void)
{
	/* glVariantubvEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glVariantubvEXT");
	}

	unsupported("glVariantubvEXT");
	return piglit_dispatch_glVariantubvEXT;
}

static void APIENTRY
stub_glVariantubvEXT(GLuint id, const GLubyte * addr)
{
	check_initialized();
	piglit_dispatch_glVariantubvEXT = resolve_glVariantubvEXT();
	piglit_dispatch_glVariantubvEXT(id, addr);
}

PFNGLVARIANTUBVEXTPROC piglit_dispatch_glVariantubvEXT = stub_glVariantubvEXT;

static void*
resolve_glVariantuivEXT(void)
{
	/* glVariantuivEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glVariantuivEXT");
	}

	unsupported("glVariantuivEXT");
	return piglit_dispatch_glVariantuivEXT;
}

static void APIENTRY
stub_glVariantuivEXT(GLuint id, const GLuint * addr)
{
	check_initialized();
	piglit_dispatch_glVariantuivEXT = resolve_glVariantuivEXT();
	piglit_dispatch_glVariantuivEXT(id, addr);
}

PFNGLVARIANTUIVEXTPROC piglit_dispatch_glVariantuivEXT = stub_glVariantuivEXT;

static void*
resolve_glVariantusvEXT(void)
{
	/* glVariantusvEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glVariantusvEXT");
	}

	unsupported("glVariantusvEXT");
	return piglit_dispatch_glVariantusvEXT;
}

static void APIENTRY
stub_glVariantusvEXT(GLuint id, const GLushort * addr)
{
	check_initialized();
	piglit_dispatch_glVariantusvEXT = resolve_glVariantusvEXT();
	piglit_dispatch_glVariantusvEXT(id, addr);
}

PFNGLVARIANTUSVEXTPROC piglit_dispatch_glVariantusvEXT = stub_glVariantusvEXT;

static void*
resolve_glVertex2bOES(void)
{
	/* glVertex2bOES (GL_OES_byte_coordinates) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_byte_coordinates")) {
		return get_ext_proc("glVertex2bOES");
	}

	unsupported("glVertex2bOES");
	return piglit_dispatch_glVertex2bOES;
}

static void APIENTRY
stub_glVertex2bOES(GLbyte x)
{
	check_initialized();
	piglit_dispatch_glVertex2bOES = resolve_glVertex2bOES();
	piglit_dispatch_glVertex2bOES(x);
}

PFNGLVERTEX2BOESPROC piglit_dispatch_glVertex2bOES = stub_glVertex2bOES;

static void*
resolve_glVertex2bvOES(void)
{
	/* glVertex2bvOES (GL_OES_byte_coordinates) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_byte_coordinates")) {
		return get_ext_proc("glVertex2bvOES");
	}

	unsupported("glVertex2bvOES");
	return piglit_dispatch_glVertex2bvOES;
}

static void APIENTRY
stub_glVertex2bvOES(const GLbyte * coords)
{
	check_initialized();
	piglit_dispatch_glVertex2bvOES = resolve_glVertex2bvOES();
	piglit_dispatch_glVertex2bvOES(coords);
}

PFNGLVERTEX2BVOESPROC piglit_dispatch_glVertex2bvOES = stub_glVertex2bvOES;

static void*
resolve_glVertex2d(void)
{
	/* glVertex2d (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glVertex2d", 10);
	}

	unsupported("glVertex2d");
	return piglit_dispatch_glVertex2d;
}

static void APIENTRY
stub_glVertex2d(GLdouble x, GLdouble y)
{
	check_initialized();
	piglit_dispatch_glVertex2d = resolve_glVertex2d();
	piglit_dispatch_glVertex2d(x, y);
}

PFNGLVERTEX2DPROC piglit_dispatch_glVertex2d = stub_glVertex2d;

static void*
resolve_glVertex2dv(void)
{
	/* glVertex2dv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glVertex2dv", 10);
	}

	unsupported("glVertex2dv");
	return piglit_dispatch_glVertex2dv;
}

static void APIENTRY
stub_glVertex2dv(const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glVertex2dv = resolve_glVertex2dv();
	piglit_dispatch_glVertex2dv(v);
}

PFNGLVERTEX2DVPROC piglit_dispatch_glVertex2dv = stub_glVertex2dv;

static void*
resolve_glVertex2f(void)
{
	/* glVertex2f (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glVertex2f", 10);
	}

	unsupported("glVertex2f");
	return piglit_dispatch_glVertex2f;
}

static void APIENTRY
stub_glVertex2f(GLfloat x, GLfloat y)
{
	check_initialized();
	piglit_dispatch_glVertex2f = resolve_glVertex2f();
	piglit_dispatch_glVertex2f(x, y);
}

PFNGLVERTEX2FPROC piglit_dispatch_glVertex2f = stub_glVertex2f;

static void*
resolve_glVertex2fv(void)
{
	/* glVertex2fv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glVertex2fv", 10);
	}

	unsupported("glVertex2fv");
	return piglit_dispatch_glVertex2fv;
}

static void APIENTRY
stub_glVertex2fv(const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glVertex2fv = resolve_glVertex2fv();
	piglit_dispatch_glVertex2fv(v);
}

PFNGLVERTEX2FVPROC piglit_dispatch_glVertex2fv = stub_glVertex2fv;

static void*
resolve_glVertex2hNV(void)
{
	/* glVertex2hNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glVertex2hNV");
	}

	unsupported("glVertex2hNV");
	return piglit_dispatch_glVertex2hNV;
}

static void APIENTRY
stub_glVertex2hNV(GLhalfNV x, GLhalfNV y)
{
	check_initialized();
	piglit_dispatch_glVertex2hNV = resolve_glVertex2hNV();
	piglit_dispatch_glVertex2hNV(x, y);
}

PFNGLVERTEX2HNVPROC piglit_dispatch_glVertex2hNV = stub_glVertex2hNV;

static void*
resolve_glVertex2hvNV(void)
{
	/* glVertex2hvNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glVertex2hvNV");
	}

	unsupported("glVertex2hvNV");
	return piglit_dispatch_glVertex2hvNV;
}

static void APIENTRY
stub_glVertex2hvNV(const GLhalfNV * v)
{
	check_initialized();
	piglit_dispatch_glVertex2hvNV = resolve_glVertex2hvNV();
	piglit_dispatch_glVertex2hvNV(v);
}

PFNGLVERTEX2HVNVPROC piglit_dispatch_glVertex2hvNV = stub_glVertex2hvNV;

static void*
resolve_glVertex2i(void)
{
	/* glVertex2i (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glVertex2i", 10);
	}

	unsupported("glVertex2i");
	return piglit_dispatch_glVertex2i;
}

static void APIENTRY
stub_glVertex2i(GLint x, GLint y)
{
	check_initialized();
	piglit_dispatch_glVertex2i = resolve_glVertex2i();
	piglit_dispatch_glVertex2i(x, y);
}

PFNGLVERTEX2IPROC piglit_dispatch_glVertex2i = stub_glVertex2i;

static void*
resolve_glVertex2iv(void)
{
	/* glVertex2iv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glVertex2iv", 10);
	}

	unsupported("glVertex2iv");
	return piglit_dispatch_glVertex2iv;
}

static void APIENTRY
stub_glVertex2iv(const GLint * v)
{
	check_initialized();
	piglit_dispatch_glVertex2iv = resolve_glVertex2iv();
	piglit_dispatch_glVertex2iv(v);
}

PFNGLVERTEX2IVPROC piglit_dispatch_glVertex2iv = stub_glVertex2iv;

static void*
resolve_glVertex2s(void)
{
	/* glVertex2s (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glVertex2s", 10);
	}

	unsupported("glVertex2s");
	return piglit_dispatch_glVertex2s;
}

static void APIENTRY
stub_glVertex2s(GLshort x, GLshort y)
{
	check_initialized();
	piglit_dispatch_glVertex2s = resolve_glVertex2s();
	piglit_dispatch_glVertex2s(x, y);
}

PFNGLVERTEX2SPROC piglit_dispatch_glVertex2s = stub_glVertex2s;

static void*
resolve_glVertex2sv(void)
{
	/* glVertex2sv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glVertex2sv", 10);
	}

	unsupported("glVertex2sv");
	return piglit_dispatch_glVertex2sv;
}

static void APIENTRY
stub_glVertex2sv(const GLshort * v)
{
	check_initialized();
	piglit_dispatch_glVertex2sv = resolve_glVertex2sv();
	piglit_dispatch_glVertex2sv(v);
}

PFNGLVERTEX2SVPROC piglit_dispatch_glVertex2sv = stub_glVertex2sv;

static void*
resolve_glVertex2xOES(void)
{
	/* glVertex2xOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glVertex2xOES");
	}

	unsupported("glVertex2xOES");
	return piglit_dispatch_glVertex2xOES;
}

static void APIENTRY
stub_glVertex2xOES(GLfixed x)
{
	check_initialized();
	piglit_dispatch_glVertex2xOES = resolve_glVertex2xOES();
	piglit_dispatch_glVertex2xOES(x);
}

PFNGLVERTEX2XOESPROC piglit_dispatch_glVertex2xOES = stub_glVertex2xOES;

static void*
resolve_glVertex2xvOES(void)
{
	/* glVertex2xvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glVertex2xvOES");
	}

	unsupported("glVertex2xvOES");
	return piglit_dispatch_glVertex2xvOES;
}

static void APIENTRY
stub_glVertex2xvOES(const GLfixed * coords)
{
	check_initialized();
	piglit_dispatch_glVertex2xvOES = resolve_glVertex2xvOES();
	piglit_dispatch_glVertex2xvOES(coords);
}

PFNGLVERTEX2XVOESPROC piglit_dispatch_glVertex2xvOES = stub_glVertex2xvOES;

static void*
resolve_glVertex3bOES(void)
{
	/* glVertex3bOES (GL_OES_byte_coordinates) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_byte_coordinates")) {
		return get_ext_proc("glVertex3bOES");
	}

	unsupported("glVertex3bOES");
	return piglit_dispatch_glVertex3bOES;
}

static void APIENTRY
stub_glVertex3bOES(GLbyte x, GLbyte y)
{
	check_initialized();
	piglit_dispatch_glVertex3bOES = resolve_glVertex3bOES();
	piglit_dispatch_glVertex3bOES(x, y);
}

PFNGLVERTEX3BOESPROC piglit_dispatch_glVertex3bOES = stub_glVertex3bOES;

static void*
resolve_glVertex3bvOES(void)
{
	/* glVertex3bvOES (GL_OES_byte_coordinates) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_byte_coordinates")) {
		return get_ext_proc("glVertex3bvOES");
	}

	unsupported("glVertex3bvOES");
	return piglit_dispatch_glVertex3bvOES;
}

static void APIENTRY
stub_glVertex3bvOES(const GLbyte * coords)
{
	check_initialized();
	piglit_dispatch_glVertex3bvOES = resolve_glVertex3bvOES();
	piglit_dispatch_glVertex3bvOES(coords);
}

PFNGLVERTEX3BVOESPROC piglit_dispatch_glVertex3bvOES = stub_glVertex3bvOES;

static void*
resolve_glVertex3d(void)
{
	/* glVertex3d (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glVertex3d", 10);
	}

	unsupported("glVertex3d");
	return piglit_dispatch_glVertex3d;
}

static void APIENTRY
stub_glVertex3d(GLdouble x, GLdouble y, GLdouble z)
{
	check_initialized();
	piglit_dispatch_glVertex3d = resolve_glVertex3d();
	piglit_dispatch_glVertex3d(x, y, z);
}

PFNGLVERTEX3DPROC piglit_dispatch_glVertex3d = stub_glVertex3d;

static void*
resolve_glVertex3dv(void)
{
	/* glVertex3dv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glVertex3dv", 10);
	}

	unsupported("glVertex3dv");
	return piglit_dispatch_glVertex3dv;
}

static void APIENTRY
stub_glVertex3dv(const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glVertex3dv = resolve_glVertex3dv();
	piglit_dispatch_glVertex3dv(v);
}

PFNGLVERTEX3DVPROC piglit_dispatch_glVertex3dv = stub_glVertex3dv;

static void*
resolve_glVertex3f(void)
{
	/* glVertex3f (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glVertex3f", 10);
	}

	unsupported("glVertex3f");
	return piglit_dispatch_glVertex3f;
}

static void APIENTRY
stub_glVertex3f(GLfloat x, GLfloat y, GLfloat z)
{
	check_initialized();
	piglit_dispatch_glVertex3f = resolve_glVertex3f();
	piglit_dispatch_glVertex3f(x, y, z);
}

PFNGLVERTEX3FPROC piglit_dispatch_glVertex3f = stub_glVertex3f;

static void*
resolve_glVertex3fv(void)
{
	/* glVertex3fv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glVertex3fv", 10);
	}

	unsupported("glVertex3fv");
	return piglit_dispatch_glVertex3fv;
}

static void APIENTRY
stub_glVertex3fv(const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glVertex3fv = resolve_glVertex3fv();
	piglit_dispatch_glVertex3fv(v);
}

PFNGLVERTEX3FVPROC piglit_dispatch_glVertex3fv = stub_glVertex3fv;

static void*
resolve_glVertex3hNV(void)
{
	/* glVertex3hNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glVertex3hNV");
	}

	unsupported("glVertex3hNV");
	return piglit_dispatch_glVertex3hNV;
}

static void APIENTRY
stub_glVertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z)
{
	check_initialized();
	piglit_dispatch_glVertex3hNV = resolve_glVertex3hNV();
	piglit_dispatch_glVertex3hNV(x, y, z);
}

PFNGLVERTEX3HNVPROC piglit_dispatch_glVertex3hNV = stub_glVertex3hNV;

static void*
resolve_glVertex3hvNV(void)
{
	/* glVertex3hvNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glVertex3hvNV");
	}

	unsupported("glVertex3hvNV");
	return piglit_dispatch_glVertex3hvNV;
}

static void APIENTRY
stub_glVertex3hvNV(const GLhalfNV * v)
{
	check_initialized();
	piglit_dispatch_glVertex3hvNV = resolve_glVertex3hvNV();
	piglit_dispatch_glVertex3hvNV(v);
}

PFNGLVERTEX3HVNVPROC piglit_dispatch_glVertex3hvNV = stub_glVertex3hvNV;

static void*
resolve_glVertex3i(void)
{
	/* glVertex3i (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glVertex3i", 10);
	}

	unsupported("glVertex3i");
	return piglit_dispatch_glVertex3i;
}

static void APIENTRY
stub_glVertex3i(GLint x, GLint y, GLint z)
{
	check_initialized();
	piglit_dispatch_glVertex3i = resolve_glVertex3i();
	piglit_dispatch_glVertex3i(x, y, z);
}

PFNGLVERTEX3IPROC piglit_dispatch_glVertex3i = stub_glVertex3i;

static void*
resolve_glVertex3iv(void)
{
	/* glVertex3iv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glVertex3iv", 10);
	}

	unsupported("glVertex3iv");
	return piglit_dispatch_glVertex3iv;
}

static void APIENTRY
stub_glVertex3iv(const GLint * v)
{
	check_initialized();
	piglit_dispatch_glVertex3iv = resolve_glVertex3iv();
	piglit_dispatch_glVertex3iv(v);
}

PFNGLVERTEX3IVPROC piglit_dispatch_glVertex3iv = stub_glVertex3iv;

static void*
resolve_glVertex3s(void)
{
	/* glVertex3s (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glVertex3s", 10);
	}

	unsupported("glVertex3s");
	return piglit_dispatch_glVertex3s;
}

static void APIENTRY
stub_glVertex3s(GLshort x, GLshort y, GLshort z)
{
	check_initialized();
	piglit_dispatch_glVertex3s = resolve_glVertex3s();
	piglit_dispatch_glVertex3s(x, y, z);
}

PFNGLVERTEX3SPROC piglit_dispatch_glVertex3s = stub_glVertex3s;

static void*
resolve_glVertex3sv(void)
{
	/* glVertex3sv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glVertex3sv", 10);
	}

	unsupported("glVertex3sv");
	return piglit_dispatch_glVertex3sv;
}

static void APIENTRY
stub_glVertex3sv(const GLshort * v)
{
	check_initialized();
	piglit_dispatch_glVertex3sv = resolve_glVertex3sv();
	piglit_dispatch_glVertex3sv(v);
}

PFNGLVERTEX3SVPROC piglit_dispatch_glVertex3sv = stub_glVertex3sv;

static void*
resolve_glVertex3xOES(void)
{
	/* glVertex3xOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glVertex3xOES");
	}

	unsupported("glVertex3xOES");
	return piglit_dispatch_glVertex3xOES;
}

static void APIENTRY
stub_glVertex3xOES(GLfixed x, GLfixed y)
{
	check_initialized();
	piglit_dispatch_glVertex3xOES = resolve_glVertex3xOES();
	piglit_dispatch_glVertex3xOES(x, y);
}

PFNGLVERTEX3XOESPROC piglit_dispatch_glVertex3xOES = stub_glVertex3xOES;

static void*
resolve_glVertex3xvOES(void)
{
	/* glVertex3xvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glVertex3xvOES");
	}

	unsupported("glVertex3xvOES");
	return piglit_dispatch_glVertex3xvOES;
}

static void APIENTRY
stub_glVertex3xvOES(const GLfixed * coords)
{
	check_initialized();
	piglit_dispatch_glVertex3xvOES = resolve_glVertex3xvOES();
	piglit_dispatch_glVertex3xvOES(coords);
}

PFNGLVERTEX3XVOESPROC piglit_dispatch_glVertex3xvOES = stub_glVertex3xvOES;

static void*
resolve_glVertex4bOES(void)
{
	/* glVertex4bOES (GL_OES_byte_coordinates) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_byte_coordinates")) {
		return get_ext_proc("glVertex4bOES");
	}

	unsupported("glVertex4bOES");
	return piglit_dispatch_glVertex4bOES;
}

static void APIENTRY
stub_glVertex4bOES(GLbyte x, GLbyte y, GLbyte z)
{
	check_initialized();
	piglit_dispatch_glVertex4bOES = resolve_glVertex4bOES();
	piglit_dispatch_glVertex4bOES(x, y, z);
}

PFNGLVERTEX4BOESPROC piglit_dispatch_glVertex4bOES = stub_glVertex4bOES;

static void*
resolve_glVertex4bvOES(void)
{
	/* glVertex4bvOES (GL_OES_byte_coordinates) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_byte_coordinates")) {
		return get_ext_proc("glVertex4bvOES");
	}

	unsupported("glVertex4bvOES");
	return piglit_dispatch_glVertex4bvOES;
}

static void APIENTRY
stub_glVertex4bvOES(const GLbyte * coords)
{
	check_initialized();
	piglit_dispatch_glVertex4bvOES = resolve_glVertex4bvOES();
	piglit_dispatch_glVertex4bvOES(coords);
}

PFNGLVERTEX4BVOESPROC piglit_dispatch_glVertex4bvOES = stub_glVertex4bvOES;

static void*
resolve_glVertex4d(void)
{
	/* glVertex4d (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glVertex4d", 10);
	}

	unsupported("glVertex4d");
	return piglit_dispatch_glVertex4d;
}

static void APIENTRY
stub_glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
	check_initialized();
	piglit_dispatch_glVertex4d = resolve_glVertex4d();
	piglit_dispatch_glVertex4d(x, y, z, w);
}

PFNGLVERTEX4DPROC piglit_dispatch_glVertex4d = stub_glVertex4d;

static void*
resolve_glVertex4dv(void)
{
	/* glVertex4dv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glVertex4dv", 10);
	}

	unsupported("glVertex4dv");
	return piglit_dispatch_glVertex4dv;
}

static void APIENTRY
stub_glVertex4dv(const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glVertex4dv = resolve_glVertex4dv();
	piglit_dispatch_glVertex4dv(v);
}

PFNGLVERTEX4DVPROC piglit_dispatch_glVertex4dv = stub_glVertex4dv;

static void*
resolve_glVertex4f(void)
{
	/* glVertex4f (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glVertex4f", 10);
	}

	unsupported("glVertex4f");
	return piglit_dispatch_glVertex4f;
}

static void APIENTRY
stub_glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
	check_initialized();
	piglit_dispatch_glVertex4f = resolve_glVertex4f();
	piglit_dispatch_glVertex4f(x, y, z, w);
}

PFNGLVERTEX4FPROC piglit_dispatch_glVertex4f = stub_glVertex4f;

static void*
resolve_glVertex4fv(void)
{
	/* glVertex4fv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glVertex4fv", 10);
	}

	unsupported("glVertex4fv");
	return piglit_dispatch_glVertex4fv;
}

static void APIENTRY
stub_glVertex4fv(const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glVertex4fv = resolve_glVertex4fv();
	piglit_dispatch_glVertex4fv(v);
}

PFNGLVERTEX4FVPROC piglit_dispatch_glVertex4fv = stub_glVertex4fv;

static void*
resolve_glVertex4hNV(void)
{
	/* glVertex4hNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glVertex4hNV");
	}

	unsupported("glVertex4hNV");
	return piglit_dispatch_glVertex4hNV;
}

static void APIENTRY
stub_glVertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
{
	check_initialized();
	piglit_dispatch_glVertex4hNV = resolve_glVertex4hNV();
	piglit_dispatch_glVertex4hNV(x, y, z, w);
}

PFNGLVERTEX4HNVPROC piglit_dispatch_glVertex4hNV = stub_glVertex4hNV;

static void*
resolve_glVertex4hvNV(void)
{
	/* glVertex4hvNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glVertex4hvNV");
	}

	unsupported("glVertex4hvNV");
	return piglit_dispatch_glVertex4hvNV;
}

static void APIENTRY
stub_glVertex4hvNV(const GLhalfNV * v)
{
	check_initialized();
	piglit_dispatch_glVertex4hvNV = resolve_glVertex4hvNV();
	piglit_dispatch_glVertex4hvNV(v);
}

PFNGLVERTEX4HVNVPROC piglit_dispatch_glVertex4hvNV = stub_glVertex4hvNV;

static void*
resolve_glVertex4i(void)
{
	/* glVertex4i (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glVertex4i", 10);
	}

	unsupported("glVertex4i");
	return piglit_dispatch_glVertex4i;
}

static void APIENTRY
stub_glVertex4i(GLint x, GLint y, GLint z, GLint w)
{
	check_initialized();
	piglit_dispatch_glVertex4i = resolve_glVertex4i();
	piglit_dispatch_glVertex4i(x, y, z, w);
}

PFNGLVERTEX4IPROC piglit_dispatch_glVertex4i = stub_glVertex4i;

static void*
resolve_glVertex4iv(void)
{
	/* glVertex4iv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glVertex4iv", 10);
	}

	unsupported("glVertex4iv");
	return piglit_dispatch_glVertex4iv;
}

static void APIENTRY
stub_glVertex4iv(const GLint * v)
{
	check_initialized();
	piglit_dispatch_glVertex4iv = resolve_glVertex4iv();
	piglit_dispatch_glVertex4iv(v);
}

PFNGLVERTEX4IVPROC piglit_dispatch_glVertex4iv = stub_glVertex4iv;

static void*
resolve_glVertex4s(void)
{
	/* glVertex4s (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glVertex4s", 10);
	}

	unsupported("glVertex4s");
	return piglit_dispatch_glVertex4s;
}

static void APIENTRY
stub_glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w)
{
	check_initialized();
	piglit_dispatch_glVertex4s = resolve_glVertex4s();
	piglit_dispatch_glVertex4s(x, y, z, w);
}

PFNGLVERTEX4SPROC piglit_dispatch_glVertex4s = stub_glVertex4s;

static void*
resolve_glVertex4sv(void)
{
	/* glVertex4sv (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glVertex4sv", 10);
	}

	unsupported("glVertex4sv");
	return piglit_dispatch_glVertex4sv;
}

static void APIENTRY
stub_glVertex4sv(const GLshort * v)
{
	check_initialized();
	piglit_dispatch_glVertex4sv = resolve_glVertex4sv();
	piglit_dispatch_glVertex4sv(v);
}

PFNGLVERTEX4SVPROC piglit_dispatch_glVertex4sv = stub_glVertex4sv;

static void*
resolve_glVertex4xOES(void)
{
	/* glVertex4xOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glVertex4xOES");
	}

	unsupported("glVertex4xOES");
	return piglit_dispatch_glVertex4xOES;
}

static void APIENTRY
stub_glVertex4xOES(GLfixed x, GLfixed y, GLfixed z)
{
	check_initialized();
	piglit_dispatch_glVertex4xOES = resolve_glVertex4xOES();
	piglit_dispatch_glVertex4xOES(x, y, z);
}

PFNGLVERTEX4XOESPROC piglit_dispatch_glVertex4xOES = stub_glVertex4xOES;

static void*
resolve_glVertex4xvOES(void)
{
	/* glVertex4xvOES (GL_OES_fixed_point) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_OES_fixed_point")) {
		return get_ext_proc("glVertex4xvOES");
	}

	unsupported("glVertex4xvOES");
	return piglit_dispatch_glVertex4xvOES;
}

static void APIENTRY
stub_glVertex4xvOES(const GLfixed * coords)
{
	check_initialized();
	piglit_dispatch_glVertex4xvOES = resolve_glVertex4xvOES();
	piglit_dispatch_glVertex4xvOES(coords);
}

PFNGLVERTEX4XVOESPROC piglit_dispatch_glVertex4xvOES = stub_glVertex4xvOES;

static void*
resolve_glVertexArrayBindVertexBufferEXT(void)
{
	/* glVertexArrayBindVertexBufferEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glVertexArrayBindVertexBufferEXT");
	}

	unsupported("glVertexArrayBindVertexBufferEXT");
	return piglit_dispatch_glVertexArrayBindVertexBufferEXT;
}

static void APIENTRY
stub_glVertexArrayBindVertexBufferEXT(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
	check_initialized();
	piglit_dispatch_glVertexArrayBindVertexBufferEXT = resolve_glVertexArrayBindVertexBufferEXT();
	piglit_dispatch_glVertexArrayBindVertexBufferEXT(vaobj, bindingindex, buffer, offset, stride);
}

PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC piglit_dispatch_glVertexArrayBindVertexBufferEXT = stub_glVertexArrayBindVertexBufferEXT;

static void*
resolve_glVertexArrayColorOffsetEXT(void)
{
	/* glVertexArrayColorOffsetEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glVertexArrayColorOffsetEXT");
	}

	unsupported("glVertexArrayColorOffsetEXT");
	return piglit_dispatch_glVertexArrayColorOffsetEXT;
}

static void APIENTRY
stub_glVertexArrayColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
	check_initialized();
	piglit_dispatch_glVertexArrayColorOffsetEXT = resolve_glVertexArrayColorOffsetEXT();
	piglit_dispatch_glVertexArrayColorOffsetEXT(vaobj, buffer, size, type, stride, offset);
}

PFNGLVERTEXARRAYCOLOROFFSETEXTPROC piglit_dispatch_glVertexArrayColorOffsetEXT = stub_glVertexArrayColorOffsetEXT;

static void*
resolve_glVertexArrayEdgeFlagOffsetEXT(void)
{
	/* glVertexArrayEdgeFlagOffsetEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glVertexArrayEdgeFlagOffsetEXT");
	}

	unsupported("glVertexArrayEdgeFlagOffsetEXT");
	return piglit_dispatch_glVertexArrayEdgeFlagOffsetEXT;
}

static void APIENTRY
stub_glVertexArrayEdgeFlagOffsetEXT(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset)
{
	check_initialized();
	piglit_dispatch_glVertexArrayEdgeFlagOffsetEXT = resolve_glVertexArrayEdgeFlagOffsetEXT();
	piglit_dispatch_glVertexArrayEdgeFlagOffsetEXT(vaobj, buffer, stride, offset);
}

PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC piglit_dispatch_glVertexArrayEdgeFlagOffsetEXT = stub_glVertexArrayEdgeFlagOffsetEXT;

static void*
resolve_glVertexArrayFogCoordOffsetEXT(void)
{
	/* glVertexArrayFogCoordOffsetEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glVertexArrayFogCoordOffsetEXT");
	}

	unsupported("glVertexArrayFogCoordOffsetEXT");
	return piglit_dispatch_glVertexArrayFogCoordOffsetEXT;
}

static void APIENTRY
stub_glVertexArrayFogCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)
{
	check_initialized();
	piglit_dispatch_glVertexArrayFogCoordOffsetEXT = resolve_glVertexArrayFogCoordOffsetEXT();
	piglit_dispatch_glVertexArrayFogCoordOffsetEXT(vaobj, buffer, type, stride, offset);
}

PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC piglit_dispatch_glVertexArrayFogCoordOffsetEXT = stub_glVertexArrayFogCoordOffsetEXT;

static void*
resolve_glVertexArrayIndexOffsetEXT(void)
{
	/* glVertexArrayIndexOffsetEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glVertexArrayIndexOffsetEXT");
	}

	unsupported("glVertexArrayIndexOffsetEXT");
	return piglit_dispatch_glVertexArrayIndexOffsetEXT;
}

static void APIENTRY
stub_glVertexArrayIndexOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)
{
	check_initialized();
	piglit_dispatch_glVertexArrayIndexOffsetEXT = resolve_glVertexArrayIndexOffsetEXT();
	piglit_dispatch_glVertexArrayIndexOffsetEXT(vaobj, buffer, type, stride, offset);
}

PFNGLVERTEXARRAYINDEXOFFSETEXTPROC piglit_dispatch_glVertexArrayIndexOffsetEXT = stub_glVertexArrayIndexOffsetEXT;

static void*
resolve_glVertexArrayMultiTexCoordOffsetEXT(void)
{
	/* glVertexArrayMultiTexCoordOffsetEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glVertexArrayMultiTexCoordOffsetEXT");
	}

	unsupported("glVertexArrayMultiTexCoordOffsetEXT");
	return piglit_dispatch_glVertexArrayMultiTexCoordOffsetEXT;
}

static void APIENTRY
stub_glVertexArrayMultiTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
	check_initialized();
	piglit_dispatch_glVertexArrayMultiTexCoordOffsetEXT = resolve_glVertexArrayMultiTexCoordOffsetEXT();
	piglit_dispatch_glVertexArrayMultiTexCoordOffsetEXT(vaobj, buffer, texunit, size, type, stride, offset);
}

PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC piglit_dispatch_glVertexArrayMultiTexCoordOffsetEXT = stub_glVertexArrayMultiTexCoordOffsetEXT;

static void*
resolve_glVertexArrayNormalOffsetEXT(void)
{
	/* glVertexArrayNormalOffsetEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glVertexArrayNormalOffsetEXT");
	}

	unsupported("glVertexArrayNormalOffsetEXT");
	return piglit_dispatch_glVertexArrayNormalOffsetEXT;
}

static void APIENTRY
stub_glVertexArrayNormalOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)
{
	check_initialized();
	piglit_dispatch_glVertexArrayNormalOffsetEXT = resolve_glVertexArrayNormalOffsetEXT();
	piglit_dispatch_glVertexArrayNormalOffsetEXT(vaobj, buffer, type, stride, offset);
}

PFNGLVERTEXARRAYNORMALOFFSETEXTPROC piglit_dispatch_glVertexArrayNormalOffsetEXT = stub_glVertexArrayNormalOffsetEXT;

static void*
resolve_glVertexArrayParameteriAPPLE(void)
{
	/* glVertexArrayParameteriAPPLE (GL_APPLE_vertex_array_range) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_APPLE_vertex_array_range")) {
		return get_ext_proc("glVertexArrayParameteriAPPLE");
	}

	unsupported("glVertexArrayParameteriAPPLE");
	return piglit_dispatch_glVertexArrayParameteriAPPLE;
}

static void APIENTRY
stub_glVertexArrayParameteriAPPLE(GLenum pname, GLint param)
{
	check_initialized();
	piglit_dispatch_glVertexArrayParameteriAPPLE = resolve_glVertexArrayParameteriAPPLE();
	piglit_dispatch_glVertexArrayParameteriAPPLE(pname, param);
}

PFNGLVERTEXARRAYPARAMETERIAPPLEPROC piglit_dispatch_glVertexArrayParameteriAPPLE = stub_glVertexArrayParameteriAPPLE;

static void*
resolve_glVertexArrayRangeAPPLE(void)
{
	/* glVertexArrayRangeAPPLE (GL_APPLE_vertex_array_range) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_APPLE_vertex_array_range")) {
		return get_ext_proc("glVertexArrayRangeAPPLE");
	}

	unsupported("glVertexArrayRangeAPPLE");
	return piglit_dispatch_glVertexArrayRangeAPPLE;
}

static void APIENTRY
stub_glVertexArrayRangeAPPLE(GLsizei length, void * pointer)
{
	check_initialized();
	piglit_dispatch_glVertexArrayRangeAPPLE = resolve_glVertexArrayRangeAPPLE();
	piglit_dispatch_glVertexArrayRangeAPPLE(length, pointer);
}

PFNGLVERTEXARRAYRANGEAPPLEPROC piglit_dispatch_glVertexArrayRangeAPPLE = stub_glVertexArrayRangeAPPLE;

static void*
resolve_glVertexArrayRangeNV(void)
{
	/* glVertexArrayRangeNV (GL_NV_vertex_array_range) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_array_range")) {
		return get_ext_proc("glVertexArrayRangeNV");
	}

	unsupported("glVertexArrayRangeNV");
	return piglit_dispatch_glVertexArrayRangeNV;
}

static void APIENTRY
stub_glVertexArrayRangeNV(GLsizei length, const void * pointer)
{
	check_initialized();
	piglit_dispatch_glVertexArrayRangeNV = resolve_glVertexArrayRangeNV();
	piglit_dispatch_glVertexArrayRangeNV(length, pointer);
}

PFNGLVERTEXARRAYRANGENVPROC piglit_dispatch_glVertexArrayRangeNV = stub_glVertexArrayRangeNV;

static void*
resolve_glVertexArraySecondaryColorOffsetEXT(void)
{
	/* glVertexArraySecondaryColorOffsetEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glVertexArraySecondaryColorOffsetEXT");
	}

	unsupported("glVertexArraySecondaryColorOffsetEXT");
	return piglit_dispatch_glVertexArraySecondaryColorOffsetEXT;
}

static void APIENTRY
stub_glVertexArraySecondaryColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
	check_initialized();
	piglit_dispatch_glVertexArraySecondaryColorOffsetEXT = resolve_glVertexArraySecondaryColorOffsetEXT();
	piglit_dispatch_glVertexArraySecondaryColorOffsetEXT(vaobj, buffer, size, type, stride, offset);
}

PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC piglit_dispatch_glVertexArraySecondaryColorOffsetEXT = stub_glVertexArraySecondaryColorOffsetEXT;

static void*
resolve_glVertexArrayTexCoordOffsetEXT(void)
{
	/* glVertexArrayTexCoordOffsetEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glVertexArrayTexCoordOffsetEXT");
	}

	unsupported("glVertexArrayTexCoordOffsetEXT");
	return piglit_dispatch_glVertexArrayTexCoordOffsetEXT;
}

static void APIENTRY
stub_glVertexArrayTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
	check_initialized();
	piglit_dispatch_glVertexArrayTexCoordOffsetEXT = resolve_glVertexArrayTexCoordOffsetEXT();
	piglit_dispatch_glVertexArrayTexCoordOffsetEXT(vaobj, buffer, size, type, stride, offset);
}

PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC piglit_dispatch_glVertexArrayTexCoordOffsetEXT = stub_glVertexArrayTexCoordOffsetEXT;

static void*
resolve_glVertexArrayVertexAttribBindingEXT(void)
{
	/* glVertexArrayVertexAttribBindingEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glVertexArrayVertexAttribBindingEXT");
	}

	unsupported("glVertexArrayVertexAttribBindingEXT");
	return piglit_dispatch_glVertexArrayVertexAttribBindingEXT;
}

static void APIENTRY
stub_glVertexArrayVertexAttribBindingEXT(GLuint vaobj, GLuint attribindex, GLuint bindingindex)
{
	check_initialized();
	piglit_dispatch_glVertexArrayVertexAttribBindingEXT = resolve_glVertexArrayVertexAttribBindingEXT();
	piglit_dispatch_glVertexArrayVertexAttribBindingEXT(vaobj, attribindex, bindingindex);
}

PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC piglit_dispatch_glVertexArrayVertexAttribBindingEXT = stub_glVertexArrayVertexAttribBindingEXT;

static void*
resolve_glVertexArrayVertexAttribDivisorEXT(void)
{
	/* glVertexArrayVertexAttribDivisorEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glVertexArrayVertexAttribDivisorEXT");
	}

	unsupported("glVertexArrayVertexAttribDivisorEXT");
	return piglit_dispatch_glVertexArrayVertexAttribDivisorEXT;
}

static void APIENTRY
stub_glVertexArrayVertexAttribDivisorEXT(GLuint vaobj, GLuint index, GLuint divisor)
{
	check_initialized();
	piglit_dispatch_glVertexArrayVertexAttribDivisorEXT = resolve_glVertexArrayVertexAttribDivisorEXT();
	piglit_dispatch_glVertexArrayVertexAttribDivisorEXT(vaobj, index, divisor);
}

PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC piglit_dispatch_glVertexArrayVertexAttribDivisorEXT = stub_glVertexArrayVertexAttribDivisorEXT;

static void*
resolve_glVertexArrayVertexAttribFormatEXT(void)
{
	/* glVertexArrayVertexAttribFormatEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glVertexArrayVertexAttribFormatEXT");
	}

	unsupported("glVertexArrayVertexAttribFormatEXT");
	return piglit_dispatch_glVertexArrayVertexAttribFormatEXT;
}

static void APIENTRY
stub_glVertexArrayVertexAttribFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
	check_initialized();
	piglit_dispatch_glVertexArrayVertexAttribFormatEXT = resolve_glVertexArrayVertexAttribFormatEXT();
	piglit_dispatch_glVertexArrayVertexAttribFormatEXT(vaobj, attribindex, size, type, normalized, relativeoffset);
}

PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC piglit_dispatch_glVertexArrayVertexAttribFormatEXT = stub_glVertexArrayVertexAttribFormatEXT;

static void*
resolve_glVertexArrayVertexAttribIFormatEXT(void)
{
	/* glVertexArrayVertexAttribIFormatEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glVertexArrayVertexAttribIFormatEXT");
	}

	unsupported("glVertexArrayVertexAttribIFormatEXT");
	return piglit_dispatch_glVertexArrayVertexAttribIFormatEXT;
}

static void APIENTRY
stub_glVertexArrayVertexAttribIFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
	check_initialized();
	piglit_dispatch_glVertexArrayVertexAttribIFormatEXT = resolve_glVertexArrayVertexAttribIFormatEXT();
	piglit_dispatch_glVertexArrayVertexAttribIFormatEXT(vaobj, attribindex, size, type, relativeoffset);
}

PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC piglit_dispatch_glVertexArrayVertexAttribIFormatEXT = stub_glVertexArrayVertexAttribIFormatEXT;

static void*
resolve_glVertexArrayVertexAttribIOffsetEXT(void)
{
	/* glVertexArrayVertexAttribIOffsetEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glVertexArrayVertexAttribIOffsetEXT");
	}

	unsupported("glVertexArrayVertexAttribIOffsetEXT");
	return piglit_dispatch_glVertexArrayVertexAttribIOffsetEXT;
}

static void APIENTRY
stub_glVertexArrayVertexAttribIOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
	check_initialized();
	piglit_dispatch_glVertexArrayVertexAttribIOffsetEXT = resolve_glVertexArrayVertexAttribIOffsetEXT();
	piglit_dispatch_glVertexArrayVertexAttribIOffsetEXT(vaobj, buffer, index, size, type, stride, offset);
}

PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC piglit_dispatch_glVertexArrayVertexAttribIOffsetEXT = stub_glVertexArrayVertexAttribIOffsetEXT;

static void*
resolve_glVertexArrayVertexAttribLFormatEXT(void)
{
	/* glVertexArrayVertexAttribLFormatEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glVertexArrayVertexAttribLFormatEXT");
	}

	unsupported("glVertexArrayVertexAttribLFormatEXT");
	return piglit_dispatch_glVertexArrayVertexAttribLFormatEXT;
}

static void APIENTRY
stub_glVertexArrayVertexAttribLFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
	check_initialized();
	piglit_dispatch_glVertexArrayVertexAttribLFormatEXT = resolve_glVertexArrayVertexAttribLFormatEXT();
	piglit_dispatch_glVertexArrayVertexAttribLFormatEXT(vaobj, attribindex, size, type, relativeoffset);
}

PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC piglit_dispatch_glVertexArrayVertexAttribLFormatEXT = stub_glVertexArrayVertexAttribLFormatEXT;

static void*
resolve_glVertexArrayVertexAttribLOffsetEXT(void)
{
	/* glVertexArrayVertexAttribLOffsetEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glVertexArrayVertexAttribLOffsetEXT");
	}

	unsupported("glVertexArrayVertexAttribLOffsetEXT");
	return piglit_dispatch_glVertexArrayVertexAttribLOffsetEXT;
}

static void APIENTRY
stub_glVertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
	check_initialized();
	piglit_dispatch_glVertexArrayVertexAttribLOffsetEXT = resolve_glVertexArrayVertexAttribLOffsetEXT();
	piglit_dispatch_glVertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type, stride, offset);
}

PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC piglit_dispatch_glVertexArrayVertexAttribLOffsetEXT = stub_glVertexArrayVertexAttribLOffsetEXT;

static void*
resolve_glVertexArrayVertexAttribOffsetEXT(void)
{
	/* glVertexArrayVertexAttribOffsetEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glVertexArrayVertexAttribOffsetEXT");
	}

	unsupported("glVertexArrayVertexAttribOffsetEXT");
	return piglit_dispatch_glVertexArrayVertexAttribOffsetEXT;
}

static void APIENTRY
stub_glVertexArrayVertexAttribOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset)
{
	check_initialized();
	piglit_dispatch_glVertexArrayVertexAttribOffsetEXT = resolve_glVertexArrayVertexAttribOffsetEXT();
	piglit_dispatch_glVertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, type, normalized, stride, offset);
}

PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC piglit_dispatch_glVertexArrayVertexAttribOffsetEXT = stub_glVertexArrayVertexAttribOffsetEXT;

static void*
resolve_glVertexArrayVertexBindingDivisorEXT(void)
{
	/* glVertexArrayVertexBindingDivisorEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glVertexArrayVertexBindingDivisorEXT");
	}

	unsupported("glVertexArrayVertexBindingDivisorEXT");
	return piglit_dispatch_glVertexArrayVertexBindingDivisorEXT;
}

static void APIENTRY
stub_glVertexArrayVertexBindingDivisorEXT(GLuint vaobj, GLuint bindingindex, GLuint divisor)
{
	check_initialized();
	piglit_dispatch_glVertexArrayVertexBindingDivisorEXT = resolve_glVertexArrayVertexBindingDivisorEXT();
	piglit_dispatch_glVertexArrayVertexBindingDivisorEXT(vaobj, bindingindex, divisor);
}

PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC piglit_dispatch_glVertexArrayVertexBindingDivisorEXT = stub_glVertexArrayVertexBindingDivisorEXT;

static void*
resolve_glVertexArrayVertexOffsetEXT(void)
{
	/* glVertexArrayVertexOffsetEXT (GL_EXT_direct_state_access) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_direct_state_access")) {
		return get_ext_proc("glVertexArrayVertexOffsetEXT");
	}

	unsupported("glVertexArrayVertexOffsetEXT");
	return piglit_dispatch_glVertexArrayVertexOffsetEXT;
}

static void APIENTRY
stub_glVertexArrayVertexOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
	check_initialized();
	piglit_dispatch_glVertexArrayVertexOffsetEXT = resolve_glVertexArrayVertexOffsetEXT();
	piglit_dispatch_glVertexArrayVertexOffsetEXT(vaobj, buffer, size, type, stride, offset);
}

PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC piglit_dispatch_glVertexArrayVertexOffsetEXT = stub_glVertexArrayVertexOffsetEXT;

static void*
resolve_glVertexAttrib1d(void)
{
	/* glVertexAttrib1d (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib1d", 20);
	}

	/* glVertexAttrib1dARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib1dARB");
	}

	/* glVertexAttrib1dARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib1dARB");
	}

	/* glVertexAttrib1dNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttrib1dNV");
	}

	unsupported("glVertexAttrib1d");
	return piglit_dispatch_glVertexAttrib1d;
}

static void APIENTRY
stub_glVertexAttrib1d(GLuint index, GLdouble x)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib1d = resolve_glVertexAttrib1d();
	piglit_dispatch_glVertexAttrib1d(index, x);
}

PFNGLVERTEXATTRIB1DPROC piglit_dispatch_glVertexAttrib1d = stub_glVertexAttrib1d;

static void*
resolve_glVertexAttrib1dv(void)
{
	/* glVertexAttrib1dv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib1dv", 20);
	}

	/* glVertexAttrib1dvARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib1dvARB");
	}

	/* glVertexAttrib1dvARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib1dvARB");
	}

	/* glVertexAttrib1dvNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttrib1dvNV");
	}

	unsupported("glVertexAttrib1dv");
	return piglit_dispatch_glVertexAttrib1dv;
}

static void APIENTRY
stub_glVertexAttrib1dv(GLuint index, const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib1dv = resolve_glVertexAttrib1dv();
	piglit_dispatch_glVertexAttrib1dv(index, v);
}

PFNGLVERTEXATTRIB1DVPROC piglit_dispatch_glVertexAttrib1dv = stub_glVertexAttrib1dv;

static void*
resolve_glVertexAttrib1f(void)
{
	/* glVertexAttrib1f (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib1f", 20);
	}

	/* glVertexAttrib1f (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glVertexAttrib1f", 20);
	}

	/* glVertexAttrib1fARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib1fARB");
	}

	/* glVertexAttrib1fARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib1fARB");
	}

	/* glVertexAttrib1fNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttrib1fNV");
	}

	unsupported("glVertexAttrib1f");
	return piglit_dispatch_glVertexAttrib1f;
}

static void APIENTRY
stub_glVertexAttrib1f(GLuint index, GLfloat x)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib1f = resolve_glVertexAttrib1f();
	piglit_dispatch_glVertexAttrib1f(index, x);
}

PFNGLVERTEXATTRIB1FPROC piglit_dispatch_glVertexAttrib1f = stub_glVertexAttrib1f;

static void*
resolve_glVertexAttrib1fv(void)
{
	/* glVertexAttrib1fv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib1fv", 20);
	}

	/* glVertexAttrib1fv (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glVertexAttrib1fv", 20);
	}

	/* glVertexAttrib1fvARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib1fvARB");
	}

	/* glVertexAttrib1fvARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib1fvARB");
	}

	/* glVertexAttrib1fvNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttrib1fvNV");
	}

	unsupported("glVertexAttrib1fv");
	return piglit_dispatch_glVertexAttrib1fv;
}

static void APIENTRY
stub_glVertexAttrib1fv(GLuint index, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib1fv = resolve_glVertexAttrib1fv();
	piglit_dispatch_glVertexAttrib1fv(index, v);
}

PFNGLVERTEXATTRIB1FVPROC piglit_dispatch_glVertexAttrib1fv = stub_glVertexAttrib1fv;

static void*
resolve_glVertexAttrib1hNV(void)
{
	/* glVertexAttrib1hNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glVertexAttrib1hNV");
	}

	unsupported("glVertexAttrib1hNV");
	return piglit_dispatch_glVertexAttrib1hNV;
}

static void APIENTRY
stub_glVertexAttrib1hNV(GLuint index, GLhalfNV x)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib1hNV = resolve_glVertexAttrib1hNV();
	piglit_dispatch_glVertexAttrib1hNV(index, x);
}

PFNGLVERTEXATTRIB1HNVPROC piglit_dispatch_glVertexAttrib1hNV = stub_glVertexAttrib1hNV;

static void*
resolve_glVertexAttrib1hvNV(void)
{
	/* glVertexAttrib1hvNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glVertexAttrib1hvNV");
	}

	unsupported("glVertexAttrib1hvNV");
	return piglit_dispatch_glVertexAttrib1hvNV;
}

static void APIENTRY
stub_glVertexAttrib1hvNV(GLuint index, const GLhalfNV * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib1hvNV = resolve_glVertexAttrib1hvNV();
	piglit_dispatch_glVertexAttrib1hvNV(index, v);
}

PFNGLVERTEXATTRIB1HVNVPROC piglit_dispatch_glVertexAttrib1hvNV = stub_glVertexAttrib1hvNV;

static void*
resolve_glVertexAttrib1s(void)
{
	/* glVertexAttrib1s (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib1s", 20);
	}

	/* glVertexAttrib1sARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib1sARB");
	}

	/* glVertexAttrib1sARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib1sARB");
	}

	/* glVertexAttrib1sNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttrib1sNV");
	}

	unsupported("glVertexAttrib1s");
	return piglit_dispatch_glVertexAttrib1s;
}

static void APIENTRY
stub_glVertexAttrib1s(GLuint index, GLshort x)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib1s = resolve_glVertexAttrib1s();
	piglit_dispatch_glVertexAttrib1s(index, x);
}

PFNGLVERTEXATTRIB1SPROC piglit_dispatch_glVertexAttrib1s = stub_glVertexAttrib1s;

static void*
resolve_glVertexAttrib1sv(void)
{
	/* glVertexAttrib1sv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib1sv", 20);
	}

	/* glVertexAttrib1svARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib1svARB");
	}

	/* glVertexAttrib1svARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib1svARB");
	}

	/* glVertexAttrib1svNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttrib1svNV");
	}

	unsupported("glVertexAttrib1sv");
	return piglit_dispatch_glVertexAttrib1sv;
}

static void APIENTRY
stub_glVertexAttrib1sv(GLuint index, const GLshort * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib1sv = resolve_glVertexAttrib1sv();
	piglit_dispatch_glVertexAttrib1sv(index, v);
}

PFNGLVERTEXATTRIB1SVPROC piglit_dispatch_glVertexAttrib1sv = stub_glVertexAttrib1sv;

static void*
resolve_glVertexAttrib2d(void)
{
	/* glVertexAttrib2d (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib2d", 20);
	}

	/* glVertexAttrib2dARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib2dARB");
	}

	/* glVertexAttrib2dARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib2dARB");
	}

	/* glVertexAttrib2dNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttrib2dNV");
	}

	unsupported("glVertexAttrib2d");
	return piglit_dispatch_glVertexAttrib2d;
}

static void APIENTRY
stub_glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib2d = resolve_glVertexAttrib2d();
	piglit_dispatch_glVertexAttrib2d(index, x, y);
}

PFNGLVERTEXATTRIB2DPROC piglit_dispatch_glVertexAttrib2d = stub_glVertexAttrib2d;

static void*
resolve_glVertexAttrib2dv(void)
{
	/* glVertexAttrib2dv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib2dv", 20);
	}

	/* glVertexAttrib2dvARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib2dvARB");
	}

	/* glVertexAttrib2dvARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib2dvARB");
	}

	/* glVertexAttrib2dvNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttrib2dvNV");
	}

	unsupported("glVertexAttrib2dv");
	return piglit_dispatch_glVertexAttrib2dv;
}

static void APIENTRY
stub_glVertexAttrib2dv(GLuint index, const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib2dv = resolve_glVertexAttrib2dv();
	piglit_dispatch_glVertexAttrib2dv(index, v);
}

PFNGLVERTEXATTRIB2DVPROC piglit_dispatch_glVertexAttrib2dv = stub_glVertexAttrib2dv;

static void*
resolve_glVertexAttrib2f(void)
{
	/* glVertexAttrib2f (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib2f", 20);
	}

	/* glVertexAttrib2f (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glVertexAttrib2f", 20);
	}

	/* glVertexAttrib2fARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib2fARB");
	}

	/* glVertexAttrib2fARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib2fARB");
	}

	/* glVertexAttrib2fNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttrib2fNV");
	}

	unsupported("glVertexAttrib2f");
	return piglit_dispatch_glVertexAttrib2f;
}

static void APIENTRY
stub_glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib2f = resolve_glVertexAttrib2f();
	piglit_dispatch_glVertexAttrib2f(index, x, y);
}

PFNGLVERTEXATTRIB2FPROC piglit_dispatch_glVertexAttrib2f = stub_glVertexAttrib2f;

static void*
resolve_glVertexAttrib2fv(void)
{
	/* glVertexAttrib2fv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib2fv", 20);
	}

	/* glVertexAttrib2fv (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glVertexAttrib2fv", 20);
	}

	/* glVertexAttrib2fvARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib2fvARB");
	}

	/* glVertexAttrib2fvARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib2fvARB");
	}

	/* glVertexAttrib2fvNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttrib2fvNV");
	}

	unsupported("glVertexAttrib2fv");
	return piglit_dispatch_glVertexAttrib2fv;
}

static void APIENTRY
stub_glVertexAttrib2fv(GLuint index, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib2fv = resolve_glVertexAttrib2fv();
	piglit_dispatch_glVertexAttrib2fv(index, v);
}

PFNGLVERTEXATTRIB2FVPROC piglit_dispatch_glVertexAttrib2fv = stub_glVertexAttrib2fv;

static void*
resolve_glVertexAttrib2hNV(void)
{
	/* glVertexAttrib2hNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glVertexAttrib2hNV");
	}

	unsupported("glVertexAttrib2hNV");
	return piglit_dispatch_glVertexAttrib2hNV;
}

static void APIENTRY
stub_glVertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib2hNV = resolve_glVertexAttrib2hNV();
	piglit_dispatch_glVertexAttrib2hNV(index, x, y);
}

PFNGLVERTEXATTRIB2HNVPROC piglit_dispatch_glVertexAttrib2hNV = stub_glVertexAttrib2hNV;

static void*
resolve_glVertexAttrib2hvNV(void)
{
	/* glVertexAttrib2hvNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glVertexAttrib2hvNV");
	}

	unsupported("glVertexAttrib2hvNV");
	return piglit_dispatch_glVertexAttrib2hvNV;
}

static void APIENTRY
stub_glVertexAttrib2hvNV(GLuint index, const GLhalfNV * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib2hvNV = resolve_glVertexAttrib2hvNV();
	piglit_dispatch_glVertexAttrib2hvNV(index, v);
}

PFNGLVERTEXATTRIB2HVNVPROC piglit_dispatch_glVertexAttrib2hvNV = stub_glVertexAttrib2hvNV;

static void*
resolve_glVertexAttrib2s(void)
{
	/* glVertexAttrib2s (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib2s", 20);
	}

	/* glVertexAttrib2sARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib2sARB");
	}

	/* glVertexAttrib2sARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib2sARB");
	}

	/* glVertexAttrib2sNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttrib2sNV");
	}

	unsupported("glVertexAttrib2s");
	return piglit_dispatch_glVertexAttrib2s;
}

static void APIENTRY
stub_glVertexAttrib2s(GLuint index, GLshort x, GLshort y)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib2s = resolve_glVertexAttrib2s();
	piglit_dispatch_glVertexAttrib2s(index, x, y);
}

PFNGLVERTEXATTRIB2SPROC piglit_dispatch_glVertexAttrib2s = stub_glVertexAttrib2s;

static void*
resolve_glVertexAttrib2sv(void)
{
	/* glVertexAttrib2sv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib2sv", 20);
	}

	/* glVertexAttrib2svARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib2svARB");
	}

	/* glVertexAttrib2svARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib2svARB");
	}

	/* glVertexAttrib2svNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttrib2svNV");
	}

	unsupported("glVertexAttrib2sv");
	return piglit_dispatch_glVertexAttrib2sv;
}

static void APIENTRY
stub_glVertexAttrib2sv(GLuint index, const GLshort * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib2sv = resolve_glVertexAttrib2sv();
	piglit_dispatch_glVertexAttrib2sv(index, v);
}

PFNGLVERTEXATTRIB2SVPROC piglit_dispatch_glVertexAttrib2sv = stub_glVertexAttrib2sv;

static void*
resolve_glVertexAttrib3d(void)
{
	/* glVertexAttrib3d (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib3d", 20);
	}

	/* glVertexAttrib3dARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib3dARB");
	}

	/* glVertexAttrib3dARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib3dARB");
	}

	/* glVertexAttrib3dNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttrib3dNV");
	}

	unsupported("glVertexAttrib3d");
	return piglit_dispatch_glVertexAttrib3d;
}

static void APIENTRY
stub_glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib3d = resolve_glVertexAttrib3d();
	piglit_dispatch_glVertexAttrib3d(index, x, y, z);
}

PFNGLVERTEXATTRIB3DPROC piglit_dispatch_glVertexAttrib3d = stub_glVertexAttrib3d;

static void*
resolve_glVertexAttrib3dv(void)
{
	/* glVertexAttrib3dv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib3dv", 20);
	}

	/* glVertexAttrib3dvARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib3dvARB");
	}

	/* glVertexAttrib3dvARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib3dvARB");
	}

	/* glVertexAttrib3dvNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttrib3dvNV");
	}

	unsupported("glVertexAttrib3dv");
	return piglit_dispatch_glVertexAttrib3dv;
}

static void APIENTRY
stub_glVertexAttrib3dv(GLuint index, const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib3dv = resolve_glVertexAttrib3dv();
	piglit_dispatch_glVertexAttrib3dv(index, v);
}

PFNGLVERTEXATTRIB3DVPROC piglit_dispatch_glVertexAttrib3dv = stub_glVertexAttrib3dv;

static void*
resolve_glVertexAttrib3f(void)
{
	/* glVertexAttrib3f (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib3f", 20);
	}

	/* glVertexAttrib3f (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glVertexAttrib3f", 20);
	}

	/* glVertexAttrib3fARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib3fARB");
	}

	/* glVertexAttrib3fARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib3fARB");
	}

	/* glVertexAttrib3fNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttrib3fNV");
	}

	unsupported("glVertexAttrib3f");
	return piglit_dispatch_glVertexAttrib3f;
}

static void APIENTRY
stub_glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib3f = resolve_glVertexAttrib3f();
	piglit_dispatch_glVertexAttrib3f(index, x, y, z);
}

PFNGLVERTEXATTRIB3FPROC piglit_dispatch_glVertexAttrib3f = stub_glVertexAttrib3f;

static void*
resolve_glVertexAttrib3fv(void)
{
	/* glVertexAttrib3fv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib3fv", 20);
	}

	/* glVertexAttrib3fv (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glVertexAttrib3fv", 20);
	}

	/* glVertexAttrib3fvARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib3fvARB");
	}

	/* glVertexAttrib3fvARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib3fvARB");
	}

	/* glVertexAttrib3fvNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttrib3fvNV");
	}

	unsupported("glVertexAttrib3fv");
	return piglit_dispatch_glVertexAttrib3fv;
}

static void APIENTRY
stub_glVertexAttrib3fv(GLuint index, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib3fv = resolve_glVertexAttrib3fv();
	piglit_dispatch_glVertexAttrib3fv(index, v);
}

PFNGLVERTEXATTRIB3FVPROC piglit_dispatch_glVertexAttrib3fv = stub_glVertexAttrib3fv;

static void*
resolve_glVertexAttrib3hNV(void)
{
	/* glVertexAttrib3hNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glVertexAttrib3hNV");
	}

	unsupported("glVertexAttrib3hNV");
	return piglit_dispatch_glVertexAttrib3hNV;
}

static void APIENTRY
stub_glVertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib3hNV = resolve_glVertexAttrib3hNV();
	piglit_dispatch_glVertexAttrib3hNV(index, x, y, z);
}

PFNGLVERTEXATTRIB3HNVPROC piglit_dispatch_glVertexAttrib3hNV = stub_glVertexAttrib3hNV;

static void*
resolve_glVertexAttrib3hvNV(void)
{
	/* glVertexAttrib3hvNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glVertexAttrib3hvNV");
	}

	unsupported("glVertexAttrib3hvNV");
	return piglit_dispatch_glVertexAttrib3hvNV;
}

static void APIENTRY
stub_glVertexAttrib3hvNV(GLuint index, const GLhalfNV * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib3hvNV = resolve_glVertexAttrib3hvNV();
	piglit_dispatch_glVertexAttrib3hvNV(index, v);
}

PFNGLVERTEXATTRIB3HVNVPROC piglit_dispatch_glVertexAttrib3hvNV = stub_glVertexAttrib3hvNV;

static void*
resolve_glVertexAttrib3s(void)
{
	/* glVertexAttrib3s (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib3s", 20);
	}

	/* glVertexAttrib3sARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib3sARB");
	}

	/* glVertexAttrib3sARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib3sARB");
	}

	/* glVertexAttrib3sNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttrib3sNV");
	}

	unsupported("glVertexAttrib3s");
	return piglit_dispatch_glVertexAttrib3s;
}

static void APIENTRY
stub_glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib3s = resolve_glVertexAttrib3s();
	piglit_dispatch_glVertexAttrib3s(index, x, y, z);
}

PFNGLVERTEXATTRIB3SPROC piglit_dispatch_glVertexAttrib3s = stub_glVertexAttrib3s;

static void*
resolve_glVertexAttrib3sv(void)
{
	/* glVertexAttrib3sv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib3sv", 20);
	}

	/* glVertexAttrib3svARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib3svARB");
	}

	/* glVertexAttrib3svARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib3svARB");
	}

	/* glVertexAttrib3svNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttrib3svNV");
	}

	unsupported("glVertexAttrib3sv");
	return piglit_dispatch_glVertexAttrib3sv;
}

static void APIENTRY
stub_glVertexAttrib3sv(GLuint index, const GLshort * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib3sv = resolve_glVertexAttrib3sv();
	piglit_dispatch_glVertexAttrib3sv(index, v);
}

PFNGLVERTEXATTRIB3SVPROC piglit_dispatch_glVertexAttrib3sv = stub_glVertexAttrib3sv;

static void*
resolve_glVertexAttrib4Nbv(void)
{
	/* glVertexAttrib4Nbv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib4Nbv", 20);
	}

	/* glVertexAttrib4NbvARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib4NbvARB");
	}

	/* glVertexAttrib4NbvARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib4NbvARB");
	}

	unsupported("glVertexAttrib4Nbv");
	return piglit_dispatch_glVertexAttrib4Nbv;
}

static void APIENTRY
stub_glVertexAttrib4Nbv(GLuint index, const GLbyte * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib4Nbv = resolve_glVertexAttrib4Nbv();
	piglit_dispatch_glVertexAttrib4Nbv(index, v);
}

PFNGLVERTEXATTRIB4NBVPROC piglit_dispatch_glVertexAttrib4Nbv = stub_glVertexAttrib4Nbv;

static void*
resolve_glVertexAttrib4Niv(void)
{
	/* glVertexAttrib4Niv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib4Niv", 20);
	}

	/* glVertexAttrib4NivARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib4NivARB");
	}

	/* glVertexAttrib4NivARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib4NivARB");
	}

	unsupported("glVertexAttrib4Niv");
	return piglit_dispatch_glVertexAttrib4Niv;
}

static void APIENTRY
stub_glVertexAttrib4Niv(GLuint index, const GLint * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib4Niv = resolve_glVertexAttrib4Niv();
	piglit_dispatch_glVertexAttrib4Niv(index, v);
}

PFNGLVERTEXATTRIB4NIVPROC piglit_dispatch_glVertexAttrib4Niv = stub_glVertexAttrib4Niv;

static void*
resolve_glVertexAttrib4Nsv(void)
{
	/* glVertexAttrib4Nsv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib4Nsv", 20);
	}

	/* glVertexAttrib4NsvARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib4NsvARB");
	}

	/* glVertexAttrib4NsvARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib4NsvARB");
	}

	unsupported("glVertexAttrib4Nsv");
	return piglit_dispatch_glVertexAttrib4Nsv;
}

static void APIENTRY
stub_glVertexAttrib4Nsv(GLuint index, const GLshort * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib4Nsv = resolve_glVertexAttrib4Nsv();
	piglit_dispatch_glVertexAttrib4Nsv(index, v);
}

PFNGLVERTEXATTRIB4NSVPROC piglit_dispatch_glVertexAttrib4Nsv = stub_glVertexAttrib4Nsv;

static void*
resolve_glVertexAttrib4Nub(void)
{
	/* glVertexAttrib4Nub (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib4Nub", 20);
	}

	/* glVertexAttrib4NubARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib4NubARB");
	}

	/* glVertexAttrib4NubARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib4NubARB");
	}

	/* glVertexAttrib4ubNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttrib4ubNV");
	}

	unsupported("glVertexAttrib4Nub");
	return piglit_dispatch_glVertexAttrib4Nub;
}

static void APIENTRY
stub_glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib4Nub = resolve_glVertexAttrib4Nub();
	piglit_dispatch_glVertexAttrib4Nub(index, x, y, z, w);
}

PFNGLVERTEXATTRIB4NUBPROC piglit_dispatch_glVertexAttrib4Nub = stub_glVertexAttrib4Nub;

static void*
resolve_glVertexAttrib4Nubv(void)
{
	/* glVertexAttrib4Nubv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib4Nubv", 20);
	}

	/* glVertexAttrib4NubvARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib4NubvARB");
	}

	/* glVertexAttrib4NubvARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib4NubvARB");
	}

	/* glVertexAttrib4ubvNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttrib4ubvNV");
	}

	unsupported("glVertexAttrib4Nubv");
	return piglit_dispatch_glVertexAttrib4Nubv;
}

static void APIENTRY
stub_glVertexAttrib4Nubv(GLuint index, const GLubyte * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib4Nubv = resolve_glVertexAttrib4Nubv();
	piglit_dispatch_glVertexAttrib4Nubv(index, v);
}

PFNGLVERTEXATTRIB4NUBVPROC piglit_dispatch_glVertexAttrib4Nubv = stub_glVertexAttrib4Nubv;

static void*
resolve_glVertexAttrib4Nuiv(void)
{
	/* glVertexAttrib4Nuiv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib4Nuiv", 20);
	}

	/* glVertexAttrib4NuivARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib4NuivARB");
	}

	/* glVertexAttrib4NuivARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib4NuivARB");
	}

	unsupported("glVertexAttrib4Nuiv");
	return piglit_dispatch_glVertexAttrib4Nuiv;
}

static void APIENTRY
stub_glVertexAttrib4Nuiv(GLuint index, const GLuint * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib4Nuiv = resolve_glVertexAttrib4Nuiv();
	piglit_dispatch_glVertexAttrib4Nuiv(index, v);
}

PFNGLVERTEXATTRIB4NUIVPROC piglit_dispatch_glVertexAttrib4Nuiv = stub_glVertexAttrib4Nuiv;

static void*
resolve_glVertexAttrib4Nusv(void)
{
	/* glVertexAttrib4Nusv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib4Nusv", 20);
	}

	/* glVertexAttrib4NusvARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib4NusvARB");
	}

	/* glVertexAttrib4NusvARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib4NusvARB");
	}

	unsupported("glVertexAttrib4Nusv");
	return piglit_dispatch_glVertexAttrib4Nusv;
}

static void APIENTRY
stub_glVertexAttrib4Nusv(GLuint index, const GLushort * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib4Nusv = resolve_glVertexAttrib4Nusv();
	piglit_dispatch_glVertexAttrib4Nusv(index, v);
}

PFNGLVERTEXATTRIB4NUSVPROC piglit_dispatch_glVertexAttrib4Nusv = stub_glVertexAttrib4Nusv;

static void*
resolve_glVertexAttrib4bv(void)
{
	/* glVertexAttrib4bv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib4bv", 20);
	}

	/* glVertexAttrib4bvARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib4bvARB");
	}

	/* glVertexAttrib4bvARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib4bvARB");
	}

	unsupported("glVertexAttrib4bv");
	return piglit_dispatch_glVertexAttrib4bv;
}

static void APIENTRY
stub_glVertexAttrib4bv(GLuint index, const GLbyte * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib4bv = resolve_glVertexAttrib4bv();
	piglit_dispatch_glVertexAttrib4bv(index, v);
}

PFNGLVERTEXATTRIB4BVPROC piglit_dispatch_glVertexAttrib4bv = stub_glVertexAttrib4bv;

static void*
resolve_glVertexAttrib4d(void)
{
	/* glVertexAttrib4d (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib4d", 20);
	}

	/* glVertexAttrib4dARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib4dARB");
	}

	/* glVertexAttrib4dARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib4dARB");
	}

	/* glVertexAttrib4dNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttrib4dNV");
	}

	unsupported("glVertexAttrib4d");
	return piglit_dispatch_glVertexAttrib4d;
}

static void APIENTRY
stub_glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib4d = resolve_glVertexAttrib4d();
	piglit_dispatch_glVertexAttrib4d(index, x, y, z, w);
}

PFNGLVERTEXATTRIB4DPROC piglit_dispatch_glVertexAttrib4d = stub_glVertexAttrib4d;

static void*
resolve_glVertexAttrib4dv(void)
{
	/* glVertexAttrib4dv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib4dv", 20);
	}

	/* glVertexAttrib4dvARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib4dvARB");
	}

	/* glVertexAttrib4dvARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib4dvARB");
	}

	/* glVertexAttrib4dvNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttrib4dvNV");
	}

	unsupported("glVertexAttrib4dv");
	return piglit_dispatch_glVertexAttrib4dv;
}

static void APIENTRY
stub_glVertexAttrib4dv(GLuint index, const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib4dv = resolve_glVertexAttrib4dv();
	piglit_dispatch_glVertexAttrib4dv(index, v);
}

PFNGLVERTEXATTRIB4DVPROC piglit_dispatch_glVertexAttrib4dv = stub_glVertexAttrib4dv;

static void*
resolve_glVertexAttrib4f(void)
{
	/* glVertexAttrib4f (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib4f", 20);
	}

	/* glVertexAttrib4f (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glVertexAttrib4f", 20);
	}

	/* glVertexAttrib4fARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib4fARB");
	}

	/* glVertexAttrib4fARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib4fARB");
	}

	/* glVertexAttrib4fNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttrib4fNV");
	}

	unsupported("glVertexAttrib4f");
	return piglit_dispatch_glVertexAttrib4f;
}

static void APIENTRY
stub_glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib4f = resolve_glVertexAttrib4f();
	piglit_dispatch_glVertexAttrib4f(index, x, y, z, w);
}

PFNGLVERTEXATTRIB4FPROC piglit_dispatch_glVertexAttrib4f = stub_glVertexAttrib4f;

static void*
resolve_glVertexAttrib4fv(void)
{
	/* glVertexAttrib4fv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib4fv", 20);
	}

	/* glVertexAttrib4fv (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glVertexAttrib4fv", 20);
	}

	/* glVertexAttrib4fvARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib4fvARB");
	}

	/* glVertexAttrib4fvARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib4fvARB");
	}

	/* glVertexAttrib4fvNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttrib4fvNV");
	}

	unsupported("glVertexAttrib4fv");
	return piglit_dispatch_glVertexAttrib4fv;
}

static void APIENTRY
stub_glVertexAttrib4fv(GLuint index, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib4fv = resolve_glVertexAttrib4fv();
	piglit_dispatch_glVertexAttrib4fv(index, v);
}

PFNGLVERTEXATTRIB4FVPROC piglit_dispatch_glVertexAttrib4fv = stub_glVertexAttrib4fv;

static void*
resolve_glVertexAttrib4hNV(void)
{
	/* glVertexAttrib4hNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glVertexAttrib4hNV");
	}

	unsupported("glVertexAttrib4hNV");
	return piglit_dispatch_glVertexAttrib4hNV;
}

static void APIENTRY
stub_glVertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib4hNV = resolve_glVertexAttrib4hNV();
	piglit_dispatch_glVertexAttrib4hNV(index, x, y, z, w);
}

PFNGLVERTEXATTRIB4HNVPROC piglit_dispatch_glVertexAttrib4hNV = stub_glVertexAttrib4hNV;

static void*
resolve_glVertexAttrib4hvNV(void)
{
	/* glVertexAttrib4hvNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glVertexAttrib4hvNV");
	}

	unsupported("glVertexAttrib4hvNV");
	return piglit_dispatch_glVertexAttrib4hvNV;
}

static void APIENTRY
stub_glVertexAttrib4hvNV(GLuint index, const GLhalfNV * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib4hvNV = resolve_glVertexAttrib4hvNV();
	piglit_dispatch_glVertexAttrib4hvNV(index, v);
}

PFNGLVERTEXATTRIB4HVNVPROC piglit_dispatch_glVertexAttrib4hvNV = stub_glVertexAttrib4hvNV;

static void*
resolve_glVertexAttrib4iv(void)
{
	/* glVertexAttrib4iv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib4iv", 20);
	}

	/* glVertexAttrib4ivARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib4ivARB");
	}

	/* glVertexAttrib4ivARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib4ivARB");
	}

	unsupported("glVertexAttrib4iv");
	return piglit_dispatch_glVertexAttrib4iv;
}

static void APIENTRY
stub_glVertexAttrib4iv(GLuint index, const GLint * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib4iv = resolve_glVertexAttrib4iv();
	piglit_dispatch_glVertexAttrib4iv(index, v);
}

PFNGLVERTEXATTRIB4IVPROC piglit_dispatch_glVertexAttrib4iv = stub_glVertexAttrib4iv;

static void*
resolve_glVertexAttrib4s(void)
{
	/* glVertexAttrib4s (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib4s", 20);
	}

	/* glVertexAttrib4sARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib4sARB");
	}

	/* glVertexAttrib4sARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib4sARB");
	}

	/* glVertexAttrib4sNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttrib4sNV");
	}

	unsupported("glVertexAttrib4s");
	return piglit_dispatch_glVertexAttrib4s;
}

static void APIENTRY
stub_glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib4s = resolve_glVertexAttrib4s();
	piglit_dispatch_glVertexAttrib4s(index, x, y, z, w);
}

PFNGLVERTEXATTRIB4SPROC piglit_dispatch_glVertexAttrib4s = stub_glVertexAttrib4s;

static void*
resolve_glVertexAttrib4sv(void)
{
	/* glVertexAttrib4sv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib4sv", 20);
	}

	/* glVertexAttrib4svARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib4svARB");
	}

	/* glVertexAttrib4svARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib4svARB");
	}

	/* glVertexAttrib4svNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttrib4svNV");
	}

	unsupported("glVertexAttrib4sv");
	return piglit_dispatch_glVertexAttrib4sv;
}

static void APIENTRY
stub_glVertexAttrib4sv(GLuint index, const GLshort * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib4sv = resolve_glVertexAttrib4sv();
	piglit_dispatch_glVertexAttrib4sv(index, v);
}

PFNGLVERTEXATTRIB4SVPROC piglit_dispatch_glVertexAttrib4sv = stub_glVertexAttrib4sv;

static void*
resolve_glVertexAttrib4ubv(void)
{
	/* glVertexAttrib4ubv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib4ubv", 20);
	}

	/* glVertexAttrib4ubvARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib4ubvARB");
	}

	/* glVertexAttrib4ubvARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib4ubvARB");
	}

	unsupported("glVertexAttrib4ubv");
	return piglit_dispatch_glVertexAttrib4ubv;
}

static void APIENTRY
stub_glVertexAttrib4ubv(GLuint index, const GLubyte * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib4ubv = resolve_glVertexAttrib4ubv();
	piglit_dispatch_glVertexAttrib4ubv(index, v);
}

PFNGLVERTEXATTRIB4UBVPROC piglit_dispatch_glVertexAttrib4ubv = stub_glVertexAttrib4ubv;

static void*
resolve_glVertexAttrib4uiv(void)
{
	/* glVertexAttrib4uiv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib4uiv", 20);
	}

	/* glVertexAttrib4uivARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib4uivARB");
	}

	/* glVertexAttrib4uivARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib4uivARB");
	}

	unsupported("glVertexAttrib4uiv");
	return piglit_dispatch_glVertexAttrib4uiv;
}

static void APIENTRY
stub_glVertexAttrib4uiv(GLuint index, const GLuint * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib4uiv = resolve_glVertexAttrib4uiv();
	piglit_dispatch_glVertexAttrib4uiv(index, v);
}

PFNGLVERTEXATTRIB4UIVPROC piglit_dispatch_glVertexAttrib4uiv = stub_glVertexAttrib4uiv;

static void*
resolve_glVertexAttrib4usv(void)
{
	/* glVertexAttrib4usv (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttrib4usv", 20);
	}

	/* glVertexAttrib4usvARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttrib4usvARB");
	}

	/* glVertexAttrib4usvARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttrib4usvARB");
	}

	unsupported("glVertexAttrib4usv");
	return piglit_dispatch_glVertexAttrib4usv;
}

static void APIENTRY
stub_glVertexAttrib4usv(GLuint index, const GLushort * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttrib4usv = resolve_glVertexAttrib4usv();
	piglit_dispatch_glVertexAttrib4usv(index, v);
}

PFNGLVERTEXATTRIB4USVPROC piglit_dispatch_glVertexAttrib4usv = stub_glVertexAttrib4usv;

static void*
resolve_glVertexAttribArrayObjectATI(void)
{
	/* glVertexAttribArrayObjectATI (GL_ATI_vertex_attrib_array_object) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_attrib_array_object")) {
		return get_ext_proc("glVertexAttribArrayObjectATI");
	}

	unsupported("glVertexAttribArrayObjectATI");
	return piglit_dispatch_glVertexAttribArrayObjectATI;
}

static void APIENTRY
stub_glVertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset)
{
	check_initialized();
	piglit_dispatch_glVertexAttribArrayObjectATI = resolve_glVertexAttribArrayObjectATI();
	piglit_dispatch_glVertexAttribArrayObjectATI(index, size, type, normalized, stride, buffer, offset);
}

PFNGLVERTEXATTRIBARRAYOBJECTATIPROC piglit_dispatch_glVertexAttribArrayObjectATI = stub_glVertexAttribArrayObjectATI;

static void*
resolve_glVertexAttribBinding(void)
{
	/* glVertexAttribBinding (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribBinding", 43);
	}

	/* glVertexAttribBinding (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glVertexAttribBinding", 31);
	}

	/* glVertexAttribBinding (GL_ARB_vertex_attrib_binding) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_attrib_binding")) {
		return get_ext_proc("glVertexAttribBinding");
	}

	unsupported("glVertexAttribBinding");
	return piglit_dispatch_glVertexAttribBinding;
}

static void APIENTRY
stub_glVertexAttribBinding(GLuint attribindex, GLuint bindingindex)
{
	check_initialized();
	piglit_dispatch_glVertexAttribBinding = resolve_glVertexAttribBinding();
	piglit_dispatch_glVertexAttribBinding(attribindex, bindingindex);
}

PFNGLVERTEXATTRIBBINDINGPROC piglit_dispatch_glVertexAttribBinding = stub_glVertexAttribBinding;

static void*
resolve_glVertexAttribDivisor(void)
{
	/* glVertexAttribDivisor (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribDivisor", 33);
	}

	/* glVertexAttribDivisor (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glVertexAttribDivisor", 30);
	}

	/* glVertexAttribDivisorARB (GL_ARB_instanced_arrays) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_instanced_arrays")) {
		return get_ext_proc("glVertexAttribDivisorARB");
	}

	/* glVertexAttribDivisorEXT (GL_EXT_instanced_arrays) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_EXT_instanced_arrays")) {
		return get_ext_proc("glVertexAttribDivisorEXT");
	}

	/* glVertexAttribDivisorANGLE (GL_ANGLE_instanced_arrays) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_ANGLE_instanced_arrays")) {
		return get_ext_proc("glVertexAttribDivisorANGLE");
	}

	/* glVertexAttribDivisorNV (GL_NV_instanced_arrays) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_NV_instanced_arrays")) {
		return get_ext_proc("glVertexAttribDivisorNV");
	}

	unsupported("glVertexAttribDivisor");
	return piglit_dispatch_glVertexAttribDivisor;
}

static void APIENTRY
stub_glVertexAttribDivisor(GLuint index, GLuint divisor)
{
	check_initialized();
	piglit_dispatch_glVertexAttribDivisor = resolve_glVertexAttribDivisor();
	piglit_dispatch_glVertexAttribDivisor(index, divisor);
}

PFNGLVERTEXATTRIBDIVISORPROC piglit_dispatch_glVertexAttribDivisor = stub_glVertexAttribDivisor;

static void*
resolve_glVertexAttribFormat(void)
{
	/* glVertexAttribFormat (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribFormat", 43);
	}

	/* glVertexAttribFormat (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glVertexAttribFormat", 31);
	}

	/* glVertexAttribFormat (GL_ARB_vertex_attrib_binding) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_attrib_binding")) {
		return get_ext_proc("glVertexAttribFormat");
	}

	unsupported("glVertexAttribFormat");
	return piglit_dispatch_glVertexAttribFormat;
}

static void APIENTRY
stub_glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
	check_initialized();
	piglit_dispatch_glVertexAttribFormat = resolve_glVertexAttribFormat();
	piglit_dispatch_glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset);
}

PFNGLVERTEXATTRIBFORMATPROC piglit_dispatch_glVertexAttribFormat = stub_glVertexAttribFormat;

static void*
resolve_glVertexAttribFormatNV(void)
{
	/* glVertexAttribFormatNV (GL_NV_vertex_buffer_unified_memory) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_buffer_unified_memory")) {
		return get_ext_proc("glVertexAttribFormatNV");
	}

	unsupported("glVertexAttribFormatNV");
	return piglit_dispatch_glVertexAttribFormatNV;
}

static void APIENTRY
stub_glVertexAttribFormatNV(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride)
{
	check_initialized();
	piglit_dispatch_glVertexAttribFormatNV = resolve_glVertexAttribFormatNV();
	piglit_dispatch_glVertexAttribFormatNV(index, size, type, normalized, stride);
}

PFNGLVERTEXATTRIBFORMATNVPROC piglit_dispatch_glVertexAttribFormatNV = stub_glVertexAttribFormatNV;

static void*
resolve_glVertexAttribI1i(void)
{
	/* glVertexAttribI1i (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribI1i", 30);
	}

	/* glVertexAttribI1iEXT (GL_NV_vertex_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program4")) {
		return get_ext_proc("glVertexAttribI1iEXT");
	}

	unsupported("glVertexAttribI1i");
	return piglit_dispatch_glVertexAttribI1i;
}

static void APIENTRY
stub_glVertexAttribI1i(GLuint index, GLint x)
{
	check_initialized();
	piglit_dispatch_glVertexAttribI1i = resolve_glVertexAttribI1i();
	piglit_dispatch_glVertexAttribI1i(index, x);
}

PFNGLVERTEXATTRIBI1IPROC piglit_dispatch_glVertexAttribI1i = stub_glVertexAttribI1i;

static void*
resolve_glVertexAttribI1iv(void)
{
	/* glVertexAttribI1iv (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribI1iv", 30);
	}

	/* glVertexAttribI1ivEXT (GL_NV_vertex_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program4")) {
		return get_ext_proc("glVertexAttribI1ivEXT");
	}

	unsupported("glVertexAttribI1iv");
	return piglit_dispatch_glVertexAttribI1iv;
}

static void APIENTRY
stub_glVertexAttribI1iv(GLuint index, const GLint * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribI1iv = resolve_glVertexAttribI1iv();
	piglit_dispatch_glVertexAttribI1iv(index, v);
}

PFNGLVERTEXATTRIBI1IVPROC piglit_dispatch_glVertexAttribI1iv = stub_glVertexAttribI1iv;

static void*
resolve_glVertexAttribI1ui(void)
{
	/* glVertexAttribI1ui (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribI1ui", 30);
	}

	/* glVertexAttribI1uiEXT (GL_NV_vertex_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program4")) {
		return get_ext_proc("glVertexAttribI1uiEXT");
	}

	unsupported("glVertexAttribI1ui");
	return piglit_dispatch_glVertexAttribI1ui;
}

static void APIENTRY
stub_glVertexAttribI1ui(GLuint index, GLuint x)
{
	check_initialized();
	piglit_dispatch_glVertexAttribI1ui = resolve_glVertexAttribI1ui();
	piglit_dispatch_glVertexAttribI1ui(index, x);
}

PFNGLVERTEXATTRIBI1UIPROC piglit_dispatch_glVertexAttribI1ui = stub_glVertexAttribI1ui;

static void*
resolve_glVertexAttribI1uiv(void)
{
	/* glVertexAttribI1uiv (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribI1uiv", 30);
	}

	/* glVertexAttribI1uivEXT (GL_NV_vertex_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program4")) {
		return get_ext_proc("glVertexAttribI1uivEXT");
	}

	unsupported("glVertexAttribI1uiv");
	return piglit_dispatch_glVertexAttribI1uiv;
}

static void APIENTRY
stub_glVertexAttribI1uiv(GLuint index, const GLuint * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribI1uiv = resolve_glVertexAttribI1uiv();
	piglit_dispatch_glVertexAttribI1uiv(index, v);
}

PFNGLVERTEXATTRIBI1UIVPROC piglit_dispatch_glVertexAttribI1uiv = stub_glVertexAttribI1uiv;

static void*
resolve_glVertexAttribI2i(void)
{
	/* glVertexAttribI2i (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribI2i", 30);
	}

	/* glVertexAttribI2iEXT (GL_NV_vertex_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program4")) {
		return get_ext_proc("glVertexAttribI2iEXT");
	}

	unsupported("glVertexAttribI2i");
	return piglit_dispatch_glVertexAttribI2i;
}

static void APIENTRY
stub_glVertexAttribI2i(GLuint index, GLint x, GLint y)
{
	check_initialized();
	piglit_dispatch_glVertexAttribI2i = resolve_glVertexAttribI2i();
	piglit_dispatch_glVertexAttribI2i(index, x, y);
}

PFNGLVERTEXATTRIBI2IPROC piglit_dispatch_glVertexAttribI2i = stub_glVertexAttribI2i;

static void*
resolve_glVertexAttribI2iv(void)
{
	/* glVertexAttribI2iv (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribI2iv", 30);
	}

	/* glVertexAttribI2ivEXT (GL_NV_vertex_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program4")) {
		return get_ext_proc("glVertexAttribI2ivEXT");
	}

	unsupported("glVertexAttribI2iv");
	return piglit_dispatch_glVertexAttribI2iv;
}

static void APIENTRY
stub_glVertexAttribI2iv(GLuint index, const GLint * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribI2iv = resolve_glVertexAttribI2iv();
	piglit_dispatch_glVertexAttribI2iv(index, v);
}

PFNGLVERTEXATTRIBI2IVPROC piglit_dispatch_glVertexAttribI2iv = stub_glVertexAttribI2iv;

static void*
resolve_glVertexAttribI2ui(void)
{
	/* glVertexAttribI2ui (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribI2ui", 30);
	}

	/* glVertexAttribI2uiEXT (GL_NV_vertex_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program4")) {
		return get_ext_proc("glVertexAttribI2uiEXT");
	}

	unsupported("glVertexAttribI2ui");
	return piglit_dispatch_glVertexAttribI2ui;
}

static void APIENTRY
stub_glVertexAttribI2ui(GLuint index, GLuint x, GLuint y)
{
	check_initialized();
	piglit_dispatch_glVertexAttribI2ui = resolve_glVertexAttribI2ui();
	piglit_dispatch_glVertexAttribI2ui(index, x, y);
}

PFNGLVERTEXATTRIBI2UIPROC piglit_dispatch_glVertexAttribI2ui = stub_glVertexAttribI2ui;

static void*
resolve_glVertexAttribI2uiv(void)
{
	/* glVertexAttribI2uiv (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribI2uiv", 30);
	}

	/* glVertexAttribI2uivEXT (GL_NV_vertex_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program4")) {
		return get_ext_proc("glVertexAttribI2uivEXT");
	}

	unsupported("glVertexAttribI2uiv");
	return piglit_dispatch_glVertexAttribI2uiv;
}

static void APIENTRY
stub_glVertexAttribI2uiv(GLuint index, const GLuint * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribI2uiv = resolve_glVertexAttribI2uiv();
	piglit_dispatch_glVertexAttribI2uiv(index, v);
}

PFNGLVERTEXATTRIBI2UIVPROC piglit_dispatch_glVertexAttribI2uiv = stub_glVertexAttribI2uiv;

static void*
resolve_glVertexAttribI3i(void)
{
	/* glVertexAttribI3i (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribI3i", 30);
	}

	/* glVertexAttribI3iEXT (GL_NV_vertex_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program4")) {
		return get_ext_proc("glVertexAttribI3iEXT");
	}

	unsupported("glVertexAttribI3i");
	return piglit_dispatch_glVertexAttribI3i;
}

static void APIENTRY
stub_glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z)
{
	check_initialized();
	piglit_dispatch_glVertexAttribI3i = resolve_glVertexAttribI3i();
	piglit_dispatch_glVertexAttribI3i(index, x, y, z);
}

PFNGLVERTEXATTRIBI3IPROC piglit_dispatch_glVertexAttribI3i = stub_glVertexAttribI3i;

static void*
resolve_glVertexAttribI3iv(void)
{
	/* glVertexAttribI3iv (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribI3iv", 30);
	}

	/* glVertexAttribI3ivEXT (GL_NV_vertex_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program4")) {
		return get_ext_proc("glVertexAttribI3ivEXT");
	}

	unsupported("glVertexAttribI3iv");
	return piglit_dispatch_glVertexAttribI3iv;
}

static void APIENTRY
stub_glVertexAttribI3iv(GLuint index, const GLint * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribI3iv = resolve_glVertexAttribI3iv();
	piglit_dispatch_glVertexAttribI3iv(index, v);
}

PFNGLVERTEXATTRIBI3IVPROC piglit_dispatch_glVertexAttribI3iv = stub_glVertexAttribI3iv;

static void*
resolve_glVertexAttribI3ui(void)
{
	/* glVertexAttribI3ui (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribI3ui", 30);
	}

	/* glVertexAttribI3uiEXT (GL_NV_vertex_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program4")) {
		return get_ext_proc("glVertexAttribI3uiEXT");
	}

	unsupported("glVertexAttribI3ui");
	return piglit_dispatch_glVertexAttribI3ui;
}

static void APIENTRY
stub_glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z)
{
	check_initialized();
	piglit_dispatch_glVertexAttribI3ui = resolve_glVertexAttribI3ui();
	piglit_dispatch_glVertexAttribI3ui(index, x, y, z);
}

PFNGLVERTEXATTRIBI3UIPROC piglit_dispatch_glVertexAttribI3ui = stub_glVertexAttribI3ui;

static void*
resolve_glVertexAttribI3uiv(void)
{
	/* glVertexAttribI3uiv (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribI3uiv", 30);
	}

	/* glVertexAttribI3uivEXT (GL_NV_vertex_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program4")) {
		return get_ext_proc("glVertexAttribI3uivEXT");
	}

	unsupported("glVertexAttribI3uiv");
	return piglit_dispatch_glVertexAttribI3uiv;
}

static void APIENTRY
stub_glVertexAttribI3uiv(GLuint index, const GLuint * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribI3uiv = resolve_glVertexAttribI3uiv();
	piglit_dispatch_glVertexAttribI3uiv(index, v);
}

PFNGLVERTEXATTRIBI3UIVPROC piglit_dispatch_glVertexAttribI3uiv = stub_glVertexAttribI3uiv;

static void*
resolve_glVertexAttribI4bv(void)
{
	/* glVertexAttribI4bv (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribI4bv", 30);
	}

	/* glVertexAttribI4bvEXT (GL_NV_vertex_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program4")) {
		return get_ext_proc("glVertexAttribI4bvEXT");
	}

	unsupported("glVertexAttribI4bv");
	return piglit_dispatch_glVertexAttribI4bv;
}

static void APIENTRY
stub_glVertexAttribI4bv(GLuint index, const GLbyte * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribI4bv = resolve_glVertexAttribI4bv();
	piglit_dispatch_glVertexAttribI4bv(index, v);
}

PFNGLVERTEXATTRIBI4BVPROC piglit_dispatch_glVertexAttribI4bv = stub_glVertexAttribI4bv;

static void*
resolve_glVertexAttribI4i(void)
{
	/* glVertexAttribI4i (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribI4i", 30);
	}

	/* glVertexAttribI4i (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glVertexAttribI4i", 30);
	}

	/* glVertexAttribI4iEXT (GL_NV_vertex_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program4")) {
		return get_ext_proc("glVertexAttribI4iEXT");
	}

	unsupported("glVertexAttribI4i");
	return piglit_dispatch_glVertexAttribI4i;
}

static void APIENTRY
stub_glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w)
{
	check_initialized();
	piglit_dispatch_glVertexAttribI4i = resolve_glVertexAttribI4i();
	piglit_dispatch_glVertexAttribI4i(index, x, y, z, w);
}

PFNGLVERTEXATTRIBI4IPROC piglit_dispatch_glVertexAttribI4i = stub_glVertexAttribI4i;

static void*
resolve_glVertexAttribI4iv(void)
{
	/* glVertexAttribI4iv (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribI4iv", 30);
	}

	/* glVertexAttribI4iv (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glVertexAttribI4iv", 30);
	}

	/* glVertexAttribI4ivEXT (GL_NV_vertex_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program4")) {
		return get_ext_proc("glVertexAttribI4ivEXT");
	}

	unsupported("glVertexAttribI4iv");
	return piglit_dispatch_glVertexAttribI4iv;
}

static void APIENTRY
stub_glVertexAttribI4iv(GLuint index, const GLint * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribI4iv = resolve_glVertexAttribI4iv();
	piglit_dispatch_glVertexAttribI4iv(index, v);
}

PFNGLVERTEXATTRIBI4IVPROC piglit_dispatch_glVertexAttribI4iv = stub_glVertexAttribI4iv;

static void*
resolve_glVertexAttribI4sv(void)
{
	/* glVertexAttribI4sv (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribI4sv", 30);
	}

	/* glVertexAttribI4svEXT (GL_NV_vertex_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program4")) {
		return get_ext_proc("glVertexAttribI4svEXT");
	}

	unsupported("glVertexAttribI4sv");
	return piglit_dispatch_glVertexAttribI4sv;
}

static void APIENTRY
stub_glVertexAttribI4sv(GLuint index, const GLshort * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribI4sv = resolve_glVertexAttribI4sv();
	piglit_dispatch_glVertexAttribI4sv(index, v);
}

PFNGLVERTEXATTRIBI4SVPROC piglit_dispatch_glVertexAttribI4sv = stub_glVertexAttribI4sv;

static void*
resolve_glVertexAttribI4ubv(void)
{
	/* glVertexAttribI4ubv (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribI4ubv", 30);
	}

	/* glVertexAttribI4ubvEXT (GL_NV_vertex_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program4")) {
		return get_ext_proc("glVertexAttribI4ubvEXT");
	}

	unsupported("glVertexAttribI4ubv");
	return piglit_dispatch_glVertexAttribI4ubv;
}

static void APIENTRY
stub_glVertexAttribI4ubv(GLuint index, const GLubyte * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribI4ubv = resolve_glVertexAttribI4ubv();
	piglit_dispatch_glVertexAttribI4ubv(index, v);
}

PFNGLVERTEXATTRIBI4UBVPROC piglit_dispatch_glVertexAttribI4ubv = stub_glVertexAttribI4ubv;

static void*
resolve_glVertexAttribI4ui(void)
{
	/* glVertexAttribI4ui (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribI4ui", 30);
	}

	/* glVertexAttribI4ui (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glVertexAttribI4ui", 30);
	}

	/* glVertexAttribI4uiEXT (GL_NV_vertex_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program4")) {
		return get_ext_proc("glVertexAttribI4uiEXT");
	}

	unsupported("glVertexAttribI4ui");
	return piglit_dispatch_glVertexAttribI4ui;
}

static void APIENTRY
stub_glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
	check_initialized();
	piglit_dispatch_glVertexAttribI4ui = resolve_glVertexAttribI4ui();
	piglit_dispatch_glVertexAttribI4ui(index, x, y, z, w);
}

PFNGLVERTEXATTRIBI4UIPROC piglit_dispatch_glVertexAttribI4ui = stub_glVertexAttribI4ui;

static void*
resolve_glVertexAttribI4uiv(void)
{
	/* glVertexAttribI4uiv (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribI4uiv", 30);
	}

	/* glVertexAttribI4uiv (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glVertexAttribI4uiv", 30);
	}

	/* glVertexAttribI4uivEXT (GL_NV_vertex_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program4")) {
		return get_ext_proc("glVertexAttribI4uivEXT");
	}

	unsupported("glVertexAttribI4uiv");
	return piglit_dispatch_glVertexAttribI4uiv;
}

static void APIENTRY
stub_glVertexAttribI4uiv(GLuint index, const GLuint * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribI4uiv = resolve_glVertexAttribI4uiv();
	piglit_dispatch_glVertexAttribI4uiv(index, v);
}

PFNGLVERTEXATTRIBI4UIVPROC piglit_dispatch_glVertexAttribI4uiv = stub_glVertexAttribI4uiv;

static void*
resolve_glVertexAttribI4usv(void)
{
	/* glVertexAttribI4usv (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribI4usv", 30);
	}

	/* glVertexAttribI4usvEXT (GL_NV_vertex_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program4")) {
		return get_ext_proc("glVertexAttribI4usvEXT");
	}

	unsupported("glVertexAttribI4usv");
	return piglit_dispatch_glVertexAttribI4usv;
}

static void APIENTRY
stub_glVertexAttribI4usv(GLuint index, const GLushort * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribI4usv = resolve_glVertexAttribI4usv();
	piglit_dispatch_glVertexAttribI4usv(index, v);
}

PFNGLVERTEXATTRIBI4USVPROC piglit_dispatch_glVertexAttribI4usv = stub_glVertexAttribI4usv;

static void*
resolve_glVertexAttribIFormat(void)
{
	/* glVertexAttribIFormat (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribIFormat", 43);
	}

	/* glVertexAttribIFormat (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glVertexAttribIFormat", 31);
	}

	/* glVertexAttribIFormat (GL_ARB_vertex_attrib_binding) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_attrib_binding")) {
		return get_ext_proc("glVertexAttribIFormat");
	}

	unsupported("glVertexAttribIFormat");
	return piglit_dispatch_glVertexAttribIFormat;
}

static void APIENTRY
stub_glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
	check_initialized();
	piglit_dispatch_glVertexAttribIFormat = resolve_glVertexAttribIFormat();
	piglit_dispatch_glVertexAttribIFormat(attribindex, size, type, relativeoffset);
}

PFNGLVERTEXATTRIBIFORMATPROC piglit_dispatch_glVertexAttribIFormat = stub_glVertexAttribIFormat;

static void*
resolve_glVertexAttribIFormatNV(void)
{
	/* glVertexAttribIFormatNV (GL_NV_vertex_buffer_unified_memory) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_buffer_unified_memory")) {
		return get_ext_proc("glVertexAttribIFormatNV");
	}

	unsupported("glVertexAttribIFormatNV");
	return piglit_dispatch_glVertexAttribIFormatNV;
}

static void APIENTRY
stub_glVertexAttribIFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride)
{
	check_initialized();
	piglit_dispatch_glVertexAttribIFormatNV = resolve_glVertexAttribIFormatNV();
	piglit_dispatch_glVertexAttribIFormatNV(index, size, type, stride);
}

PFNGLVERTEXATTRIBIFORMATNVPROC piglit_dispatch_glVertexAttribIFormatNV = stub_glVertexAttribIFormatNV;

static void*
resolve_glVertexAttribIPointer(void)
{
	/* glVertexAttribIPointer (GL_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribIPointer", 30);
	}

	/* glVertexAttribIPointer (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glVertexAttribIPointer", 30);
	}

	/* glVertexAttribIPointerEXT (GL_NV_vertex_program4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program4")) {
		return get_ext_proc("glVertexAttribIPointerEXT");
	}

	unsupported("glVertexAttribIPointer");
	return piglit_dispatch_glVertexAttribIPointer;
}

static void APIENTRY
stub_glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer)
{
	check_initialized();
	piglit_dispatch_glVertexAttribIPointer = resolve_glVertexAttribIPointer();
	piglit_dispatch_glVertexAttribIPointer(index, size, type, stride, pointer);
}

PFNGLVERTEXATTRIBIPOINTERPROC piglit_dispatch_glVertexAttribIPointer = stub_glVertexAttribIPointer;

static void*
resolve_glVertexAttribL1d(void)
{
	/* glVertexAttribL1d (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribL1d", 41);
	}

	/* glVertexAttribL1d (GL_ARB_vertex_attrib_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_attrib_64bit")) {
		return get_ext_proc("glVertexAttribL1d");
	}

	/* glVertexAttribL1dEXT (GL_EXT_vertex_attrib_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_attrib_64bit")) {
		return get_ext_proc("glVertexAttribL1dEXT");
	}

	unsupported("glVertexAttribL1d");
	return piglit_dispatch_glVertexAttribL1d;
}

static void APIENTRY
stub_glVertexAttribL1d(GLuint index, GLdouble x)
{
	check_initialized();
	piglit_dispatch_glVertexAttribL1d = resolve_glVertexAttribL1d();
	piglit_dispatch_glVertexAttribL1d(index, x);
}

PFNGLVERTEXATTRIBL1DPROC piglit_dispatch_glVertexAttribL1d = stub_glVertexAttribL1d;

static void*
resolve_glVertexAttribL1dv(void)
{
	/* glVertexAttribL1dv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribL1dv", 41);
	}

	/* glVertexAttribL1dv (GL_ARB_vertex_attrib_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_attrib_64bit")) {
		return get_ext_proc("glVertexAttribL1dv");
	}

	/* glVertexAttribL1dvEXT (GL_EXT_vertex_attrib_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_attrib_64bit")) {
		return get_ext_proc("glVertexAttribL1dvEXT");
	}

	unsupported("glVertexAttribL1dv");
	return piglit_dispatch_glVertexAttribL1dv;
}

static void APIENTRY
stub_glVertexAttribL1dv(GLuint index, const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribL1dv = resolve_glVertexAttribL1dv();
	piglit_dispatch_glVertexAttribL1dv(index, v);
}

PFNGLVERTEXATTRIBL1DVPROC piglit_dispatch_glVertexAttribL1dv = stub_glVertexAttribL1dv;

static void*
resolve_glVertexAttribL1i64NV(void)
{
	/* glVertexAttribL1i64NV (GL_NV_vertex_attrib_integer_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_attrib_integer_64bit")) {
		return get_ext_proc("glVertexAttribL1i64NV");
	}

	unsupported("glVertexAttribL1i64NV");
	return piglit_dispatch_glVertexAttribL1i64NV;
}

static void APIENTRY
stub_glVertexAttribL1i64NV(GLuint index, GLint64EXT x)
{
	check_initialized();
	piglit_dispatch_glVertexAttribL1i64NV = resolve_glVertexAttribL1i64NV();
	piglit_dispatch_glVertexAttribL1i64NV(index, x);
}

PFNGLVERTEXATTRIBL1I64NVPROC piglit_dispatch_glVertexAttribL1i64NV = stub_glVertexAttribL1i64NV;

static void*
resolve_glVertexAttribL1i64vNV(void)
{
	/* glVertexAttribL1i64vNV (GL_NV_vertex_attrib_integer_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_attrib_integer_64bit")) {
		return get_ext_proc("glVertexAttribL1i64vNV");
	}

	unsupported("glVertexAttribL1i64vNV");
	return piglit_dispatch_glVertexAttribL1i64vNV;
}

static void APIENTRY
stub_glVertexAttribL1i64vNV(GLuint index, const GLint64EXT * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribL1i64vNV = resolve_glVertexAttribL1i64vNV();
	piglit_dispatch_glVertexAttribL1i64vNV(index, v);
}

PFNGLVERTEXATTRIBL1I64VNVPROC piglit_dispatch_glVertexAttribL1i64vNV = stub_glVertexAttribL1i64vNV;

static void*
resolve_glVertexAttribL1ui64ARB(void)
{
	/* glVertexAttribL1ui64ARB (GL_ARB_bindless_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_bindless_texture")) {
		return get_ext_proc("glVertexAttribL1ui64ARB");
	}

	unsupported("glVertexAttribL1ui64ARB");
	return piglit_dispatch_glVertexAttribL1ui64ARB;
}

static void APIENTRY
stub_glVertexAttribL1ui64ARB(GLuint index, GLuint64EXT x)
{
	check_initialized();
	piglit_dispatch_glVertexAttribL1ui64ARB = resolve_glVertexAttribL1ui64ARB();
	piglit_dispatch_glVertexAttribL1ui64ARB(index, x);
}

PFNGLVERTEXATTRIBL1UI64ARBPROC piglit_dispatch_glVertexAttribL1ui64ARB = stub_glVertexAttribL1ui64ARB;

static void*
resolve_glVertexAttribL1ui64NV(void)
{
	/* glVertexAttribL1ui64NV (GL_NV_vertex_attrib_integer_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_attrib_integer_64bit")) {
		return get_ext_proc("glVertexAttribL1ui64NV");
	}

	unsupported("glVertexAttribL1ui64NV");
	return piglit_dispatch_glVertexAttribL1ui64NV;
}

static void APIENTRY
stub_glVertexAttribL1ui64NV(GLuint index, GLuint64EXT x)
{
	check_initialized();
	piglit_dispatch_glVertexAttribL1ui64NV = resolve_glVertexAttribL1ui64NV();
	piglit_dispatch_glVertexAttribL1ui64NV(index, x);
}

PFNGLVERTEXATTRIBL1UI64NVPROC piglit_dispatch_glVertexAttribL1ui64NV = stub_glVertexAttribL1ui64NV;

static void*
resolve_glVertexAttribL1ui64vARB(void)
{
	/* glVertexAttribL1ui64vARB (GL_ARB_bindless_texture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_bindless_texture")) {
		return get_ext_proc("glVertexAttribL1ui64vARB");
	}

	unsupported("glVertexAttribL1ui64vARB");
	return piglit_dispatch_glVertexAttribL1ui64vARB;
}

static void APIENTRY
stub_glVertexAttribL1ui64vARB(GLuint index, const GLuint64EXT * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribL1ui64vARB = resolve_glVertexAttribL1ui64vARB();
	piglit_dispatch_glVertexAttribL1ui64vARB(index, v);
}

PFNGLVERTEXATTRIBL1UI64VARBPROC piglit_dispatch_glVertexAttribL1ui64vARB = stub_glVertexAttribL1ui64vARB;

static void*
resolve_glVertexAttribL1ui64vNV(void)
{
	/* glVertexAttribL1ui64vNV (GL_NV_vertex_attrib_integer_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_attrib_integer_64bit")) {
		return get_ext_proc("glVertexAttribL1ui64vNV");
	}

	unsupported("glVertexAttribL1ui64vNV");
	return piglit_dispatch_glVertexAttribL1ui64vNV;
}

static void APIENTRY
stub_glVertexAttribL1ui64vNV(GLuint index, const GLuint64EXT * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribL1ui64vNV = resolve_glVertexAttribL1ui64vNV();
	piglit_dispatch_glVertexAttribL1ui64vNV(index, v);
}

PFNGLVERTEXATTRIBL1UI64VNVPROC piglit_dispatch_glVertexAttribL1ui64vNV = stub_glVertexAttribL1ui64vNV;

static void*
resolve_glVertexAttribL2d(void)
{
	/* glVertexAttribL2d (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribL2d", 41);
	}

	/* glVertexAttribL2d (GL_ARB_vertex_attrib_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_attrib_64bit")) {
		return get_ext_proc("glVertexAttribL2d");
	}

	/* glVertexAttribL2dEXT (GL_EXT_vertex_attrib_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_attrib_64bit")) {
		return get_ext_proc("glVertexAttribL2dEXT");
	}

	unsupported("glVertexAttribL2d");
	return piglit_dispatch_glVertexAttribL2d;
}

static void APIENTRY
stub_glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y)
{
	check_initialized();
	piglit_dispatch_glVertexAttribL2d = resolve_glVertexAttribL2d();
	piglit_dispatch_glVertexAttribL2d(index, x, y);
}

PFNGLVERTEXATTRIBL2DPROC piglit_dispatch_glVertexAttribL2d = stub_glVertexAttribL2d;

static void*
resolve_glVertexAttribL2dv(void)
{
	/* glVertexAttribL2dv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribL2dv", 41);
	}

	/* glVertexAttribL2dv (GL_ARB_vertex_attrib_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_attrib_64bit")) {
		return get_ext_proc("glVertexAttribL2dv");
	}

	/* glVertexAttribL2dvEXT (GL_EXT_vertex_attrib_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_attrib_64bit")) {
		return get_ext_proc("glVertexAttribL2dvEXT");
	}

	unsupported("glVertexAttribL2dv");
	return piglit_dispatch_glVertexAttribL2dv;
}

static void APIENTRY
stub_glVertexAttribL2dv(GLuint index, const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribL2dv = resolve_glVertexAttribL2dv();
	piglit_dispatch_glVertexAttribL2dv(index, v);
}

PFNGLVERTEXATTRIBL2DVPROC piglit_dispatch_glVertexAttribL2dv = stub_glVertexAttribL2dv;

static void*
resolve_glVertexAttribL2i64NV(void)
{
	/* glVertexAttribL2i64NV (GL_NV_vertex_attrib_integer_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_attrib_integer_64bit")) {
		return get_ext_proc("glVertexAttribL2i64NV");
	}

	unsupported("glVertexAttribL2i64NV");
	return piglit_dispatch_glVertexAttribL2i64NV;
}

static void APIENTRY
stub_glVertexAttribL2i64NV(GLuint index, GLint64EXT x, GLint64EXT y)
{
	check_initialized();
	piglit_dispatch_glVertexAttribL2i64NV = resolve_glVertexAttribL2i64NV();
	piglit_dispatch_glVertexAttribL2i64NV(index, x, y);
}

PFNGLVERTEXATTRIBL2I64NVPROC piglit_dispatch_glVertexAttribL2i64NV = stub_glVertexAttribL2i64NV;

static void*
resolve_glVertexAttribL2i64vNV(void)
{
	/* glVertexAttribL2i64vNV (GL_NV_vertex_attrib_integer_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_attrib_integer_64bit")) {
		return get_ext_proc("glVertexAttribL2i64vNV");
	}

	unsupported("glVertexAttribL2i64vNV");
	return piglit_dispatch_glVertexAttribL2i64vNV;
}

static void APIENTRY
stub_glVertexAttribL2i64vNV(GLuint index, const GLint64EXT * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribL2i64vNV = resolve_glVertexAttribL2i64vNV();
	piglit_dispatch_glVertexAttribL2i64vNV(index, v);
}

PFNGLVERTEXATTRIBL2I64VNVPROC piglit_dispatch_glVertexAttribL2i64vNV = stub_glVertexAttribL2i64vNV;

static void*
resolve_glVertexAttribL2ui64NV(void)
{
	/* glVertexAttribL2ui64NV (GL_NV_vertex_attrib_integer_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_attrib_integer_64bit")) {
		return get_ext_proc("glVertexAttribL2ui64NV");
	}

	unsupported("glVertexAttribL2ui64NV");
	return piglit_dispatch_glVertexAttribL2ui64NV;
}

static void APIENTRY
stub_glVertexAttribL2ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y)
{
	check_initialized();
	piglit_dispatch_glVertexAttribL2ui64NV = resolve_glVertexAttribL2ui64NV();
	piglit_dispatch_glVertexAttribL2ui64NV(index, x, y);
}

PFNGLVERTEXATTRIBL2UI64NVPROC piglit_dispatch_glVertexAttribL2ui64NV = stub_glVertexAttribL2ui64NV;

static void*
resolve_glVertexAttribL2ui64vNV(void)
{
	/* glVertexAttribL2ui64vNV (GL_NV_vertex_attrib_integer_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_attrib_integer_64bit")) {
		return get_ext_proc("glVertexAttribL2ui64vNV");
	}

	unsupported("glVertexAttribL2ui64vNV");
	return piglit_dispatch_glVertexAttribL2ui64vNV;
}

static void APIENTRY
stub_glVertexAttribL2ui64vNV(GLuint index, const GLuint64EXT * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribL2ui64vNV = resolve_glVertexAttribL2ui64vNV();
	piglit_dispatch_glVertexAttribL2ui64vNV(index, v);
}

PFNGLVERTEXATTRIBL2UI64VNVPROC piglit_dispatch_glVertexAttribL2ui64vNV = stub_glVertexAttribL2ui64vNV;

static void*
resolve_glVertexAttribL3d(void)
{
	/* glVertexAttribL3d (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribL3d", 41);
	}

	/* glVertexAttribL3d (GL_ARB_vertex_attrib_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_attrib_64bit")) {
		return get_ext_proc("glVertexAttribL3d");
	}

	/* glVertexAttribL3dEXT (GL_EXT_vertex_attrib_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_attrib_64bit")) {
		return get_ext_proc("glVertexAttribL3dEXT");
	}

	unsupported("glVertexAttribL3d");
	return piglit_dispatch_glVertexAttribL3d;
}

static void APIENTRY
stub_glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
	check_initialized();
	piglit_dispatch_glVertexAttribL3d = resolve_glVertexAttribL3d();
	piglit_dispatch_glVertexAttribL3d(index, x, y, z);
}

PFNGLVERTEXATTRIBL3DPROC piglit_dispatch_glVertexAttribL3d = stub_glVertexAttribL3d;

static void*
resolve_glVertexAttribL3dv(void)
{
	/* glVertexAttribL3dv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribL3dv", 41);
	}

	/* glVertexAttribL3dv (GL_ARB_vertex_attrib_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_attrib_64bit")) {
		return get_ext_proc("glVertexAttribL3dv");
	}

	/* glVertexAttribL3dvEXT (GL_EXT_vertex_attrib_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_attrib_64bit")) {
		return get_ext_proc("glVertexAttribL3dvEXT");
	}

	unsupported("glVertexAttribL3dv");
	return piglit_dispatch_glVertexAttribL3dv;
}

static void APIENTRY
stub_glVertexAttribL3dv(GLuint index, const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribL3dv = resolve_glVertexAttribL3dv();
	piglit_dispatch_glVertexAttribL3dv(index, v);
}

PFNGLVERTEXATTRIBL3DVPROC piglit_dispatch_glVertexAttribL3dv = stub_glVertexAttribL3dv;

static void*
resolve_glVertexAttribL3i64NV(void)
{
	/* glVertexAttribL3i64NV (GL_NV_vertex_attrib_integer_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_attrib_integer_64bit")) {
		return get_ext_proc("glVertexAttribL3i64NV");
	}

	unsupported("glVertexAttribL3i64NV");
	return piglit_dispatch_glVertexAttribL3i64NV;
}

static void APIENTRY
stub_glVertexAttribL3i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
	check_initialized();
	piglit_dispatch_glVertexAttribL3i64NV = resolve_glVertexAttribL3i64NV();
	piglit_dispatch_glVertexAttribL3i64NV(index, x, y, z);
}

PFNGLVERTEXATTRIBL3I64NVPROC piglit_dispatch_glVertexAttribL3i64NV = stub_glVertexAttribL3i64NV;

static void*
resolve_glVertexAttribL3i64vNV(void)
{
	/* glVertexAttribL3i64vNV (GL_NV_vertex_attrib_integer_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_attrib_integer_64bit")) {
		return get_ext_proc("glVertexAttribL3i64vNV");
	}

	unsupported("glVertexAttribL3i64vNV");
	return piglit_dispatch_glVertexAttribL3i64vNV;
}

static void APIENTRY
stub_glVertexAttribL3i64vNV(GLuint index, const GLint64EXT * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribL3i64vNV = resolve_glVertexAttribL3i64vNV();
	piglit_dispatch_glVertexAttribL3i64vNV(index, v);
}

PFNGLVERTEXATTRIBL3I64VNVPROC piglit_dispatch_glVertexAttribL3i64vNV = stub_glVertexAttribL3i64vNV;

static void*
resolve_glVertexAttribL3ui64NV(void)
{
	/* glVertexAttribL3ui64NV (GL_NV_vertex_attrib_integer_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_attrib_integer_64bit")) {
		return get_ext_proc("glVertexAttribL3ui64NV");
	}

	unsupported("glVertexAttribL3ui64NV");
	return piglit_dispatch_glVertexAttribL3ui64NV;
}

static void APIENTRY
stub_glVertexAttribL3ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
	check_initialized();
	piglit_dispatch_glVertexAttribL3ui64NV = resolve_glVertexAttribL3ui64NV();
	piglit_dispatch_glVertexAttribL3ui64NV(index, x, y, z);
}

PFNGLVERTEXATTRIBL3UI64NVPROC piglit_dispatch_glVertexAttribL3ui64NV = stub_glVertexAttribL3ui64NV;

static void*
resolve_glVertexAttribL3ui64vNV(void)
{
	/* glVertexAttribL3ui64vNV (GL_NV_vertex_attrib_integer_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_attrib_integer_64bit")) {
		return get_ext_proc("glVertexAttribL3ui64vNV");
	}

	unsupported("glVertexAttribL3ui64vNV");
	return piglit_dispatch_glVertexAttribL3ui64vNV;
}

static void APIENTRY
stub_glVertexAttribL3ui64vNV(GLuint index, const GLuint64EXT * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribL3ui64vNV = resolve_glVertexAttribL3ui64vNV();
	piglit_dispatch_glVertexAttribL3ui64vNV(index, v);
}

PFNGLVERTEXATTRIBL3UI64VNVPROC piglit_dispatch_glVertexAttribL3ui64vNV = stub_glVertexAttribL3ui64vNV;

static void*
resolve_glVertexAttribL4d(void)
{
	/* glVertexAttribL4d (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribL4d", 41);
	}

	/* glVertexAttribL4d (GL_ARB_vertex_attrib_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_attrib_64bit")) {
		return get_ext_proc("glVertexAttribL4d");
	}

	/* glVertexAttribL4dEXT (GL_EXT_vertex_attrib_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_attrib_64bit")) {
		return get_ext_proc("glVertexAttribL4dEXT");
	}

	unsupported("glVertexAttribL4d");
	return piglit_dispatch_glVertexAttribL4d;
}

static void APIENTRY
stub_glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
	check_initialized();
	piglit_dispatch_glVertexAttribL4d = resolve_glVertexAttribL4d();
	piglit_dispatch_glVertexAttribL4d(index, x, y, z, w);
}

PFNGLVERTEXATTRIBL4DPROC piglit_dispatch_glVertexAttribL4d = stub_glVertexAttribL4d;

static void*
resolve_glVertexAttribL4dv(void)
{
	/* glVertexAttribL4dv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribL4dv", 41);
	}

	/* glVertexAttribL4dv (GL_ARB_vertex_attrib_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_attrib_64bit")) {
		return get_ext_proc("glVertexAttribL4dv");
	}

	/* glVertexAttribL4dvEXT (GL_EXT_vertex_attrib_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_attrib_64bit")) {
		return get_ext_proc("glVertexAttribL4dvEXT");
	}

	unsupported("glVertexAttribL4dv");
	return piglit_dispatch_glVertexAttribL4dv;
}

static void APIENTRY
stub_glVertexAttribL4dv(GLuint index, const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribL4dv = resolve_glVertexAttribL4dv();
	piglit_dispatch_glVertexAttribL4dv(index, v);
}

PFNGLVERTEXATTRIBL4DVPROC piglit_dispatch_glVertexAttribL4dv = stub_glVertexAttribL4dv;

static void*
resolve_glVertexAttribL4i64NV(void)
{
	/* glVertexAttribL4i64NV (GL_NV_vertex_attrib_integer_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_attrib_integer_64bit")) {
		return get_ext_proc("glVertexAttribL4i64NV");
	}

	unsupported("glVertexAttribL4i64NV");
	return piglit_dispatch_glVertexAttribL4i64NV;
}

static void APIENTRY
stub_glVertexAttribL4i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
	check_initialized();
	piglit_dispatch_glVertexAttribL4i64NV = resolve_glVertexAttribL4i64NV();
	piglit_dispatch_glVertexAttribL4i64NV(index, x, y, z, w);
}

PFNGLVERTEXATTRIBL4I64NVPROC piglit_dispatch_glVertexAttribL4i64NV = stub_glVertexAttribL4i64NV;

static void*
resolve_glVertexAttribL4i64vNV(void)
{
	/* glVertexAttribL4i64vNV (GL_NV_vertex_attrib_integer_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_attrib_integer_64bit")) {
		return get_ext_proc("glVertexAttribL4i64vNV");
	}

	unsupported("glVertexAttribL4i64vNV");
	return piglit_dispatch_glVertexAttribL4i64vNV;
}

static void APIENTRY
stub_glVertexAttribL4i64vNV(GLuint index, const GLint64EXT * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribL4i64vNV = resolve_glVertexAttribL4i64vNV();
	piglit_dispatch_glVertexAttribL4i64vNV(index, v);
}

PFNGLVERTEXATTRIBL4I64VNVPROC piglit_dispatch_glVertexAttribL4i64vNV = stub_glVertexAttribL4i64vNV;

static void*
resolve_glVertexAttribL4ui64NV(void)
{
	/* glVertexAttribL4ui64NV (GL_NV_vertex_attrib_integer_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_attrib_integer_64bit")) {
		return get_ext_proc("glVertexAttribL4ui64NV");
	}

	unsupported("glVertexAttribL4ui64NV");
	return piglit_dispatch_glVertexAttribL4ui64NV;
}

static void APIENTRY
stub_glVertexAttribL4ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
	check_initialized();
	piglit_dispatch_glVertexAttribL4ui64NV = resolve_glVertexAttribL4ui64NV();
	piglit_dispatch_glVertexAttribL4ui64NV(index, x, y, z, w);
}

PFNGLVERTEXATTRIBL4UI64NVPROC piglit_dispatch_glVertexAttribL4ui64NV = stub_glVertexAttribL4ui64NV;

static void*
resolve_glVertexAttribL4ui64vNV(void)
{
	/* glVertexAttribL4ui64vNV (GL_NV_vertex_attrib_integer_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_attrib_integer_64bit")) {
		return get_ext_proc("glVertexAttribL4ui64vNV");
	}

	unsupported("glVertexAttribL4ui64vNV");
	return piglit_dispatch_glVertexAttribL4ui64vNV;
}

static void APIENTRY
stub_glVertexAttribL4ui64vNV(GLuint index, const GLuint64EXT * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribL4ui64vNV = resolve_glVertexAttribL4ui64vNV();
	piglit_dispatch_glVertexAttribL4ui64vNV(index, v);
}

PFNGLVERTEXATTRIBL4UI64VNVPROC piglit_dispatch_glVertexAttribL4ui64vNV = stub_glVertexAttribL4ui64vNV;

static void*
resolve_glVertexAttribLFormat(void)
{
	/* glVertexAttribLFormat (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribLFormat", 43);
	}

	/* glVertexAttribLFormat (GL_ARB_vertex_attrib_binding) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_attrib_binding")) {
		return get_ext_proc("glVertexAttribLFormat");
	}

	unsupported("glVertexAttribLFormat");
	return piglit_dispatch_glVertexAttribLFormat;
}

static void APIENTRY
stub_glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
	check_initialized();
	piglit_dispatch_glVertexAttribLFormat = resolve_glVertexAttribLFormat();
	piglit_dispatch_glVertexAttribLFormat(attribindex, size, type, relativeoffset);
}

PFNGLVERTEXATTRIBLFORMATPROC piglit_dispatch_glVertexAttribLFormat = stub_glVertexAttribLFormat;

static void*
resolve_glVertexAttribLFormatNV(void)
{
	/* glVertexAttribLFormatNV (GL_NV_vertex_attrib_integer_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_attrib_integer_64bit")) {
		return get_ext_proc("glVertexAttribLFormatNV");
	}

	unsupported("glVertexAttribLFormatNV");
	return piglit_dispatch_glVertexAttribLFormatNV;
}

static void APIENTRY
stub_glVertexAttribLFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride)
{
	check_initialized();
	piglit_dispatch_glVertexAttribLFormatNV = resolve_glVertexAttribLFormatNV();
	piglit_dispatch_glVertexAttribLFormatNV(index, size, type, stride);
}

PFNGLVERTEXATTRIBLFORMATNVPROC piglit_dispatch_glVertexAttribLFormatNV = stub_glVertexAttribLFormatNV;

static void*
resolve_glVertexAttribLPointer(void)
{
	/* glVertexAttribLPointer (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribLPointer", 41);
	}

	/* glVertexAttribLPointer (GL_ARB_vertex_attrib_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_attrib_64bit")) {
		return get_ext_proc("glVertexAttribLPointer");
	}

	/* glVertexAttribLPointerEXT (GL_EXT_vertex_attrib_64bit) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_attrib_64bit")) {
		return get_ext_proc("glVertexAttribLPointerEXT");
	}

	unsupported("glVertexAttribLPointer");
	return piglit_dispatch_glVertexAttribLPointer;
}

static void APIENTRY
stub_glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer)
{
	check_initialized();
	piglit_dispatch_glVertexAttribLPointer = resolve_glVertexAttribLPointer();
	piglit_dispatch_glVertexAttribLPointer(index, size, type, stride, pointer);
}

PFNGLVERTEXATTRIBLPOINTERPROC piglit_dispatch_glVertexAttribLPointer = stub_glVertexAttribLPointer;

static void*
resolve_glVertexAttribP1ui(void)
{
	/* glVertexAttribP1ui (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribP1ui", 33);
	}

	/* glVertexAttribP1ui (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glVertexAttribP1ui");
	}

	unsupported("glVertexAttribP1ui");
	return piglit_dispatch_glVertexAttribP1ui;
}

static void APIENTRY
stub_glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
	check_initialized();
	piglit_dispatch_glVertexAttribP1ui = resolve_glVertexAttribP1ui();
	piglit_dispatch_glVertexAttribP1ui(index, type, normalized, value);
}

PFNGLVERTEXATTRIBP1UIPROC piglit_dispatch_glVertexAttribP1ui = stub_glVertexAttribP1ui;

static void*
resolve_glVertexAttribP1uiv(void)
{
	/* glVertexAttribP1uiv (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribP1uiv", 33);
	}

	/* glVertexAttribP1uiv (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glVertexAttribP1uiv");
	}

	unsupported("glVertexAttribP1uiv");
	return piglit_dispatch_glVertexAttribP1uiv;
}

static void APIENTRY
stub_glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value)
{
	check_initialized();
	piglit_dispatch_glVertexAttribP1uiv = resolve_glVertexAttribP1uiv();
	piglit_dispatch_glVertexAttribP1uiv(index, type, normalized, value);
}

PFNGLVERTEXATTRIBP1UIVPROC piglit_dispatch_glVertexAttribP1uiv = stub_glVertexAttribP1uiv;

static void*
resolve_glVertexAttribP2ui(void)
{
	/* glVertexAttribP2ui (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribP2ui", 33);
	}

	/* glVertexAttribP2ui (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glVertexAttribP2ui");
	}

	unsupported("glVertexAttribP2ui");
	return piglit_dispatch_glVertexAttribP2ui;
}

static void APIENTRY
stub_glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
	check_initialized();
	piglit_dispatch_glVertexAttribP2ui = resolve_glVertexAttribP2ui();
	piglit_dispatch_glVertexAttribP2ui(index, type, normalized, value);
}

PFNGLVERTEXATTRIBP2UIPROC piglit_dispatch_glVertexAttribP2ui = stub_glVertexAttribP2ui;

static void*
resolve_glVertexAttribP2uiv(void)
{
	/* glVertexAttribP2uiv (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribP2uiv", 33);
	}

	/* glVertexAttribP2uiv (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glVertexAttribP2uiv");
	}

	unsupported("glVertexAttribP2uiv");
	return piglit_dispatch_glVertexAttribP2uiv;
}

static void APIENTRY
stub_glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value)
{
	check_initialized();
	piglit_dispatch_glVertexAttribP2uiv = resolve_glVertexAttribP2uiv();
	piglit_dispatch_glVertexAttribP2uiv(index, type, normalized, value);
}

PFNGLVERTEXATTRIBP2UIVPROC piglit_dispatch_glVertexAttribP2uiv = stub_glVertexAttribP2uiv;

static void*
resolve_glVertexAttribP3ui(void)
{
	/* glVertexAttribP3ui (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribP3ui", 33);
	}

	/* glVertexAttribP3ui (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glVertexAttribP3ui");
	}

	unsupported("glVertexAttribP3ui");
	return piglit_dispatch_glVertexAttribP3ui;
}

static void APIENTRY
stub_glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
	check_initialized();
	piglit_dispatch_glVertexAttribP3ui = resolve_glVertexAttribP3ui();
	piglit_dispatch_glVertexAttribP3ui(index, type, normalized, value);
}

PFNGLVERTEXATTRIBP3UIPROC piglit_dispatch_glVertexAttribP3ui = stub_glVertexAttribP3ui;

static void*
resolve_glVertexAttribP3uiv(void)
{
	/* glVertexAttribP3uiv (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribP3uiv", 33);
	}

	/* glVertexAttribP3uiv (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glVertexAttribP3uiv");
	}

	unsupported("glVertexAttribP3uiv");
	return piglit_dispatch_glVertexAttribP3uiv;
}

static void APIENTRY
stub_glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value)
{
	check_initialized();
	piglit_dispatch_glVertexAttribP3uiv = resolve_glVertexAttribP3uiv();
	piglit_dispatch_glVertexAttribP3uiv(index, type, normalized, value);
}

PFNGLVERTEXATTRIBP3UIVPROC piglit_dispatch_glVertexAttribP3uiv = stub_glVertexAttribP3uiv;

static void*
resolve_glVertexAttribP4ui(void)
{
	/* glVertexAttribP4ui (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribP4ui", 33);
	}

	/* glVertexAttribP4ui (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glVertexAttribP4ui");
	}

	unsupported("glVertexAttribP4ui");
	return piglit_dispatch_glVertexAttribP4ui;
}

static void APIENTRY
stub_glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
	check_initialized();
	piglit_dispatch_glVertexAttribP4ui = resolve_glVertexAttribP4ui();
	piglit_dispatch_glVertexAttribP4ui(index, type, normalized, value);
}

PFNGLVERTEXATTRIBP4UIPROC piglit_dispatch_glVertexAttribP4ui = stub_glVertexAttribP4ui;

static void*
resolve_glVertexAttribP4uiv(void)
{
	/* glVertexAttribP4uiv (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribP4uiv", 33);
	}

	/* glVertexAttribP4uiv (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glVertexAttribP4uiv");
	}

	unsupported("glVertexAttribP4uiv");
	return piglit_dispatch_glVertexAttribP4uiv;
}

static void APIENTRY
stub_glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value)
{
	check_initialized();
	piglit_dispatch_glVertexAttribP4uiv = resolve_glVertexAttribP4uiv();
	piglit_dispatch_glVertexAttribP4uiv(index, type, normalized, value);
}

PFNGLVERTEXATTRIBP4UIVPROC piglit_dispatch_glVertexAttribP4uiv = stub_glVertexAttribP4uiv;

static void*
resolve_glVertexAttribParameteriAMD(void)
{
	/* glVertexAttribParameteriAMD (GL_AMD_interleaved_elements) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_AMD_interleaved_elements")) {
		return get_ext_proc("glVertexAttribParameteriAMD");
	}

	unsupported("glVertexAttribParameteriAMD");
	return piglit_dispatch_glVertexAttribParameteriAMD;
}

static void APIENTRY
stub_glVertexAttribParameteriAMD(GLuint index, GLenum pname, GLint param)
{
	check_initialized();
	piglit_dispatch_glVertexAttribParameteriAMD = resolve_glVertexAttribParameteriAMD();
	piglit_dispatch_glVertexAttribParameteriAMD(index, pname, param);
}

PFNGLVERTEXATTRIBPARAMETERIAMDPROC piglit_dispatch_glVertexAttribParameteriAMD = stub_glVertexAttribParameteriAMD;

static void*
resolve_glVertexAttribPointer(void)
{
	/* glVertexAttribPointer (GL_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexAttribPointer", 20);
	}

	/* glVertexAttribPointer (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glVertexAttribPointer", 20);
	}

	/* glVertexAttribPointerARB (GL_ARB_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_program")) {
		return get_ext_proc("glVertexAttribPointerARB");
	}

	/* glVertexAttribPointerARB (GL_ARB_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_shader")) {
		return get_ext_proc("glVertexAttribPointerARB");
	}

	unsupported("glVertexAttribPointer");
	return piglit_dispatch_glVertexAttribPointer;
}

static void APIENTRY
stub_glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer)
{
	check_initialized();
	piglit_dispatch_glVertexAttribPointer = resolve_glVertexAttribPointer();
	piglit_dispatch_glVertexAttribPointer(index, size, type, normalized, stride, pointer);
}

PFNGLVERTEXATTRIBPOINTERPROC piglit_dispatch_glVertexAttribPointer = stub_glVertexAttribPointer;

static void*
resolve_glVertexAttribPointerNV(void)
{
	/* glVertexAttribPointerNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttribPointerNV");
	}

	unsupported("glVertexAttribPointerNV");
	return piglit_dispatch_glVertexAttribPointerNV;
}

static void APIENTRY
stub_glVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, const void * pointer)
{
	check_initialized();
	piglit_dispatch_glVertexAttribPointerNV = resolve_glVertexAttribPointerNV();
	piglit_dispatch_glVertexAttribPointerNV(index, fsize, type, stride, pointer);
}

PFNGLVERTEXATTRIBPOINTERNVPROC piglit_dispatch_glVertexAttribPointerNV = stub_glVertexAttribPointerNV;

static void*
resolve_glVertexAttribs1dvNV(void)
{
	/* glVertexAttribs1dvNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttribs1dvNV");
	}

	unsupported("glVertexAttribs1dvNV");
	return piglit_dispatch_glVertexAttribs1dvNV;
}

static void APIENTRY
stub_glVertexAttribs1dvNV(GLuint index, GLsizei count, const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribs1dvNV = resolve_glVertexAttribs1dvNV();
	piglit_dispatch_glVertexAttribs1dvNV(index, count, v);
}

PFNGLVERTEXATTRIBS1DVNVPROC piglit_dispatch_glVertexAttribs1dvNV = stub_glVertexAttribs1dvNV;

static void*
resolve_glVertexAttribs1fvNV(void)
{
	/* glVertexAttribs1fvNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttribs1fvNV");
	}

	unsupported("glVertexAttribs1fvNV");
	return piglit_dispatch_glVertexAttribs1fvNV;
}

static void APIENTRY
stub_glVertexAttribs1fvNV(GLuint index, GLsizei count, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribs1fvNV = resolve_glVertexAttribs1fvNV();
	piglit_dispatch_glVertexAttribs1fvNV(index, count, v);
}

PFNGLVERTEXATTRIBS1FVNVPROC piglit_dispatch_glVertexAttribs1fvNV = stub_glVertexAttribs1fvNV;

static void*
resolve_glVertexAttribs1hvNV(void)
{
	/* glVertexAttribs1hvNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glVertexAttribs1hvNV");
	}

	unsupported("glVertexAttribs1hvNV");
	return piglit_dispatch_glVertexAttribs1hvNV;
}

static void APIENTRY
stub_glVertexAttribs1hvNV(GLuint index, GLsizei n, const GLhalfNV * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribs1hvNV = resolve_glVertexAttribs1hvNV();
	piglit_dispatch_glVertexAttribs1hvNV(index, n, v);
}

PFNGLVERTEXATTRIBS1HVNVPROC piglit_dispatch_glVertexAttribs1hvNV = stub_glVertexAttribs1hvNV;

static void*
resolve_glVertexAttribs1svNV(void)
{
	/* glVertexAttribs1svNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttribs1svNV");
	}

	unsupported("glVertexAttribs1svNV");
	return piglit_dispatch_glVertexAttribs1svNV;
}

static void APIENTRY
stub_glVertexAttribs1svNV(GLuint index, GLsizei count, const GLshort * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribs1svNV = resolve_glVertexAttribs1svNV();
	piglit_dispatch_glVertexAttribs1svNV(index, count, v);
}

PFNGLVERTEXATTRIBS1SVNVPROC piglit_dispatch_glVertexAttribs1svNV = stub_glVertexAttribs1svNV;

static void*
resolve_glVertexAttribs2dvNV(void)
{
	/* glVertexAttribs2dvNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttribs2dvNV");
	}

	unsupported("glVertexAttribs2dvNV");
	return piglit_dispatch_glVertexAttribs2dvNV;
}

static void APIENTRY
stub_glVertexAttribs2dvNV(GLuint index, GLsizei count, const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribs2dvNV = resolve_glVertexAttribs2dvNV();
	piglit_dispatch_glVertexAttribs2dvNV(index, count, v);
}

PFNGLVERTEXATTRIBS2DVNVPROC piglit_dispatch_glVertexAttribs2dvNV = stub_glVertexAttribs2dvNV;

static void*
resolve_glVertexAttribs2fvNV(void)
{
	/* glVertexAttribs2fvNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttribs2fvNV");
	}

	unsupported("glVertexAttribs2fvNV");
	return piglit_dispatch_glVertexAttribs2fvNV;
}

static void APIENTRY
stub_glVertexAttribs2fvNV(GLuint index, GLsizei count, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribs2fvNV = resolve_glVertexAttribs2fvNV();
	piglit_dispatch_glVertexAttribs2fvNV(index, count, v);
}

PFNGLVERTEXATTRIBS2FVNVPROC piglit_dispatch_glVertexAttribs2fvNV = stub_glVertexAttribs2fvNV;

static void*
resolve_glVertexAttribs2hvNV(void)
{
	/* glVertexAttribs2hvNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glVertexAttribs2hvNV");
	}

	unsupported("glVertexAttribs2hvNV");
	return piglit_dispatch_glVertexAttribs2hvNV;
}

static void APIENTRY
stub_glVertexAttribs2hvNV(GLuint index, GLsizei n, const GLhalfNV * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribs2hvNV = resolve_glVertexAttribs2hvNV();
	piglit_dispatch_glVertexAttribs2hvNV(index, n, v);
}

PFNGLVERTEXATTRIBS2HVNVPROC piglit_dispatch_glVertexAttribs2hvNV = stub_glVertexAttribs2hvNV;

static void*
resolve_glVertexAttribs2svNV(void)
{
	/* glVertexAttribs2svNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttribs2svNV");
	}

	unsupported("glVertexAttribs2svNV");
	return piglit_dispatch_glVertexAttribs2svNV;
}

static void APIENTRY
stub_glVertexAttribs2svNV(GLuint index, GLsizei count, const GLshort * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribs2svNV = resolve_glVertexAttribs2svNV();
	piglit_dispatch_glVertexAttribs2svNV(index, count, v);
}

PFNGLVERTEXATTRIBS2SVNVPROC piglit_dispatch_glVertexAttribs2svNV = stub_glVertexAttribs2svNV;

static void*
resolve_glVertexAttribs3dvNV(void)
{
	/* glVertexAttribs3dvNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttribs3dvNV");
	}

	unsupported("glVertexAttribs3dvNV");
	return piglit_dispatch_glVertexAttribs3dvNV;
}

static void APIENTRY
stub_glVertexAttribs3dvNV(GLuint index, GLsizei count, const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribs3dvNV = resolve_glVertexAttribs3dvNV();
	piglit_dispatch_glVertexAttribs3dvNV(index, count, v);
}

PFNGLVERTEXATTRIBS3DVNVPROC piglit_dispatch_glVertexAttribs3dvNV = stub_glVertexAttribs3dvNV;

static void*
resolve_glVertexAttribs3fvNV(void)
{
	/* glVertexAttribs3fvNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttribs3fvNV");
	}

	unsupported("glVertexAttribs3fvNV");
	return piglit_dispatch_glVertexAttribs3fvNV;
}

static void APIENTRY
stub_glVertexAttribs3fvNV(GLuint index, GLsizei count, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribs3fvNV = resolve_glVertexAttribs3fvNV();
	piglit_dispatch_glVertexAttribs3fvNV(index, count, v);
}

PFNGLVERTEXATTRIBS3FVNVPROC piglit_dispatch_glVertexAttribs3fvNV = stub_glVertexAttribs3fvNV;

static void*
resolve_glVertexAttribs3hvNV(void)
{
	/* glVertexAttribs3hvNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glVertexAttribs3hvNV");
	}

	unsupported("glVertexAttribs3hvNV");
	return piglit_dispatch_glVertexAttribs3hvNV;
}

static void APIENTRY
stub_glVertexAttribs3hvNV(GLuint index, GLsizei n, const GLhalfNV * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribs3hvNV = resolve_glVertexAttribs3hvNV();
	piglit_dispatch_glVertexAttribs3hvNV(index, n, v);
}

PFNGLVERTEXATTRIBS3HVNVPROC piglit_dispatch_glVertexAttribs3hvNV = stub_glVertexAttribs3hvNV;

static void*
resolve_glVertexAttribs3svNV(void)
{
	/* glVertexAttribs3svNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttribs3svNV");
	}

	unsupported("glVertexAttribs3svNV");
	return piglit_dispatch_glVertexAttribs3svNV;
}

static void APIENTRY
stub_glVertexAttribs3svNV(GLuint index, GLsizei count, const GLshort * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribs3svNV = resolve_glVertexAttribs3svNV();
	piglit_dispatch_glVertexAttribs3svNV(index, count, v);
}

PFNGLVERTEXATTRIBS3SVNVPROC piglit_dispatch_glVertexAttribs3svNV = stub_glVertexAttribs3svNV;

static void*
resolve_glVertexAttribs4dvNV(void)
{
	/* glVertexAttribs4dvNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttribs4dvNV");
	}

	unsupported("glVertexAttribs4dvNV");
	return piglit_dispatch_glVertexAttribs4dvNV;
}

static void APIENTRY
stub_glVertexAttribs4dvNV(GLuint index, GLsizei count, const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribs4dvNV = resolve_glVertexAttribs4dvNV();
	piglit_dispatch_glVertexAttribs4dvNV(index, count, v);
}

PFNGLVERTEXATTRIBS4DVNVPROC piglit_dispatch_glVertexAttribs4dvNV = stub_glVertexAttribs4dvNV;

static void*
resolve_glVertexAttribs4fvNV(void)
{
	/* glVertexAttribs4fvNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttribs4fvNV");
	}

	unsupported("glVertexAttribs4fvNV");
	return piglit_dispatch_glVertexAttribs4fvNV;
}

static void APIENTRY
stub_glVertexAttribs4fvNV(GLuint index, GLsizei count, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribs4fvNV = resolve_glVertexAttribs4fvNV();
	piglit_dispatch_glVertexAttribs4fvNV(index, count, v);
}

PFNGLVERTEXATTRIBS4FVNVPROC piglit_dispatch_glVertexAttribs4fvNV = stub_glVertexAttribs4fvNV;

static void*
resolve_glVertexAttribs4hvNV(void)
{
	/* glVertexAttribs4hvNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glVertexAttribs4hvNV");
	}

	unsupported("glVertexAttribs4hvNV");
	return piglit_dispatch_glVertexAttribs4hvNV;
}

static void APIENTRY
stub_glVertexAttribs4hvNV(GLuint index, GLsizei n, const GLhalfNV * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribs4hvNV = resolve_glVertexAttribs4hvNV();
	piglit_dispatch_glVertexAttribs4hvNV(index, n, v);
}

PFNGLVERTEXATTRIBS4HVNVPROC piglit_dispatch_glVertexAttribs4hvNV = stub_glVertexAttribs4hvNV;

static void*
resolve_glVertexAttribs4svNV(void)
{
	/* glVertexAttribs4svNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttribs4svNV");
	}

	unsupported("glVertexAttribs4svNV");
	return piglit_dispatch_glVertexAttribs4svNV;
}

static void APIENTRY
stub_glVertexAttribs4svNV(GLuint index, GLsizei count, const GLshort * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribs4svNV = resolve_glVertexAttribs4svNV();
	piglit_dispatch_glVertexAttribs4svNV(index, count, v);
}

PFNGLVERTEXATTRIBS4SVNVPROC piglit_dispatch_glVertexAttribs4svNV = stub_glVertexAttribs4svNV;

static void*
resolve_glVertexAttribs4ubvNV(void)
{
	/* glVertexAttribs4ubvNV (GL_NV_vertex_program) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_program")) {
		return get_ext_proc("glVertexAttribs4ubvNV");
	}

	unsupported("glVertexAttribs4ubvNV");
	return piglit_dispatch_glVertexAttribs4ubvNV;
}

static void APIENTRY
stub_glVertexAttribs4ubvNV(GLuint index, GLsizei count, const GLubyte * v)
{
	check_initialized();
	piglit_dispatch_glVertexAttribs4ubvNV = resolve_glVertexAttribs4ubvNV();
	piglit_dispatch_glVertexAttribs4ubvNV(index, count, v);
}

PFNGLVERTEXATTRIBS4UBVNVPROC piglit_dispatch_glVertexAttribs4ubvNV = stub_glVertexAttribs4ubvNV;

static void*
resolve_glVertexBindingDivisor(void)
{
	/* glVertexBindingDivisor (GL_VERSION_4_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexBindingDivisor", 43);
	}

	/* glVertexBindingDivisor (GL_ES_VERSION_3_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glVertexBindingDivisor", 31);
	}

	/* glVertexBindingDivisor (GL_ARB_vertex_attrib_binding) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_attrib_binding")) {
		return get_ext_proc("glVertexBindingDivisor");
	}

	unsupported("glVertexBindingDivisor");
	return piglit_dispatch_glVertexBindingDivisor;
}

static void APIENTRY
stub_glVertexBindingDivisor(GLuint bindingindex, GLuint divisor)
{
	check_initialized();
	piglit_dispatch_glVertexBindingDivisor = resolve_glVertexBindingDivisor();
	piglit_dispatch_glVertexBindingDivisor(bindingindex, divisor);
}

PFNGLVERTEXBINDINGDIVISORPROC piglit_dispatch_glVertexBindingDivisor = stub_glVertexBindingDivisor;

static void*
resolve_glVertexBlendARB(void)
{
	/* glVertexBlendARB (GL_ARB_vertex_blend) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_blend")) {
		return get_ext_proc("glVertexBlendARB");
	}

	unsupported("glVertexBlendARB");
	return piglit_dispatch_glVertexBlendARB;
}

static void APIENTRY
stub_glVertexBlendARB(GLint count)
{
	check_initialized();
	piglit_dispatch_glVertexBlendARB = resolve_glVertexBlendARB();
	piglit_dispatch_glVertexBlendARB(count);
}

PFNGLVERTEXBLENDARBPROC piglit_dispatch_glVertexBlendARB = stub_glVertexBlendARB;

static void*
resolve_glVertexBlendEnvfATI(void)
{
	/* glVertexBlendEnvfATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glVertexBlendEnvfATI");
	}

	unsupported("glVertexBlendEnvfATI");
	return piglit_dispatch_glVertexBlendEnvfATI;
}

static void APIENTRY
stub_glVertexBlendEnvfATI(GLenum pname, GLfloat param)
{
	check_initialized();
	piglit_dispatch_glVertexBlendEnvfATI = resolve_glVertexBlendEnvfATI();
	piglit_dispatch_glVertexBlendEnvfATI(pname, param);
}

PFNGLVERTEXBLENDENVFATIPROC piglit_dispatch_glVertexBlendEnvfATI = stub_glVertexBlendEnvfATI;

static void*
resolve_glVertexBlendEnviATI(void)
{
	/* glVertexBlendEnviATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glVertexBlendEnviATI");
	}

	unsupported("glVertexBlendEnviATI");
	return piglit_dispatch_glVertexBlendEnviATI;
}

static void APIENTRY
stub_glVertexBlendEnviATI(GLenum pname, GLint param)
{
	check_initialized();
	piglit_dispatch_glVertexBlendEnviATI = resolve_glVertexBlendEnviATI();
	piglit_dispatch_glVertexBlendEnviATI(pname, param);
}

PFNGLVERTEXBLENDENVIATIPROC piglit_dispatch_glVertexBlendEnviATI = stub_glVertexBlendEnviATI;

static void*
resolve_glVertexFormatNV(void)
{
	/* glVertexFormatNV (GL_NV_vertex_buffer_unified_memory) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_vertex_buffer_unified_memory")) {
		return get_ext_proc("glVertexFormatNV");
	}

	unsupported("glVertexFormatNV");
	return piglit_dispatch_glVertexFormatNV;
}

static void APIENTRY
stub_glVertexFormatNV(GLint size, GLenum type, GLsizei stride)
{
	check_initialized();
	piglit_dispatch_glVertexFormatNV = resolve_glVertexFormatNV();
	piglit_dispatch_glVertexFormatNV(size, type, stride);
}

PFNGLVERTEXFORMATNVPROC piglit_dispatch_glVertexFormatNV = stub_glVertexFormatNV;

static void*
resolve_glVertexP2ui(void)
{
	/* glVertexP2ui (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexP2ui", 33);
	}

	/* glVertexP2ui (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glVertexP2ui");
	}

	unsupported("glVertexP2ui");
	return piglit_dispatch_glVertexP2ui;
}

static void APIENTRY
stub_glVertexP2ui(GLenum type, GLuint value)
{
	check_initialized();
	piglit_dispatch_glVertexP2ui = resolve_glVertexP2ui();
	piglit_dispatch_glVertexP2ui(type, value);
}

PFNGLVERTEXP2UIPROC piglit_dispatch_glVertexP2ui = stub_glVertexP2ui;

static void*
resolve_glVertexP2uiv(void)
{
	/* glVertexP2uiv (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexP2uiv", 33);
	}

	/* glVertexP2uiv (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glVertexP2uiv");
	}

	unsupported("glVertexP2uiv");
	return piglit_dispatch_glVertexP2uiv;
}

static void APIENTRY
stub_glVertexP2uiv(GLenum type, const GLuint * value)
{
	check_initialized();
	piglit_dispatch_glVertexP2uiv = resolve_glVertexP2uiv();
	piglit_dispatch_glVertexP2uiv(type, value);
}

PFNGLVERTEXP2UIVPROC piglit_dispatch_glVertexP2uiv = stub_glVertexP2uiv;

static void*
resolve_glVertexP3ui(void)
{
	/* glVertexP3ui (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexP3ui", 33);
	}

	/* glVertexP3ui (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glVertexP3ui");
	}

	unsupported("glVertexP3ui");
	return piglit_dispatch_glVertexP3ui;
}

static void APIENTRY
stub_glVertexP3ui(GLenum type, GLuint value)
{
	check_initialized();
	piglit_dispatch_glVertexP3ui = resolve_glVertexP3ui();
	piglit_dispatch_glVertexP3ui(type, value);
}

PFNGLVERTEXP3UIPROC piglit_dispatch_glVertexP3ui = stub_glVertexP3ui;

static void*
resolve_glVertexP3uiv(void)
{
	/* glVertexP3uiv (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexP3uiv", 33);
	}

	/* glVertexP3uiv (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glVertexP3uiv");
	}

	unsupported("glVertexP3uiv");
	return piglit_dispatch_glVertexP3uiv;
}

static void APIENTRY
stub_glVertexP3uiv(GLenum type, const GLuint * value)
{
	check_initialized();
	piglit_dispatch_glVertexP3uiv = resolve_glVertexP3uiv();
	piglit_dispatch_glVertexP3uiv(type, value);
}

PFNGLVERTEXP3UIVPROC piglit_dispatch_glVertexP3uiv = stub_glVertexP3uiv;

static void*
resolve_glVertexP4ui(void)
{
	/* glVertexP4ui (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexP4ui", 33);
	}

	/* glVertexP4ui (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glVertexP4ui");
	}

	unsupported("glVertexP4ui");
	return piglit_dispatch_glVertexP4ui;
}

static void APIENTRY
stub_glVertexP4ui(GLenum type, GLuint value)
{
	check_initialized();
	piglit_dispatch_glVertexP4ui = resolve_glVertexP4ui();
	piglit_dispatch_glVertexP4ui(type, value);
}

PFNGLVERTEXP4UIPROC piglit_dispatch_glVertexP4ui = stub_glVertexP4ui;

static void*
resolve_glVertexP4uiv(void)
{
	/* glVertexP4uiv (GL_VERSION_3_3) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexP4uiv", 33);
	}

	/* glVertexP4uiv (GL_ARB_vertex_type_2_10_10_10_rev) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_type_2_10_10_10_rev")) {
		return get_ext_proc("glVertexP4uiv");
	}

	unsupported("glVertexP4uiv");
	return piglit_dispatch_glVertexP4uiv;
}

static void APIENTRY
stub_glVertexP4uiv(GLenum type, const GLuint * value)
{
	check_initialized();
	piglit_dispatch_glVertexP4uiv = resolve_glVertexP4uiv();
	piglit_dispatch_glVertexP4uiv(type, value);
}

PFNGLVERTEXP4UIVPROC piglit_dispatch_glVertexP4uiv = stub_glVertexP4uiv;

static void*
resolve_glVertexPointer(void)
{
	/* glVertexPointer (GL_VERSION_1_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glVertexPointer", 11);
	}

	/* glVertexPointer (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glVertexPointer", 10);
	}

	unsupported("glVertexPointer");
	return piglit_dispatch_glVertexPointer;
}

static void APIENTRY
stub_glVertexPointer(GLint size, GLenum type, GLsizei stride, const void * pointer)
{
	check_initialized();
	piglit_dispatch_glVertexPointer = resolve_glVertexPointer();
	piglit_dispatch_glVertexPointer(size, type, stride, pointer);
}

PFNGLVERTEXPOINTERPROC piglit_dispatch_glVertexPointer = stub_glVertexPointer;

static void*
resolve_glVertexPointerEXT(void)
{
	/* glVertexPointerEXT (GL_EXT_vertex_array) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_array")) {
		return get_ext_proc("glVertexPointerEXT");
	}

	unsupported("glVertexPointerEXT");
	return piglit_dispatch_glVertexPointerEXT;
}

static void APIENTRY
stub_glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer)
{
	check_initialized();
	piglit_dispatch_glVertexPointerEXT = resolve_glVertexPointerEXT();
	piglit_dispatch_glVertexPointerEXT(size, type, stride, count, pointer);
}

PFNGLVERTEXPOINTEREXTPROC piglit_dispatch_glVertexPointerEXT = stub_glVertexPointerEXT;

static void*
resolve_glVertexPointerListIBM(void)
{
	/* glVertexPointerListIBM (GL_IBM_vertex_array_lists) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_IBM_vertex_array_lists")) {
		return get_ext_proc("glVertexPointerListIBM");
	}

	unsupported("glVertexPointerListIBM");
	return piglit_dispatch_glVertexPointerListIBM;
}

static void APIENTRY
stub_glVertexPointerListIBM(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride)
{
	check_initialized();
	piglit_dispatch_glVertexPointerListIBM = resolve_glVertexPointerListIBM();
	piglit_dispatch_glVertexPointerListIBM(size, type, stride, pointer, ptrstride);
}

PFNGLVERTEXPOINTERLISTIBMPROC piglit_dispatch_glVertexPointerListIBM = stub_glVertexPointerListIBM;

static void*
resolve_glVertexPointervINTEL(void)
{
	/* glVertexPointervINTEL (GL_INTEL_parallel_arrays) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_INTEL_parallel_arrays")) {
		return get_ext_proc("glVertexPointervINTEL");
	}

	unsupported("glVertexPointervINTEL");
	return piglit_dispatch_glVertexPointervINTEL;
}

static void APIENTRY
stub_glVertexPointervINTEL(GLint size, GLenum type, const void ** pointer)
{
	check_initialized();
	piglit_dispatch_glVertexPointervINTEL = resolve_glVertexPointervINTEL();
	piglit_dispatch_glVertexPointervINTEL(size, type, pointer);
}

PFNGLVERTEXPOINTERVINTELPROC piglit_dispatch_glVertexPointervINTEL = stub_glVertexPointervINTEL;

static void*
resolve_glVertexStream1dATI(void)
{
	/* glVertexStream1dATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glVertexStream1dATI");
	}

	unsupported("glVertexStream1dATI");
	return piglit_dispatch_glVertexStream1dATI;
}

static void APIENTRY
stub_glVertexStream1dATI(GLenum stream, GLdouble x)
{
	check_initialized();
	piglit_dispatch_glVertexStream1dATI = resolve_glVertexStream1dATI();
	piglit_dispatch_glVertexStream1dATI(stream, x);
}

PFNGLVERTEXSTREAM1DATIPROC piglit_dispatch_glVertexStream1dATI = stub_glVertexStream1dATI;

static void*
resolve_glVertexStream1dvATI(void)
{
	/* glVertexStream1dvATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glVertexStream1dvATI");
	}

	unsupported("glVertexStream1dvATI");
	return piglit_dispatch_glVertexStream1dvATI;
}

static void APIENTRY
stub_glVertexStream1dvATI(GLenum stream, const GLdouble * coords)
{
	check_initialized();
	piglit_dispatch_glVertexStream1dvATI = resolve_glVertexStream1dvATI();
	piglit_dispatch_glVertexStream1dvATI(stream, coords);
}

PFNGLVERTEXSTREAM1DVATIPROC piglit_dispatch_glVertexStream1dvATI = stub_glVertexStream1dvATI;

static void*
resolve_glVertexStream1fATI(void)
{
	/* glVertexStream1fATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glVertexStream1fATI");
	}

	unsupported("glVertexStream1fATI");
	return piglit_dispatch_glVertexStream1fATI;
}

static void APIENTRY
stub_glVertexStream1fATI(GLenum stream, GLfloat x)
{
	check_initialized();
	piglit_dispatch_glVertexStream1fATI = resolve_glVertexStream1fATI();
	piglit_dispatch_glVertexStream1fATI(stream, x);
}

PFNGLVERTEXSTREAM1FATIPROC piglit_dispatch_glVertexStream1fATI = stub_glVertexStream1fATI;

static void*
resolve_glVertexStream1fvATI(void)
{
	/* glVertexStream1fvATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glVertexStream1fvATI");
	}

	unsupported("glVertexStream1fvATI");
	return piglit_dispatch_glVertexStream1fvATI;
}

static void APIENTRY
stub_glVertexStream1fvATI(GLenum stream, const GLfloat * coords)
{
	check_initialized();
	piglit_dispatch_glVertexStream1fvATI = resolve_glVertexStream1fvATI();
	piglit_dispatch_glVertexStream1fvATI(stream, coords);
}

PFNGLVERTEXSTREAM1FVATIPROC piglit_dispatch_glVertexStream1fvATI = stub_glVertexStream1fvATI;

static void*
resolve_glVertexStream1iATI(void)
{
	/* glVertexStream1iATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glVertexStream1iATI");
	}

	unsupported("glVertexStream1iATI");
	return piglit_dispatch_glVertexStream1iATI;
}

static void APIENTRY
stub_glVertexStream1iATI(GLenum stream, GLint x)
{
	check_initialized();
	piglit_dispatch_glVertexStream1iATI = resolve_glVertexStream1iATI();
	piglit_dispatch_glVertexStream1iATI(stream, x);
}

PFNGLVERTEXSTREAM1IATIPROC piglit_dispatch_glVertexStream1iATI = stub_glVertexStream1iATI;

static void*
resolve_glVertexStream1ivATI(void)
{
	/* glVertexStream1ivATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glVertexStream1ivATI");
	}

	unsupported("glVertexStream1ivATI");
	return piglit_dispatch_glVertexStream1ivATI;
}

static void APIENTRY
stub_glVertexStream1ivATI(GLenum stream, const GLint * coords)
{
	check_initialized();
	piglit_dispatch_glVertexStream1ivATI = resolve_glVertexStream1ivATI();
	piglit_dispatch_glVertexStream1ivATI(stream, coords);
}

PFNGLVERTEXSTREAM1IVATIPROC piglit_dispatch_glVertexStream1ivATI = stub_glVertexStream1ivATI;

static void*
resolve_glVertexStream1sATI(void)
{
	/* glVertexStream1sATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glVertexStream1sATI");
	}

	unsupported("glVertexStream1sATI");
	return piglit_dispatch_glVertexStream1sATI;
}

static void APIENTRY
stub_glVertexStream1sATI(GLenum stream, GLshort x)
{
	check_initialized();
	piglit_dispatch_glVertexStream1sATI = resolve_glVertexStream1sATI();
	piglit_dispatch_glVertexStream1sATI(stream, x);
}

PFNGLVERTEXSTREAM1SATIPROC piglit_dispatch_glVertexStream1sATI = stub_glVertexStream1sATI;

static void*
resolve_glVertexStream1svATI(void)
{
	/* glVertexStream1svATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glVertexStream1svATI");
	}

	unsupported("glVertexStream1svATI");
	return piglit_dispatch_glVertexStream1svATI;
}

static void APIENTRY
stub_glVertexStream1svATI(GLenum stream, const GLshort * coords)
{
	check_initialized();
	piglit_dispatch_glVertexStream1svATI = resolve_glVertexStream1svATI();
	piglit_dispatch_glVertexStream1svATI(stream, coords);
}

PFNGLVERTEXSTREAM1SVATIPROC piglit_dispatch_glVertexStream1svATI = stub_glVertexStream1svATI;

static void*
resolve_glVertexStream2dATI(void)
{
	/* glVertexStream2dATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glVertexStream2dATI");
	}

	unsupported("glVertexStream2dATI");
	return piglit_dispatch_glVertexStream2dATI;
}

static void APIENTRY
stub_glVertexStream2dATI(GLenum stream, GLdouble x, GLdouble y)
{
	check_initialized();
	piglit_dispatch_glVertexStream2dATI = resolve_glVertexStream2dATI();
	piglit_dispatch_glVertexStream2dATI(stream, x, y);
}

PFNGLVERTEXSTREAM2DATIPROC piglit_dispatch_glVertexStream2dATI = stub_glVertexStream2dATI;

static void*
resolve_glVertexStream2dvATI(void)
{
	/* glVertexStream2dvATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glVertexStream2dvATI");
	}

	unsupported("glVertexStream2dvATI");
	return piglit_dispatch_glVertexStream2dvATI;
}

static void APIENTRY
stub_glVertexStream2dvATI(GLenum stream, const GLdouble * coords)
{
	check_initialized();
	piglit_dispatch_glVertexStream2dvATI = resolve_glVertexStream2dvATI();
	piglit_dispatch_glVertexStream2dvATI(stream, coords);
}

PFNGLVERTEXSTREAM2DVATIPROC piglit_dispatch_glVertexStream2dvATI = stub_glVertexStream2dvATI;

static void*
resolve_glVertexStream2fATI(void)
{
	/* glVertexStream2fATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glVertexStream2fATI");
	}

	unsupported("glVertexStream2fATI");
	return piglit_dispatch_glVertexStream2fATI;
}

static void APIENTRY
stub_glVertexStream2fATI(GLenum stream, GLfloat x, GLfloat y)
{
	check_initialized();
	piglit_dispatch_glVertexStream2fATI = resolve_glVertexStream2fATI();
	piglit_dispatch_glVertexStream2fATI(stream, x, y);
}

PFNGLVERTEXSTREAM2FATIPROC piglit_dispatch_glVertexStream2fATI = stub_glVertexStream2fATI;

static void*
resolve_glVertexStream2fvATI(void)
{
	/* glVertexStream2fvATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glVertexStream2fvATI");
	}

	unsupported("glVertexStream2fvATI");
	return piglit_dispatch_glVertexStream2fvATI;
}

static void APIENTRY
stub_glVertexStream2fvATI(GLenum stream, const GLfloat * coords)
{
	check_initialized();
	piglit_dispatch_glVertexStream2fvATI = resolve_glVertexStream2fvATI();
	piglit_dispatch_glVertexStream2fvATI(stream, coords);
}

PFNGLVERTEXSTREAM2FVATIPROC piglit_dispatch_glVertexStream2fvATI = stub_glVertexStream2fvATI;

static void*
resolve_glVertexStream2iATI(void)
{
	/* glVertexStream2iATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glVertexStream2iATI");
	}

	unsupported("glVertexStream2iATI");
	return piglit_dispatch_glVertexStream2iATI;
}

static void APIENTRY
stub_glVertexStream2iATI(GLenum stream, GLint x, GLint y)
{
	check_initialized();
	piglit_dispatch_glVertexStream2iATI = resolve_glVertexStream2iATI();
	piglit_dispatch_glVertexStream2iATI(stream, x, y);
}

PFNGLVERTEXSTREAM2IATIPROC piglit_dispatch_glVertexStream2iATI = stub_glVertexStream2iATI;

static void*
resolve_glVertexStream2ivATI(void)
{
	/* glVertexStream2ivATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glVertexStream2ivATI");
	}

	unsupported("glVertexStream2ivATI");
	return piglit_dispatch_glVertexStream2ivATI;
}

static void APIENTRY
stub_glVertexStream2ivATI(GLenum stream, const GLint * coords)
{
	check_initialized();
	piglit_dispatch_glVertexStream2ivATI = resolve_glVertexStream2ivATI();
	piglit_dispatch_glVertexStream2ivATI(stream, coords);
}

PFNGLVERTEXSTREAM2IVATIPROC piglit_dispatch_glVertexStream2ivATI = stub_glVertexStream2ivATI;

static void*
resolve_glVertexStream2sATI(void)
{
	/* glVertexStream2sATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glVertexStream2sATI");
	}

	unsupported("glVertexStream2sATI");
	return piglit_dispatch_glVertexStream2sATI;
}

static void APIENTRY
stub_glVertexStream2sATI(GLenum stream, GLshort x, GLshort y)
{
	check_initialized();
	piglit_dispatch_glVertexStream2sATI = resolve_glVertexStream2sATI();
	piglit_dispatch_glVertexStream2sATI(stream, x, y);
}

PFNGLVERTEXSTREAM2SATIPROC piglit_dispatch_glVertexStream2sATI = stub_glVertexStream2sATI;

static void*
resolve_glVertexStream2svATI(void)
{
	/* glVertexStream2svATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glVertexStream2svATI");
	}

	unsupported("glVertexStream2svATI");
	return piglit_dispatch_glVertexStream2svATI;
}

static void APIENTRY
stub_glVertexStream2svATI(GLenum stream, const GLshort * coords)
{
	check_initialized();
	piglit_dispatch_glVertexStream2svATI = resolve_glVertexStream2svATI();
	piglit_dispatch_glVertexStream2svATI(stream, coords);
}

PFNGLVERTEXSTREAM2SVATIPROC piglit_dispatch_glVertexStream2svATI = stub_glVertexStream2svATI;

static void*
resolve_glVertexStream3dATI(void)
{
	/* glVertexStream3dATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glVertexStream3dATI");
	}

	unsupported("glVertexStream3dATI");
	return piglit_dispatch_glVertexStream3dATI;
}

static void APIENTRY
stub_glVertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z)
{
	check_initialized();
	piglit_dispatch_glVertexStream3dATI = resolve_glVertexStream3dATI();
	piglit_dispatch_glVertexStream3dATI(stream, x, y, z);
}

PFNGLVERTEXSTREAM3DATIPROC piglit_dispatch_glVertexStream3dATI = stub_glVertexStream3dATI;

static void*
resolve_glVertexStream3dvATI(void)
{
	/* glVertexStream3dvATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glVertexStream3dvATI");
	}

	unsupported("glVertexStream3dvATI");
	return piglit_dispatch_glVertexStream3dvATI;
}

static void APIENTRY
stub_glVertexStream3dvATI(GLenum stream, const GLdouble * coords)
{
	check_initialized();
	piglit_dispatch_glVertexStream3dvATI = resolve_glVertexStream3dvATI();
	piglit_dispatch_glVertexStream3dvATI(stream, coords);
}

PFNGLVERTEXSTREAM3DVATIPROC piglit_dispatch_glVertexStream3dvATI = stub_glVertexStream3dvATI;

static void*
resolve_glVertexStream3fATI(void)
{
	/* glVertexStream3fATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glVertexStream3fATI");
	}

	unsupported("glVertexStream3fATI");
	return piglit_dispatch_glVertexStream3fATI;
}

static void APIENTRY
stub_glVertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z)
{
	check_initialized();
	piglit_dispatch_glVertexStream3fATI = resolve_glVertexStream3fATI();
	piglit_dispatch_glVertexStream3fATI(stream, x, y, z);
}

PFNGLVERTEXSTREAM3FATIPROC piglit_dispatch_glVertexStream3fATI = stub_glVertexStream3fATI;

static void*
resolve_glVertexStream3fvATI(void)
{
	/* glVertexStream3fvATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glVertexStream3fvATI");
	}

	unsupported("glVertexStream3fvATI");
	return piglit_dispatch_glVertexStream3fvATI;
}

static void APIENTRY
stub_glVertexStream3fvATI(GLenum stream, const GLfloat * coords)
{
	check_initialized();
	piglit_dispatch_glVertexStream3fvATI = resolve_glVertexStream3fvATI();
	piglit_dispatch_glVertexStream3fvATI(stream, coords);
}

PFNGLVERTEXSTREAM3FVATIPROC piglit_dispatch_glVertexStream3fvATI = stub_glVertexStream3fvATI;

static void*
resolve_glVertexStream3iATI(void)
{
	/* glVertexStream3iATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glVertexStream3iATI");
	}

	unsupported("glVertexStream3iATI");
	return piglit_dispatch_glVertexStream3iATI;
}

static void APIENTRY
stub_glVertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z)
{
	check_initialized();
	piglit_dispatch_glVertexStream3iATI = resolve_glVertexStream3iATI();
	piglit_dispatch_glVertexStream3iATI(stream, x, y, z);
}

PFNGLVERTEXSTREAM3IATIPROC piglit_dispatch_glVertexStream3iATI = stub_glVertexStream3iATI;

static void*
resolve_glVertexStream3ivATI(void)
{
	/* glVertexStream3ivATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glVertexStream3ivATI");
	}

	unsupported("glVertexStream3ivATI");
	return piglit_dispatch_glVertexStream3ivATI;
}

static void APIENTRY
stub_glVertexStream3ivATI(GLenum stream, const GLint * coords)
{
	check_initialized();
	piglit_dispatch_glVertexStream3ivATI = resolve_glVertexStream3ivATI();
	piglit_dispatch_glVertexStream3ivATI(stream, coords);
}

PFNGLVERTEXSTREAM3IVATIPROC piglit_dispatch_glVertexStream3ivATI = stub_glVertexStream3ivATI;

static void*
resolve_glVertexStream3sATI(void)
{
	/* glVertexStream3sATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glVertexStream3sATI");
	}

	unsupported("glVertexStream3sATI");
	return piglit_dispatch_glVertexStream3sATI;
}

static void APIENTRY
stub_glVertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z)
{
	check_initialized();
	piglit_dispatch_glVertexStream3sATI = resolve_glVertexStream3sATI();
	piglit_dispatch_glVertexStream3sATI(stream, x, y, z);
}

PFNGLVERTEXSTREAM3SATIPROC piglit_dispatch_glVertexStream3sATI = stub_glVertexStream3sATI;

static void*
resolve_glVertexStream3svATI(void)
{
	/* glVertexStream3svATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glVertexStream3svATI");
	}

	unsupported("glVertexStream3svATI");
	return piglit_dispatch_glVertexStream3svATI;
}

static void APIENTRY
stub_glVertexStream3svATI(GLenum stream, const GLshort * coords)
{
	check_initialized();
	piglit_dispatch_glVertexStream3svATI = resolve_glVertexStream3svATI();
	piglit_dispatch_glVertexStream3svATI(stream, coords);
}

PFNGLVERTEXSTREAM3SVATIPROC piglit_dispatch_glVertexStream3svATI = stub_glVertexStream3svATI;

static void*
resolve_glVertexStream4dATI(void)
{
	/* glVertexStream4dATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glVertexStream4dATI");
	}

	unsupported("glVertexStream4dATI");
	return piglit_dispatch_glVertexStream4dATI;
}

static void APIENTRY
stub_glVertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
	check_initialized();
	piglit_dispatch_glVertexStream4dATI = resolve_glVertexStream4dATI();
	piglit_dispatch_glVertexStream4dATI(stream, x, y, z, w);
}

PFNGLVERTEXSTREAM4DATIPROC piglit_dispatch_glVertexStream4dATI = stub_glVertexStream4dATI;

static void*
resolve_glVertexStream4dvATI(void)
{
	/* glVertexStream4dvATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glVertexStream4dvATI");
	}

	unsupported("glVertexStream4dvATI");
	return piglit_dispatch_glVertexStream4dvATI;
}

static void APIENTRY
stub_glVertexStream4dvATI(GLenum stream, const GLdouble * coords)
{
	check_initialized();
	piglit_dispatch_glVertexStream4dvATI = resolve_glVertexStream4dvATI();
	piglit_dispatch_glVertexStream4dvATI(stream, coords);
}

PFNGLVERTEXSTREAM4DVATIPROC piglit_dispatch_glVertexStream4dvATI = stub_glVertexStream4dvATI;

static void*
resolve_glVertexStream4fATI(void)
{
	/* glVertexStream4fATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glVertexStream4fATI");
	}

	unsupported("glVertexStream4fATI");
	return piglit_dispatch_glVertexStream4fATI;
}

static void APIENTRY
stub_glVertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
	check_initialized();
	piglit_dispatch_glVertexStream4fATI = resolve_glVertexStream4fATI();
	piglit_dispatch_glVertexStream4fATI(stream, x, y, z, w);
}

PFNGLVERTEXSTREAM4FATIPROC piglit_dispatch_glVertexStream4fATI = stub_glVertexStream4fATI;

static void*
resolve_glVertexStream4fvATI(void)
{
	/* glVertexStream4fvATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glVertexStream4fvATI");
	}

	unsupported("glVertexStream4fvATI");
	return piglit_dispatch_glVertexStream4fvATI;
}

static void APIENTRY
stub_glVertexStream4fvATI(GLenum stream, const GLfloat * coords)
{
	check_initialized();
	piglit_dispatch_glVertexStream4fvATI = resolve_glVertexStream4fvATI();
	piglit_dispatch_glVertexStream4fvATI(stream, coords);
}

PFNGLVERTEXSTREAM4FVATIPROC piglit_dispatch_glVertexStream4fvATI = stub_glVertexStream4fvATI;

static void*
resolve_glVertexStream4iATI(void)
{
	/* glVertexStream4iATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glVertexStream4iATI");
	}

	unsupported("glVertexStream4iATI");
	return piglit_dispatch_glVertexStream4iATI;
}

static void APIENTRY
stub_glVertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w)
{
	check_initialized();
	piglit_dispatch_glVertexStream4iATI = resolve_glVertexStream4iATI();
	piglit_dispatch_glVertexStream4iATI(stream, x, y, z, w);
}

PFNGLVERTEXSTREAM4IATIPROC piglit_dispatch_glVertexStream4iATI = stub_glVertexStream4iATI;

static void*
resolve_glVertexStream4ivATI(void)
{
	/* glVertexStream4ivATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glVertexStream4ivATI");
	}

	unsupported("glVertexStream4ivATI");
	return piglit_dispatch_glVertexStream4ivATI;
}

static void APIENTRY
stub_glVertexStream4ivATI(GLenum stream, const GLint * coords)
{
	check_initialized();
	piglit_dispatch_glVertexStream4ivATI = resolve_glVertexStream4ivATI();
	piglit_dispatch_glVertexStream4ivATI(stream, coords);
}

PFNGLVERTEXSTREAM4IVATIPROC piglit_dispatch_glVertexStream4ivATI = stub_glVertexStream4ivATI;

static void*
resolve_glVertexStream4sATI(void)
{
	/* glVertexStream4sATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glVertexStream4sATI");
	}

	unsupported("glVertexStream4sATI");
	return piglit_dispatch_glVertexStream4sATI;
}

static void APIENTRY
stub_glVertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w)
{
	check_initialized();
	piglit_dispatch_glVertexStream4sATI = resolve_glVertexStream4sATI();
	piglit_dispatch_glVertexStream4sATI(stream, x, y, z, w);
}

PFNGLVERTEXSTREAM4SATIPROC piglit_dispatch_glVertexStream4sATI = stub_glVertexStream4sATI;

static void*
resolve_glVertexStream4svATI(void)
{
	/* glVertexStream4svATI (GL_ATI_vertex_streams) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ATI_vertex_streams")) {
		return get_ext_proc("glVertexStream4svATI");
	}

	unsupported("glVertexStream4svATI");
	return piglit_dispatch_glVertexStream4svATI;
}

static void APIENTRY
stub_glVertexStream4svATI(GLenum stream, const GLshort * coords)
{
	check_initialized();
	piglit_dispatch_glVertexStream4svATI = resolve_glVertexStream4svATI();
	piglit_dispatch_glVertexStream4svATI(stream, coords);
}

PFNGLVERTEXSTREAM4SVATIPROC piglit_dispatch_glVertexStream4svATI = stub_glVertexStream4svATI;

static void*
resolve_glVertexWeightPointerEXT(void)
{
	/* glVertexWeightPointerEXT (GL_EXT_vertex_weighting) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_weighting")) {
		return get_ext_proc("glVertexWeightPointerEXT");
	}

	unsupported("glVertexWeightPointerEXT");
	return piglit_dispatch_glVertexWeightPointerEXT;
}

static void APIENTRY
stub_glVertexWeightPointerEXT(GLint size, GLenum type, GLsizei stride, const void * pointer)
{
	check_initialized();
	piglit_dispatch_glVertexWeightPointerEXT = resolve_glVertexWeightPointerEXT();
	piglit_dispatch_glVertexWeightPointerEXT(size, type, stride, pointer);
}

PFNGLVERTEXWEIGHTPOINTEREXTPROC piglit_dispatch_glVertexWeightPointerEXT = stub_glVertexWeightPointerEXT;

static void*
resolve_glVertexWeightfEXT(void)
{
	/* glVertexWeightfEXT (GL_EXT_vertex_weighting) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_weighting")) {
		return get_ext_proc("glVertexWeightfEXT");
	}

	unsupported("glVertexWeightfEXT");
	return piglit_dispatch_glVertexWeightfEXT;
}

static void APIENTRY
stub_glVertexWeightfEXT(GLfloat weight)
{
	check_initialized();
	piglit_dispatch_glVertexWeightfEXT = resolve_glVertexWeightfEXT();
	piglit_dispatch_glVertexWeightfEXT(weight);
}

PFNGLVERTEXWEIGHTFEXTPROC piglit_dispatch_glVertexWeightfEXT = stub_glVertexWeightfEXT;

static void*
resolve_glVertexWeightfvEXT(void)
{
	/* glVertexWeightfvEXT (GL_EXT_vertex_weighting) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_weighting")) {
		return get_ext_proc("glVertexWeightfvEXT");
	}

	unsupported("glVertexWeightfvEXT");
	return piglit_dispatch_glVertexWeightfvEXT;
}

static void APIENTRY
stub_glVertexWeightfvEXT(const GLfloat * weight)
{
	check_initialized();
	piglit_dispatch_glVertexWeightfvEXT = resolve_glVertexWeightfvEXT();
	piglit_dispatch_glVertexWeightfvEXT(weight);
}

PFNGLVERTEXWEIGHTFVEXTPROC piglit_dispatch_glVertexWeightfvEXT = stub_glVertexWeightfvEXT;

static void*
resolve_glVertexWeighthNV(void)
{
	/* glVertexWeighthNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glVertexWeighthNV");
	}

	unsupported("glVertexWeighthNV");
	return piglit_dispatch_glVertexWeighthNV;
}

static void APIENTRY
stub_glVertexWeighthNV(GLhalfNV weight)
{
	check_initialized();
	piglit_dispatch_glVertexWeighthNV = resolve_glVertexWeighthNV();
	piglit_dispatch_glVertexWeighthNV(weight);
}

PFNGLVERTEXWEIGHTHNVPROC piglit_dispatch_glVertexWeighthNV = stub_glVertexWeighthNV;

static void*
resolve_glVertexWeighthvNV(void)
{
	/* glVertexWeighthvNV (GL_NV_half_float) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_half_float")) {
		return get_ext_proc("glVertexWeighthvNV");
	}

	unsupported("glVertexWeighthvNV");
	return piglit_dispatch_glVertexWeighthvNV;
}

static void APIENTRY
stub_glVertexWeighthvNV(const GLhalfNV * weight)
{
	check_initialized();
	piglit_dispatch_glVertexWeighthvNV = resolve_glVertexWeighthvNV();
	piglit_dispatch_glVertexWeighthvNV(weight);
}

PFNGLVERTEXWEIGHTHVNVPROC piglit_dispatch_glVertexWeighthvNV = stub_glVertexWeighthvNV;

static void*
resolve_glVideoCaptureNV(void)
{
	/* glVideoCaptureNV (GL_NV_video_capture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_video_capture")) {
		return get_ext_proc("glVideoCaptureNV");
	}

	unsupported("glVideoCaptureNV");
	return piglit_dispatch_glVideoCaptureNV;
}

static GLenum APIENTRY
stub_glVideoCaptureNV(GLuint video_capture_slot, GLuint * sequence_num, GLuint64EXT * capture_time)
{
	check_initialized();
	piglit_dispatch_glVideoCaptureNV = resolve_glVideoCaptureNV();
	return piglit_dispatch_glVideoCaptureNV(video_capture_slot, sequence_num, capture_time);
}

PFNGLVIDEOCAPTURENVPROC piglit_dispatch_glVideoCaptureNV = stub_glVideoCaptureNV;

static void*
resolve_glVideoCaptureStreamParameterdvNV(void)
{
	/* glVideoCaptureStreamParameterdvNV (GL_NV_video_capture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_video_capture")) {
		return get_ext_proc("glVideoCaptureStreamParameterdvNV");
	}

	unsupported("glVideoCaptureStreamParameterdvNV");
	return piglit_dispatch_glVideoCaptureStreamParameterdvNV;
}

static void APIENTRY
stub_glVideoCaptureStreamParameterdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble * params)
{
	check_initialized();
	piglit_dispatch_glVideoCaptureStreamParameterdvNV = resolve_glVideoCaptureStreamParameterdvNV();
	piglit_dispatch_glVideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, params);
}

PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC piglit_dispatch_glVideoCaptureStreamParameterdvNV = stub_glVideoCaptureStreamParameterdvNV;

static void*
resolve_glVideoCaptureStreamParameterfvNV(void)
{
	/* glVideoCaptureStreamParameterfvNV (GL_NV_video_capture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_video_capture")) {
		return get_ext_proc("glVideoCaptureStreamParameterfvNV");
	}

	unsupported("glVideoCaptureStreamParameterfvNV");
	return piglit_dispatch_glVideoCaptureStreamParameterfvNV;
}

static void APIENTRY
stub_glVideoCaptureStreamParameterfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat * params)
{
	check_initialized();
	piglit_dispatch_glVideoCaptureStreamParameterfvNV = resolve_glVideoCaptureStreamParameterfvNV();
	piglit_dispatch_glVideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, params);
}

PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC piglit_dispatch_glVideoCaptureStreamParameterfvNV = stub_glVideoCaptureStreamParameterfvNV;

static void*
resolve_glVideoCaptureStreamParameterivNV(void)
{
	/* glVideoCaptureStreamParameterivNV (GL_NV_video_capture) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_video_capture")) {
		return get_ext_proc("glVideoCaptureStreamParameterivNV");
	}

	unsupported("glVideoCaptureStreamParameterivNV");
	return piglit_dispatch_glVideoCaptureStreamParameterivNV;
}

static void APIENTRY
stub_glVideoCaptureStreamParameterivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint * params)
{
	check_initialized();
	piglit_dispatch_glVideoCaptureStreamParameterivNV = resolve_glVideoCaptureStreamParameterivNV();
	piglit_dispatch_glVideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, params);
}

PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC piglit_dispatch_glVideoCaptureStreamParameterivNV = stub_glVideoCaptureStreamParameterivNV;

static void*
resolve_glViewport(void)
{
	/* glViewport (GL_VERSION_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))) {
		return get_core_proc("glViewport", 10);
	}

	/* glViewport (GL_VERSION_ES_CM_1_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))) {
		return get_core_proc("glViewport", 10);
	}

	/* glViewport (GL_ES_VERSION_2_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2))) {
		return get_core_proc("glViewport", 20);
	}

	unsupported("glViewport");
	return piglit_dispatch_glViewport;
}

static void APIENTRY
stub_glViewport(GLint x, GLint y, GLsizei width, GLsizei height)
{
	check_initialized();
	piglit_dispatch_glViewport = resolve_glViewport();
	piglit_dispatch_glViewport(x, y, width, height);
}

PFNGLVIEWPORTPROC piglit_dispatch_glViewport = stub_glViewport;

static void*
resolve_glViewportArrayv(void)
{
	/* glViewportArrayv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glViewportArrayv", 41);
	}

	/* glViewportArrayv (GL_ARB_viewport_array) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_viewport_array")) {
		return get_ext_proc("glViewportArrayv");
	}

	unsupported("glViewportArrayv");
	return piglit_dispatch_glViewportArrayv;
}

static void APIENTRY
stub_glViewportArrayv(GLuint first, GLsizei count, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glViewportArrayv = resolve_glViewportArrayv();
	piglit_dispatch_glViewportArrayv(first, count, v);
}

PFNGLVIEWPORTARRAYVPROC piglit_dispatch_glViewportArrayv = stub_glViewportArrayv;

static void*
resolve_glViewportIndexedf(void)
{
	/* glViewportIndexedf (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glViewportIndexedf", 41);
	}

	/* glViewportIndexedf (GL_ARB_viewport_array) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_viewport_array")) {
		return get_ext_proc("glViewportIndexedf");
	}

	unsupported("glViewportIndexedf");
	return piglit_dispatch_glViewportIndexedf;
}

static void APIENTRY
stub_glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
{
	check_initialized();
	piglit_dispatch_glViewportIndexedf = resolve_glViewportIndexedf();
	piglit_dispatch_glViewportIndexedf(index, x, y, w, h);
}

PFNGLVIEWPORTINDEXEDFPROC piglit_dispatch_glViewportIndexedf = stub_glViewportIndexedf;

static void*
resolve_glViewportIndexedfv(void)
{
	/* glViewportIndexedfv (GL_VERSION_4_1) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glViewportIndexedfv", 41);
	}

	/* glViewportIndexedfv (GL_ARB_viewport_array) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_viewport_array")) {
		return get_ext_proc("glViewportIndexedfv");
	}

	unsupported("glViewportIndexedfv");
	return piglit_dispatch_glViewportIndexedfv;
}

static void APIENTRY
stub_glViewportIndexedfv(GLuint index, const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glViewportIndexedfv = resolve_glViewportIndexedfv();
	piglit_dispatch_glViewportIndexedfv(index, v);
}

PFNGLVIEWPORTINDEXEDFVPROC piglit_dispatch_glViewportIndexedfv = stub_glViewportIndexedfv;

static void*
resolve_glWaitSync(void)
{
	/* glWaitSync (GL_VERSION_3_2) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glWaitSync", 32);
	}

	/* glWaitSync (GL_ES_VERSION_3_0) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES2 && check_version(20)))) {
		return get_core_proc("glWaitSync", 30);
	}

	/* glWaitSync (GL_ARB_sync) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_sync")) {
		return get_ext_proc("glWaitSync");
	}

	/* glWaitSyncAPPLE (GL_APPLE_sync) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1) ||
	     (dispatch_api == PIGLIT_DISPATCH_ES2))
	    && check_extension("GL_APPLE_sync")) {
		return get_ext_proc("glWaitSyncAPPLE");
	}

	unsupported("glWaitSync");
	return piglit_dispatch_glWaitSync;
}

static void APIENTRY
stub_glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
	check_initialized();
	piglit_dispatch_glWaitSync = resolve_glWaitSync();
	piglit_dispatch_glWaitSync(sync, flags, timeout);
}

PFNGLWAITSYNCPROC piglit_dispatch_glWaitSync = stub_glWaitSync;

static void*
resolve_glWeightPathsNV(void)
{
	/* glWeightPathsNV (GL_NV_path_rendering) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_NV_path_rendering")) {
		return get_ext_proc("glWeightPathsNV");
	}

	unsupported("glWeightPathsNV");
	return piglit_dispatch_glWeightPathsNV;
}

static void APIENTRY
stub_glWeightPathsNV(GLuint resultPath, GLsizei numPaths, const GLuint * paths, const GLfloat * weights)
{
	check_initialized();
	piglit_dispatch_glWeightPathsNV = resolve_glWeightPathsNV();
	piglit_dispatch_glWeightPathsNV(resultPath, numPaths, paths, weights);
}

PFNGLWEIGHTPATHSNVPROC piglit_dispatch_glWeightPathsNV = stub_glWeightPathsNV;

static void*
resolve_glWeightPointerARB(void)
{
	/* glWeightPointerARB (GL_ARB_vertex_blend) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_blend")) {
		return get_ext_proc("glWeightPointerARB");
	}

	unsupported("glWeightPointerARB");
	return piglit_dispatch_glWeightPointerARB;
}

static void APIENTRY
stub_glWeightPointerARB(GLint size, GLenum type, GLsizei stride, const void * pointer)
{
	check_initialized();
	piglit_dispatch_glWeightPointerARB = resolve_glWeightPointerARB();
	piglit_dispatch_glWeightPointerARB(size, type, stride, pointer);
}

PFNGLWEIGHTPOINTERARBPROC piglit_dispatch_glWeightPointerARB = stub_glWeightPointerARB;

static void*
resolve_glWeightPointerOES(void)
{
	/* glWeightPointerOES (GL_OES_matrix_palette) */
	if (((dispatch_api == PIGLIT_DISPATCH_ES1))
	    && check_extension("GL_OES_matrix_palette")) {
		return get_ext_proc("glWeightPointerOES");
	}

	unsupported("glWeightPointerOES");
	return piglit_dispatch_glWeightPointerOES;
}

static void APIENTRY
stub_glWeightPointerOES(GLint size, GLenum type, GLsizei stride, const void * pointer)
{
	check_initialized();
	piglit_dispatch_glWeightPointerOES = resolve_glWeightPointerOES();
	piglit_dispatch_glWeightPointerOES(size, type, stride, pointer);
}

PFNGLWEIGHTPOINTEROESPROC piglit_dispatch_glWeightPointerOES = stub_glWeightPointerOES;

static void*
resolve_glWeightbvARB(void)
{
	/* glWeightbvARB (GL_ARB_vertex_blend) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_blend")) {
		return get_ext_proc("glWeightbvARB");
	}

	unsupported("glWeightbvARB");
	return piglit_dispatch_glWeightbvARB;
}

static void APIENTRY
stub_glWeightbvARB(GLint size, const GLbyte * weights)
{
	check_initialized();
	piglit_dispatch_glWeightbvARB = resolve_glWeightbvARB();
	piglit_dispatch_glWeightbvARB(size, weights);
}

PFNGLWEIGHTBVARBPROC piglit_dispatch_glWeightbvARB = stub_glWeightbvARB;

static void*
resolve_glWeightdvARB(void)
{
	/* glWeightdvARB (GL_ARB_vertex_blend) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_blend")) {
		return get_ext_proc("glWeightdvARB");
	}

	unsupported("glWeightdvARB");
	return piglit_dispatch_glWeightdvARB;
}

static void APIENTRY
stub_glWeightdvARB(GLint size, const GLdouble * weights)
{
	check_initialized();
	piglit_dispatch_glWeightdvARB = resolve_glWeightdvARB();
	piglit_dispatch_glWeightdvARB(size, weights);
}

PFNGLWEIGHTDVARBPROC piglit_dispatch_glWeightdvARB = stub_glWeightdvARB;

static void*
resolve_glWeightfvARB(void)
{
	/* glWeightfvARB (GL_ARB_vertex_blend) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_blend")) {
		return get_ext_proc("glWeightfvARB");
	}

	unsupported("glWeightfvARB");
	return piglit_dispatch_glWeightfvARB;
}

static void APIENTRY
stub_glWeightfvARB(GLint size, const GLfloat * weights)
{
	check_initialized();
	piglit_dispatch_glWeightfvARB = resolve_glWeightfvARB();
	piglit_dispatch_glWeightfvARB(size, weights);
}

PFNGLWEIGHTFVARBPROC piglit_dispatch_glWeightfvARB = stub_glWeightfvARB;

static void*
resolve_glWeightivARB(void)
{
	/* glWeightivARB (GL_ARB_vertex_blend) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_blend")) {
		return get_ext_proc("glWeightivARB");
	}

	unsupported("glWeightivARB");
	return piglit_dispatch_glWeightivARB;
}

static void APIENTRY
stub_glWeightivARB(GLint size, const GLint * weights)
{
	check_initialized();
	piglit_dispatch_glWeightivARB = resolve_glWeightivARB();
	piglit_dispatch_glWeightivARB(size, weights);
}

PFNGLWEIGHTIVARBPROC piglit_dispatch_glWeightivARB = stub_glWeightivARB;

static void*
resolve_glWeightsvARB(void)
{
	/* glWeightsvARB (GL_ARB_vertex_blend) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_blend")) {
		return get_ext_proc("glWeightsvARB");
	}

	unsupported("glWeightsvARB");
	return piglit_dispatch_glWeightsvARB;
}

static void APIENTRY
stub_glWeightsvARB(GLint size, const GLshort * weights)
{
	check_initialized();
	piglit_dispatch_glWeightsvARB = resolve_glWeightsvARB();
	piglit_dispatch_glWeightsvARB(size, weights);
}

PFNGLWEIGHTSVARBPROC piglit_dispatch_glWeightsvARB = stub_glWeightsvARB;

static void*
resolve_glWeightubvARB(void)
{
	/* glWeightubvARB (GL_ARB_vertex_blend) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_blend")) {
		return get_ext_proc("glWeightubvARB");
	}

	unsupported("glWeightubvARB");
	return piglit_dispatch_glWeightubvARB;
}

static void APIENTRY
stub_glWeightubvARB(GLint size, const GLubyte * weights)
{
	check_initialized();
	piglit_dispatch_glWeightubvARB = resolve_glWeightubvARB();
	piglit_dispatch_glWeightubvARB(size, weights);
}

PFNGLWEIGHTUBVARBPROC piglit_dispatch_glWeightubvARB = stub_glWeightubvARB;

static void*
resolve_glWeightuivARB(void)
{
	/* glWeightuivARB (GL_ARB_vertex_blend) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_blend")) {
		return get_ext_proc("glWeightuivARB");
	}

	unsupported("glWeightuivARB");
	return piglit_dispatch_glWeightuivARB;
}

static void APIENTRY
stub_glWeightuivARB(GLint size, const GLuint * weights)
{
	check_initialized();
	piglit_dispatch_glWeightuivARB = resolve_glWeightuivARB();
	piglit_dispatch_glWeightuivARB(size, weights);
}

PFNGLWEIGHTUIVARBPROC piglit_dispatch_glWeightuivARB = stub_glWeightuivARB;

static void*
resolve_glWeightusvARB(void)
{
	/* glWeightusvARB (GL_ARB_vertex_blend) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_vertex_blend")) {
		return get_ext_proc("glWeightusvARB");
	}

	unsupported("glWeightusvARB");
	return piglit_dispatch_glWeightusvARB;
}

static void APIENTRY
stub_glWeightusvARB(GLint size, const GLushort * weights)
{
	check_initialized();
	piglit_dispatch_glWeightusvARB = resolve_glWeightusvARB();
	piglit_dispatch_glWeightusvARB(size, weights);
}

PFNGLWEIGHTUSVARBPROC piglit_dispatch_glWeightusvARB = stub_glWeightusvARB;

static void*
resolve_glWindowPos2d(void)
{
	/* glWindowPos2d (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glWindowPos2d", 14);
	}

	/* glWindowPos2dARB (GL_ARB_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_window_pos")) {
		return get_ext_proc("glWindowPos2dARB");
	}

	/* glWindowPos2dMESA (GL_MESA_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_MESA_window_pos")) {
		return get_ext_proc("glWindowPos2dMESA");
	}

	unsupported("glWindowPos2d");
	return piglit_dispatch_glWindowPos2d;
}

static void APIENTRY
stub_glWindowPos2d(GLdouble x, GLdouble y)
{
	check_initialized();
	piglit_dispatch_glWindowPos2d = resolve_glWindowPos2d();
	piglit_dispatch_glWindowPos2d(x, y);
}

PFNGLWINDOWPOS2DPROC piglit_dispatch_glWindowPos2d = stub_glWindowPos2d;

static void*
resolve_glWindowPos2dv(void)
{
	/* glWindowPos2dv (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glWindowPos2dv", 14);
	}

	/* glWindowPos2dvARB (GL_ARB_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_window_pos")) {
		return get_ext_proc("glWindowPos2dvARB");
	}

	/* glWindowPos2dvMESA (GL_MESA_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_MESA_window_pos")) {
		return get_ext_proc("glWindowPos2dvMESA");
	}

	unsupported("glWindowPos2dv");
	return piglit_dispatch_glWindowPos2dv;
}

static void APIENTRY
stub_glWindowPos2dv(const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glWindowPos2dv = resolve_glWindowPos2dv();
	piglit_dispatch_glWindowPos2dv(v);
}

PFNGLWINDOWPOS2DVPROC piglit_dispatch_glWindowPos2dv = stub_glWindowPos2dv;

static void*
resolve_glWindowPos2f(void)
{
	/* glWindowPos2f (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glWindowPos2f", 14);
	}

	/* glWindowPos2fARB (GL_ARB_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_window_pos")) {
		return get_ext_proc("glWindowPos2fARB");
	}

	/* glWindowPos2fMESA (GL_MESA_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_MESA_window_pos")) {
		return get_ext_proc("glWindowPos2fMESA");
	}

	unsupported("glWindowPos2f");
	return piglit_dispatch_glWindowPos2f;
}

static void APIENTRY
stub_glWindowPos2f(GLfloat x, GLfloat y)
{
	check_initialized();
	piglit_dispatch_glWindowPos2f = resolve_glWindowPos2f();
	piglit_dispatch_glWindowPos2f(x, y);
}

PFNGLWINDOWPOS2FPROC piglit_dispatch_glWindowPos2f = stub_glWindowPos2f;

static void*
resolve_glWindowPos2fv(void)
{
	/* glWindowPos2fv (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glWindowPos2fv", 14);
	}

	/* glWindowPos2fvARB (GL_ARB_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_window_pos")) {
		return get_ext_proc("glWindowPos2fvARB");
	}

	/* glWindowPos2fvMESA (GL_MESA_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_MESA_window_pos")) {
		return get_ext_proc("glWindowPos2fvMESA");
	}

	unsupported("glWindowPos2fv");
	return piglit_dispatch_glWindowPos2fv;
}

static void APIENTRY
stub_glWindowPos2fv(const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glWindowPos2fv = resolve_glWindowPos2fv();
	piglit_dispatch_glWindowPos2fv(v);
}

PFNGLWINDOWPOS2FVPROC piglit_dispatch_glWindowPos2fv = stub_glWindowPos2fv;

static void*
resolve_glWindowPos2i(void)
{
	/* glWindowPos2i (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glWindowPos2i", 14);
	}

	/* glWindowPos2iARB (GL_ARB_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_window_pos")) {
		return get_ext_proc("glWindowPos2iARB");
	}

	/* glWindowPos2iMESA (GL_MESA_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_MESA_window_pos")) {
		return get_ext_proc("glWindowPos2iMESA");
	}

	unsupported("glWindowPos2i");
	return piglit_dispatch_glWindowPos2i;
}

static void APIENTRY
stub_glWindowPos2i(GLint x, GLint y)
{
	check_initialized();
	piglit_dispatch_glWindowPos2i = resolve_glWindowPos2i();
	piglit_dispatch_glWindowPos2i(x, y);
}

PFNGLWINDOWPOS2IPROC piglit_dispatch_glWindowPos2i = stub_glWindowPos2i;

static void*
resolve_glWindowPos2iv(void)
{
	/* glWindowPos2iv (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glWindowPos2iv", 14);
	}

	/* glWindowPos2ivARB (GL_ARB_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_window_pos")) {
		return get_ext_proc("glWindowPos2ivARB");
	}

	/* glWindowPos2ivMESA (GL_MESA_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_MESA_window_pos")) {
		return get_ext_proc("glWindowPos2ivMESA");
	}

	unsupported("glWindowPos2iv");
	return piglit_dispatch_glWindowPos2iv;
}

static void APIENTRY
stub_glWindowPos2iv(const GLint * v)
{
	check_initialized();
	piglit_dispatch_glWindowPos2iv = resolve_glWindowPos2iv();
	piglit_dispatch_glWindowPos2iv(v);
}

PFNGLWINDOWPOS2IVPROC piglit_dispatch_glWindowPos2iv = stub_glWindowPos2iv;

static void*
resolve_glWindowPos2s(void)
{
	/* glWindowPos2s (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glWindowPos2s", 14);
	}

	/* glWindowPos2sARB (GL_ARB_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_window_pos")) {
		return get_ext_proc("glWindowPos2sARB");
	}

	/* glWindowPos2sMESA (GL_MESA_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_MESA_window_pos")) {
		return get_ext_proc("glWindowPos2sMESA");
	}

	unsupported("glWindowPos2s");
	return piglit_dispatch_glWindowPos2s;
}

static void APIENTRY
stub_glWindowPos2s(GLshort x, GLshort y)
{
	check_initialized();
	piglit_dispatch_glWindowPos2s = resolve_glWindowPos2s();
	piglit_dispatch_glWindowPos2s(x, y);
}

PFNGLWINDOWPOS2SPROC piglit_dispatch_glWindowPos2s = stub_glWindowPos2s;

static void*
resolve_glWindowPos2sv(void)
{
	/* glWindowPos2sv (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glWindowPos2sv", 14);
	}

	/* glWindowPos2svARB (GL_ARB_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_window_pos")) {
		return get_ext_proc("glWindowPos2svARB");
	}

	/* glWindowPos2svMESA (GL_MESA_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_MESA_window_pos")) {
		return get_ext_proc("glWindowPos2svMESA");
	}

	unsupported("glWindowPos2sv");
	return piglit_dispatch_glWindowPos2sv;
}

static void APIENTRY
stub_glWindowPos2sv(const GLshort * v)
{
	check_initialized();
	piglit_dispatch_glWindowPos2sv = resolve_glWindowPos2sv();
	piglit_dispatch_glWindowPos2sv(v);
}

PFNGLWINDOWPOS2SVPROC piglit_dispatch_glWindowPos2sv = stub_glWindowPos2sv;

static void*
resolve_glWindowPos3d(void)
{
	/* glWindowPos3d (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glWindowPos3d", 14);
	}

	/* glWindowPos3dARB (GL_ARB_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_window_pos")) {
		return get_ext_proc("glWindowPos3dARB");
	}

	/* glWindowPos3dMESA (GL_MESA_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_MESA_window_pos")) {
		return get_ext_proc("glWindowPos3dMESA");
	}

	unsupported("glWindowPos3d");
	return piglit_dispatch_glWindowPos3d;
}

static void APIENTRY
stub_glWindowPos3d(GLdouble x, GLdouble y, GLdouble z)
{
	check_initialized();
	piglit_dispatch_glWindowPos3d = resolve_glWindowPos3d();
	piglit_dispatch_glWindowPos3d(x, y, z);
}

PFNGLWINDOWPOS3DPROC piglit_dispatch_glWindowPos3d = stub_glWindowPos3d;

static void*
resolve_glWindowPos3dv(void)
{
	/* glWindowPos3dv (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glWindowPos3dv", 14);
	}

	/* glWindowPos3dvARB (GL_ARB_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_window_pos")) {
		return get_ext_proc("glWindowPos3dvARB");
	}

	/* glWindowPos3dvMESA (GL_MESA_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_MESA_window_pos")) {
		return get_ext_proc("glWindowPos3dvMESA");
	}

	unsupported("glWindowPos3dv");
	return piglit_dispatch_glWindowPos3dv;
}

static void APIENTRY
stub_glWindowPos3dv(const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glWindowPos3dv = resolve_glWindowPos3dv();
	piglit_dispatch_glWindowPos3dv(v);
}

PFNGLWINDOWPOS3DVPROC piglit_dispatch_glWindowPos3dv = stub_glWindowPos3dv;

static void*
resolve_glWindowPos3f(void)
{
	/* glWindowPos3f (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glWindowPos3f", 14);
	}

	/* glWindowPos3fARB (GL_ARB_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_window_pos")) {
		return get_ext_proc("glWindowPos3fARB");
	}

	/* glWindowPos3fMESA (GL_MESA_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_MESA_window_pos")) {
		return get_ext_proc("glWindowPos3fMESA");
	}

	unsupported("glWindowPos3f");
	return piglit_dispatch_glWindowPos3f;
}

static void APIENTRY
stub_glWindowPos3f(GLfloat x, GLfloat y, GLfloat z)
{
	check_initialized();
	piglit_dispatch_glWindowPos3f = resolve_glWindowPos3f();
	piglit_dispatch_glWindowPos3f(x, y, z);
}

PFNGLWINDOWPOS3FPROC piglit_dispatch_glWindowPos3f = stub_glWindowPos3f;

static void*
resolve_glWindowPos3fv(void)
{
	/* glWindowPos3fv (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glWindowPos3fv", 14);
	}

	/* glWindowPos3fvARB (GL_ARB_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_window_pos")) {
		return get_ext_proc("glWindowPos3fvARB");
	}

	/* glWindowPos3fvMESA (GL_MESA_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_MESA_window_pos")) {
		return get_ext_proc("glWindowPos3fvMESA");
	}

	unsupported("glWindowPos3fv");
	return piglit_dispatch_glWindowPos3fv;
}

static void APIENTRY
stub_glWindowPos3fv(const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glWindowPos3fv = resolve_glWindowPos3fv();
	piglit_dispatch_glWindowPos3fv(v);
}

PFNGLWINDOWPOS3FVPROC piglit_dispatch_glWindowPos3fv = stub_glWindowPos3fv;

static void*
resolve_glWindowPos3i(void)
{
	/* glWindowPos3i (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glWindowPos3i", 14);
	}

	/* glWindowPos3iARB (GL_ARB_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_window_pos")) {
		return get_ext_proc("glWindowPos3iARB");
	}

	/* glWindowPos3iMESA (GL_MESA_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_MESA_window_pos")) {
		return get_ext_proc("glWindowPos3iMESA");
	}

	unsupported("glWindowPos3i");
	return piglit_dispatch_glWindowPos3i;
}

static void APIENTRY
stub_glWindowPos3i(GLint x, GLint y, GLint z)
{
	check_initialized();
	piglit_dispatch_glWindowPos3i = resolve_glWindowPos3i();
	piglit_dispatch_glWindowPos3i(x, y, z);
}

PFNGLWINDOWPOS3IPROC piglit_dispatch_glWindowPos3i = stub_glWindowPos3i;

static void*
resolve_glWindowPos3iv(void)
{
	/* glWindowPos3iv (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glWindowPos3iv", 14);
	}

	/* glWindowPos3ivARB (GL_ARB_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_window_pos")) {
		return get_ext_proc("glWindowPos3ivARB");
	}

	/* glWindowPos3ivMESA (GL_MESA_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_MESA_window_pos")) {
		return get_ext_proc("glWindowPos3ivMESA");
	}

	unsupported("glWindowPos3iv");
	return piglit_dispatch_glWindowPos3iv;
}

static void APIENTRY
stub_glWindowPos3iv(const GLint * v)
{
	check_initialized();
	piglit_dispatch_glWindowPos3iv = resolve_glWindowPos3iv();
	piglit_dispatch_glWindowPos3iv(v);
}

PFNGLWINDOWPOS3IVPROC piglit_dispatch_glWindowPos3iv = stub_glWindowPos3iv;

static void*
resolve_glWindowPos3s(void)
{
	/* glWindowPos3s (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glWindowPos3s", 14);
	}

	/* glWindowPos3sARB (GL_ARB_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_window_pos")) {
		return get_ext_proc("glWindowPos3sARB");
	}

	/* glWindowPos3sMESA (GL_MESA_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_MESA_window_pos")) {
		return get_ext_proc("glWindowPos3sMESA");
	}

	unsupported("glWindowPos3s");
	return piglit_dispatch_glWindowPos3s;
}

static void APIENTRY
stub_glWindowPos3s(GLshort x, GLshort y, GLshort z)
{
	check_initialized();
	piglit_dispatch_glWindowPos3s = resolve_glWindowPos3s();
	piglit_dispatch_glWindowPos3s(x, y, z);
}

PFNGLWINDOWPOS3SPROC piglit_dispatch_glWindowPos3s = stub_glWindowPos3s;

static void*
resolve_glWindowPos3sv(void)
{
	/* glWindowPos3sv (GL_VERSION_1_4) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL && check_version(10)))) {
		return get_core_proc("glWindowPos3sv", 14);
	}

	/* glWindowPos3svARB (GL_ARB_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_ARB_window_pos")) {
		return get_ext_proc("glWindowPos3svARB");
	}

	/* glWindowPos3svMESA (GL_MESA_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_MESA_window_pos")) {
		return get_ext_proc("glWindowPos3svMESA");
	}

	unsupported("glWindowPos3sv");
	return piglit_dispatch_glWindowPos3sv;
}

static void APIENTRY
stub_glWindowPos3sv(const GLshort * v)
{
	check_initialized();
	piglit_dispatch_glWindowPos3sv = resolve_glWindowPos3sv();
	piglit_dispatch_glWindowPos3sv(v);
}

PFNGLWINDOWPOS3SVPROC piglit_dispatch_glWindowPos3sv = stub_glWindowPos3sv;

static void*
resolve_glWindowPos4dMESA(void)
{
	/* glWindowPos4dMESA (GL_MESA_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_MESA_window_pos")) {
		return get_ext_proc("glWindowPos4dMESA");
	}

	unsupported("glWindowPos4dMESA");
	return piglit_dispatch_glWindowPos4dMESA;
}

static void APIENTRY
stub_glWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
	check_initialized();
	piglit_dispatch_glWindowPos4dMESA = resolve_glWindowPos4dMESA();
	piglit_dispatch_glWindowPos4dMESA(x, y, z, w);
}

PFNGLWINDOWPOS4DMESAPROC piglit_dispatch_glWindowPos4dMESA = stub_glWindowPos4dMESA;

static void*
resolve_glWindowPos4dvMESA(void)
{
	/* glWindowPos4dvMESA (GL_MESA_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_MESA_window_pos")) {
		return get_ext_proc("glWindowPos4dvMESA");
	}

	unsupported("glWindowPos4dvMESA");
	return piglit_dispatch_glWindowPos4dvMESA;
}

static void APIENTRY
stub_glWindowPos4dvMESA(const GLdouble * v)
{
	check_initialized();
	piglit_dispatch_glWindowPos4dvMESA = resolve_glWindowPos4dvMESA();
	piglit_dispatch_glWindowPos4dvMESA(v);
}

PFNGLWINDOWPOS4DVMESAPROC piglit_dispatch_glWindowPos4dvMESA = stub_glWindowPos4dvMESA;

static void*
resolve_glWindowPos4fMESA(void)
{
	/* glWindowPos4fMESA (GL_MESA_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_MESA_window_pos")) {
		return get_ext_proc("glWindowPos4fMESA");
	}

	unsupported("glWindowPos4fMESA");
	return piglit_dispatch_glWindowPos4fMESA;
}

static void APIENTRY
stub_glWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
	check_initialized();
	piglit_dispatch_glWindowPos4fMESA = resolve_glWindowPos4fMESA();
	piglit_dispatch_glWindowPos4fMESA(x, y, z, w);
}

PFNGLWINDOWPOS4FMESAPROC piglit_dispatch_glWindowPos4fMESA = stub_glWindowPos4fMESA;

static void*
resolve_glWindowPos4fvMESA(void)
{
	/* glWindowPos4fvMESA (GL_MESA_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_MESA_window_pos")) {
		return get_ext_proc("glWindowPos4fvMESA");
	}

	unsupported("glWindowPos4fvMESA");
	return piglit_dispatch_glWindowPos4fvMESA;
}

static void APIENTRY
stub_glWindowPos4fvMESA(const GLfloat * v)
{
	check_initialized();
	piglit_dispatch_glWindowPos4fvMESA = resolve_glWindowPos4fvMESA();
	piglit_dispatch_glWindowPos4fvMESA(v);
}

PFNGLWINDOWPOS4FVMESAPROC piglit_dispatch_glWindowPos4fvMESA = stub_glWindowPos4fvMESA;

static void*
resolve_glWindowPos4iMESA(void)
{
	/* glWindowPos4iMESA (GL_MESA_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_MESA_window_pos")) {
		return get_ext_proc("glWindowPos4iMESA");
	}

	unsupported("glWindowPos4iMESA");
	return piglit_dispatch_glWindowPos4iMESA;
}

static void APIENTRY
stub_glWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w)
{
	check_initialized();
	piglit_dispatch_glWindowPos4iMESA = resolve_glWindowPos4iMESA();
	piglit_dispatch_glWindowPos4iMESA(x, y, z, w);
}

PFNGLWINDOWPOS4IMESAPROC piglit_dispatch_glWindowPos4iMESA = stub_glWindowPos4iMESA;

static void*
resolve_glWindowPos4ivMESA(void)
{
	/* glWindowPos4ivMESA (GL_MESA_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_MESA_window_pos")) {
		return get_ext_proc("glWindowPos4ivMESA");
	}

	unsupported("glWindowPos4ivMESA");
	return piglit_dispatch_glWindowPos4ivMESA;
}

static void APIENTRY
stub_glWindowPos4ivMESA(const GLint * v)
{
	check_initialized();
	piglit_dispatch_glWindowPos4ivMESA = resolve_glWindowPos4ivMESA();
	piglit_dispatch_glWindowPos4ivMESA(v);
}

PFNGLWINDOWPOS4IVMESAPROC piglit_dispatch_glWindowPos4ivMESA = stub_glWindowPos4ivMESA;

static void*
resolve_glWindowPos4sMESA(void)
{
	/* glWindowPos4sMESA (GL_MESA_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_MESA_window_pos")) {
		return get_ext_proc("glWindowPos4sMESA");
	}

	unsupported("glWindowPos4sMESA");
	return piglit_dispatch_glWindowPos4sMESA;
}

static void APIENTRY
stub_glWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w)
{
	check_initialized();
	piglit_dispatch_glWindowPos4sMESA = resolve_glWindowPos4sMESA();
	piglit_dispatch_glWindowPos4sMESA(x, y, z, w);
}

PFNGLWINDOWPOS4SMESAPROC piglit_dispatch_glWindowPos4sMESA = stub_glWindowPos4sMESA;

static void*
resolve_glWindowPos4svMESA(void)
{
	/* glWindowPos4svMESA (GL_MESA_window_pos) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_MESA_window_pos")) {
		return get_ext_proc("glWindowPos4svMESA");
	}

	unsupported("glWindowPos4svMESA");
	return piglit_dispatch_glWindowPos4svMESA;
}

static void APIENTRY
stub_glWindowPos4svMESA(const GLshort * v)
{
	check_initialized();
	piglit_dispatch_glWindowPos4svMESA = resolve_glWindowPos4svMESA();
	piglit_dispatch_glWindowPos4svMESA(v);
}

PFNGLWINDOWPOS4SVMESAPROC piglit_dispatch_glWindowPos4svMESA = stub_glWindowPos4svMESA;

static void*
resolve_glWriteMaskEXT(void)
{
	/* glWriteMaskEXT (GL_EXT_vertex_shader) */
	if (((dispatch_api == PIGLIT_DISPATCH_GL))
	    && check_extension("GL_EXT_vertex_shader")) {
		return get_ext_proc("glWriteMaskEXT");
	}

	unsupported("glWriteMaskEXT");
	return piglit_dispatch_glWriteMaskEXT;
}

static void APIENTRY
stub_glWriteMaskEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
{
	check_initialized();
	piglit_dispatch_glWriteMaskEXT = resolve_glWriteMaskEXT();
	piglit_dispatch_glWriteMaskEXT(res, in, outX, outY, outZ, outW);
}

PFNGLWRITEMASKEXTPROC piglit_dispatch_glWriteMaskEXT = stub_glWriteMaskEXT;

static void reset_dispatch_pointers(void)
{
	piglit_dispatch_glAccum = stub_glAccum;
	piglit_dispatch_glAccumxOES = stub_glAccumxOES;
	piglit_dispatch_glActiveProgramEXT = stub_glActiveProgramEXT;
	piglit_dispatch_glActiveShaderProgram = stub_glActiveShaderProgram;
	piglit_dispatch_glActiveShaderProgramEXT = stub_glActiveShaderProgramEXT;
	piglit_dispatch_glActiveStencilFaceEXT = stub_glActiveStencilFaceEXT;
	piglit_dispatch_glActiveTexture = stub_glActiveTexture;
	piglit_dispatch_glActiveVaryingNV = stub_glActiveVaryingNV;
	piglit_dispatch_glAlphaFragmentOp1ATI = stub_glAlphaFragmentOp1ATI;
	piglit_dispatch_glAlphaFragmentOp2ATI = stub_glAlphaFragmentOp2ATI;
	piglit_dispatch_glAlphaFragmentOp3ATI = stub_glAlphaFragmentOp3ATI;
	piglit_dispatch_glAlphaFunc = stub_glAlphaFunc;
	piglit_dispatch_glAlphaFuncQCOM = stub_glAlphaFuncQCOM;
	piglit_dispatch_glAlphaFuncx = stub_glAlphaFuncx;
	piglit_dispatch_glAlphaFuncxOES = stub_glAlphaFuncxOES;
	piglit_dispatch_glApplyTextureEXT = stub_glApplyTextureEXT;
	piglit_dispatch_glAreProgramsResidentNV = stub_glAreProgramsResidentNV;
	piglit_dispatch_glAreTexturesResident = stub_glAreTexturesResident;
	piglit_dispatch_glAreTexturesResidentEXT = stub_glAreTexturesResidentEXT;
	piglit_dispatch_glArrayElement = stub_glArrayElement;
	piglit_dispatch_glArrayObjectATI = stub_glArrayObjectATI;
	piglit_dispatch_glAsyncMarkerSGIX = stub_glAsyncMarkerSGIX;
	piglit_dispatch_glAttachObjectARB = stub_glAttachObjectARB;
	piglit_dispatch_glBegin = stub_glBegin;
	piglit_dispatch_glBeginConditionalRender = stub_glBeginConditionalRender;
	piglit_dispatch_glBeginConditionalRenderNVX = stub_glBeginConditionalRenderNVX;
	piglit_dispatch_glBeginFragmentShaderATI = stub_glBeginFragmentShaderATI;
	piglit_dispatch_glBeginOcclusionQueryNV = stub_glBeginOcclusionQueryNV;
	piglit_dispatch_glBeginPerfMonitorAMD = stub_glBeginPerfMonitorAMD;
	piglit_dispatch_glBeginPerfQueryINTEL = stub_glBeginPerfQueryINTEL;
	piglit_dispatch_glBeginQuery = stub_glBeginQuery;
	piglit_dispatch_glBeginQueryEXT = stub_glBeginQueryEXT;
	piglit_dispatch_glBeginQueryIndexed = stub_glBeginQueryIndexed;
	piglit_dispatch_glBeginTransformFeedback = stub_glBeginTransformFeedback;
	piglit_dispatch_glBeginVertexShaderEXT = stub_glBeginVertexShaderEXT;
	piglit_dispatch_glBeginVideoCaptureNV = stub_glBeginVideoCaptureNV;
	piglit_dispatch_glBindAttribLocation = stub_glBindAttribLocation;
	piglit_dispatch_glBindBuffer = stub_glBindBuffer;
	piglit_dispatch_glBindBufferBase = stub_glBindBufferBase;
	piglit_dispatch_glBindBufferOffsetEXT = stub_glBindBufferOffsetEXT;
	piglit_dispatch_glBindBufferRange = stub_glBindBufferRange;
	piglit_dispatch_glBindBuffersBase = stub_glBindBuffersBase;
	piglit_dispatch_glBindBuffersRange = stub_glBindBuffersRange;
	piglit_dispatch_glBindFragDataLocation = stub_glBindFragDataLocation;
	piglit_dispatch_glBindFragDataLocationIndexed = stub_glBindFragDataLocationIndexed;
	piglit_dispatch_glBindFragmentShaderATI = stub_glBindFragmentShaderATI;
	piglit_dispatch_glBindFramebuffer = stub_glBindFramebuffer;
	piglit_dispatch_glBindFramebufferEXT = stub_glBindFramebufferEXT;
	piglit_dispatch_glBindFramebufferOES = stub_glBindFramebufferOES;
	piglit_dispatch_glBindImageTexture = stub_glBindImageTexture;
	piglit_dispatch_glBindImageTextureEXT = stub_glBindImageTextureEXT;
	piglit_dispatch_glBindImageTextures = stub_glBindImageTextures;
	piglit_dispatch_glBindLightParameterEXT = stub_glBindLightParameterEXT;
	piglit_dispatch_glBindMaterialParameterEXT = stub_glBindMaterialParameterEXT;
	piglit_dispatch_glBindMultiTextureEXT = stub_glBindMultiTextureEXT;
	piglit_dispatch_glBindParameterEXT = stub_glBindParameterEXT;
	piglit_dispatch_glBindProgramARB = stub_glBindProgramARB;
	piglit_dispatch_glBindProgramPipeline = stub_glBindProgramPipeline;
	piglit_dispatch_glBindProgramPipelineEXT = stub_glBindProgramPipelineEXT;
	piglit_dispatch_glBindRenderbuffer = stub_glBindRenderbuffer;
	piglit_dispatch_glBindRenderbufferEXT = stub_glBindRenderbufferEXT;
	piglit_dispatch_glBindRenderbufferOES = stub_glBindRenderbufferOES;
	piglit_dispatch_glBindSampler = stub_glBindSampler;
	piglit_dispatch_glBindSamplers = stub_glBindSamplers;
	piglit_dispatch_glBindTexGenParameterEXT = stub_glBindTexGenParameterEXT;
	piglit_dispatch_glBindTexture = stub_glBindTexture;
	piglit_dispatch_glBindTextureUnitParameterEXT = stub_glBindTextureUnitParameterEXT;
	piglit_dispatch_glBindTextures = stub_glBindTextures;
	piglit_dispatch_glBindTransformFeedback = stub_glBindTransformFeedback;
	piglit_dispatch_glBindTransformFeedbackNV = stub_glBindTransformFeedbackNV;
	piglit_dispatch_glBindVertexArray = stub_glBindVertexArray;
	piglit_dispatch_glBindVertexArrayAPPLE = stub_glBindVertexArrayAPPLE;
	piglit_dispatch_glBindVertexBuffer = stub_glBindVertexBuffer;
	piglit_dispatch_glBindVertexBuffers = stub_glBindVertexBuffers;
	piglit_dispatch_glBindVertexShaderEXT = stub_glBindVertexShaderEXT;
	piglit_dispatch_glBindVideoCaptureStreamBufferNV = stub_glBindVideoCaptureStreamBufferNV;
	piglit_dispatch_glBindVideoCaptureStreamTextureNV = stub_glBindVideoCaptureStreamTextureNV;
	piglit_dispatch_glBinormal3bEXT = stub_glBinormal3bEXT;
	piglit_dispatch_glBinormal3bvEXT = stub_glBinormal3bvEXT;
	piglit_dispatch_glBinormal3dEXT = stub_glBinormal3dEXT;
	piglit_dispatch_glBinormal3dvEXT = stub_glBinormal3dvEXT;
	piglit_dispatch_glBinormal3fEXT = stub_glBinormal3fEXT;
	piglit_dispatch_glBinormal3fvEXT = stub_glBinormal3fvEXT;
	piglit_dispatch_glBinormal3iEXT = stub_glBinormal3iEXT;
	piglit_dispatch_glBinormal3ivEXT = stub_glBinormal3ivEXT;
	piglit_dispatch_glBinormal3sEXT = stub_glBinormal3sEXT;
	piglit_dispatch_glBinormal3svEXT = stub_glBinormal3svEXT;
	piglit_dispatch_glBinormalPointerEXT = stub_glBinormalPointerEXT;
	piglit_dispatch_glBitmap = stub_glBitmap;
	piglit_dispatch_glBitmapxOES = stub_glBitmapxOES;
	piglit_dispatch_glBlendBarrierKHR = stub_glBlendBarrierKHR;
	piglit_dispatch_glBlendBarrierNV = stub_glBlendBarrierNV;
	piglit_dispatch_glBlendColor = stub_glBlendColor;
	piglit_dispatch_glBlendColorxOES = stub_glBlendColorxOES;
	piglit_dispatch_glBlendEquation = stub_glBlendEquation;
	piglit_dispatch_glBlendEquationIndexedAMD = stub_glBlendEquationIndexedAMD;
	piglit_dispatch_glBlendEquationOES = stub_glBlendEquationOES;
	piglit_dispatch_glBlendEquationSeparate = stub_glBlendEquationSeparate;
	piglit_dispatch_glBlendEquationSeparateIndexedAMD = stub_glBlendEquationSeparateIndexedAMD;
	piglit_dispatch_glBlendEquationSeparateOES = stub_glBlendEquationSeparateOES;
	piglit_dispatch_glBlendFunc = stub_glBlendFunc;
	piglit_dispatch_glBlendFuncIndexedAMD = stub_glBlendFuncIndexedAMD;
	piglit_dispatch_glBlendFuncSeparate = stub_glBlendFuncSeparate;
	piglit_dispatch_glBlendFuncSeparateIndexedAMD = stub_glBlendFuncSeparateIndexedAMD;
	piglit_dispatch_glBlendFuncSeparateOES = stub_glBlendFuncSeparateOES;
	piglit_dispatch_glBlendParameteriNV = stub_glBlendParameteriNV;
	piglit_dispatch_glBlitFramebuffer = stub_glBlitFramebuffer;
	piglit_dispatch_glBlitFramebufferANGLE = stub_glBlitFramebufferANGLE;
	piglit_dispatch_glBufferAddressRangeNV = stub_glBufferAddressRangeNV;
	piglit_dispatch_glBufferData = stub_glBufferData;
	piglit_dispatch_glBufferParameteriAPPLE = stub_glBufferParameteriAPPLE;
	piglit_dispatch_glBufferStorage = stub_glBufferStorage;
	piglit_dispatch_glBufferSubData = stub_glBufferSubData;
	piglit_dispatch_glCallList = stub_glCallList;
	piglit_dispatch_glCallLists = stub_glCallLists;
	piglit_dispatch_glCheckFramebufferStatus = stub_glCheckFramebufferStatus;
	piglit_dispatch_glCheckFramebufferStatusOES = stub_glCheckFramebufferStatusOES;
	piglit_dispatch_glCheckNamedFramebufferStatusEXT = stub_glCheckNamedFramebufferStatusEXT;
	piglit_dispatch_glClampColor = stub_glClampColor;
	piglit_dispatch_glClear = stub_glClear;
	piglit_dispatch_glClearAccum = stub_glClearAccum;
	piglit_dispatch_glClearAccumxOES = stub_glClearAccumxOES;
	piglit_dispatch_glClearBufferData = stub_glClearBufferData;
	piglit_dispatch_glClearBufferSubData = stub_glClearBufferSubData;
	piglit_dispatch_glClearBufferfi = stub_glClearBufferfi;
	piglit_dispatch_glClearBufferfv = stub_glClearBufferfv;
	piglit_dispatch_glClearBufferiv = stub_glClearBufferiv;
	piglit_dispatch_glClearBufferuiv = stub_glClearBufferuiv;
	piglit_dispatch_glClearColor = stub_glClearColor;
	piglit_dispatch_glClearColorIiEXT = stub_glClearColorIiEXT;
	piglit_dispatch_glClearColorIuiEXT = stub_glClearColorIuiEXT;
	piglit_dispatch_glClearColorx = stub_glClearColorx;
	piglit_dispatch_glClearColorxOES = stub_glClearColorxOES;
	piglit_dispatch_glClearDepth = stub_glClearDepth;
	piglit_dispatch_glClearDepthdNV = stub_glClearDepthdNV;
	piglit_dispatch_glClearDepthf = stub_glClearDepthf;
	piglit_dispatch_glClearDepthx = stub_glClearDepthx;
	piglit_dispatch_glClearDepthxOES = stub_glClearDepthxOES;
	piglit_dispatch_glClearIndex = stub_glClearIndex;
	piglit_dispatch_glClearNamedBufferDataEXT = stub_glClearNamedBufferDataEXT;
	piglit_dispatch_glClearNamedBufferSubDataEXT = stub_glClearNamedBufferSubDataEXT;
	piglit_dispatch_glClearStencil = stub_glClearStencil;
	piglit_dispatch_glClearTexImage = stub_glClearTexImage;
	piglit_dispatch_glClearTexSubImage = stub_glClearTexSubImage;
	piglit_dispatch_glClientActiveTexture = stub_glClientActiveTexture;
	piglit_dispatch_glClientActiveVertexStreamATI = stub_glClientActiveVertexStreamATI;
	piglit_dispatch_glClientAttribDefaultEXT = stub_glClientAttribDefaultEXT;
	piglit_dispatch_glClientWaitSync = stub_glClientWaitSync;
	piglit_dispatch_glClipPlane = stub_glClipPlane;
	piglit_dispatch_glClipPlanef = stub_glClipPlanef;
	piglit_dispatch_glClipPlanefIMG = stub_glClipPlanefIMG;
	piglit_dispatch_glClipPlanefOES = stub_glClipPlanefOES;
	piglit_dispatch_glClipPlanex = stub_glClipPlanex;
	piglit_dispatch_glClipPlanexIMG = stub_glClipPlanexIMG;
	piglit_dispatch_glClipPlanexOES = stub_glClipPlanexOES;
	piglit_dispatch_glColor3b = stub_glColor3b;
	piglit_dispatch_glColor3bv = stub_glColor3bv;
	piglit_dispatch_glColor3d = stub_glColor3d;
	piglit_dispatch_glColor3dv = stub_glColor3dv;
	piglit_dispatch_glColor3f = stub_glColor3f;
	piglit_dispatch_glColor3fVertex3fSUN = stub_glColor3fVertex3fSUN;
	piglit_dispatch_glColor3fVertex3fvSUN = stub_glColor3fVertex3fvSUN;
	piglit_dispatch_glColor3fv = stub_glColor3fv;
	piglit_dispatch_glColor3hNV = stub_glColor3hNV;
	piglit_dispatch_glColor3hvNV = stub_glColor3hvNV;
	piglit_dispatch_glColor3i = stub_glColor3i;
	piglit_dispatch_glColor3iv = stub_glColor3iv;
	piglit_dispatch_glColor3s = stub_glColor3s;
	piglit_dispatch_glColor3sv = stub_glColor3sv;
	piglit_dispatch_glColor3ub = stub_glColor3ub;
	piglit_dispatch_glColor3ubv = stub_glColor3ubv;
	piglit_dispatch_glColor3ui = stub_glColor3ui;
	piglit_dispatch_glColor3uiv = stub_glColor3uiv;
	piglit_dispatch_glColor3us = stub_glColor3us;
	piglit_dispatch_glColor3usv = stub_glColor3usv;
	piglit_dispatch_glColor3xOES = stub_glColor3xOES;
	piglit_dispatch_glColor3xvOES = stub_glColor3xvOES;
	piglit_dispatch_glColor4b = stub_glColor4b;
	piglit_dispatch_glColor4bv = stub_glColor4bv;
	piglit_dispatch_glColor4d = stub_glColor4d;
	piglit_dispatch_glColor4dv = stub_glColor4dv;
	piglit_dispatch_glColor4f = stub_glColor4f;
	piglit_dispatch_glColor4fNormal3fVertex3fSUN = stub_glColor4fNormal3fVertex3fSUN;
	piglit_dispatch_glColor4fNormal3fVertex3fvSUN = stub_glColor4fNormal3fVertex3fvSUN;
	piglit_dispatch_glColor4fv = stub_glColor4fv;
	piglit_dispatch_glColor4hNV = stub_glColor4hNV;
	piglit_dispatch_glColor4hvNV = stub_glColor4hvNV;
	piglit_dispatch_glColor4i = stub_glColor4i;
	piglit_dispatch_glColor4iv = stub_glColor4iv;
	piglit_dispatch_glColor4s = stub_glColor4s;
	piglit_dispatch_glColor4sv = stub_glColor4sv;
	piglit_dispatch_glColor4ub = stub_glColor4ub;
	piglit_dispatch_glColor4ubVertex2fSUN = stub_glColor4ubVertex2fSUN;
	piglit_dispatch_glColor4ubVertex2fvSUN = stub_glColor4ubVertex2fvSUN;
	piglit_dispatch_glColor4ubVertex3fSUN = stub_glColor4ubVertex3fSUN;
	piglit_dispatch_glColor4ubVertex3fvSUN = stub_glColor4ubVertex3fvSUN;
	piglit_dispatch_glColor4ubv = stub_glColor4ubv;
	piglit_dispatch_glColor4ui = stub_glColor4ui;
	piglit_dispatch_glColor4uiv = stub_glColor4uiv;
	piglit_dispatch_glColor4us = stub_glColor4us;
	piglit_dispatch_glColor4usv = stub_glColor4usv;
	piglit_dispatch_glColor4x = stub_glColor4x;
	piglit_dispatch_glColor4xOES = stub_glColor4xOES;
	piglit_dispatch_glColor4xvOES = stub_glColor4xvOES;
	piglit_dispatch_glColorFormatNV = stub_glColorFormatNV;
	piglit_dispatch_glColorFragmentOp1ATI = stub_glColorFragmentOp1ATI;
	piglit_dispatch_glColorFragmentOp2ATI = stub_glColorFragmentOp2ATI;
	piglit_dispatch_glColorFragmentOp3ATI = stub_glColorFragmentOp3ATI;
	piglit_dispatch_glColorMask = stub_glColorMask;
	piglit_dispatch_glColorMaskIndexedEXT = stub_glColorMaskIndexedEXT;
	piglit_dispatch_glColorMaterial = stub_glColorMaterial;
	piglit_dispatch_glColorP3ui = stub_glColorP3ui;
	piglit_dispatch_glColorP3uiv = stub_glColorP3uiv;
	piglit_dispatch_glColorP4ui = stub_glColorP4ui;
	piglit_dispatch_glColorP4uiv = stub_glColorP4uiv;
	piglit_dispatch_glColorPointer = stub_glColorPointer;
	piglit_dispatch_glColorPointerEXT = stub_glColorPointerEXT;
	piglit_dispatch_glColorPointerListIBM = stub_glColorPointerListIBM;
	piglit_dispatch_glColorPointervINTEL = stub_glColorPointervINTEL;
	piglit_dispatch_glColorSubTable = stub_glColorSubTable;
	piglit_dispatch_glColorTable = stub_glColorTable;
	piglit_dispatch_glColorTableParameterfv = stub_glColorTableParameterfv;
	piglit_dispatch_glColorTableParameteriv = stub_glColorTableParameteriv;
	piglit_dispatch_glCombinerInputNV = stub_glCombinerInputNV;
	piglit_dispatch_glCombinerOutputNV = stub_glCombinerOutputNV;
	piglit_dispatch_glCombinerParameterfNV = stub_glCombinerParameterfNV;
	piglit_dispatch_glCombinerParameterfvNV = stub_glCombinerParameterfvNV;
	piglit_dispatch_glCombinerParameteriNV = stub_glCombinerParameteriNV;
	piglit_dispatch_glCombinerParameterivNV = stub_glCombinerParameterivNV;
	piglit_dispatch_glCombinerStageParameterfvNV = stub_glCombinerStageParameterfvNV;
	piglit_dispatch_glCompileShader = stub_glCompileShader;
	piglit_dispatch_glCompileShaderIncludeARB = stub_glCompileShaderIncludeARB;
	piglit_dispatch_glCompressedMultiTexImage1DEXT = stub_glCompressedMultiTexImage1DEXT;
	piglit_dispatch_glCompressedMultiTexImage2DEXT = stub_glCompressedMultiTexImage2DEXT;
	piglit_dispatch_glCompressedMultiTexImage3DEXT = stub_glCompressedMultiTexImage3DEXT;
	piglit_dispatch_glCompressedMultiTexSubImage1DEXT = stub_glCompressedMultiTexSubImage1DEXT;
	piglit_dispatch_glCompressedMultiTexSubImage2DEXT = stub_glCompressedMultiTexSubImage2DEXT;
	piglit_dispatch_glCompressedMultiTexSubImage3DEXT = stub_glCompressedMultiTexSubImage3DEXT;
	piglit_dispatch_glCompressedTexImage1D = stub_glCompressedTexImage1D;
	piglit_dispatch_glCompressedTexImage2D = stub_glCompressedTexImage2D;
	piglit_dispatch_glCompressedTexImage3D = stub_glCompressedTexImage3D;
	piglit_dispatch_glCompressedTexSubImage1D = stub_glCompressedTexSubImage1D;
	piglit_dispatch_glCompressedTexSubImage2D = stub_glCompressedTexSubImage2D;
	piglit_dispatch_glCompressedTexSubImage3D = stub_glCompressedTexSubImage3D;
	piglit_dispatch_glCompressedTextureImage1DEXT = stub_glCompressedTextureImage1DEXT;
	piglit_dispatch_glCompressedTextureImage2DEXT = stub_glCompressedTextureImage2DEXT;
	piglit_dispatch_glCompressedTextureImage3DEXT = stub_glCompressedTextureImage3DEXT;
	piglit_dispatch_glCompressedTextureSubImage1DEXT = stub_glCompressedTextureSubImage1DEXT;
	piglit_dispatch_glCompressedTextureSubImage2DEXT = stub_glCompressedTextureSubImage2DEXT;
	piglit_dispatch_glCompressedTextureSubImage3DEXT = stub_glCompressedTextureSubImage3DEXT;
	piglit_dispatch_glConvolutionFilter1D = stub_glConvolutionFilter1D;
	piglit_dispatch_glConvolutionFilter2D = stub_glConvolutionFilter2D;
	piglit_dispatch_glConvolutionParameterf = stub_glConvolutionParameterf;
	piglit_dispatch_glConvolutionParameterfv = stub_glConvolutionParameterfv;
	piglit_dispatch_glConvolutionParameteri = stub_glConvolutionParameteri;
	piglit_dispatch_glConvolutionParameteriv = stub_glConvolutionParameteriv;
	piglit_dispatch_glConvolutionParameterxOES = stub_glConvolutionParameterxOES;
	piglit_dispatch_glConvolutionParameterxvOES = stub_glConvolutionParameterxvOES;
	piglit_dispatch_glCopyBufferSubData = stub_glCopyBufferSubData;
	piglit_dispatch_glCopyColorSubTable = stub_glCopyColorSubTable;
	piglit_dispatch_glCopyColorTable = stub_glCopyColorTable;
	piglit_dispatch_glCopyConvolutionFilter1D = stub_glCopyConvolutionFilter1D;
	piglit_dispatch_glCopyConvolutionFilter2D = stub_glCopyConvolutionFilter2D;
	piglit_dispatch_glCopyImageSubData = stub_glCopyImageSubData;
	piglit_dispatch_glCopyImageSubDataNV = stub_glCopyImageSubDataNV;
	piglit_dispatch_glCopyMultiTexImage1DEXT = stub_glCopyMultiTexImage1DEXT;
	piglit_dispatch_glCopyMultiTexImage2DEXT = stub_glCopyMultiTexImage2DEXT;
	piglit_dispatch_glCopyMultiTexSubImage1DEXT = stub_glCopyMultiTexSubImage1DEXT;
	piglit_dispatch_glCopyMultiTexSubImage2DEXT = stub_glCopyMultiTexSubImage2DEXT;
	piglit_dispatch_glCopyMultiTexSubImage3DEXT = stub_glCopyMultiTexSubImage3DEXT;
	piglit_dispatch_glCopyPathNV = stub_glCopyPathNV;
	piglit_dispatch_glCopyPixels = stub_glCopyPixels;
	piglit_dispatch_glCopyTexImage1D = stub_glCopyTexImage1D;
	piglit_dispatch_glCopyTexImage2D = stub_glCopyTexImage2D;
	piglit_dispatch_glCopyTexSubImage1D = stub_glCopyTexSubImage1D;
	piglit_dispatch_glCopyTexSubImage2D = stub_glCopyTexSubImage2D;
	piglit_dispatch_glCopyTexSubImage3D = stub_glCopyTexSubImage3D;
	piglit_dispatch_glCopyTextureImage1DEXT = stub_glCopyTextureImage1DEXT;
	piglit_dispatch_glCopyTextureImage2DEXT = stub_glCopyTextureImage2DEXT;
	piglit_dispatch_glCopyTextureLevelsAPPLE = stub_glCopyTextureLevelsAPPLE;
	piglit_dispatch_glCopyTextureSubImage1DEXT = stub_glCopyTextureSubImage1DEXT;
	piglit_dispatch_glCopyTextureSubImage2DEXT = stub_glCopyTextureSubImage2DEXT;
	piglit_dispatch_glCopyTextureSubImage3DEXT = stub_glCopyTextureSubImage3DEXT;
	piglit_dispatch_glCoverFillPathInstancedNV = stub_glCoverFillPathInstancedNV;
	piglit_dispatch_glCoverFillPathNV = stub_glCoverFillPathNV;
	piglit_dispatch_glCoverStrokePathInstancedNV = stub_glCoverStrokePathInstancedNV;
	piglit_dispatch_glCoverStrokePathNV = stub_glCoverStrokePathNV;
	piglit_dispatch_glCoverageMaskNV = stub_glCoverageMaskNV;
	piglit_dispatch_glCoverageOperationNV = stub_glCoverageOperationNV;
	piglit_dispatch_glCreatePerfQueryINTEL = stub_glCreatePerfQueryINTEL;
	piglit_dispatch_glCreateProgram = stub_glCreateProgram;
	piglit_dispatch_glCreateShader = stub_glCreateShader;
	piglit_dispatch_glCreateShaderProgramEXT = stub_glCreateShaderProgramEXT;
	piglit_dispatch_glCreateShaderProgramv = stub_glCreateShaderProgramv;
	piglit_dispatch_glCreateShaderProgramvEXT = stub_glCreateShaderProgramvEXT;
	piglit_dispatch_glCreateSyncFromCLeventARB = stub_glCreateSyncFromCLeventARB;
	piglit_dispatch_glCullFace = stub_glCullFace;
	piglit_dispatch_glCullParameterdvEXT = stub_glCullParameterdvEXT;
	piglit_dispatch_glCullParameterfvEXT = stub_glCullParameterfvEXT;
	piglit_dispatch_glCurrentPaletteMatrixARB = stub_glCurrentPaletteMatrixARB;
	piglit_dispatch_glCurrentPaletteMatrixOES = stub_glCurrentPaletteMatrixOES;
	piglit_dispatch_glDebugMessageCallback = stub_glDebugMessageCallback;
	piglit_dispatch_glDebugMessageCallbackAMD = stub_glDebugMessageCallbackAMD;
	piglit_dispatch_glDebugMessageControl = stub_glDebugMessageControl;
	piglit_dispatch_glDebugMessageEnableAMD = stub_glDebugMessageEnableAMD;
	piglit_dispatch_glDebugMessageInsert = stub_glDebugMessageInsert;
	piglit_dispatch_glDebugMessageInsertAMD = stub_glDebugMessageInsertAMD;
	piglit_dispatch_glDeformSGIX = stub_glDeformSGIX;
	piglit_dispatch_glDeformationMap3dSGIX = stub_glDeformationMap3dSGIX;
	piglit_dispatch_glDeformationMap3fSGIX = stub_glDeformationMap3fSGIX;
	piglit_dispatch_glDeleteAsyncMarkersSGIX = stub_glDeleteAsyncMarkersSGIX;
	piglit_dispatch_glDeleteBuffers = stub_glDeleteBuffers;
	piglit_dispatch_glDeleteFencesAPPLE = stub_glDeleteFencesAPPLE;
	piglit_dispatch_glDeleteFencesNV = stub_glDeleteFencesNV;
	piglit_dispatch_glDeleteFragmentShaderATI = stub_glDeleteFragmentShaderATI;
	piglit_dispatch_glDeleteFramebuffers = stub_glDeleteFramebuffers;
	piglit_dispatch_glDeleteFramebuffersOES = stub_glDeleteFramebuffersOES;
	piglit_dispatch_glDeleteLists = stub_glDeleteLists;
	piglit_dispatch_glDeleteNamedStringARB = stub_glDeleteNamedStringARB;
	piglit_dispatch_glDeleteNamesAMD = stub_glDeleteNamesAMD;
	piglit_dispatch_glDeleteObjectARB = stub_glDeleteObjectARB;
	piglit_dispatch_glDeleteOcclusionQueriesNV = stub_glDeleteOcclusionQueriesNV;
	piglit_dispatch_glDeletePathsNV = stub_glDeletePathsNV;
	piglit_dispatch_glDeletePerfMonitorsAMD = stub_glDeletePerfMonitorsAMD;
	piglit_dispatch_glDeletePerfQueryINTEL = stub_glDeletePerfQueryINTEL;
	piglit_dispatch_glDeleteProgram = stub_glDeleteProgram;
	piglit_dispatch_glDeleteProgramPipelines = stub_glDeleteProgramPipelines;
	piglit_dispatch_glDeleteProgramPipelinesEXT = stub_glDeleteProgramPipelinesEXT;
	piglit_dispatch_glDeleteProgramsARB = stub_glDeleteProgramsARB;
	piglit_dispatch_glDeleteQueries = stub_glDeleteQueries;
	piglit_dispatch_glDeleteQueriesEXT = stub_glDeleteQueriesEXT;
	piglit_dispatch_glDeleteRenderbuffers = stub_glDeleteRenderbuffers;
	piglit_dispatch_glDeleteRenderbuffersOES = stub_glDeleteRenderbuffersOES;
	piglit_dispatch_glDeleteSamplers = stub_glDeleteSamplers;
	piglit_dispatch_glDeleteShader = stub_glDeleteShader;
	piglit_dispatch_glDeleteSync = stub_glDeleteSync;
	piglit_dispatch_glDeleteTextures = stub_glDeleteTextures;
	piglit_dispatch_glDeleteTexturesEXT = stub_glDeleteTexturesEXT;
	piglit_dispatch_glDeleteTransformFeedbacks = stub_glDeleteTransformFeedbacks;
	piglit_dispatch_glDeleteVertexArrays = stub_glDeleteVertexArrays;
	piglit_dispatch_glDeleteVertexShaderEXT = stub_glDeleteVertexShaderEXT;
	piglit_dispatch_glDepthBoundsEXT = stub_glDepthBoundsEXT;
	piglit_dispatch_glDepthBoundsdNV = stub_glDepthBoundsdNV;
	piglit_dispatch_glDepthFunc = stub_glDepthFunc;
	piglit_dispatch_glDepthMask = stub_glDepthMask;
	piglit_dispatch_glDepthRange = stub_glDepthRange;
	piglit_dispatch_glDepthRangeArrayv = stub_glDepthRangeArrayv;
	piglit_dispatch_glDepthRangeIndexed = stub_glDepthRangeIndexed;
	piglit_dispatch_glDepthRangedNV = stub_glDepthRangedNV;
	piglit_dispatch_glDepthRangef = stub_glDepthRangef;
	piglit_dispatch_glDepthRangex = stub_glDepthRangex;
	piglit_dispatch_glDepthRangexOES = stub_glDepthRangexOES;
	piglit_dispatch_glDetachObjectARB = stub_glDetachObjectARB;
	piglit_dispatch_glDetailTexFuncSGIS = stub_glDetailTexFuncSGIS;
	piglit_dispatch_glDisable = stub_glDisable;
	piglit_dispatch_glDisableClientState = stub_glDisableClientState;
	piglit_dispatch_glDisableClientStateIndexedEXT = stub_glDisableClientStateIndexedEXT;
	piglit_dispatch_glDisableClientStateiEXT = stub_glDisableClientStateiEXT;
	piglit_dispatch_glDisableDriverControlQCOM = stub_glDisableDriverControlQCOM;
	piglit_dispatch_glDisableIndexedEXT = stub_glDisableIndexedEXT;
	piglit_dispatch_glDisableVariantClientStateEXT = stub_glDisableVariantClientStateEXT;
	piglit_dispatch_glDisableVertexArrayAttribEXT = stub_glDisableVertexArrayAttribEXT;
	piglit_dispatch_glDisableVertexArrayEXT = stub_glDisableVertexArrayEXT;
	piglit_dispatch_glDisableVertexAttribAPPLE = stub_glDisableVertexAttribAPPLE;
	piglit_dispatch_glDisableVertexAttribArray = stub_glDisableVertexAttribArray;
	piglit_dispatch_glDiscardFramebufferEXT = stub_glDiscardFramebufferEXT;
	piglit_dispatch_glDispatchCompute = stub_glDispatchCompute;
	piglit_dispatch_glDispatchComputeGroupSizeARB = stub_glDispatchComputeGroupSizeARB;
	piglit_dispatch_glDispatchComputeIndirect = stub_glDispatchComputeIndirect;
	piglit_dispatch_glDrawArrays = stub_glDrawArrays;
	piglit_dispatch_glDrawArraysIndirect = stub_glDrawArraysIndirect;
	piglit_dispatch_glDrawArraysInstanced = stub_glDrawArraysInstanced;
	piglit_dispatch_glDrawArraysInstancedBaseInstance = stub_glDrawArraysInstancedBaseInstance;
	piglit_dispatch_glDrawBuffer = stub_glDrawBuffer;
	piglit_dispatch_glDrawBuffers = stub_glDrawBuffers;
	piglit_dispatch_glDrawBuffersIndexedEXT = stub_glDrawBuffersIndexedEXT;
	piglit_dispatch_glDrawBuffersNV = stub_glDrawBuffersNV;
	piglit_dispatch_glDrawElementArrayAPPLE = stub_glDrawElementArrayAPPLE;
	piglit_dispatch_glDrawElementArrayATI = stub_glDrawElementArrayATI;
	piglit_dispatch_glDrawElements = stub_glDrawElements;
	piglit_dispatch_glDrawElementsBaseVertex = stub_glDrawElementsBaseVertex;
	piglit_dispatch_glDrawElementsIndirect = stub_glDrawElementsIndirect;
	piglit_dispatch_glDrawElementsInstanced = stub_glDrawElementsInstanced;
	piglit_dispatch_glDrawElementsInstancedBaseInstance = stub_glDrawElementsInstancedBaseInstance;
	piglit_dispatch_glDrawElementsInstancedBaseVertex = stub_glDrawElementsInstancedBaseVertex;
	piglit_dispatch_glDrawElementsInstancedBaseVertexBaseInstance = stub_glDrawElementsInstancedBaseVertexBaseInstance;
	piglit_dispatch_glDrawMeshArraysSUN = stub_glDrawMeshArraysSUN;
	piglit_dispatch_glDrawPixels = stub_glDrawPixels;
	piglit_dispatch_glDrawRangeElementArrayAPPLE = stub_glDrawRangeElementArrayAPPLE;
	piglit_dispatch_glDrawRangeElementArrayATI = stub_glDrawRangeElementArrayATI;
	piglit_dispatch_glDrawRangeElements = stub_glDrawRangeElements;
	piglit_dispatch_glDrawRangeElementsBaseVertex = stub_glDrawRangeElementsBaseVertex;
	piglit_dispatch_glDrawTexfOES = stub_glDrawTexfOES;
	piglit_dispatch_glDrawTexfvOES = stub_glDrawTexfvOES;
	piglit_dispatch_glDrawTexiOES = stub_glDrawTexiOES;
	piglit_dispatch_glDrawTexivOES = stub_glDrawTexivOES;
	piglit_dispatch_glDrawTexsOES = stub_glDrawTexsOES;
	piglit_dispatch_glDrawTexsvOES = stub_glDrawTexsvOES;
	piglit_dispatch_glDrawTextureNV = stub_glDrawTextureNV;
	piglit_dispatch_glDrawTexxOES = stub_glDrawTexxOES;
	piglit_dispatch_glDrawTexxvOES = stub_glDrawTexxvOES;
	piglit_dispatch_glDrawTransformFeedback = stub_glDrawTransformFeedback;
	piglit_dispatch_glDrawTransformFeedbackInstanced = stub_glDrawTransformFeedbackInstanced;
	piglit_dispatch_glDrawTransformFeedbackStream = stub_glDrawTransformFeedbackStream;
	piglit_dispatch_glDrawTransformFeedbackStreamInstanced = stub_glDrawTransformFeedbackStreamInstanced;
	piglit_dispatch_glEGLImageTargetRenderbufferStorageOES = stub_glEGLImageTargetRenderbufferStorageOES;
	piglit_dispatch_glEGLImageTargetTexture2DOES = stub_glEGLImageTargetTexture2DOES;
	piglit_dispatch_glEdgeFlag = stub_glEdgeFlag;
	piglit_dispatch_glEdgeFlagFormatNV = stub_glEdgeFlagFormatNV;
	piglit_dispatch_glEdgeFlagPointer = stub_glEdgeFlagPointer;
	piglit_dispatch_glEdgeFlagPointerEXT = stub_glEdgeFlagPointerEXT;
	piglit_dispatch_glEdgeFlagPointerListIBM = stub_glEdgeFlagPointerListIBM;
	piglit_dispatch_glEdgeFlagv = stub_glEdgeFlagv;
	piglit_dispatch_glElementPointerAPPLE = stub_glElementPointerAPPLE;
	piglit_dispatch_glElementPointerATI = stub_glElementPointerATI;
	piglit_dispatch_glEnable = stub_glEnable;
	piglit_dispatch_glEnableClientState = stub_glEnableClientState;
	piglit_dispatch_glEnableClientStateIndexedEXT = stub_glEnableClientStateIndexedEXT;
	piglit_dispatch_glEnableClientStateiEXT = stub_glEnableClientStateiEXT;
	piglit_dispatch_glEnableDriverControlQCOM = stub_glEnableDriverControlQCOM;
	piglit_dispatch_glEnableIndexedEXT = stub_glEnableIndexedEXT;
	piglit_dispatch_glEnableVariantClientStateEXT = stub_glEnableVariantClientStateEXT;
	piglit_dispatch_glEnableVertexArrayAttribEXT = stub_glEnableVertexArrayAttribEXT;
	piglit_dispatch_glEnableVertexArrayEXT = stub_glEnableVertexArrayEXT;
	piglit_dispatch_glEnableVertexAttribAPPLE = stub_glEnableVertexAttribAPPLE;
	piglit_dispatch_glEnableVertexAttribArray = stub_glEnableVertexAttribArray;
	piglit_dispatch_glEnd = stub_glEnd;
	piglit_dispatch_glEndConditionalRender = stub_glEndConditionalRender;
	piglit_dispatch_glEndFragmentShaderATI = stub_glEndFragmentShaderATI;
	piglit_dispatch_glEndList = stub_glEndList;
	piglit_dispatch_glEndOcclusionQueryNV = stub_glEndOcclusionQueryNV;
	piglit_dispatch_glEndPerfMonitorAMD = stub_glEndPerfMonitorAMD;
	piglit_dispatch_glEndPerfQueryINTEL = stub_glEndPerfQueryINTEL;
	piglit_dispatch_glEndQuery = stub_glEndQuery;
	piglit_dispatch_glEndQueryEXT = stub_glEndQueryEXT;
	piglit_dispatch_glEndQueryIndexed = stub_glEndQueryIndexed;
	piglit_dispatch_glEndTilingQCOM = stub_glEndTilingQCOM;
	piglit_dispatch_glEndTransformFeedback = stub_glEndTransformFeedback;
	piglit_dispatch_glEndVertexShaderEXT = stub_glEndVertexShaderEXT;
	piglit_dispatch_glEndVideoCaptureNV = stub_glEndVideoCaptureNV;
	piglit_dispatch_glEvalCoord1d = stub_glEvalCoord1d;
	piglit_dispatch_glEvalCoord1dv = stub_glEvalCoord1dv;
	piglit_dispatch_glEvalCoord1f = stub_glEvalCoord1f;
	piglit_dispatch_glEvalCoord1fv = stub_glEvalCoord1fv;
	piglit_dispatch_glEvalCoord1xOES = stub_glEvalCoord1xOES;
	piglit_dispatch_glEvalCoord1xvOES = stub_glEvalCoord1xvOES;
	piglit_dispatch_glEvalCoord2d = stub_glEvalCoord2d;
	piglit_dispatch_glEvalCoord2dv = stub_glEvalCoord2dv;
	piglit_dispatch_glEvalCoord2f = stub_glEvalCoord2f;
	piglit_dispatch_glEvalCoord2fv = stub_glEvalCoord2fv;
	piglit_dispatch_glEvalCoord2xOES = stub_glEvalCoord2xOES;
	piglit_dispatch_glEvalCoord2xvOES = stub_glEvalCoord2xvOES;
	piglit_dispatch_glEvalMapsNV = stub_glEvalMapsNV;
	piglit_dispatch_glEvalMesh1 = stub_glEvalMesh1;
	piglit_dispatch_glEvalMesh2 = stub_glEvalMesh2;
	piglit_dispatch_glEvalPoint1 = stub_glEvalPoint1;
	piglit_dispatch_glEvalPoint2 = stub_glEvalPoint2;
	piglit_dispatch_glExecuteProgramNV = stub_glExecuteProgramNV;
	piglit_dispatch_glExtGetBufferPointervQCOM = stub_glExtGetBufferPointervQCOM;
	piglit_dispatch_glExtGetBuffersQCOM = stub_glExtGetBuffersQCOM;
	piglit_dispatch_glExtGetFramebuffersQCOM = stub_glExtGetFramebuffersQCOM;
	piglit_dispatch_glExtGetProgramBinarySourceQCOM = stub_glExtGetProgramBinarySourceQCOM;
	piglit_dispatch_glExtGetProgramsQCOM = stub_glExtGetProgramsQCOM;
	piglit_dispatch_glExtGetRenderbuffersQCOM = stub_glExtGetRenderbuffersQCOM;
	piglit_dispatch_glExtGetShadersQCOM = stub_glExtGetShadersQCOM;
	piglit_dispatch_glExtGetTexLevelParameterivQCOM = stub_glExtGetTexLevelParameterivQCOM;
	piglit_dispatch_glExtGetTexSubImageQCOM = stub_glExtGetTexSubImageQCOM;
	piglit_dispatch_glExtGetTexturesQCOM = stub_glExtGetTexturesQCOM;
	piglit_dispatch_glExtIsProgramBinaryQCOM = stub_glExtIsProgramBinaryQCOM;
	piglit_dispatch_glExtTexObjectStateOverrideiQCOM = stub_glExtTexObjectStateOverrideiQCOM;
	piglit_dispatch_glExtractComponentEXT = stub_glExtractComponentEXT;
	piglit_dispatch_glFeedbackBuffer = stub_glFeedbackBuffer;
	piglit_dispatch_glFeedbackBufferxOES = stub_glFeedbackBufferxOES;
	piglit_dispatch_glFenceSync = stub_glFenceSync;
	piglit_dispatch_glFinalCombinerInputNV = stub_glFinalCombinerInputNV;
	piglit_dispatch_glFinish = stub_glFinish;
	piglit_dispatch_glFinishAsyncSGIX = stub_glFinishAsyncSGIX;
	piglit_dispatch_glFinishFenceAPPLE = stub_glFinishFenceAPPLE;
	piglit_dispatch_glFinishFenceNV = stub_glFinishFenceNV;
	piglit_dispatch_glFinishObjectAPPLE = stub_glFinishObjectAPPLE;
	piglit_dispatch_glFinishTextureSUNX = stub_glFinishTextureSUNX;
	piglit_dispatch_glFlush = stub_glFlush;
	piglit_dispatch_glFlushMappedBufferRange = stub_glFlushMappedBufferRange;
	piglit_dispatch_glFlushMappedNamedBufferRangeEXT = stub_glFlushMappedNamedBufferRangeEXT;
	piglit_dispatch_glFlushPixelDataRangeNV = stub_glFlushPixelDataRangeNV;
	piglit_dispatch_glFlushRasterSGIX = stub_glFlushRasterSGIX;
	piglit_dispatch_glFlushStaticDataIBM = stub_glFlushStaticDataIBM;
	piglit_dispatch_glFlushVertexArrayRangeAPPLE = stub_glFlushVertexArrayRangeAPPLE;
	piglit_dispatch_glFlushVertexArrayRangeNV = stub_glFlushVertexArrayRangeNV;
	piglit_dispatch_glFogCoordFormatNV = stub_glFogCoordFormatNV;
	piglit_dispatch_glFogCoordPointer = stub_glFogCoordPointer;
	piglit_dispatch_glFogCoordPointerListIBM = stub_glFogCoordPointerListIBM;
	piglit_dispatch_glFogCoordd = stub_glFogCoordd;
	piglit_dispatch_glFogCoorddv = stub_glFogCoorddv;
	piglit_dispatch_glFogCoordf = stub_glFogCoordf;
	piglit_dispatch_glFogCoordfv = stub_glFogCoordfv;
	piglit_dispatch_glFogCoordhNV = stub_glFogCoordhNV;
	piglit_dispatch_glFogCoordhvNV = stub_glFogCoordhvNV;
	piglit_dispatch_glFogFuncSGIS = stub_glFogFuncSGIS;
	piglit_dispatch_glFogf = stub_glFogf;
	piglit_dispatch_glFogfv = stub_glFogfv;
	piglit_dispatch_glFogi = stub_glFogi;
	piglit_dispatch_glFogiv = stub_glFogiv;
	piglit_dispatch_glFogx = stub_glFogx;
	piglit_dispatch_glFogxOES = stub_glFogxOES;
	piglit_dispatch_glFogxv = stub_glFogxv;
	piglit_dispatch_glFogxvOES = stub_glFogxvOES;
	piglit_dispatch_glFragmentColorMaterialSGIX = stub_glFragmentColorMaterialSGIX;
	piglit_dispatch_glFragmentLightModelfSGIX = stub_glFragmentLightModelfSGIX;
	piglit_dispatch_glFragmentLightModelfvSGIX = stub_glFragmentLightModelfvSGIX;
	piglit_dispatch_glFragmentLightModeliSGIX = stub_glFragmentLightModeliSGIX;
	piglit_dispatch_glFragmentLightModelivSGIX = stub_glFragmentLightModelivSGIX;
	piglit_dispatch_glFragmentLightfSGIX = stub_glFragmentLightfSGIX;
	piglit_dispatch_glFragmentLightfvSGIX = stub_glFragmentLightfvSGIX;
	piglit_dispatch_glFragmentLightiSGIX = stub_glFragmentLightiSGIX;
	piglit_dispatch_glFragmentLightivSGIX = stub_glFragmentLightivSGIX;
	piglit_dispatch_glFragmentMaterialfSGIX = stub_glFragmentMaterialfSGIX;
	piglit_dispatch_glFragmentMaterialfvSGIX = stub_glFragmentMaterialfvSGIX;
	piglit_dispatch_glFragmentMaterialiSGIX = stub_glFragmentMaterialiSGIX;
	piglit_dispatch_glFragmentMaterialivSGIX = stub_glFragmentMaterialivSGIX;
	piglit_dispatch_glFrameTerminatorGREMEDY = stub_glFrameTerminatorGREMEDY;
	piglit_dispatch_glFrameZoomSGIX = stub_glFrameZoomSGIX;
	piglit_dispatch_glFramebufferDrawBufferEXT = stub_glFramebufferDrawBufferEXT;
	piglit_dispatch_glFramebufferDrawBuffersEXT = stub_glFramebufferDrawBuffersEXT;
	piglit_dispatch_glFramebufferParameteri = stub_glFramebufferParameteri;
	piglit_dispatch_glFramebufferReadBufferEXT = stub_glFramebufferReadBufferEXT;
	piglit_dispatch_glFramebufferRenderbuffer = stub_glFramebufferRenderbuffer;
	piglit_dispatch_glFramebufferRenderbufferOES = stub_glFramebufferRenderbufferOES;
	piglit_dispatch_glFramebufferTexture = stub_glFramebufferTexture;
	piglit_dispatch_glFramebufferTexture1D = stub_glFramebufferTexture1D;
	piglit_dispatch_glFramebufferTexture2D = stub_glFramebufferTexture2D;
	piglit_dispatch_glFramebufferTexture2DMultisampleEXT = stub_glFramebufferTexture2DMultisampleEXT;
	piglit_dispatch_glFramebufferTexture2DMultisampleIMG = stub_glFramebufferTexture2DMultisampleIMG;
	piglit_dispatch_glFramebufferTexture2DOES = stub_glFramebufferTexture2DOES;
	piglit_dispatch_glFramebufferTexture3D = stub_glFramebufferTexture3D;
	piglit_dispatch_glFramebufferTextureFaceARB = stub_glFramebufferTextureFaceARB;
	piglit_dispatch_glFramebufferTextureLayer = stub_glFramebufferTextureLayer;
	piglit_dispatch_glFreeObjectBufferATI = stub_glFreeObjectBufferATI;
	piglit_dispatch_glFrontFace = stub_glFrontFace;
	piglit_dispatch_glFrustum = stub_glFrustum;
	piglit_dispatch_glFrustumf = stub_glFrustumf;
	piglit_dispatch_glFrustumfOES = stub_glFrustumfOES;
	piglit_dispatch_glFrustumx = stub_glFrustumx;
	piglit_dispatch_glFrustumxOES = stub_glFrustumxOES;
	piglit_dispatch_glGenAsyncMarkersSGIX = stub_glGenAsyncMarkersSGIX;
	piglit_dispatch_glGenBuffers = stub_glGenBuffers;
	piglit_dispatch_glGenFencesAPPLE = stub_glGenFencesAPPLE;
	piglit_dispatch_glGenFencesNV = stub_glGenFencesNV;
	piglit_dispatch_glGenFragmentShadersATI = stub_glGenFragmentShadersATI;
	piglit_dispatch_glGenFramebuffers = stub_glGenFramebuffers;
	piglit_dispatch_glGenFramebuffersOES = stub_glGenFramebuffersOES;
	piglit_dispatch_glGenLists = stub_glGenLists;
	piglit_dispatch_glGenNamesAMD = stub_glGenNamesAMD;
	piglit_dispatch_glGenOcclusionQueriesNV = stub_glGenOcclusionQueriesNV;
	piglit_dispatch_glGenPathsNV = stub_glGenPathsNV;
	piglit_dispatch_glGenPerfMonitorsAMD = stub_glGenPerfMonitorsAMD;
	piglit_dispatch_glGenProgramPipelines = stub_glGenProgramPipelines;
	piglit_dispatch_glGenProgramPipelinesEXT = stub_glGenProgramPipelinesEXT;
	piglit_dispatch_glGenProgramsARB = stub_glGenProgramsARB;
	piglit_dispatch_glGenQueries = stub_glGenQueries;
	piglit_dispatch_glGenQueriesEXT = stub_glGenQueriesEXT;
	piglit_dispatch_glGenRenderbuffers = stub_glGenRenderbuffers;
	piglit_dispatch_glGenRenderbuffersOES = stub_glGenRenderbuffersOES;
	piglit_dispatch_glGenSamplers = stub_glGenSamplers;
	piglit_dispatch_glGenSymbolsEXT = stub_glGenSymbolsEXT;
	piglit_dispatch_glGenTextures = stub_glGenTextures;
	piglit_dispatch_glGenTexturesEXT = stub_glGenTexturesEXT;
	piglit_dispatch_glGenTransformFeedbacks = stub_glGenTransformFeedbacks;
	piglit_dispatch_glGenVertexArrays = stub_glGenVertexArrays;
	piglit_dispatch_glGenVertexShadersEXT = stub_glGenVertexShadersEXT;
	piglit_dispatch_glGenerateMipmap = stub_glGenerateMipmap;
	piglit_dispatch_glGenerateMipmapOES = stub_glGenerateMipmapOES;
	piglit_dispatch_glGenerateMultiTexMipmapEXT = stub_glGenerateMultiTexMipmapEXT;
	piglit_dispatch_glGenerateTextureMipmapEXT = stub_glGenerateTextureMipmapEXT;
	piglit_dispatch_glGetActiveAtomicCounterBufferiv = stub_glGetActiveAtomicCounterBufferiv;
	piglit_dispatch_glGetActiveAttrib = stub_glGetActiveAttrib;
	piglit_dispatch_glGetActiveSubroutineName = stub_glGetActiveSubroutineName;
	piglit_dispatch_glGetActiveSubroutineUniformName = stub_glGetActiveSubroutineUniformName;
	piglit_dispatch_glGetActiveSubroutineUniformiv = stub_glGetActiveSubroutineUniformiv;
	piglit_dispatch_glGetActiveUniform = stub_glGetActiveUniform;
	piglit_dispatch_glGetActiveUniformBlockName = stub_glGetActiveUniformBlockName;
	piglit_dispatch_glGetActiveUniformBlockiv = stub_glGetActiveUniformBlockiv;
	piglit_dispatch_glGetActiveUniformName = stub_glGetActiveUniformName;
	piglit_dispatch_glGetActiveUniformsiv = stub_glGetActiveUniformsiv;
	piglit_dispatch_glGetActiveVaryingNV = stub_glGetActiveVaryingNV;
	piglit_dispatch_glGetArrayObjectfvATI = stub_glGetArrayObjectfvATI;
	piglit_dispatch_glGetArrayObjectivATI = stub_glGetArrayObjectivATI;
	piglit_dispatch_glGetAttachedObjectsARB = stub_glGetAttachedObjectsARB;
	piglit_dispatch_glGetAttachedShaders = stub_glGetAttachedShaders;
	piglit_dispatch_glGetAttribLocation = stub_glGetAttribLocation;
	piglit_dispatch_glGetBooleanIndexedvEXT = stub_glGetBooleanIndexedvEXT;
	piglit_dispatch_glGetBooleanv = stub_glGetBooleanv;
	piglit_dispatch_glGetBufferParameteri64v = stub_glGetBufferParameteri64v;
	piglit_dispatch_glGetBufferParameteriv = stub_glGetBufferParameteriv;
	piglit_dispatch_glGetBufferParameterui64vNV = stub_glGetBufferParameterui64vNV;
	piglit_dispatch_glGetBufferPointerv = stub_glGetBufferPointerv;
	piglit_dispatch_glGetBufferSubData = stub_glGetBufferSubData;
	piglit_dispatch_glGetClipPlane = stub_glGetClipPlane;
	piglit_dispatch_glGetClipPlanef = stub_glGetClipPlanef;
	piglit_dispatch_glGetClipPlanefOES = stub_glGetClipPlanefOES;
	piglit_dispatch_glGetClipPlanex = stub_glGetClipPlanex;
	piglit_dispatch_glGetClipPlanexOES = stub_glGetClipPlanexOES;
	piglit_dispatch_glGetColorTable = stub_glGetColorTable;
	piglit_dispatch_glGetColorTableParameterfv = stub_glGetColorTableParameterfv;
	piglit_dispatch_glGetColorTableParameterfvSGI = stub_glGetColorTableParameterfvSGI;
	piglit_dispatch_glGetColorTableParameteriv = stub_glGetColorTableParameteriv;
	piglit_dispatch_glGetColorTableParameterivSGI = stub_glGetColorTableParameterivSGI;
	piglit_dispatch_glGetColorTableSGI = stub_glGetColorTableSGI;
	piglit_dispatch_glGetCombinerInputParameterfvNV = stub_glGetCombinerInputParameterfvNV;
	piglit_dispatch_glGetCombinerInputParameterivNV = stub_glGetCombinerInputParameterivNV;
	piglit_dispatch_glGetCombinerOutputParameterfvNV = stub_glGetCombinerOutputParameterfvNV;
	piglit_dispatch_glGetCombinerOutputParameterivNV = stub_glGetCombinerOutputParameterivNV;
	piglit_dispatch_glGetCombinerStageParameterfvNV = stub_glGetCombinerStageParameterfvNV;
	piglit_dispatch_glGetCompressedMultiTexImageEXT = stub_glGetCompressedMultiTexImageEXT;
	piglit_dispatch_glGetCompressedTexImage = stub_glGetCompressedTexImage;
	piglit_dispatch_glGetCompressedTextureImageEXT = stub_glGetCompressedTextureImageEXT;
	piglit_dispatch_glGetConvolutionFilter = stub_glGetConvolutionFilter;
	piglit_dispatch_glGetConvolutionFilterEXT = stub_glGetConvolutionFilterEXT;
	piglit_dispatch_glGetConvolutionParameterfv = stub_glGetConvolutionParameterfv;
	piglit_dispatch_glGetConvolutionParameterfvEXT = stub_glGetConvolutionParameterfvEXT;
	piglit_dispatch_glGetConvolutionParameteriv = stub_glGetConvolutionParameteriv;
	piglit_dispatch_glGetConvolutionParameterivEXT = stub_glGetConvolutionParameterivEXT;
	piglit_dispatch_glGetConvolutionParameterxvOES = stub_glGetConvolutionParameterxvOES;
	piglit_dispatch_glGetDebugMessageLog = stub_glGetDebugMessageLog;
	piglit_dispatch_glGetDebugMessageLogAMD = stub_glGetDebugMessageLogAMD;
	piglit_dispatch_glGetDetailTexFuncSGIS = stub_glGetDetailTexFuncSGIS;
	piglit_dispatch_glGetDoubleIndexedvEXT = stub_glGetDoubleIndexedvEXT;
	piglit_dispatch_glGetDoublev = stub_glGetDoublev;
	piglit_dispatch_glGetDriverControlStringQCOM = stub_glGetDriverControlStringQCOM;
	piglit_dispatch_glGetDriverControlsQCOM = stub_glGetDriverControlsQCOM;
	piglit_dispatch_glGetError = stub_glGetError;
	piglit_dispatch_glGetFenceivNV = stub_glGetFenceivNV;
	piglit_dispatch_glGetFinalCombinerInputParameterfvNV = stub_glGetFinalCombinerInputParameterfvNV;
	piglit_dispatch_glGetFinalCombinerInputParameterivNV = stub_glGetFinalCombinerInputParameterivNV;
	piglit_dispatch_glGetFirstPerfQueryIdINTEL = stub_glGetFirstPerfQueryIdINTEL;
	piglit_dispatch_glGetFixedv = stub_glGetFixedv;
	piglit_dispatch_glGetFixedvOES = stub_glGetFixedvOES;
	piglit_dispatch_glGetFloatIndexedvEXT = stub_glGetFloatIndexedvEXT;
	piglit_dispatch_glGetFloatv = stub_glGetFloatv;
	piglit_dispatch_glGetFogFuncSGIS = stub_glGetFogFuncSGIS;
	piglit_dispatch_glGetFragDataIndex = stub_glGetFragDataIndex;
	piglit_dispatch_glGetFragDataLocation = stub_glGetFragDataLocation;
	piglit_dispatch_glGetFragmentLightfvSGIX = stub_glGetFragmentLightfvSGIX;
	piglit_dispatch_glGetFragmentLightivSGIX = stub_glGetFragmentLightivSGIX;
	piglit_dispatch_glGetFragmentMaterialfvSGIX = stub_glGetFragmentMaterialfvSGIX;
	piglit_dispatch_glGetFragmentMaterialivSGIX = stub_glGetFragmentMaterialivSGIX;
	piglit_dispatch_glGetFramebufferAttachmentParameteriv = stub_glGetFramebufferAttachmentParameteriv;
	piglit_dispatch_glGetFramebufferAttachmentParameterivOES = stub_glGetFramebufferAttachmentParameterivOES;
	piglit_dispatch_glGetFramebufferParameteriv = stub_glGetFramebufferParameteriv;
	piglit_dispatch_glGetFramebufferParameterivEXT = stub_glGetFramebufferParameterivEXT;
	piglit_dispatch_glGetGraphicsResetStatusARB = stub_glGetGraphicsResetStatusARB;
	piglit_dispatch_glGetGraphicsResetStatusEXT = stub_glGetGraphicsResetStatusEXT;
	piglit_dispatch_glGetHandleARB = stub_glGetHandleARB;
	piglit_dispatch_glGetHistogram = stub_glGetHistogram;
	piglit_dispatch_glGetHistogramEXT = stub_glGetHistogramEXT;
	piglit_dispatch_glGetHistogramParameterfv = stub_glGetHistogramParameterfv;
	piglit_dispatch_glGetHistogramParameterfvEXT = stub_glGetHistogramParameterfvEXT;
	piglit_dispatch_glGetHistogramParameteriv = stub_glGetHistogramParameteriv;
	piglit_dispatch_glGetHistogramParameterivEXT = stub_glGetHistogramParameterivEXT;
	piglit_dispatch_glGetHistogramParameterxvOES = stub_glGetHistogramParameterxvOES;
	piglit_dispatch_glGetImageHandleARB = stub_glGetImageHandleARB;
	piglit_dispatch_glGetImageHandleNV = stub_glGetImageHandleNV;
	piglit_dispatch_glGetImageTransformParameterfvHP = stub_glGetImageTransformParameterfvHP;
	piglit_dispatch_glGetImageTransformParameterivHP = stub_glGetImageTransformParameterivHP;
	piglit_dispatch_glGetInfoLogARB = stub_glGetInfoLogARB;
	piglit_dispatch_glGetInstrumentsSGIX = stub_glGetInstrumentsSGIX;
	piglit_dispatch_glGetInteger64i_v = stub_glGetInteger64i_v;
	piglit_dispatch_glGetInteger64v = stub_glGetInteger64v;
	piglit_dispatch_glGetIntegerIndexedvEXT = stub_glGetIntegerIndexedvEXT;
	piglit_dispatch_glGetIntegeri_vEXT = stub_glGetIntegeri_vEXT;
	piglit_dispatch_glGetIntegerui64i_vNV = stub_glGetIntegerui64i_vNV;
	piglit_dispatch_glGetIntegerui64vNV = stub_glGetIntegerui64vNV;
	piglit_dispatch_glGetIntegerv = stub_glGetIntegerv;
	piglit_dispatch_glGetInternalformati64v = stub_glGetInternalformati64v;
	piglit_dispatch_glGetInternalformativ = stub_glGetInternalformativ;
	piglit_dispatch_glGetInvariantBooleanvEXT = stub_glGetInvariantBooleanvEXT;
	piglit_dispatch_glGetInvariantFloatvEXT = stub_glGetInvariantFloatvEXT;
	piglit_dispatch_glGetInvariantIntegervEXT = stub_glGetInvariantIntegervEXT;
	piglit_dispatch_glGetLightfv = stub_glGetLightfv;
	piglit_dispatch_glGetLightiv = stub_glGetLightiv;
	piglit_dispatch_glGetLightxOES = stub_glGetLightxOES;
	piglit_dispatch_glGetLightxv = stub_glGetLightxv;
	piglit_dispatch_glGetLightxvOES = stub_glGetLightxvOES;
	piglit_dispatch_glGetListParameterfvSGIX = stub_glGetListParameterfvSGIX;
	piglit_dispatch_glGetListParameterivSGIX = stub_glGetListParameterivSGIX;
	piglit_dispatch_glGetLocalConstantBooleanvEXT = stub_glGetLocalConstantBooleanvEXT;
	piglit_dispatch_glGetLocalConstantFloatvEXT = stub_glGetLocalConstantFloatvEXT;
	piglit_dispatch_glGetLocalConstantIntegervEXT = stub_glGetLocalConstantIntegervEXT;
	piglit_dispatch_glGetMapAttribParameterfvNV = stub_glGetMapAttribParameterfvNV;
	piglit_dispatch_glGetMapAttribParameterivNV = stub_glGetMapAttribParameterivNV;
	piglit_dispatch_glGetMapControlPointsNV = stub_glGetMapControlPointsNV;
	piglit_dispatch_glGetMapParameterfvNV = stub_glGetMapParameterfvNV;
	piglit_dispatch_glGetMapParameterivNV = stub_glGetMapParameterivNV;
	piglit_dispatch_glGetMapdv = stub_glGetMapdv;
	piglit_dispatch_glGetMapfv = stub_glGetMapfv;
	piglit_dispatch_glGetMapiv = stub_glGetMapiv;
	piglit_dispatch_glGetMapxvOES = stub_glGetMapxvOES;
	piglit_dispatch_glGetMaterialfv = stub_glGetMaterialfv;
	piglit_dispatch_glGetMaterialiv = stub_glGetMaterialiv;
	piglit_dispatch_glGetMaterialxOES = stub_glGetMaterialxOES;
	piglit_dispatch_glGetMaterialxv = stub_glGetMaterialxv;
	piglit_dispatch_glGetMaterialxvOES = stub_glGetMaterialxvOES;
	piglit_dispatch_glGetMinmax = stub_glGetMinmax;
	piglit_dispatch_glGetMinmaxEXT = stub_glGetMinmaxEXT;
	piglit_dispatch_glGetMinmaxParameterfv = stub_glGetMinmaxParameterfv;
	piglit_dispatch_glGetMinmaxParameterfvEXT = stub_glGetMinmaxParameterfvEXT;
	piglit_dispatch_glGetMinmaxParameteriv = stub_glGetMinmaxParameteriv;
	piglit_dispatch_glGetMinmaxParameterivEXT = stub_glGetMinmaxParameterivEXT;
	piglit_dispatch_glGetMultiTexEnvfvEXT = stub_glGetMultiTexEnvfvEXT;
	piglit_dispatch_glGetMultiTexEnvivEXT = stub_glGetMultiTexEnvivEXT;
	piglit_dispatch_glGetMultiTexGendvEXT = stub_glGetMultiTexGendvEXT;
	piglit_dispatch_glGetMultiTexGenfvEXT = stub_glGetMultiTexGenfvEXT;
	piglit_dispatch_glGetMultiTexGenivEXT = stub_glGetMultiTexGenivEXT;
	piglit_dispatch_glGetMultiTexImageEXT = stub_glGetMultiTexImageEXT;
	piglit_dispatch_glGetMultiTexLevelParameterfvEXT = stub_glGetMultiTexLevelParameterfvEXT;
	piglit_dispatch_glGetMultiTexLevelParameterivEXT = stub_glGetMultiTexLevelParameterivEXT;
	piglit_dispatch_glGetMultiTexParameterIivEXT = stub_glGetMultiTexParameterIivEXT;
	piglit_dispatch_glGetMultiTexParameterIuivEXT = stub_glGetMultiTexParameterIuivEXT;
	piglit_dispatch_glGetMultiTexParameterfvEXT = stub_glGetMultiTexParameterfvEXT;
	piglit_dispatch_glGetMultiTexParameterivEXT = stub_glGetMultiTexParameterivEXT;
	piglit_dispatch_glGetMultisamplefv = stub_glGetMultisamplefv;
	piglit_dispatch_glGetNamedBufferParameterivEXT = stub_glGetNamedBufferParameterivEXT;
	piglit_dispatch_glGetNamedBufferParameterui64vNV = stub_glGetNamedBufferParameterui64vNV;
	piglit_dispatch_glGetNamedBufferPointervEXT = stub_glGetNamedBufferPointervEXT;
	piglit_dispatch_glGetNamedBufferSubDataEXT = stub_glGetNamedBufferSubDataEXT;
	piglit_dispatch_glGetNamedFramebufferAttachmentParameterivEXT = stub_glGetNamedFramebufferAttachmentParameterivEXT;
	piglit_dispatch_glGetNamedFramebufferParameterivEXT = stub_glGetNamedFramebufferParameterivEXT;
	piglit_dispatch_glGetNamedProgramLocalParameterIivEXT = stub_glGetNamedProgramLocalParameterIivEXT;
	piglit_dispatch_glGetNamedProgramLocalParameterIuivEXT = stub_glGetNamedProgramLocalParameterIuivEXT;
	piglit_dispatch_glGetNamedProgramLocalParameterdvEXT = stub_glGetNamedProgramLocalParameterdvEXT;
	piglit_dispatch_glGetNamedProgramLocalParameterfvEXT = stub_glGetNamedProgramLocalParameterfvEXT;
	piglit_dispatch_glGetNamedProgramStringEXT = stub_glGetNamedProgramStringEXT;
	piglit_dispatch_glGetNamedProgramivEXT = stub_glGetNamedProgramivEXT;
	piglit_dispatch_glGetNamedRenderbufferParameterivEXT = stub_glGetNamedRenderbufferParameterivEXT;
	piglit_dispatch_glGetNamedStringARB = stub_glGetNamedStringARB;
	piglit_dispatch_glGetNamedStringivARB = stub_glGetNamedStringivARB;
	piglit_dispatch_glGetNextPerfQueryIdINTEL = stub_glGetNextPerfQueryIdINTEL;
	piglit_dispatch_glGetObjectBufferfvATI = stub_glGetObjectBufferfvATI;
	piglit_dispatch_glGetObjectBufferivATI = stub_glGetObjectBufferivATI;
	piglit_dispatch_glGetObjectLabel = stub_glGetObjectLabel;
	piglit_dispatch_glGetObjectLabelEXT = stub_glGetObjectLabelEXT;
	piglit_dispatch_glGetObjectParameterfvARB = stub_glGetObjectParameterfvARB;
	piglit_dispatch_glGetObjectParameterivAPPLE = stub_glGetObjectParameterivAPPLE;
	piglit_dispatch_glGetObjectParameterivARB = stub_glGetObjectParameterivARB;
	piglit_dispatch_glGetObjectPtrLabel = stub_glGetObjectPtrLabel;
	piglit_dispatch_glGetOcclusionQueryivNV = stub_glGetOcclusionQueryivNV;
	piglit_dispatch_glGetOcclusionQueryuivNV = stub_glGetOcclusionQueryuivNV;
	piglit_dispatch_glGetPathColorGenfvNV = stub_glGetPathColorGenfvNV;
	piglit_dispatch_glGetPathColorGenivNV = stub_glGetPathColorGenivNV;
	piglit_dispatch_glGetPathCommandsNV = stub_glGetPathCommandsNV;
	piglit_dispatch_glGetPathCoordsNV = stub_glGetPathCoordsNV;
	piglit_dispatch_glGetPathDashArrayNV = stub_glGetPathDashArrayNV;
	piglit_dispatch_glGetPathLengthNV = stub_glGetPathLengthNV;
	piglit_dispatch_glGetPathMetricRangeNV = stub_glGetPathMetricRangeNV;
	piglit_dispatch_glGetPathMetricsNV = stub_glGetPathMetricsNV;
	piglit_dispatch_glGetPathParameterfvNV = stub_glGetPathParameterfvNV;
	piglit_dispatch_glGetPathParameterivNV = stub_glGetPathParameterivNV;
	piglit_dispatch_glGetPathSpacingNV = stub_glGetPathSpacingNV;
	piglit_dispatch_glGetPathTexGenfvNV = stub_glGetPathTexGenfvNV;
	piglit_dispatch_glGetPathTexGenivNV = stub_glGetPathTexGenivNV;
	piglit_dispatch_glGetPerfCounterInfoINTEL = stub_glGetPerfCounterInfoINTEL;
	piglit_dispatch_glGetPerfMonitorCounterDataAMD = stub_glGetPerfMonitorCounterDataAMD;
	piglit_dispatch_glGetPerfMonitorCounterInfoAMD = stub_glGetPerfMonitorCounterInfoAMD;
	piglit_dispatch_glGetPerfMonitorCounterStringAMD = stub_glGetPerfMonitorCounterStringAMD;
	piglit_dispatch_glGetPerfMonitorCountersAMD = stub_glGetPerfMonitorCountersAMD;
	piglit_dispatch_glGetPerfMonitorGroupStringAMD = stub_glGetPerfMonitorGroupStringAMD;
	piglit_dispatch_glGetPerfMonitorGroupsAMD = stub_glGetPerfMonitorGroupsAMD;
	piglit_dispatch_glGetPerfQueryDataINTEL = stub_glGetPerfQueryDataINTEL;
	piglit_dispatch_glGetPerfQueryIdByNameINTEL = stub_glGetPerfQueryIdByNameINTEL;
	piglit_dispatch_glGetPerfQueryInfoINTEL = stub_glGetPerfQueryInfoINTEL;
	piglit_dispatch_glGetPixelMapfv = stub_glGetPixelMapfv;
	piglit_dispatch_glGetPixelMapuiv = stub_glGetPixelMapuiv;
	piglit_dispatch_glGetPixelMapusv = stub_glGetPixelMapusv;
	piglit_dispatch_glGetPixelMapxv = stub_glGetPixelMapxv;
	piglit_dispatch_glGetPixelTexGenParameterfvSGIS = stub_glGetPixelTexGenParameterfvSGIS;
	piglit_dispatch_glGetPixelTexGenParameterivSGIS = stub_glGetPixelTexGenParameterivSGIS;
	piglit_dispatch_glGetPixelTransformParameterfvEXT = stub_glGetPixelTransformParameterfvEXT;
	piglit_dispatch_glGetPixelTransformParameterivEXT = stub_glGetPixelTransformParameterivEXT;
	piglit_dispatch_glGetPointerIndexedvEXT = stub_glGetPointerIndexedvEXT;
	piglit_dispatch_glGetPointeri_vEXT = stub_glGetPointeri_vEXT;
	piglit_dispatch_glGetPointerv = stub_glGetPointerv;
	piglit_dispatch_glGetPolygonStipple = stub_glGetPolygonStipple;
	piglit_dispatch_glGetProgramBinary = stub_glGetProgramBinary;
	piglit_dispatch_glGetProgramEnvParameterIivNV = stub_glGetProgramEnvParameterIivNV;
	piglit_dispatch_glGetProgramEnvParameterIuivNV = stub_glGetProgramEnvParameterIuivNV;
	piglit_dispatch_glGetProgramEnvParameterdvARB = stub_glGetProgramEnvParameterdvARB;
	piglit_dispatch_glGetProgramEnvParameterfvARB = stub_glGetProgramEnvParameterfvARB;
	piglit_dispatch_glGetProgramInfoLog = stub_glGetProgramInfoLog;
	piglit_dispatch_glGetProgramInterfaceiv = stub_glGetProgramInterfaceiv;
	piglit_dispatch_glGetProgramLocalParameterIivNV = stub_glGetProgramLocalParameterIivNV;
	piglit_dispatch_glGetProgramLocalParameterIuivNV = stub_glGetProgramLocalParameterIuivNV;
	piglit_dispatch_glGetProgramLocalParameterdvARB = stub_glGetProgramLocalParameterdvARB;
	piglit_dispatch_glGetProgramLocalParameterfvARB = stub_glGetProgramLocalParameterfvARB;
	piglit_dispatch_glGetProgramNamedParameterdvNV = stub_glGetProgramNamedParameterdvNV;
	piglit_dispatch_glGetProgramNamedParameterfvNV = stub_glGetProgramNamedParameterfvNV;
	piglit_dispatch_glGetProgramParameterdvNV = stub_glGetProgramParameterdvNV;
	piglit_dispatch_glGetProgramParameterfvNV = stub_glGetProgramParameterfvNV;
	piglit_dispatch_glGetProgramPipelineInfoLog = stub_glGetProgramPipelineInfoLog;
	piglit_dispatch_glGetProgramPipelineInfoLogEXT = stub_glGetProgramPipelineInfoLogEXT;
	piglit_dispatch_glGetProgramPipelineiv = stub_glGetProgramPipelineiv;
	piglit_dispatch_glGetProgramPipelineivEXT = stub_glGetProgramPipelineivEXT;
	piglit_dispatch_glGetProgramResourceIndex = stub_glGetProgramResourceIndex;
	piglit_dispatch_glGetProgramResourceLocation = stub_glGetProgramResourceLocation;
	piglit_dispatch_glGetProgramResourceLocationIndex = stub_glGetProgramResourceLocationIndex;
	piglit_dispatch_glGetProgramResourceName = stub_glGetProgramResourceName;
	piglit_dispatch_glGetProgramResourceiv = stub_glGetProgramResourceiv;
	piglit_dispatch_glGetProgramStageiv = stub_glGetProgramStageiv;
	piglit_dispatch_glGetProgramStringARB = stub_glGetProgramStringARB;
	piglit_dispatch_glGetProgramStringNV = stub_glGetProgramStringNV;
	piglit_dispatch_glGetProgramSubroutineParameteruivNV = stub_glGetProgramSubroutineParameteruivNV;
	piglit_dispatch_glGetProgramiv = stub_glGetProgramiv;
	piglit_dispatch_glGetProgramivARB = stub_glGetProgramivARB;
	piglit_dispatch_glGetProgramivNV = stub_glGetProgramivNV;
	piglit_dispatch_glGetQueryIndexediv = stub_glGetQueryIndexediv;
	piglit_dispatch_glGetQueryObjecti64v = stub_glGetQueryObjecti64v;
	piglit_dispatch_glGetQueryObjectiv = stub_glGetQueryObjectiv;
	piglit_dispatch_glGetQueryObjectui64v = stub_glGetQueryObjectui64v;
	piglit_dispatch_glGetQueryObjectuiv = stub_glGetQueryObjectuiv;
	piglit_dispatch_glGetQueryObjectuivEXT = stub_glGetQueryObjectuivEXT;
	piglit_dispatch_glGetQueryiv = stub_glGetQueryiv;
	piglit_dispatch_glGetQueryivEXT = stub_glGetQueryivEXT;
	piglit_dispatch_glGetRenderbufferParameteriv = stub_glGetRenderbufferParameteriv;
	piglit_dispatch_glGetRenderbufferParameterivOES = stub_glGetRenderbufferParameterivOES;
	piglit_dispatch_glGetSamplerParameterIiv = stub_glGetSamplerParameterIiv;
	piglit_dispatch_glGetSamplerParameterIuiv = stub_glGetSamplerParameterIuiv;
	piglit_dispatch_glGetSamplerParameterfv = stub_glGetSamplerParameterfv;
	piglit_dispatch_glGetSamplerParameteriv = stub_glGetSamplerParameteriv;
	piglit_dispatch_glGetSeparableFilter = stub_glGetSeparableFilter;
	piglit_dispatch_glGetSeparableFilterEXT = stub_glGetSeparableFilterEXT;
	piglit_dispatch_glGetShaderInfoLog = stub_glGetShaderInfoLog;
	piglit_dispatch_glGetShaderPrecisionFormat = stub_glGetShaderPrecisionFormat;
	piglit_dispatch_glGetShaderSource = stub_glGetShaderSource;
	piglit_dispatch_glGetShaderiv = stub_glGetShaderiv;
	piglit_dispatch_glGetSharpenTexFuncSGIS = stub_glGetSharpenTexFuncSGIS;
	piglit_dispatch_glGetString = stub_glGetString;
	piglit_dispatch_glGetStringi = stub_glGetStringi;
	piglit_dispatch_glGetSubroutineIndex = stub_glGetSubroutineIndex;
	piglit_dispatch_glGetSubroutineUniformLocation = stub_glGetSubroutineUniformLocation;
	piglit_dispatch_glGetSynciv = stub_glGetSynciv;
	piglit_dispatch_glGetTexBumpParameterfvATI = stub_glGetTexBumpParameterfvATI;
	piglit_dispatch_glGetTexBumpParameterivATI = stub_glGetTexBumpParameterivATI;
	piglit_dispatch_glGetTexEnvfv = stub_glGetTexEnvfv;
	piglit_dispatch_glGetTexEnviv = stub_glGetTexEnviv;
	piglit_dispatch_glGetTexEnvxv = stub_glGetTexEnvxv;
	piglit_dispatch_glGetTexEnvxvOES = stub_glGetTexEnvxvOES;
	piglit_dispatch_glGetTexFilterFuncSGIS = stub_glGetTexFilterFuncSGIS;
	piglit_dispatch_glGetTexGendv = stub_glGetTexGendv;
	piglit_dispatch_glGetTexGenfv = stub_glGetTexGenfv;
	piglit_dispatch_glGetTexGenfvOES = stub_glGetTexGenfvOES;
	piglit_dispatch_glGetTexGeniv = stub_glGetTexGeniv;
	piglit_dispatch_glGetTexGenivOES = stub_glGetTexGenivOES;
	piglit_dispatch_glGetTexGenxvOES = stub_glGetTexGenxvOES;
	piglit_dispatch_glGetTexImage = stub_glGetTexImage;
	piglit_dispatch_glGetTexLevelParameterfv = stub_glGetTexLevelParameterfv;
	piglit_dispatch_glGetTexLevelParameteriv = stub_glGetTexLevelParameteriv;
	piglit_dispatch_glGetTexLevelParameterxvOES = stub_glGetTexLevelParameterxvOES;
	piglit_dispatch_glGetTexParameterIiv = stub_glGetTexParameterIiv;
	piglit_dispatch_glGetTexParameterIuiv = stub_glGetTexParameterIuiv;
	piglit_dispatch_glGetTexParameterPointervAPPLE = stub_glGetTexParameterPointervAPPLE;
	piglit_dispatch_glGetTexParameterfv = stub_glGetTexParameterfv;
	piglit_dispatch_glGetTexParameteriv = stub_glGetTexParameteriv;
	piglit_dispatch_glGetTexParameterxv = stub_glGetTexParameterxv;
	piglit_dispatch_glGetTexParameterxvOES = stub_glGetTexParameterxvOES;
	piglit_dispatch_glGetTextureHandleARB = stub_glGetTextureHandleARB;
	piglit_dispatch_glGetTextureHandleNV = stub_glGetTextureHandleNV;
	piglit_dispatch_glGetTextureImageEXT = stub_glGetTextureImageEXT;
	piglit_dispatch_glGetTextureLevelParameterfvEXT = stub_glGetTextureLevelParameterfvEXT;
	piglit_dispatch_glGetTextureLevelParameterivEXT = stub_glGetTextureLevelParameterivEXT;
	piglit_dispatch_glGetTextureParameterIivEXT = stub_glGetTextureParameterIivEXT;
	piglit_dispatch_glGetTextureParameterIuivEXT = stub_glGetTextureParameterIuivEXT;
	piglit_dispatch_glGetTextureParameterfvEXT = stub_glGetTextureParameterfvEXT;
	piglit_dispatch_glGetTextureParameterivEXT = stub_glGetTextureParameterivEXT;
	piglit_dispatch_glGetTextureSamplerHandleARB = stub_glGetTextureSamplerHandleARB;
	piglit_dispatch_glGetTextureSamplerHandleNV = stub_glGetTextureSamplerHandleNV;
	piglit_dispatch_glGetTrackMatrixivNV = stub_glGetTrackMatrixivNV;
	piglit_dispatch_glGetTransformFeedbackVarying = stub_glGetTransformFeedbackVarying;
	piglit_dispatch_glGetTransformFeedbackVaryingNV = stub_glGetTransformFeedbackVaryingNV;
	piglit_dispatch_glGetTranslatedShaderSourceANGLE = stub_glGetTranslatedShaderSourceANGLE;
	piglit_dispatch_glGetUniformBlockIndex = stub_glGetUniformBlockIndex;
	piglit_dispatch_glGetUniformBufferSizeEXT = stub_glGetUniformBufferSizeEXT;
	piglit_dispatch_glGetUniformIndices = stub_glGetUniformIndices;
	piglit_dispatch_glGetUniformLocation = stub_glGetUniformLocation;
	piglit_dispatch_glGetUniformOffsetEXT = stub_glGetUniformOffsetEXT;
	piglit_dispatch_glGetUniformSubroutineuiv = stub_glGetUniformSubroutineuiv;
	piglit_dispatch_glGetUniformdv = stub_glGetUniformdv;
	piglit_dispatch_glGetUniformfv = stub_glGetUniformfv;
	piglit_dispatch_glGetUniformi64vNV = stub_glGetUniformi64vNV;
	piglit_dispatch_glGetUniformiv = stub_glGetUniformiv;
	piglit_dispatch_glGetUniformui64vNV = stub_glGetUniformui64vNV;
	piglit_dispatch_glGetUniformuiv = stub_glGetUniformuiv;
	piglit_dispatch_glGetVariantArrayObjectfvATI = stub_glGetVariantArrayObjectfvATI;
	piglit_dispatch_glGetVariantArrayObjectivATI = stub_glGetVariantArrayObjectivATI;
	piglit_dispatch_glGetVariantBooleanvEXT = stub_glGetVariantBooleanvEXT;
	piglit_dispatch_glGetVariantFloatvEXT = stub_glGetVariantFloatvEXT;
	piglit_dispatch_glGetVariantIntegervEXT = stub_glGetVariantIntegervEXT;
	piglit_dispatch_glGetVariantPointervEXT = stub_glGetVariantPointervEXT;
	piglit_dispatch_glGetVaryingLocationNV = stub_glGetVaryingLocationNV;
	piglit_dispatch_glGetVertexArrayIntegeri_vEXT = stub_glGetVertexArrayIntegeri_vEXT;
	piglit_dispatch_glGetVertexArrayIntegervEXT = stub_glGetVertexArrayIntegervEXT;
	piglit_dispatch_glGetVertexArrayPointeri_vEXT = stub_glGetVertexArrayPointeri_vEXT;
	piglit_dispatch_glGetVertexArrayPointervEXT = stub_glGetVertexArrayPointervEXT;
	piglit_dispatch_glGetVertexAttribArrayObjectfvATI = stub_glGetVertexAttribArrayObjectfvATI;
	piglit_dispatch_glGetVertexAttribArrayObjectivATI = stub_glGetVertexAttribArrayObjectivATI;
	piglit_dispatch_glGetVertexAttribIiv = stub_glGetVertexAttribIiv;
	piglit_dispatch_glGetVertexAttribIuiv = stub_glGetVertexAttribIuiv;
	piglit_dispatch_glGetVertexAttribLdv = stub_glGetVertexAttribLdv;
	piglit_dispatch_glGetVertexAttribLi64vNV = stub_glGetVertexAttribLi64vNV;
	piglit_dispatch_glGetVertexAttribLui64vARB = stub_glGetVertexAttribLui64vARB;
	piglit_dispatch_glGetVertexAttribLui64vNV = stub_glGetVertexAttribLui64vNV;
	piglit_dispatch_glGetVertexAttribPointerv = stub_glGetVertexAttribPointerv;
	piglit_dispatch_glGetVertexAttribdv = stub_glGetVertexAttribdv;
	piglit_dispatch_glGetVertexAttribfv = stub_glGetVertexAttribfv;
	piglit_dispatch_glGetVertexAttribiv = stub_glGetVertexAttribiv;
	piglit_dispatch_glGetVideoCaptureStreamdvNV = stub_glGetVideoCaptureStreamdvNV;
	piglit_dispatch_glGetVideoCaptureStreamfvNV = stub_glGetVideoCaptureStreamfvNV;
	piglit_dispatch_glGetVideoCaptureStreamivNV = stub_glGetVideoCaptureStreamivNV;
	piglit_dispatch_glGetVideoCaptureivNV = stub_glGetVideoCaptureivNV;
	piglit_dispatch_glGetVideoi64vNV = stub_glGetVideoi64vNV;
	piglit_dispatch_glGetVideoivNV = stub_glGetVideoivNV;
	piglit_dispatch_glGetVideoui64vNV = stub_glGetVideoui64vNV;
	piglit_dispatch_glGetVideouivNV = stub_glGetVideouivNV;
	piglit_dispatch_glGetnColorTableARB = stub_glGetnColorTableARB;
	piglit_dispatch_glGetnCompressedTexImageARB = stub_glGetnCompressedTexImageARB;
	piglit_dispatch_glGetnConvolutionFilterARB = stub_glGetnConvolutionFilterARB;
	piglit_dispatch_glGetnHistogramARB = stub_glGetnHistogramARB;
	piglit_dispatch_glGetnMapdvARB = stub_glGetnMapdvARB;
	piglit_dispatch_glGetnMapfvARB = stub_glGetnMapfvARB;
	piglit_dispatch_glGetnMapivARB = stub_glGetnMapivARB;
	piglit_dispatch_glGetnMinmaxARB = stub_glGetnMinmaxARB;
	piglit_dispatch_glGetnPixelMapfvARB = stub_glGetnPixelMapfvARB;
	piglit_dispatch_glGetnPixelMapuivARB = stub_glGetnPixelMapuivARB;
	piglit_dispatch_glGetnPixelMapusvARB = stub_glGetnPixelMapusvARB;
	piglit_dispatch_glGetnPolygonStippleARB = stub_glGetnPolygonStippleARB;
	piglit_dispatch_glGetnSeparableFilterARB = stub_glGetnSeparableFilterARB;
	piglit_dispatch_glGetnTexImageARB = stub_glGetnTexImageARB;
	piglit_dispatch_glGetnUniformdvARB = stub_glGetnUniformdvARB;
	piglit_dispatch_glGetnUniformfvARB = stub_glGetnUniformfvARB;
	piglit_dispatch_glGetnUniformfvEXT = stub_glGetnUniformfvEXT;
	piglit_dispatch_glGetnUniformivARB = stub_glGetnUniformivARB;
	piglit_dispatch_glGetnUniformivEXT = stub_glGetnUniformivEXT;
	piglit_dispatch_glGetnUniformuivARB = stub_glGetnUniformuivARB;
	piglit_dispatch_glGlobalAlphaFactorbSUN = stub_glGlobalAlphaFactorbSUN;
	piglit_dispatch_glGlobalAlphaFactordSUN = stub_glGlobalAlphaFactordSUN;
	piglit_dispatch_glGlobalAlphaFactorfSUN = stub_glGlobalAlphaFactorfSUN;
	piglit_dispatch_glGlobalAlphaFactoriSUN = stub_glGlobalAlphaFactoriSUN;
	piglit_dispatch_glGlobalAlphaFactorsSUN = stub_glGlobalAlphaFactorsSUN;
	piglit_dispatch_glGlobalAlphaFactorubSUN = stub_glGlobalAlphaFactorubSUN;
	piglit_dispatch_glGlobalAlphaFactoruiSUN = stub_glGlobalAlphaFactoruiSUN;
	piglit_dispatch_glGlobalAlphaFactorusSUN = stub_glGlobalAlphaFactorusSUN;
	piglit_dispatch_glHint = stub_glHint;
	piglit_dispatch_glHintPGI = stub_glHintPGI;
	piglit_dispatch_glHistogram = stub_glHistogram;
	piglit_dispatch_glIglooInterfaceSGIX = stub_glIglooInterfaceSGIX;
	piglit_dispatch_glImageTransformParameterfHP = stub_glImageTransformParameterfHP;
	piglit_dispatch_glImageTransformParameterfvHP = stub_glImageTransformParameterfvHP;
	piglit_dispatch_glImageTransformParameteriHP = stub_glImageTransformParameteriHP;
	piglit_dispatch_glImageTransformParameterivHP = stub_glImageTransformParameterivHP;
	piglit_dispatch_glImportSyncEXT = stub_glImportSyncEXT;
	piglit_dispatch_glIndexFormatNV = stub_glIndexFormatNV;
	piglit_dispatch_glIndexFuncEXT = stub_glIndexFuncEXT;
	piglit_dispatch_glIndexMask = stub_glIndexMask;
	piglit_dispatch_glIndexMaterialEXT = stub_glIndexMaterialEXT;
	piglit_dispatch_glIndexPointer = stub_glIndexPointer;
	piglit_dispatch_glIndexPointerEXT = stub_glIndexPointerEXT;
	piglit_dispatch_glIndexPointerListIBM = stub_glIndexPointerListIBM;
	piglit_dispatch_glIndexd = stub_glIndexd;
	piglit_dispatch_glIndexdv = stub_glIndexdv;
	piglit_dispatch_glIndexf = stub_glIndexf;
	piglit_dispatch_glIndexfv = stub_glIndexfv;
	piglit_dispatch_glIndexi = stub_glIndexi;
	piglit_dispatch_glIndexiv = stub_glIndexiv;
	piglit_dispatch_glIndexs = stub_glIndexs;
	piglit_dispatch_glIndexsv = stub_glIndexsv;
	piglit_dispatch_glIndexub = stub_glIndexub;
	piglit_dispatch_glIndexubv = stub_glIndexubv;
	piglit_dispatch_glIndexxOES = stub_glIndexxOES;
	piglit_dispatch_glIndexxvOES = stub_glIndexxvOES;
	piglit_dispatch_glInitNames = stub_glInitNames;
	piglit_dispatch_glInsertComponentEXT = stub_glInsertComponentEXT;
	piglit_dispatch_glInsertEventMarkerEXT = stub_glInsertEventMarkerEXT;
	piglit_dispatch_glInstrumentsBufferSGIX = stub_glInstrumentsBufferSGIX;
	piglit_dispatch_glInterleavedArrays = stub_glInterleavedArrays;
	piglit_dispatch_glInterpolatePathsNV = stub_glInterpolatePathsNV;
	piglit_dispatch_glInvalidateBufferData = stub_glInvalidateBufferData;
	piglit_dispatch_glInvalidateBufferSubData = stub_glInvalidateBufferSubData;
	piglit_dispatch_glInvalidateFramebuffer = stub_glInvalidateFramebuffer;
	piglit_dispatch_glInvalidateSubFramebuffer = stub_glInvalidateSubFramebuffer;
	piglit_dispatch_glInvalidateTexImage = stub_glInvalidateTexImage;
	piglit_dispatch_glInvalidateTexSubImage = stub_glInvalidateTexSubImage;
	piglit_dispatch_glIsAsyncMarkerSGIX = stub_glIsAsyncMarkerSGIX;
	piglit_dispatch_glIsBuffer = stub_glIsBuffer;
	piglit_dispatch_glIsBufferResidentNV = stub_glIsBufferResidentNV;
	piglit_dispatch_glIsEnabled = stub_glIsEnabled;
	piglit_dispatch_glIsEnabledIndexedEXT = stub_glIsEnabledIndexedEXT;
	piglit_dispatch_glIsFenceAPPLE = stub_glIsFenceAPPLE;
	piglit_dispatch_glIsFenceNV = stub_glIsFenceNV;
	piglit_dispatch_glIsFramebuffer = stub_glIsFramebuffer;
	piglit_dispatch_glIsFramebufferOES = stub_glIsFramebufferOES;
	piglit_dispatch_glIsImageHandleResidentARB = stub_glIsImageHandleResidentARB;
	piglit_dispatch_glIsImageHandleResidentNV = stub_glIsImageHandleResidentNV;
	piglit_dispatch_glIsList = stub_glIsList;
	piglit_dispatch_glIsNameAMD = stub_glIsNameAMD;
	piglit_dispatch_glIsNamedBufferResidentNV = stub_glIsNamedBufferResidentNV;
	piglit_dispatch_glIsNamedStringARB = stub_glIsNamedStringARB;
	piglit_dispatch_glIsObjectBufferATI = stub_glIsObjectBufferATI;
	piglit_dispatch_glIsOcclusionQueryNV = stub_glIsOcclusionQueryNV;
	piglit_dispatch_glIsPathNV = stub_glIsPathNV;
	piglit_dispatch_glIsPointInFillPathNV = stub_glIsPointInFillPathNV;
	piglit_dispatch_glIsPointInStrokePathNV = stub_glIsPointInStrokePathNV;
	piglit_dispatch_glIsProgram = stub_glIsProgram;
	piglit_dispatch_glIsProgramARB = stub_glIsProgramARB;
	piglit_dispatch_glIsProgramPipeline = stub_glIsProgramPipeline;
	piglit_dispatch_glIsProgramPipelineEXT = stub_glIsProgramPipelineEXT;
	piglit_dispatch_glIsQuery = stub_glIsQuery;
	piglit_dispatch_glIsQueryEXT = stub_glIsQueryEXT;
	piglit_dispatch_glIsRenderbuffer = stub_glIsRenderbuffer;
	piglit_dispatch_glIsRenderbufferOES = stub_glIsRenderbufferOES;
	piglit_dispatch_glIsSampler = stub_glIsSampler;
	piglit_dispatch_glIsShader = stub_glIsShader;
	piglit_dispatch_glIsSync = stub_glIsSync;
	piglit_dispatch_glIsTexture = stub_glIsTexture;
	piglit_dispatch_glIsTextureEXT = stub_glIsTextureEXT;
	piglit_dispatch_glIsTextureHandleResidentARB = stub_glIsTextureHandleResidentARB;
	piglit_dispatch_glIsTextureHandleResidentNV = stub_glIsTextureHandleResidentNV;
	piglit_dispatch_glIsTransformFeedback = stub_glIsTransformFeedback;
	piglit_dispatch_glIsVariantEnabledEXT = stub_glIsVariantEnabledEXT;
	piglit_dispatch_glIsVertexArray = stub_glIsVertexArray;
	piglit_dispatch_glIsVertexAttribEnabledAPPLE = stub_glIsVertexAttribEnabledAPPLE;
	piglit_dispatch_glLabelObjectEXT = stub_glLabelObjectEXT;
	piglit_dispatch_glLightEnviSGIX = stub_glLightEnviSGIX;
	piglit_dispatch_glLightModelf = stub_glLightModelf;
	piglit_dispatch_glLightModelfv = stub_glLightModelfv;
	piglit_dispatch_glLightModeli = stub_glLightModeli;
	piglit_dispatch_glLightModeliv = stub_glLightModeliv;
	piglit_dispatch_glLightModelx = stub_glLightModelx;
	piglit_dispatch_glLightModelxOES = stub_glLightModelxOES;
	piglit_dispatch_glLightModelxv = stub_glLightModelxv;
	piglit_dispatch_glLightModelxvOES = stub_glLightModelxvOES;
	piglit_dispatch_glLightf = stub_glLightf;
	piglit_dispatch_glLightfv = stub_glLightfv;
	piglit_dispatch_glLighti = stub_glLighti;
	piglit_dispatch_glLightiv = stub_glLightiv;
	piglit_dispatch_glLightx = stub_glLightx;
	piglit_dispatch_glLightxOES = stub_glLightxOES;
	piglit_dispatch_glLightxv = stub_glLightxv;
	piglit_dispatch_glLightxvOES = stub_glLightxvOES;
	piglit_dispatch_glLineStipple = stub_glLineStipple;
	piglit_dispatch_glLineWidth = stub_glLineWidth;
	piglit_dispatch_glLineWidthx = stub_glLineWidthx;
	piglit_dispatch_glLineWidthxOES = stub_glLineWidthxOES;
	piglit_dispatch_glLinkProgram = stub_glLinkProgram;
	piglit_dispatch_glListBase = stub_glListBase;
	piglit_dispatch_glListParameterfSGIX = stub_glListParameterfSGIX;
	piglit_dispatch_glListParameterfvSGIX = stub_glListParameterfvSGIX;
	piglit_dispatch_glListParameteriSGIX = stub_glListParameteriSGIX;
	piglit_dispatch_glListParameterivSGIX = stub_glListParameterivSGIX;
	piglit_dispatch_glLoadIdentity = stub_glLoadIdentity;
	piglit_dispatch_glLoadIdentityDeformationMapSGIX = stub_glLoadIdentityDeformationMapSGIX;
	piglit_dispatch_glLoadMatrixd = stub_glLoadMatrixd;
	piglit_dispatch_glLoadMatrixf = stub_glLoadMatrixf;
	piglit_dispatch_glLoadMatrixx = stub_glLoadMatrixx;
	piglit_dispatch_glLoadMatrixxOES = stub_glLoadMatrixxOES;
	piglit_dispatch_glLoadName = stub_glLoadName;
	piglit_dispatch_glLoadPaletteFromModelViewMatrixOES = stub_glLoadPaletteFromModelViewMatrixOES;
	piglit_dispatch_glLoadProgramNV = stub_glLoadProgramNV;
	piglit_dispatch_glLoadTransposeMatrixd = stub_glLoadTransposeMatrixd;
	piglit_dispatch_glLoadTransposeMatrixf = stub_glLoadTransposeMatrixf;
	piglit_dispatch_glLoadTransposeMatrixxOES = stub_glLoadTransposeMatrixxOES;
	piglit_dispatch_glLockArraysEXT = stub_glLockArraysEXT;
	piglit_dispatch_glLogicOp = stub_glLogicOp;
	piglit_dispatch_glMakeBufferNonResidentNV = stub_glMakeBufferNonResidentNV;
	piglit_dispatch_glMakeBufferResidentNV = stub_glMakeBufferResidentNV;
	piglit_dispatch_glMakeImageHandleNonResidentARB = stub_glMakeImageHandleNonResidentARB;
	piglit_dispatch_glMakeImageHandleNonResidentNV = stub_glMakeImageHandleNonResidentNV;
	piglit_dispatch_glMakeImageHandleResidentARB = stub_glMakeImageHandleResidentARB;
	piglit_dispatch_glMakeImageHandleResidentNV = stub_glMakeImageHandleResidentNV;
	piglit_dispatch_glMakeNamedBufferNonResidentNV = stub_glMakeNamedBufferNonResidentNV;
	piglit_dispatch_glMakeNamedBufferResidentNV = stub_glMakeNamedBufferResidentNV;
	piglit_dispatch_glMakeTextureHandleNonResidentARB = stub_glMakeTextureHandleNonResidentARB;
	piglit_dispatch_glMakeTextureHandleNonResidentNV = stub_glMakeTextureHandleNonResidentNV;
	piglit_dispatch_glMakeTextureHandleResidentARB = stub_glMakeTextureHandleResidentARB;
	piglit_dispatch_glMakeTextureHandleResidentNV = stub_glMakeTextureHandleResidentNV;
	piglit_dispatch_glMap1d = stub_glMap1d;
	piglit_dispatch_glMap1f = stub_glMap1f;
	piglit_dispatch_glMap1xOES = stub_glMap1xOES;
	piglit_dispatch_glMap2d = stub_glMap2d;
	piglit_dispatch_glMap2f = stub_glMap2f;
	piglit_dispatch_glMap2xOES = stub_glMap2xOES;
	piglit_dispatch_glMapBuffer = stub_glMapBuffer;
	piglit_dispatch_glMapBufferRange = stub_glMapBufferRange;
	piglit_dispatch_glMapControlPointsNV = stub_glMapControlPointsNV;
	piglit_dispatch_glMapGrid1d = stub_glMapGrid1d;
	piglit_dispatch_glMapGrid1f = stub_glMapGrid1f;
	piglit_dispatch_glMapGrid1xOES = stub_glMapGrid1xOES;
	piglit_dispatch_glMapGrid2d = stub_glMapGrid2d;
	piglit_dispatch_glMapGrid2f = stub_glMapGrid2f;
	piglit_dispatch_glMapGrid2xOES = stub_glMapGrid2xOES;
	piglit_dispatch_glMapNamedBufferEXT = stub_glMapNamedBufferEXT;
	piglit_dispatch_glMapNamedBufferRangeEXT = stub_glMapNamedBufferRangeEXT;
	piglit_dispatch_glMapObjectBufferATI = stub_glMapObjectBufferATI;
	piglit_dispatch_glMapParameterfvNV = stub_glMapParameterfvNV;
	piglit_dispatch_glMapParameterivNV = stub_glMapParameterivNV;
	piglit_dispatch_glMapTexture2DINTEL = stub_glMapTexture2DINTEL;
	piglit_dispatch_glMapVertexAttrib1dAPPLE = stub_glMapVertexAttrib1dAPPLE;
	piglit_dispatch_glMapVertexAttrib1fAPPLE = stub_glMapVertexAttrib1fAPPLE;
	piglit_dispatch_glMapVertexAttrib2dAPPLE = stub_glMapVertexAttrib2dAPPLE;
	piglit_dispatch_glMapVertexAttrib2fAPPLE = stub_glMapVertexAttrib2fAPPLE;
	piglit_dispatch_glMaterialf = stub_glMaterialf;
	piglit_dispatch_glMaterialfv = stub_glMaterialfv;
	piglit_dispatch_glMateriali = stub_glMateriali;
	piglit_dispatch_glMaterialiv = stub_glMaterialiv;
	piglit_dispatch_glMaterialx = stub_glMaterialx;
	piglit_dispatch_glMaterialxOES = stub_glMaterialxOES;
	piglit_dispatch_glMaterialxv = stub_glMaterialxv;
	piglit_dispatch_glMaterialxvOES = stub_glMaterialxvOES;
	piglit_dispatch_glMatrixFrustumEXT = stub_glMatrixFrustumEXT;
	piglit_dispatch_glMatrixIndexPointerARB = stub_glMatrixIndexPointerARB;
	piglit_dispatch_glMatrixIndexPointerOES = stub_glMatrixIndexPointerOES;
	piglit_dispatch_glMatrixIndexubvARB = stub_glMatrixIndexubvARB;
	piglit_dispatch_glMatrixIndexuivARB = stub_glMatrixIndexuivARB;
	piglit_dispatch_glMatrixIndexusvARB = stub_glMatrixIndexusvARB;
	piglit_dispatch_glMatrixLoadIdentityEXT = stub_glMatrixLoadIdentityEXT;
	piglit_dispatch_glMatrixLoadTransposedEXT = stub_glMatrixLoadTransposedEXT;
	piglit_dispatch_glMatrixLoadTransposefEXT = stub_glMatrixLoadTransposefEXT;
	piglit_dispatch_glMatrixLoaddEXT = stub_glMatrixLoaddEXT;
	piglit_dispatch_glMatrixLoadfEXT = stub_glMatrixLoadfEXT;
	piglit_dispatch_glMatrixMode = stub_glMatrixMode;
	piglit_dispatch_glMatrixMultTransposedEXT = stub_glMatrixMultTransposedEXT;
	piglit_dispatch_glMatrixMultTransposefEXT = stub_glMatrixMultTransposefEXT;
	piglit_dispatch_glMatrixMultdEXT = stub_glMatrixMultdEXT;
	piglit_dispatch_glMatrixMultfEXT = stub_glMatrixMultfEXT;
	piglit_dispatch_glMatrixOrthoEXT = stub_glMatrixOrthoEXT;
	piglit_dispatch_glMatrixPopEXT = stub_glMatrixPopEXT;
	piglit_dispatch_glMatrixPushEXT = stub_glMatrixPushEXT;
	piglit_dispatch_glMatrixRotatedEXT = stub_glMatrixRotatedEXT;
	piglit_dispatch_glMatrixRotatefEXT = stub_glMatrixRotatefEXT;
	piglit_dispatch_glMatrixScaledEXT = stub_glMatrixScaledEXT;
	piglit_dispatch_glMatrixScalefEXT = stub_glMatrixScalefEXT;
	piglit_dispatch_glMatrixTranslatedEXT = stub_glMatrixTranslatedEXT;
	piglit_dispatch_glMatrixTranslatefEXT = stub_glMatrixTranslatefEXT;
	piglit_dispatch_glMemoryBarrier = stub_glMemoryBarrier;
	piglit_dispatch_glMemoryBarrierByRegion = stub_glMemoryBarrierByRegion;
	piglit_dispatch_glMinSampleShading = stub_glMinSampleShading;
	piglit_dispatch_glMinmax = stub_glMinmax;
	piglit_dispatch_glMultMatrixd = stub_glMultMatrixd;
	piglit_dispatch_glMultMatrixf = stub_glMultMatrixf;
	piglit_dispatch_glMultMatrixx = stub_glMultMatrixx;
	piglit_dispatch_glMultMatrixxOES = stub_glMultMatrixxOES;
	piglit_dispatch_glMultTransposeMatrixd = stub_glMultTransposeMatrixd;
	piglit_dispatch_glMultTransposeMatrixf = stub_glMultTransposeMatrixf;
	piglit_dispatch_glMultTransposeMatrixxOES = stub_glMultTransposeMatrixxOES;
	piglit_dispatch_glMultiDrawArrays = stub_glMultiDrawArrays;
	piglit_dispatch_glMultiDrawArraysIndirect = stub_glMultiDrawArraysIndirect;
	piglit_dispatch_glMultiDrawArraysIndirectBindlessNV = stub_glMultiDrawArraysIndirectBindlessNV;
	piglit_dispatch_glMultiDrawArraysIndirectCountARB = stub_glMultiDrawArraysIndirectCountARB;
	piglit_dispatch_glMultiDrawElementArrayAPPLE = stub_glMultiDrawElementArrayAPPLE;
	piglit_dispatch_glMultiDrawElements = stub_glMultiDrawElements;
	piglit_dispatch_glMultiDrawElementsBaseVertex = stub_glMultiDrawElementsBaseVertex;
	piglit_dispatch_glMultiDrawElementsIndirect = stub_glMultiDrawElementsIndirect;
	piglit_dispatch_glMultiDrawElementsIndirectBindlessNV = stub_glMultiDrawElementsIndirectBindlessNV;
	piglit_dispatch_glMultiDrawElementsIndirectCountARB = stub_glMultiDrawElementsIndirectCountARB;
	piglit_dispatch_glMultiDrawRangeElementArrayAPPLE = stub_glMultiDrawRangeElementArrayAPPLE;
	piglit_dispatch_glMultiModeDrawArraysIBM = stub_glMultiModeDrawArraysIBM;
	piglit_dispatch_glMultiModeDrawElementsIBM = stub_glMultiModeDrawElementsIBM;
	piglit_dispatch_glMultiTexBufferEXT = stub_glMultiTexBufferEXT;
	piglit_dispatch_glMultiTexCoord1bOES = stub_glMultiTexCoord1bOES;
	piglit_dispatch_glMultiTexCoord1bvOES = stub_glMultiTexCoord1bvOES;
	piglit_dispatch_glMultiTexCoord1d = stub_glMultiTexCoord1d;
	piglit_dispatch_glMultiTexCoord1dv = stub_glMultiTexCoord1dv;
	piglit_dispatch_glMultiTexCoord1f = stub_glMultiTexCoord1f;
	piglit_dispatch_glMultiTexCoord1fv = stub_glMultiTexCoord1fv;
	piglit_dispatch_glMultiTexCoord1hNV = stub_glMultiTexCoord1hNV;
	piglit_dispatch_glMultiTexCoord1hvNV = stub_glMultiTexCoord1hvNV;
	piglit_dispatch_glMultiTexCoord1i = stub_glMultiTexCoord1i;
	piglit_dispatch_glMultiTexCoord1iv = stub_glMultiTexCoord1iv;
	piglit_dispatch_glMultiTexCoord1s = stub_glMultiTexCoord1s;
	piglit_dispatch_glMultiTexCoord1sv = stub_glMultiTexCoord1sv;
	piglit_dispatch_glMultiTexCoord1xOES = stub_glMultiTexCoord1xOES;
	piglit_dispatch_glMultiTexCoord1xvOES = stub_glMultiTexCoord1xvOES;
	piglit_dispatch_glMultiTexCoord2bOES = stub_glMultiTexCoord2bOES;
	piglit_dispatch_glMultiTexCoord2bvOES = stub_glMultiTexCoord2bvOES;
	piglit_dispatch_glMultiTexCoord2d = stub_glMultiTexCoord2d;
	piglit_dispatch_glMultiTexCoord2dv = stub_glMultiTexCoord2dv;
	piglit_dispatch_glMultiTexCoord2f = stub_glMultiTexCoord2f;
	piglit_dispatch_glMultiTexCoord2fv = stub_glMultiTexCoord2fv;
	piglit_dispatch_glMultiTexCoord2hNV = stub_glMultiTexCoord2hNV;
	piglit_dispatch_glMultiTexCoord2hvNV = stub_glMultiTexCoord2hvNV;
	piglit_dispatch_glMultiTexCoord2i = stub_glMultiTexCoord2i;
	piglit_dispatch_glMultiTexCoord2iv = stub_glMultiTexCoord2iv;
	piglit_dispatch_glMultiTexCoord2s = stub_glMultiTexCoord2s;
	piglit_dispatch_glMultiTexCoord2sv = stub_glMultiTexCoord2sv;
	piglit_dispatch_glMultiTexCoord2xOES = stub_glMultiTexCoord2xOES;
	piglit_dispatch_glMultiTexCoord2xvOES = stub_glMultiTexCoord2xvOES;
	piglit_dispatch_glMultiTexCoord3bOES = stub_glMultiTexCoord3bOES;
	piglit_dispatch_glMultiTexCoord3bvOES = stub_glMultiTexCoord3bvOES;
	piglit_dispatch_glMultiTexCoord3d = stub_glMultiTexCoord3d;
	piglit_dispatch_glMultiTexCoord3dv = stub_glMultiTexCoord3dv;
	piglit_dispatch_glMultiTexCoord3f = stub_glMultiTexCoord3f;
	piglit_dispatch_glMultiTexCoord3fv = stub_glMultiTexCoord3fv;
	piglit_dispatch_glMultiTexCoord3hNV = stub_glMultiTexCoord3hNV;
	piglit_dispatch_glMultiTexCoord3hvNV = stub_glMultiTexCoord3hvNV;
	piglit_dispatch_glMultiTexCoord3i = stub_glMultiTexCoord3i;
	piglit_dispatch_glMultiTexCoord3iv = stub_glMultiTexCoord3iv;
	piglit_dispatch_glMultiTexCoord3s = stub_glMultiTexCoord3s;
	piglit_dispatch_glMultiTexCoord3sv = stub_glMultiTexCoord3sv;
	piglit_dispatch_glMultiTexCoord3xOES = stub_glMultiTexCoord3xOES;
	piglit_dispatch_glMultiTexCoord3xvOES = stub_glMultiTexCoord3xvOES;
	piglit_dispatch_glMultiTexCoord4bOES = stub_glMultiTexCoord4bOES;
	piglit_dispatch_glMultiTexCoord4bvOES = stub_glMultiTexCoord4bvOES;
	piglit_dispatch_glMultiTexCoord4d = stub_glMultiTexCoord4d;
	piglit_dispatch_glMultiTexCoord4dv = stub_glMultiTexCoord4dv;
	piglit_dispatch_glMultiTexCoord4f = stub_glMultiTexCoord4f;
	piglit_dispatch_glMultiTexCoord4fv = stub_glMultiTexCoord4fv;
	piglit_dispatch_glMultiTexCoord4hNV = stub_glMultiTexCoord4hNV;
	piglit_dispatch_glMultiTexCoord4hvNV = stub_glMultiTexCoord4hvNV;
	piglit_dispatch_glMultiTexCoord4i = stub_glMultiTexCoord4i;
	piglit_dispatch_glMultiTexCoord4iv = stub_glMultiTexCoord4iv;
	piglit_dispatch_glMultiTexCoord4s = stub_glMultiTexCoord4s;
	piglit_dispatch_glMultiTexCoord4sv = stub_glMultiTexCoord4sv;
	piglit_dispatch_glMultiTexCoord4x = stub_glMultiTexCoord4x;
	piglit_dispatch_glMultiTexCoord4xOES = stub_glMultiTexCoord4xOES;
	piglit_dispatch_glMultiTexCoord4xvOES = stub_glMultiTexCoord4xvOES;
	piglit_dispatch_glMultiTexCoordP1ui = stub_glMultiTexCoordP1ui;
	piglit_dispatch_glMultiTexCoordP1uiv = stub_glMultiTexCoordP1uiv;
	piglit_dispatch_glMultiTexCoordP2ui = stub_glMultiTexCoordP2ui;
	piglit_dispatch_glMultiTexCoordP2uiv = stub_glMultiTexCoordP2uiv;
	piglit_dispatch_glMultiTexCoordP3ui = stub_glMultiTexCoordP3ui;
	piglit_dispatch_glMultiTexCoordP3uiv = stub_glMultiTexCoordP3uiv;
	piglit_dispatch_glMultiTexCoordP4ui = stub_glMultiTexCoordP4ui;
	piglit_dispatch_glMultiTexCoordP4uiv = stub_glMultiTexCoordP4uiv;
	piglit_dispatch_glMultiTexCoordPointerEXT = stub_glMultiTexCoordPointerEXT;
	piglit_dispatch_glMultiTexEnvfEXT = stub_glMultiTexEnvfEXT;
	piglit_dispatch_glMultiTexEnvfvEXT = stub_glMultiTexEnvfvEXT;
	piglit_dispatch_glMultiTexEnviEXT = stub_glMultiTexEnviEXT;
	piglit_dispatch_glMultiTexEnvivEXT = stub_glMultiTexEnvivEXT;
	piglit_dispatch_glMultiTexGendEXT = stub_glMultiTexGendEXT;
	piglit_dispatch_glMultiTexGendvEXT = stub_glMultiTexGendvEXT;
	piglit_dispatch_glMultiTexGenfEXT = stub_glMultiTexGenfEXT;
	piglit_dispatch_glMultiTexGenfvEXT = stub_glMultiTexGenfvEXT;
	piglit_dispatch_glMultiTexGeniEXT = stub_glMultiTexGeniEXT;
	piglit_dispatch_glMultiTexGenivEXT = stub_glMultiTexGenivEXT;
	piglit_dispatch_glMultiTexImage1DEXT = stub_glMultiTexImage1DEXT;
	piglit_dispatch_glMultiTexImage2DEXT = stub_glMultiTexImage2DEXT;
	piglit_dispatch_glMultiTexImage3DEXT = stub_glMultiTexImage3DEXT;
	piglit_dispatch_glMultiTexParameterIivEXT = stub_glMultiTexParameterIivEXT;
	piglit_dispatch_glMultiTexParameterIuivEXT = stub_glMultiTexParameterIuivEXT;
	piglit_dispatch_glMultiTexParameterfEXT = stub_glMultiTexParameterfEXT;
	piglit_dispatch_glMultiTexParameterfvEXT = stub_glMultiTexParameterfvEXT;
	piglit_dispatch_glMultiTexParameteriEXT = stub_glMultiTexParameteriEXT;
	piglit_dispatch_glMultiTexParameterivEXT = stub_glMultiTexParameterivEXT;
	piglit_dispatch_glMultiTexRenderbufferEXT = stub_glMultiTexRenderbufferEXT;
	piglit_dispatch_glMultiTexSubImage1DEXT = stub_glMultiTexSubImage1DEXT;
	piglit_dispatch_glMultiTexSubImage2DEXT = stub_glMultiTexSubImage2DEXT;
	piglit_dispatch_glMultiTexSubImage3DEXT = stub_glMultiTexSubImage3DEXT;
	piglit_dispatch_glNamedBufferDataEXT = stub_glNamedBufferDataEXT;
	piglit_dispatch_glNamedBufferStorageEXT = stub_glNamedBufferStorageEXT;
	piglit_dispatch_glNamedBufferSubDataEXT = stub_glNamedBufferSubDataEXT;
	piglit_dispatch_glNamedCopyBufferSubDataEXT = stub_glNamedCopyBufferSubDataEXT;
	piglit_dispatch_glNamedFramebufferParameteriEXT = stub_glNamedFramebufferParameteriEXT;
	piglit_dispatch_glNamedFramebufferRenderbufferEXT = stub_glNamedFramebufferRenderbufferEXT;
	piglit_dispatch_glNamedFramebufferTexture1DEXT = stub_glNamedFramebufferTexture1DEXT;
	piglit_dispatch_glNamedFramebufferTexture2DEXT = stub_glNamedFramebufferTexture2DEXT;
	piglit_dispatch_glNamedFramebufferTexture3DEXT = stub_glNamedFramebufferTexture3DEXT;
	piglit_dispatch_glNamedFramebufferTextureEXT = stub_glNamedFramebufferTextureEXT;
	piglit_dispatch_glNamedFramebufferTextureFaceEXT = stub_glNamedFramebufferTextureFaceEXT;
	piglit_dispatch_glNamedFramebufferTextureLayerEXT = stub_glNamedFramebufferTextureLayerEXT;
	piglit_dispatch_glNamedProgramLocalParameter4dEXT = stub_glNamedProgramLocalParameter4dEXT;
	piglit_dispatch_glNamedProgramLocalParameter4dvEXT = stub_glNamedProgramLocalParameter4dvEXT;
	piglit_dispatch_glNamedProgramLocalParameter4fEXT = stub_glNamedProgramLocalParameter4fEXT;
	piglit_dispatch_glNamedProgramLocalParameter4fvEXT = stub_glNamedProgramLocalParameter4fvEXT;
	piglit_dispatch_glNamedProgramLocalParameterI4iEXT = stub_glNamedProgramLocalParameterI4iEXT;
	piglit_dispatch_glNamedProgramLocalParameterI4ivEXT = stub_glNamedProgramLocalParameterI4ivEXT;
	piglit_dispatch_glNamedProgramLocalParameterI4uiEXT = stub_glNamedProgramLocalParameterI4uiEXT;
	piglit_dispatch_glNamedProgramLocalParameterI4uivEXT = stub_glNamedProgramLocalParameterI4uivEXT;
	piglit_dispatch_glNamedProgramLocalParameters4fvEXT = stub_glNamedProgramLocalParameters4fvEXT;
	piglit_dispatch_glNamedProgramLocalParametersI4ivEXT = stub_glNamedProgramLocalParametersI4ivEXT;
	piglit_dispatch_glNamedProgramLocalParametersI4uivEXT = stub_glNamedProgramLocalParametersI4uivEXT;
	piglit_dispatch_glNamedProgramStringEXT = stub_glNamedProgramStringEXT;
	piglit_dispatch_glNamedRenderbufferStorageEXT = stub_glNamedRenderbufferStorageEXT;
	piglit_dispatch_glNamedRenderbufferStorageMultisampleCoverageEXT = stub_glNamedRenderbufferStorageMultisampleCoverageEXT;
	piglit_dispatch_glNamedRenderbufferStorageMultisampleEXT = stub_glNamedRenderbufferStorageMultisampleEXT;
	piglit_dispatch_glNamedStringARB = stub_glNamedStringARB;
	piglit_dispatch_glNewList = stub_glNewList;
	piglit_dispatch_glNewObjectBufferATI = stub_glNewObjectBufferATI;
	piglit_dispatch_glNormal3b = stub_glNormal3b;
	piglit_dispatch_glNormal3bv = stub_glNormal3bv;
	piglit_dispatch_glNormal3d = stub_glNormal3d;
	piglit_dispatch_glNormal3dv = stub_glNormal3dv;
	piglit_dispatch_glNormal3f = stub_glNormal3f;
	piglit_dispatch_glNormal3fVertex3fSUN = stub_glNormal3fVertex3fSUN;
	piglit_dispatch_glNormal3fVertex3fvSUN = stub_glNormal3fVertex3fvSUN;
	piglit_dispatch_glNormal3fv = stub_glNormal3fv;
	piglit_dispatch_glNormal3hNV = stub_glNormal3hNV;
	piglit_dispatch_glNormal3hvNV = stub_glNormal3hvNV;
	piglit_dispatch_glNormal3i = stub_glNormal3i;
	piglit_dispatch_glNormal3iv = stub_glNormal3iv;
	piglit_dispatch_glNormal3s = stub_glNormal3s;
	piglit_dispatch_glNormal3sv = stub_glNormal3sv;
	piglit_dispatch_glNormal3x = stub_glNormal3x;
	piglit_dispatch_glNormal3xOES = stub_glNormal3xOES;
	piglit_dispatch_glNormal3xvOES = stub_glNormal3xvOES;
	piglit_dispatch_glNormalFormatNV = stub_glNormalFormatNV;
	piglit_dispatch_glNormalP3ui = stub_glNormalP3ui;
	piglit_dispatch_glNormalP3uiv = stub_glNormalP3uiv;
	piglit_dispatch_glNormalPointer = stub_glNormalPointer;
	piglit_dispatch_glNormalPointerEXT = stub_glNormalPointerEXT;
	piglit_dispatch_glNormalPointerListIBM = stub_glNormalPointerListIBM;
	piglit_dispatch_glNormalPointervINTEL = stub_glNormalPointervINTEL;
	piglit_dispatch_glNormalStream3bATI = stub_glNormalStream3bATI;
	piglit_dispatch_glNormalStream3bvATI = stub_glNormalStream3bvATI;
	piglit_dispatch_glNormalStream3dATI = stub_glNormalStream3dATI;
	piglit_dispatch_glNormalStream3dvATI = stub_glNormalStream3dvATI;
	piglit_dispatch_glNormalStream3fATI = stub_glNormalStream3fATI;
	piglit_dispatch_glNormalStream3fvATI = stub_glNormalStream3fvATI;
	piglit_dispatch_glNormalStream3iATI = stub_glNormalStream3iATI;
	piglit_dispatch_glNormalStream3ivATI = stub_glNormalStream3ivATI;
	piglit_dispatch_glNormalStream3sATI = stub_glNormalStream3sATI;
	piglit_dispatch_glNormalStream3svATI = stub_glNormalStream3svATI;
	piglit_dispatch_glObjectLabel = stub_glObjectLabel;
	piglit_dispatch_glObjectPtrLabel = stub_glObjectPtrLabel;
	piglit_dispatch_glObjectPurgeableAPPLE = stub_glObjectPurgeableAPPLE;
	piglit_dispatch_glObjectUnpurgeableAPPLE = stub_glObjectUnpurgeableAPPLE;
	piglit_dispatch_glOrtho = stub_glOrtho;
	piglit_dispatch_glOrthof = stub_glOrthof;
	piglit_dispatch_glOrthofOES = stub_glOrthofOES;
	piglit_dispatch_glOrthox = stub_glOrthox;
	piglit_dispatch_glOrthoxOES = stub_glOrthoxOES;
	piglit_dispatch_glPNTrianglesfATI = stub_glPNTrianglesfATI;
	piglit_dispatch_glPNTrianglesiATI = stub_glPNTrianglesiATI;
	piglit_dispatch_glPassTexCoordATI = stub_glPassTexCoordATI;
	piglit_dispatch_glPassThrough = stub_glPassThrough;
	piglit_dispatch_glPassThroughxOES = stub_glPassThroughxOES;
	piglit_dispatch_glPatchParameterfv = stub_glPatchParameterfv;
	piglit_dispatch_glPatchParameteri = stub_glPatchParameteri;
	piglit_dispatch_glPathColorGenNV = stub_glPathColorGenNV;
	piglit_dispatch_glPathCommandsNV = stub_glPathCommandsNV;
	piglit_dispatch_glPathCoordsNV = stub_glPathCoordsNV;
	piglit_dispatch_glPathCoverDepthFuncNV = stub_glPathCoverDepthFuncNV;
	piglit_dispatch_glPathDashArrayNV = stub_glPathDashArrayNV;
	piglit_dispatch_glPathFogGenNV = stub_glPathFogGenNV;
	piglit_dispatch_glPathGlyphRangeNV = stub_glPathGlyphRangeNV;
	piglit_dispatch_glPathGlyphsNV = stub_glPathGlyphsNV;
	piglit_dispatch_glPathParameterfNV = stub_glPathParameterfNV;
	piglit_dispatch_glPathParameterfvNV = stub_glPathParameterfvNV;
	piglit_dispatch_glPathParameteriNV = stub_glPathParameteriNV;
	piglit_dispatch_glPathParameterivNV = stub_glPathParameterivNV;
	piglit_dispatch_glPathStencilDepthOffsetNV = stub_glPathStencilDepthOffsetNV;
	piglit_dispatch_glPathStencilFuncNV = stub_glPathStencilFuncNV;
	piglit_dispatch_glPathStringNV = stub_glPathStringNV;
	piglit_dispatch_glPathSubCommandsNV = stub_glPathSubCommandsNV;
	piglit_dispatch_glPathSubCoordsNV = stub_glPathSubCoordsNV;
	piglit_dispatch_glPathTexGenNV = stub_glPathTexGenNV;
	piglit_dispatch_glPauseTransformFeedback = stub_glPauseTransformFeedback;
	piglit_dispatch_glPixelDataRangeNV = stub_glPixelDataRangeNV;
	piglit_dispatch_glPixelMapfv = stub_glPixelMapfv;
	piglit_dispatch_glPixelMapuiv = stub_glPixelMapuiv;
	piglit_dispatch_glPixelMapusv = stub_glPixelMapusv;
	piglit_dispatch_glPixelMapx = stub_glPixelMapx;
	piglit_dispatch_glPixelStoref = stub_glPixelStoref;
	piglit_dispatch_glPixelStorei = stub_glPixelStorei;
	piglit_dispatch_glPixelStorex = stub_glPixelStorex;
	piglit_dispatch_glPixelTexGenParameterfSGIS = stub_glPixelTexGenParameterfSGIS;
	piglit_dispatch_glPixelTexGenParameterfvSGIS = stub_glPixelTexGenParameterfvSGIS;
	piglit_dispatch_glPixelTexGenParameteriSGIS = stub_glPixelTexGenParameteriSGIS;
	piglit_dispatch_glPixelTexGenParameterivSGIS = stub_glPixelTexGenParameterivSGIS;
	piglit_dispatch_glPixelTexGenSGIX = stub_glPixelTexGenSGIX;
	piglit_dispatch_glPixelTransferf = stub_glPixelTransferf;
	piglit_dispatch_glPixelTransferi = stub_glPixelTransferi;
	piglit_dispatch_glPixelTransferxOES = stub_glPixelTransferxOES;
	piglit_dispatch_glPixelTransformParameterfEXT = stub_glPixelTransformParameterfEXT;
	piglit_dispatch_glPixelTransformParameterfvEXT = stub_glPixelTransformParameterfvEXT;
	piglit_dispatch_glPixelTransformParameteriEXT = stub_glPixelTransformParameteriEXT;
	piglit_dispatch_glPixelTransformParameterivEXT = stub_glPixelTransformParameterivEXT;
	piglit_dispatch_glPixelZoom = stub_glPixelZoom;
	piglit_dispatch_glPixelZoomxOES = stub_glPixelZoomxOES;
	piglit_dispatch_glPointAlongPathNV = stub_glPointAlongPathNV;
	piglit_dispatch_glPointParameterf = stub_glPointParameterf;
	piglit_dispatch_glPointParameterfv = stub_glPointParameterfv;
	piglit_dispatch_glPointParameteri = stub_glPointParameteri;
	piglit_dispatch_glPointParameteriv = stub_glPointParameteriv;
	piglit_dispatch_glPointParameterx = stub_glPointParameterx;
	piglit_dispatch_glPointParameterxOES = stub_glPointParameterxOES;
	piglit_dispatch_glPointParameterxv = stub_glPointParameterxv;
	piglit_dispatch_glPointParameterxvOES = stub_glPointParameterxvOES;
	piglit_dispatch_glPointSize = stub_glPointSize;
	piglit_dispatch_glPointSizePointerOES = stub_glPointSizePointerOES;
	piglit_dispatch_glPointSizex = stub_glPointSizex;
	piglit_dispatch_glPointSizexOES = stub_glPointSizexOES;
	piglit_dispatch_glPollAsyncSGIX = stub_glPollAsyncSGIX;
	piglit_dispatch_glPollInstrumentsSGIX = stub_glPollInstrumentsSGIX;
	piglit_dispatch_glPolygonMode = stub_glPolygonMode;
	piglit_dispatch_glPolygonOffset = stub_glPolygonOffset;
	piglit_dispatch_glPolygonOffsetEXT = stub_glPolygonOffsetEXT;
	piglit_dispatch_glPolygonOffsetx = stub_glPolygonOffsetx;
	piglit_dispatch_glPolygonOffsetxOES = stub_glPolygonOffsetxOES;
	piglit_dispatch_glPolygonStipple = stub_glPolygonStipple;
	piglit_dispatch_glPopAttrib = stub_glPopAttrib;
	piglit_dispatch_glPopClientAttrib = stub_glPopClientAttrib;
	piglit_dispatch_glPopDebugGroup = stub_glPopDebugGroup;
	piglit_dispatch_glPopGroupMarkerEXT = stub_glPopGroupMarkerEXT;
	piglit_dispatch_glPopMatrix = stub_glPopMatrix;
	piglit_dispatch_glPopName = stub_glPopName;
	piglit_dispatch_glPresentFrameDualFillNV = stub_glPresentFrameDualFillNV;
	piglit_dispatch_glPresentFrameKeyedNV = stub_glPresentFrameKeyedNV;
	piglit_dispatch_glPrimitiveRestartIndex = stub_glPrimitiveRestartIndex;
	piglit_dispatch_glPrimitiveRestartIndexNV = stub_glPrimitiveRestartIndexNV;
	piglit_dispatch_glPrimitiveRestartNV = stub_glPrimitiveRestartNV;
	piglit_dispatch_glPrioritizeTextures = stub_glPrioritizeTextures;
	piglit_dispatch_glPrioritizeTexturesxOES = stub_glPrioritizeTexturesxOES;
	piglit_dispatch_glProgramBinary = stub_glProgramBinary;
	piglit_dispatch_glProgramBufferParametersIivNV = stub_glProgramBufferParametersIivNV;
	piglit_dispatch_glProgramBufferParametersIuivNV = stub_glProgramBufferParametersIuivNV;
	piglit_dispatch_glProgramBufferParametersfvNV = stub_glProgramBufferParametersfvNV;
	piglit_dispatch_glProgramEnvParameter4dARB = stub_glProgramEnvParameter4dARB;
	piglit_dispatch_glProgramEnvParameter4dvARB = stub_glProgramEnvParameter4dvARB;
	piglit_dispatch_glProgramEnvParameter4fARB = stub_glProgramEnvParameter4fARB;
	piglit_dispatch_glProgramEnvParameter4fvARB = stub_glProgramEnvParameter4fvARB;
	piglit_dispatch_glProgramEnvParameterI4iNV = stub_glProgramEnvParameterI4iNV;
	piglit_dispatch_glProgramEnvParameterI4ivNV = stub_glProgramEnvParameterI4ivNV;
	piglit_dispatch_glProgramEnvParameterI4uiNV = stub_glProgramEnvParameterI4uiNV;
	piglit_dispatch_glProgramEnvParameterI4uivNV = stub_glProgramEnvParameterI4uivNV;
	piglit_dispatch_glProgramEnvParameters4fvEXT = stub_glProgramEnvParameters4fvEXT;
	piglit_dispatch_glProgramEnvParametersI4ivNV = stub_glProgramEnvParametersI4ivNV;
	piglit_dispatch_glProgramEnvParametersI4uivNV = stub_glProgramEnvParametersI4uivNV;
	piglit_dispatch_glProgramLocalParameter4dARB = stub_glProgramLocalParameter4dARB;
	piglit_dispatch_glProgramLocalParameter4dvARB = stub_glProgramLocalParameter4dvARB;
	piglit_dispatch_glProgramLocalParameter4fARB = stub_glProgramLocalParameter4fARB;
	piglit_dispatch_glProgramLocalParameter4fvARB = stub_glProgramLocalParameter4fvARB;
	piglit_dispatch_glProgramLocalParameterI4iNV = stub_glProgramLocalParameterI4iNV;
	piglit_dispatch_glProgramLocalParameterI4ivNV = stub_glProgramLocalParameterI4ivNV;
	piglit_dispatch_glProgramLocalParameterI4uiNV = stub_glProgramLocalParameterI4uiNV;
	piglit_dispatch_glProgramLocalParameterI4uivNV = stub_glProgramLocalParameterI4uivNV;
	piglit_dispatch_glProgramLocalParameters4fvEXT = stub_glProgramLocalParameters4fvEXT;
	piglit_dispatch_glProgramLocalParametersI4ivNV = stub_glProgramLocalParametersI4ivNV;
	piglit_dispatch_glProgramLocalParametersI4uivNV = stub_glProgramLocalParametersI4uivNV;
	piglit_dispatch_glProgramNamedParameter4dNV = stub_glProgramNamedParameter4dNV;
	piglit_dispatch_glProgramNamedParameter4dvNV = stub_glProgramNamedParameter4dvNV;
	piglit_dispatch_glProgramNamedParameter4fNV = stub_glProgramNamedParameter4fNV;
	piglit_dispatch_glProgramNamedParameter4fvNV = stub_glProgramNamedParameter4fvNV;
	piglit_dispatch_glProgramParameter4dNV = stub_glProgramParameter4dNV;
	piglit_dispatch_glProgramParameter4dvNV = stub_glProgramParameter4dvNV;
	piglit_dispatch_glProgramParameter4fNV = stub_glProgramParameter4fNV;
	piglit_dispatch_glProgramParameter4fvNV = stub_glProgramParameter4fvNV;
	piglit_dispatch_glProgramParameteri = stub_glProgramParameteri;
	piglit_dispatch_glProgramParameters4dvNV = stub_glProgramParameters4dvNV;
	piglit_dispatch_glProgramParameters4fvNV = stub_glProgramParameters4fvNV;
	piglit_dispatch_glProgramStringARB = stub_glProgramStringARB;
	piglit_dispatch_glProgramSubroutineParametersuivNV = stub_glProgramSubroutineParametersuivNV;
	piglit_dispatch_glProgramUniform1d = stub_glProgramUniform1d;
	piglit_dispatch_glProgramUniform1dEXT = stub_glProgramUniform1dEXT;
	piglit_dispatch_glProgramUniform1dv = stub_glProgramUniform1dv;
	piglit_dispatch_glProgramUniform1dvEXT = stub_glProgramUniform1dvEXT;
	piglit_dispatch_glProgramUniform1f = stub_glProgramUniform1f;
	piglit_dispatch_glProgramUniform1fv = stub_glProgramUniform1fv;
	piglit_dispatch_glProgramUniform1i = stub_glProgramUniform1i;
	piglit_dispatch_glProgramUniform1i64NV = stub_glProgramUniform1i64NV;
	piglit_dispatch_glProgramUniform1i64vNV = stub_glProgramUniform1i64vNV;
	piglit_dispatch_glProgramUniform1iv = stub_glProgramUniform1iv;
	piglit_dispatch_glProgramUniform1ui = stub_glProgramUniform1ui;
	piglit_dispatch_glProgramUniform1ui64NV = stub_glProgramUniform1ui64NV;
	piglit_dispatch_glProgramUniform1ui64vNV = stub_glProgramUniform1ui64vNV;
	piglit_dispatch_glProgramUniform1uiv = stub_glProgramUniform1uiv;
	piglit_dispatch_glProgramUniform2d = stub_glProgramUniform2d;
	piglit_dispatch_glProgramUniform2dEXT = stub_glProgramUniform2dEXT;
	piglit_dispatch_glProgramUniform2dv = stub_glProgramUniform2dv;
	piglit_dispatch_glProgramUniform2dvEXT = stub_glProgramUniform2dvEXT;
	piglit_dispatch_glProgramUniform2f = stub_glProgramUniform2f;
	piglit_dispatch_glProgramUniform2fv = stub_glProgramUniform2fv;
	piglit_dispatch_glProgramUniform2i = stub_glProgramUniform2i;
	piglit_dispatch_glProgramUniform2i64NV = stub_glProgramUniform2i64NV;
	piglit_dispatch_glProgramUniform2i64vNV = stub_glProgramUniform2i64vNV;
	piglit_dispatch_glProgramUniform2iv = stub_glProgramUniform2iv;
	piglit_dispatch_glProgramUniform2ui = stub_glProgramUniform2ui;
	piglit_dispatch_glProgramUniform2ui64NV = stub_glProgramUniform2ui64NV;
	piglit_dispatch_glProgramUniform2ui64vNV = stub_glProgramUniform2ui64vNV;
	piglit_dispatch_glProgramUniform2uiv = stub_glProgramUniform2uiv;
	piglit_dispatch_glProgramUniform3d = stub_glProgramUniform3d;
	piglit_dispatch_glProgramUniform3dEXT = stub_glProgramUniform3dEXT;
	piglit_dispatch_glProgramUniform3dv = stub_glProgramUniform3dv;
	piglit_dispatch_glProgramUniform3dvEXT = stub_glProgramUniform3dvEXT;
	piglit_dispatch_glProgramUniform3f = stub_glProgramUniform3f;
	piglit_dispatch_glProgramUniform3fv = stub_glProgramUniform3fv;
	piglit_dispatch_glProgramUniform3i = stub_glProgramUniform3i;
	piglit_dispatch_glProgramUniform3i64NV = stub_glProgramUniform3i64NV;
	piglit_dispatch_glProgramUniform3i64vNV = stub_glProgramUniform3i64vNV;
	piglit_dispatch_glProgramUniform3iv = stub_glProgramUniform3iv;
	piglit_dispatch_glProgramUniform3ui = stub_glProgramUniform3ui;
	piglit_dispatch_glProgramUniform3ui64NV = stub_glProgramUniform3ui64NV;
	piglit_dispatch_glProgramUniform3ui64vNV = stub_glProgramUniform3ui64vNV;
	piglit_dispatch_glProgramUniform3uiv = stub_glProgramUniform3uiv;
	piglit_dispatch_glProgramUniform4d = stub_glProgramUniform4d;
	piglit_dispatch_glProgramUniform4dEXT = stub_glProgramUniform4dEXT;
	piglit_dispatch_glProgramUniform4dv = stub_glProgramUniform4dv;
	piglit_dispatch_glProgramUniform4dvEXT = stub_glProgramUniform4dvEXT;
	piglit_dispatch_glProgramUniform4f = stub_glProgramUniform4f;
	piglit_dispatch_glProgramUniform4fv = stub_glProgramUniform4fv;
	piglit_dispatch_glProgramUniform4i = stub_glProgramUniform4i;
	piglit_dispatch_glProgramUniform4i64NV = stub_glProgramUniform4i64NV;
	piglit_dispatch_glProgramUniform4i64vNV = stub_glProgramUniform4i64vNV;
	piglit_dispatch_glProgramUniform4iv = stub_glProgramUniform4iv;
	piglit_dispatch_glProgramUniform4ui = stub_glProgramUniform4ui;
	piglit_dispatch_glProgramUniform4ui64NV = stub_glProgramUniform4ui64NV;
	piglit_dispatch_glProgramUniform4ui64vNV = stub_glProgramUniform4ui64vNV;
	piglit_dispatch_glProgramUniform4uiv = stub_glProgramUniform4uiv;
	piglit_dispatch_glProgramUniformHandleui64ARB = stub_glProgramUniformHandleui64ARB;
	piglit_dispatch_glProgramUniformHandleui64NV = stub_glProgramUniformHandleui64NV;
	piglit_dispatch_glProgramUniformHandleui64vARB = stub_glProgramUniformHandleui64vARB;
	piglit_dispatch_glProgramUniformHandleui64vNV = stub_glProgramUniformHandleui64vNV;
	piglit_dispatch_glProgramUniformMatrix2dv = stub_glProgramUniformMatrix2dv;
	piglit_dispatch_glProgramUniformMatrix2dvEXT = stub_glProgramUniformMatrix2dvEXT;
	piglit_dispatch_glProgramUniformMatrix2fv = stub_glProgramUniformMatrix2fv;
	piglit_dispatch_glProgramUniformMatrix2x3dv = stub_glProgramUniformMatrix2x3dv;
	piglit_dispatch_glProgramUniformMatrix2x3dvEXT = stub_glProgramUniformMatrix2x3dvEXT;
	piglit_dispatch_glProgramUniformMatrix2x3fv = stub_glProgramUniformMatrix2x3fv;
	piglit_dispatch_glProgramUniformMatrix2x4dv = stub_glProgramUniformMatrix2x4dv;
	piglit_dispatch_glProgramUniformMatrix2x4dvEXT = stub_glProgramUniformMatrix2x4dvEXT;
	piglit_dispatch_glProgramUniformMatrix2x4fv = stub_glProgramUniformMatrix2x4fv;
	piglit_dispatch_glProgramUniformMatrix3dv = stub_glProgramUniformMatrix3dv;
	piglit_dispatch_glProgramUniformMatrix3dvEXT = stub_glProgramUniformMatrix3dvEXT;
	piglit_dispatch_glProgramUniformMatrix3fv = stub_glProgramUniformMatrix3fv;
	piglit_dispatch_glProgramUniformMatrix3x2dv = stub_glProgramUniformMatrix3x2dv;
	piglit_dispatch_glProgramUniformMatrix3x2dvEXT = stub_glProgramUniformMatrix3x2dvEXT;
	piglit_dispatch_glProgramUniformMatrix3x2fv = stub_glProgramUniformMatrix3x2fv;
	piglit_dispatch_glProgramUniformMatrix3x4dv = stub_glProgramUniformMatrix3x4dv;
	piglit_dispatch_glProgramUniformMatrix3x4dvEXT = stub_glProgramUniformMatrix3x4dvEXT;
	piglit_dispatch_glProgramUniformMatrix3x4fv = stub_glProgramUniformMatrix3x4fv;
	piglit_dispatch_glProgramUniformMatrix4dv = stub_glProgramUniformMatrix4dv;
	piglit_dispatch_glProgramUniformMatrix4dvEXT = stub_glProgramUniformMatrix4dvEXT;
	piglit_dispatch_glProgramUniformMatrix4fv = stub_glProgramUniformMatrix4fv;
	piglit_dispatch_glProgramUniformMatrix4x2dv = stub_glProgramUniformMatrix4x2dv;
	piglit_dispatch_glProgramUniformMatrix4x2dvEXT = stub_glProgramUniformMatrix4x2dvEXT;
	piglit_dispatch_glProgramUniformMatrix4x2fv = stub_glProgramUniformMatrix4x2fv;
	piglit_dispatch_glProgramUniformMatrix4x3dv = stub_glProgramUniformMatrix4x3dv;
	piglit_dispatch_glProgramUniformMatrix4x3dvEXT = stub_glProgramUniformMatrix4x3dvEXT;
	piglit_dispatch_glProgramUniformMatrix4x3fv = stub_glProgramUniformMatrix4x3fv;
	piglit_dispatch_glProgramUniformui64NV = stub_glProgramUniformui64NV;
	piglit_dispatch_glProgramUniformui64vNV = stub_glProgramUniformui64vNV;
	piglit_dispatch_glProgramVertexLimitNV = stub_glProgramVertexLimitNV;
	piglit_dispatch_glProvokingVertex = stub_glProvokingVertex;
	piglit_dispatch_glPushAttrib = stub_glPushAttrib;
	piglit_dispatch_glPushClientAttrib = stub_glPushClientAttrib;
	piglit_dispatch_glPushClientAttribDefaultEXT = stub_glPushClientAttribDefaultEXT;
	piglit_dispatch_glPushDebugGroup = stub_glPushDebugGroup;
	piglit_dispatch_glPushGroupMarkerEXT = stub_glPushGroupMarkerEXT;
	piglit_dispatch_glPushMatrix = stub_glPushMatrix;
	piglit_dispatch_glPushName = stub_glPushName;
	piglit_dispatch_glQueryCounter = stub_glQueryCounter;
	piglit_dispatch_glQueryMatrixxOES = stub_glQueryMatrixxOES;
	piglit_dispatch_glQueryObjectParameteruiAMD = stub_glQueryObjectParameteruiAMD;
	piglit_dispatch_glRasterPos2d = stub_glRasterPos2d;
	piglit_dispatch_glRasterPos2dv = stub_glRasterPos2dv;
	piglit_dispatch_glRasterPos2f = stub_glRasterPos2f;
	piglit_dispatch_glRasterPos2fv = stub_glRasterPos2fv;
	piglit_dispatch_glRasterPos2i = stub_glRasterPos2i;
	piglit_dispatch_glRasterPos2iv = stub_glRasterPos2iv;
	piglit_dispatch_glRasterPos2s = stub_glRasterPos2s;
	piglit_dispatch_glRasterPos2sv = stub_glRasterPos2sv;
	piglit_dispatch_glRasterPos2xOES = stub_glRasterPos2xOES;
	piglit_dispatch_glRasterPos2xvOES = stub_glRasterPos2xvOES;
	piglit_dispatch_glRasterPos3d = stub_glRasterPos3d;
	piglit_dispatch_glRasterPos3dv = stub_glRasterPos3dv;
	piglit_dispatch_glRasterPos3f = stub_glRasterPos3f;
	piglit_dispatch_glRasterPos3fv = stub_glRasterPos3fv;
	piglit_dispatch_glRasterPos3i = stub_glRasterPos3i;
	piglit_dispatch_glRasterPos3iv = stub_glRasterPos3iv;
	piglit_dispatch_glRasterPos3s = stub_glRasterPos3s;
	piglit_dispatch_glRasterPos3sv = stub_glRasterPos3sv;
	piglit_dispatch_glRasterPos3xOES = stub_glRasterPos3xOES;
	piglit_dispatch_glRasterPos3xvOES = stub_glRasterPos3xvOES;
	piglit_dispatch_glRasterPos4d = stub_glRasterPos4d;
	piglit_dispatch_glRasterPos4dv = stub_glRasterPos4dv;
	piglit_dispatch_glRasterPos4f = stub_glRasterPos4f;
	piglit_dispatch_glRasterPos4fv = stub_glRasterPos4fv;
	piglit_dispatch_glRasterPos4i = stub_glRasterPos4i;
	piglit_dispatch_glRasterPos4iv = stub_glRasterPos4iv;
	piglit_dispatch_glRasterPos4s = stub_glRasterPos4s;
	piglit_dispatch_glRasterPos4sv = stub_glRasterPos4sv;
	piglit_dispatch_glRasterPos4xOES = stub_glRasterPos4xOES;
	piglit_dispatch_glRasterPos4xvOES = stub_glRasterPos4xvOES;
	piglit_dispatch_glReadBuffer = stub_glReadBuffer;
	piglit_dispatch_glReadBufferIndexedEXT = stub_glReadBufferIndexedEXT;
	piglit_dispatch_glReadBufferNV = stub_glReadBufferNV;
	piglit_dispatch_glReadInstrumentsSGIX = stub_glReadInstrumentsSGIX;
	piglit_dispatch_glReadPixels = stub_glReadPixels;
	piglit_dispatch_glReadnPixelsARB = stub_glReadnPixelsARB;
	piglit_dispatch_glReadnPixelsEXT = stub_glReadnPixelsEXT;
	piglit_dispatch_glRectd = stub_glRectd;
	piglit_dispatch_glRectdv = stub_glRectdv;
	piglit_dispatch_glRectf = stub_glRectf;
	piglit_dispatch_glRectfv = stub_glRectfv;
	piglit_dispatch_glRecti = stub_glRecti;
	piglit_dispatch_glRectiv = stub_glRectiv;
	piglit_dispatch_glRects = stub_glRects;
	piglit_dispatch_glRectsv = stub_glRectsv;
	piglit_dispatch_glRectxOES = stub_glRectxOES;
	piglit_dispatch_glRectxvOES = stub_glRectxvOES;
	piglit_dispatch_glReferencePlaneSGIX = stub_glReferencePlaneSGIX;
	piglit_dispatch_glReleaseShaderCompiler = stub_glReleaseShaderCompiler;
	piglit_dispatch_glRenderMode = stub_glRenderMode;
	piglit_dispatch_glRenderbufferStorage = stub_glRenderbufferStorage;
	piglit_dispatch_glRenderbufferStorageMultisample = stub_glRenderbufferStorageMultisample;
	piglit_dispatch_glRenderbufferStorageMultisampleANGLE = stub_glRenderbufferStorageMultisampleANGLE;
	piglit_dispatch_glRenderbufferStorageMultisampleAPPLE = stub_glRenderbufferStorageMultisampleAPPLE;
	piglit_dispatch_glRenderbufferStorageMultisampleCoverageNV = stub_glRenderbufferStorageMultisampleCoverageNV;
	piglit_dispatch_glRenderbufferStorageMultisampleIMG = stub_glRenderbufferStorageMultisampleIMG;
	piglit_dispatch_glRenderbufferStorageOES = stub_glRenderbufferStorageOES;
	piglit_dispatch_glReplacementCodePointerSUN = stub_glReplacementCodePointerSUN;
	piglit_dispatch_glReplacementCodeubSUN = stub_glReplacementCodeubSUN;
	piglit_dispatch_glReplacementCodeubvSUN = stub_glReplacementCodeubvSUN;
	piglit_dispatch_glReplacementCodeuiColor3fVertex3fSUN = stub_glReplacementCodeuiColor3fVertex3fSUN;
	piglit_dispatch_glReplacementCodeuiColor3fVertex3fvSUN = stub_glReplacementCodeuiColor3fVertex3fvSUN;
	piglit_dispatch_glReplacementCodeuiColor4fNormal3fVertex3fSUN = stub_glReplacementCodeuiColor4fNormal3fVertex3fSUN;
	piglit_dispatch_glReplacementCodeuiColor4fNormal3fVertex3fvSUN = stub_glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
	piglit_dispatch_glReplacementCodeuiColor4ubVertex3fSUN = stub_glReplacementCodeuiColor4ubVertex3fSUN;
	piglit_dispatch_glReplacementCodeuiColor4ubVertex3fvSUN = stub_glReplacementCodeuiColor4ubVertex3fvSUN;
	piglit_dispatch_glReplacementCodeuiNormal3fVertex3fSUN = stub_glReplacementCodeuiNormal3fVertex3fSUN;
	piglit_dispatch_glReplacementCodeuiNormal3fVertex3fvSUN = stub_glReplacementCodeuiNormal3fVertex3fvSUN;
	piglit_dispatch_glReplacementCodeuiSUN = stub_glReplacementCodeuiSUN;
	piglit_dispatch_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = stub_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
	piglit_dispatch_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = stub_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
	piglit_dispatch_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = stub_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
	piglit_dispatch_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = stub_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
	piglit_dispatch_glReplacementCodeuiTexCoord2fVertex3fSUN = stub_glReplacementCodeuiTexCoord2fVertex3fSUN;
	piglit_dispatch_glReplacementCodeuiTexCoord2fVertex3fvSUN = stub_glReplacementCodeuiTexCoord2fVertex3fvSUN;
	piglit_dispatch_glReplacementCodeuiVertex3fSUN = stub_glReplacementCodeuiVertex3fSUN;
	piglit_dispatch_glReplacementCodeuiVertex3fvSUN = stub_glReplacementCodeuiVertex3fvSUN;
	piglit_dispatch_glReplacementCodeuivSUN = stub_glReplacementCodeuivSUN;
	piglit_dispatch_glReplacementCodeusSUN = stub_glReplacementCodeusSUN;
	piglit_dispatch_glReplacementCodeusvSUN = stub_glReplacementCodeusvSUN;
	piglit_dispatch_glRequestResidentProgramsNV = stub_glRequestResidentProgramsNV;
	piglit_dispatch_glResetHistogram = stub_glResetHistogram;
	piglit_dispatch_glResetMinmax = stub_glResetMinmax;
	piglit_dispatch_glResizeBuffersMESA = stub_glResizeBuffersMESA;
	piglit_dispatch_glResolveMultisampleFramebufferAPPLE = stub_glResolveMultisampleFramebufferAPPLE;
	piglit_dispatch_glResumeTransformFeedback = stub_glResumeTransformFeedback;
	piglit_dispatch_glRotated = stub_glRotated;
	piglit_dispatch_glRotatef = stub_glRotatef;
	piglit_dispatch_glRotatex = stub_glRotatex;
	piglit_dispatch_glRotatexOES = stub_glRotatexOES;
	piglit_dispatch_glSampleCoverage = stub_glSampleCoverage;
	piglit_dispatch_glSampleCoverageOES = stub_glSampleCoverageOES;
	piglit_dispatch_glSampleCoveragex = stub_glSampleCoveragex;
	piglit_dispatch_glSampleCoveragexOES = stub_glSampleCoveragexOES;
	piglit_dispatch_glSampleMapATI = stub_glSampleMapATI;
	piglit_dispatch_glSampleMaskEXT = stub_glSampleMaskEXT;
	piglit_dispatch_glSampleMaskIndexedNV = stub_glSampleMaskIndexedNV;
	piglit_dispatch_glSampleMaski = stub_glSampleMaski;
	piglit_dispatch_glSamplePatternEXT = stub_glSamplePatternEXT;
	piglit_dispatch_glSamplerParameterIiv = stub_glSamplerParameterIiv;
	piglit_dispatch_glSamplerParameterIuiv = stub_glSamplerParameterIuiv;
	piglit_dispatch_glSamplerParameterf = stub_glSamplerParameterf;
	piglit_dispatch_glSamplerParameterfv = stub_glSamplerParameterfv;
	piglit_dispatch_glSamplerParameteri = stub_glSamplerParameteri;
	piglit_dispatch_glSamplerParameteriv = stub_glSamplerParameteriv;
	piglit_dispatch_glScaled = stub_glScaled;
	piglit_dispatch_glScalef = stub_glScalef;
	piglit_dispatch_glScalex = stub_glScalex;
	piglit_dispatch_glScalexOES = stub_glScalexOES;
	piglit_dispatch_glScissor = stub_glScissor;
	piglit_dispatch_glScissorArrayv = stub_glScissorArrayv;
	piglit_dispatch_glScissorIndexed = stub_glScissorIndexed;
	piglit_dispatch_glScissorIndexedv = stub_glScissorIndexedv;
	piglit_dispatch_glSecondaryColor3b = stub_glSecondaryColor3b;
	piglit_dispatch_glSecondaryColor3bv = stub_glSecondaryColor3bv;
	piglit_dispatch_glSecondaryColor3d = stub_glSecondaryColor3d;
	piglit_dispatch_glSecondaryColor3dv = stub_glSecondaryColor3dv;
	piglit_dispatch_glSecondaryColor3f = stub_glSecondaryColor3f;
	piglit_dispatch_glSecondaryColor3fv = stub_glSecondaryColor3fv;
	piglit_dispatch_glSecondaryColor3hNV = stub_glSecondaryColor3hNV;
	piglit_dispatch_glSecondaryColor3hvNV = stub_glSecondaryColor3hvNV;
	piglit_dispatch_glSecondaryColor3i = stub_glSecondaryColor3i;
	piglit_dispatch_glSecondaryColor3iv = stub_glSecondaryColor3iv;
	piglit_dispatch_glSecondaryColor3s = stub_glSecondaryColor3s;
	piglit_dispatch_glSecondaryColor3sv = stub_glSecondaryColor3sv;
	piglit_dispatch_glSecondaryColor3ub = stub_glSecondaryColor3ub;
	piglit_dispatch_glSecondaryColor3ubv = stub_glSecondaryColor3ubv;
	piglit_dispatch_glSecondaryColor3ui = stub_glSecondaryColor3ui;
	piglit_dispatch_glSecondaryColor3uiv = stub_glSecondaryColor3uiv;
	piglit_dispatch_glSecondaryColor3us = stub_glSecondaryColor3us;
	piglit_dispatch_glSecondaryColor3usv = stub_glSecondaryColor3usv;
	piglit_dispatch_glSecondaryColorFormatNV = stub_glSecondaryColorFormatNV;
	piglit_dispatch_glSecondaryColorP3ui = stub_glSecondaryColorP3ui;
	piglit_dispatch_glSecondaryColorP3uiv = stub_glSecondaryColorP3uiv;
	piglit_dispatch_glSecondaryColorPointer = stub_glSecondaryColorPointer;
	piglit_dispatch_glSecondaryColorPointerListIBM = stub_glSecondaryColorPointerListIBM;
	piglit_dispatch_glSelectBuffer = stub_glSelectBuffer;
	piglit_dispatch_glSelectPerfMonitorCountersAMD = stub_glSelectPerfMonitorCountersAMD;
	piglit_dispatch_glSeparableFilter2D = stub_glSeparableFilter2D;
	piglit_dispatch_glSetFenceAPPLE = stub_glSetFenceAPPLE;
	piglit_dispatch_glSetFenceNV = stub_glSetFenceNV;
	piglit_dispatch_glSetFragmentShaderConstantATI = stub_glSetFragmentShaderConstantATI;
	piglit_dispatch_glSetInvariantEXT = stub_glSetInvariantEXT;
	piglit_dispatch_glSetLocalConstantEXT = stub_glSetLocalConstantEXT;
	piglit_dispatch_glSetMultisamplefvAMD = stub_glSetMultisamplefvAMD;
	piglit_dispatch_glShadeModel = stub_glShadeModel;
	piglit_dispatch_glShaderBinary = stub_glShaderBinary;
	piglit_dispatch_glShaderOp1EXT = stub_glShaderOp1EXT;
	piglit_dispatch_glShaderOp2EXT = stub_glShaderOp2EXT;
	piglit_dispatch_glShaderOp3EXT = stub_glShaderOp3EXT;
	piglit_dispatch_glShaderSource = stub_glShaderSource;
	piglit_dispatch_glShaderStorageBlockBinding = stub_glShaderStorageBlockBinding;
	piglit_dispatch_glSharpenTexFuncSGIS = stub_glSharpenTexFuncSGIS;
	piglit_dispatch_glSpriteParameterfSGIX = stub_glSpriteParameterfSGIX;
	piglit_dispatch_glSpriteParameterfvSGIX = stub_glSpriteParameterfvSGIX;
	piglit_dispatch_glSpriteParameteriSGIX = stub_glSpriteParameteriSGIX;
	piglit_dispatch_glSpriteParameterivSGIX = stub_glSpriteParameterivSGIX;
	piglit_dispatch_glStartInstrumentsSGIX = stub_glStartInstrumentsSGIX;
	piglit_dispatch_glStartTilingQCOM = stub_glStartTilingQCOM;
	piglit_dispatch_glStencilClearTagEXT = stub_glStencilClearTagEXT;
	piglit_dispatch_glStencilFillPathInstancedNV = stub_glStencilFillPathInstancedNV;
	piglit_dispatch_glStencilFillPathNV = stub_glStencilFillPathNV;
	piglit_dispatch_glStencilFunc = stub_glStencilFunc;
	piglit_dispatch_glStencilFuncSeparate = stub_glStencilFuncSeparate;
	piglit_dispatch_glStencilFuncSeparateATI = stub_glStencilFuncSeparateATI;
	piglit_dispatch_glStencilMask = stub_glStencilMask;
	piglit_dispatch_glStencilMaskSeparate = stub_glStencilMaskSeparate;
	piglit_dispatch_glStencilOp = stub_glStencilOp;
	piglit_dispatch_glStencilOpSeparate = stub_glStencilOpSeparate;
	piglit_dispatch_glStencilOpValueAMD = stub_glStencilOpValueAMD;
	piglit_dispatch_glStencilStrokePathInstancedNV = stub_glStencilStrokePathInstancedNV;
	piglit_dispatch_glStencilStrokePathNV = stub_glStencilStrokePathNV;
	piglit_dispatch_glStopInstrumentsSGIX = stub_glStopInstrumentsSGIX;
	piglit_dispatch_glStringMarkerGREMEDY = stub_glStringMarkerGREMEDY;
	piglit_dispatch_glSwizzleEXT = stub_glSwizzleEXT;
	piglit_dispatch_glSyncTextureINTEL = stub_glSyncTextureINTEL;
	piglit_dispatch_glTagSampleBufferSGIX = stub_glTagSampleBufferSGIX;
	piglit_dispatch_glTangent3bEXT = stub_glTangent3bEXT;
	piglit_dispatch_glTangent3bvEXT = stub_glTangent3bvEXT;
	piglit_dispatch_glTangent3dEXT = stub_glTangent3dEXT;
	piglit_dispatch_glTangent3dvEXT = stub_glTangent3dvEXT;
	piglit_dispatch_glTangent3fEXT = stub_glTangent3fEXT;
	piglit_dispatch_glTangent3fvEXT = stub_glTangent3fvEXT;
	piglit_dispatch_glTangent3iEXT = stub_glTangent3iEXT;
	piglit_dispatch_glTangent3ivEXT = stub_glTangent3ivEXT;
	piglit_dispatch_glTangent3sEXT = stub_glTangent3sEXT;
	piglit_dispatch_glTangent3svEXT = stub_glTangent3svEXT;
	piglit_dispatch_glTangentPointerEXT = stub_glTangentPointerEXT;
	piglit_dispatch_glTbufferMask3DFX = stub_glTbufferMask3DFX;
	piglit_dispatch_glTessellationFactorAMD = stub_glTessellationFactorAMD;
	piglit_dispatch_glTessellationModeAMD = stub_glTessellationModeAMD;
	piglit_dispatch_glTestFenceAPPLE = stub_glTestFenceAPPLE;
	piglit_dispatch_glTestFenceNV = stub_glTestFenceNV;
	piglit_dispatch_glTestObjectAPPLE = stub_glTestObjectAPPLE;
	piglit_dispatch_glTexBuffer = stub_glTexBuffer;
	piglit_dispatch_glTexBufferRange = stub_glTexBufferRange;
	piglit_dispatch_glTexBumpParameterfvATI = stub_glTexBumpParameterfvATI;
	piglit_dispatch_glTexBumpParameterivATI = stub_glTexBumpParameterivATI;
	piglit_dispatch_glTexCoord1bOES = stub_glTexCoord1bOES;
	piglit_dispatch_glTexCoord1bvOES = stub_glTexCoord1bvOES;
	piglit_dispatch_glTexCoord1d = stub_glTexCoord1d;
	piglit_dispatch_glTexCoord1dv = stub_glTexCoord1dv;
	piglit_dispatch_glTexCoord1f = stub_glTexCoord1f;
	piglit_dispatch_glTexCoord1fv = stub_glTexCoord1fv;
	piglit_dispatch_glTexCoord1hNV = stub_glTexCoord1hNV;
	piglit_dispatch_glTexCoord1hvNV = stub_glTexCoord1hvNV;
	piglit_dispatch_glTexCoord1i = stub_glTexCoord1i;
	piglit_dispatch_glTexCoord1iv = stub_glTexCoord1iv;
	piglit_dispatch_glTexCoord1s = stub_glTexCoord1s;
	piglit_dispatch_glTexCoord1sv = stub_glTexCoord1sv;
	piglit_dispatch_glTexCoord1xOES = stub_glTexCoord1xOES;
	piglit_dispatch_glTexCoord1xvOES = stub_glTexCoord1xvOES;
	piglit_dispatch_glTexCoord2bOES = stub_glTexCoord2bOES;
	piglit_dispatch_glTexCoord2bvOES = stub_glTexCoord2bvOES;
	piglit_dispatch_glTexCoord2d = stub_glTexCoord2d;
	piglit_dispatch_glTexCoord2dv = stub_glTexCoord2dv;
	piglit_dispatch_glTexCoord2f = stub_glTexCoord2f;
	piglit_dispatch_glTexCoord2fColor3fVertex3fSUN = stub_glTexCoord2fColor3fVertex3fSUN;
	piglit_dispatch_glTexCoord2fColor3fVertex3fvSUN = stub_glTexCoord2fColor3fVertex3fvSUN;
	piglit_dispatch_glTexCoord2fColor4fNormal3fVertex3fSUN = stub_glTexCoord2fColor4fNormal3fVertex3fSUN;
	piglit_dispatch_glTexCoord2fColor4fNormal3fVertex3fvSUN = stub_glTexCoord2fColor4fNormal3fVertex3fvSUN;
	piglit_dispatch_glTexCoord2fColor4ubVertex3fSUN = stub_glTexCoord2fColor4ubVertex3fSUN;
	piglit_dispatch_glTexCoord2fColor4ubVertex3fvSUN = stub_glTexCoord2fColor4ubVertex3fvSUN;
	piglit_dispatch_glTexCoord2fNormal3fVertex3fSUN = stub_glTexCoord2fNormal3fVertex3fSUN;
	piglit_dispatch_glTexCoord2fNormal3fVertex3fvSUN = stub_glTexCoord2fNormal3fVertex3fvSUN;
	piglit_dispatch_glTexCoord2fVertex3fSUN = stub_glTexCoord2fVertex3fSUN;
	piglit_dispatch_glTexCoord2fVertex3fvSUN = stub_glTexCoord2fVertex3fvSUN;
	piglit_dispatch_glTexCoord2fv = stub_glTexCoord2fv;
	piglit_dispatch_glTexCoord2hNV = stub_glTexCoord2hNV;
	piglit_dispatch_glTexCoord2hvNV = stub_glTexCoord2hvNV;
	piglit_dispatch_glTexCoord2i = stub_glTexCoord2i;
	piglit_dispatch_glTexCoord2iv = stub_glTexCoord2iv;
	piglit_dispatch_glTexCoord2s = stub_glTexCoord2s;
	piglit_dispatch_glTexCoord2sv = stub_glTexCoord2sv;
	piglit_dispatch_glTexCoord2xOES = stub_glTexCoord2xOES;
	piglit_dispatch_glTexCoord2xvOES = stub_glTexCoord2xvOES;
	piglit_dispatch_glTexCoord3bOES = stub_glTexCoord3bOES;
	piglit_dispatch_glTexCoord3bvOES = stub_glTexCoord3bvOES;
	piglit_dispatch_glTexCoord3d = stub_glTexCoord3d;
	piglit_dispatch_glTexCoord3dv = stub_glTexCoord3dv;
	piglit_dispatch_glTexCoord3f = stub_glTexCoord3f;
	piglit_dispatch_glTexCoord3fv = stub_glTexCoord3fv;
	piglit_dispatch_glTexCoord3hNV = stub_glTexCoord3hNV;
	piglit_dispatch_glTexCoord3hvNV = stub_glTexCoord3hvNV;
	piglit_dispatch_glTexCoord3i = stub_glTexCoord3i;
	piglit_dispatch_glTexCoord3iv = stub_glTexCoord3iv;
	piglit_dispatch_glTexCoord3s = stub_glTexCoord3s;
	piglit_dispatch_glTexCoord3sv = stub_glTexCoord3sv;
	piglit_dispatch_glTexCoord3xOES = stub_glTexCoord3xOES;
	piglit_dispatch_glTexCoord3xvOES = stub_glTexCoord3xvOES;
	piglit_dispatch_glTexCoord4bOES = stub_glTexCoord4bOES;
	piglit_dispatch_glTexCoord4bvOES = stub_glTexCoord4bvOES;
	piglit_dispatch_glTexCoord4d = stub_glTexCoord4d;
	piglit_dispatch_glTexCoord4dv = stub_glTexCoord4dv;
	piglit_dispatch_glTexCoord4f = stub_glTexCoord4f;
	piglit_dispatch_glTexCoord4fColor4fNormal3fVertex4fSUN = stub_glTexCoord4fColor4fNormal3fVertex4fSUN;
	piglit_dispatch_glTexCoord4fColor4fNormal3fVertex4fvSUN = stub_glTexCoord4fColor4fNormal3fVertex4fvSUN;
	piglit_dispatch_glTexCoord4fVertex4fSUN = stub_glTexCoord4fVertex4fSUN;
	piglit_dispatch_glTexCoord4fVertex4fvSUN = stub_glTexCoord4fVertex4fvSUN;
	piglit_dispatch_glTexCoord4fv = stub_glTexCoord4fv;
	piglit_dispatch_glTexCoord4hNV = stub_glTexCoord4hNV;
	piglit_dispatch_glTexCoord4hvNV = stub_glTexCoord4hvNV;
	piglit_dispatch_glTexCoord4i = stub_glTexCoord4i;
	piglit_dispatch_glTexCoord4iv = stub_glTexCoord4iv;
	piglit_dispatch_glTexCoord4s = stub_glTexCoord4s;
	piglit_dispatch_glTexCoord4sv = stub_glTexCoord4sv;
	piglit_dispatch_glTexCoord4xOES = stub_glTexCoord4xOES;
	piglit_dispatch_glTexCoord4xvOES = stub_glTexCoord4xvOES;
	piglit_dispatch_glTexCoordFormatNV = stub_glTexCoordFormatNV;
	piglit_dispatch_glTexCoordP1ui = stub_glTexCoordP1ui;
	piglit_dispatch_glTexCoordP1uiv = stub_glTexCoordP1uiv;
	piglit_dispatch_glTexCoordP2ui = stub_glTexCoordP2ui;
	piglit_dispatch_glTexCoordP2uiv = stub_glTexCoordP2uiv;
	piglit_dispatch_glTexCoordP3ui = stub_glTexCoordP3ui;
	piglit_dispatch_glTexCoordP3uiv = stub_glTexCoordP3uiv;
	piglit_dispatch_glTexCoordP4ui = stub_glTexCoordP4ui;
	piglit_dispatch_glTexCoordP4uiv = stub_glTexCoordP4uiv;
	piglit_dispatch_glTexCoordPointer = stub_glTexCoordPointer;
	piglit_dispatch_glTexCoordPointerEXT = stub_glTexCoordPointerEXT;
	piglit_dispatch_glTexCoordPointerListIBM = stub_glTexCoordPointerListIBM;
	piglit_dispatch_glTexCoordPointervINTEL = stub_glTexCoordPointervINTEL;
	piglit_dispatch_glTexEnvf = stub_glTexEnvf;
	piglit_dispatch_glTexEnvfv = stub_glTexEnvfv;
	piglit_dispatch_glTexEnvi = stub_glTexEnvi;
	piglit_dispatch_glTexEnviv = stub_glTexEnviv;
	piglit_dispatch_glTexEnvx = stub_glTexEnvx;
	piglit_dispatch_glTexEnvxOES = stub_glTexEnvxOES;
	piglit_dispatch_glTexEnvxv = stub_glTexEnvxv;
	piglit_dispatch_glTexEnvxvOES = stub_glTexEnvxvOES;
	piglit_dispatch_glTexFilterFuncSGIS = stub_glTexFilterFuncSGIS;
	piglit_dispatch_glTexGend = stub_glTexGend;
	piglit_dispatch_glTexGendv = stub_glTexGendv;
	piglit_dispatch_glTexGenf = stub_glTexGenf;
	piglit_dispatch_glTexGenfOES = stub_glTexGenfOES;
	piglit_dispatch_glTexGenfv = stub_glTexGenfv;
	piglit_dispatch_glTexGenfvOES = stub_glTexGenfvOES;
	piglit_dispatch_glTexGeni = stub_glTexGeni;
	piglit_dispatch_glTexGeniOES = stub_glTexGeniOES;
	piglit_dispatch_glTexGeniv = stub_glTexGeniv;
	piglit_dispatch_glTexGenivOES = stub_glTexGenivOES;
	piglit_dispatch_glTexGenxOES = stub_glTexGenxOES;
	piglit_dispatch_glTexGenxvOES = stub_glTexGenxvOES;
	piglit_dispatch_glTexImage1D = stub_glTexImage1D;
	piglit_dispatch_glTexImage2D = stub_glTexImage2D;
	piglit_dispatch_glTexImage2DMultisample = stub_glTexImage2DMultisample;
	piglit_dispatch_glTexImage2DMultisampleCoverageNV = stub_glTexImage2DMultisampleCoverageNV;
	piglit_dispatch_glTexImage3D = stub_glTexImage3D;
	piglit_dispatch_glTexImage3DMultisample = stub_glTexImage3DMultisample;
	piglit_dispatch_glTexImage3DMultisampleCoverageNV = stub_glTexImage3DMultisampleCoverageNV;
	piglit_dispatch_glTexImage4DSGIS = stub_glTexImage4DSGIS;
	piglit_dispatch_glTexPageCommitmentARB = stub_glTexPageCommitmentARB;
	piglit_dispatch_glTexParameterIiv = stub_glTexParameterIiv;
	piglit_dispatch_glTexParameterIuiv = stub_glTexParameterIuiv;
	piglit_dispatch_glTexParameterf = stub_glTexParameterf;
	piglit_dispatch_glTexParameterfv = stub_glTexParameterfv;
	piglit_dispatch_glTexParameteri = stub_glTexParameteri;
	piglit_dispatch_glTexParameteriv = stub_glTexParameteriv;
	piglit_dispatch_glTexParameterx = stub_glTexParameterx;
	piglit_dispatch_glTexParameterxOES = stub_glTexParameterxOES;
	piglit_dispatch_glTexParameterxv = stub_glTexParameterxv;
	piglit_dispatch_glTexParameterxvOES = stub_glTexParameterxvOES;
	piglit_dispatch_glTexRenderbufferNV = stub_glTexRenderbufferNV;
	piglit_dispatch_glTexStorage1D = stub_glTexStorage1D;
	piglit_dispatch_glTexStorage2D = stub_glTexStorage2D;
	piglit_dispatch_glTexStorage2DMultisample = stub_glTexStorage2DMultisample;
	piglit_dispatch_glTexStorage3D = stub_glTexStorage3D;
	piglit_dispatch_glTexStorage3DMultisample = stub_glTexStorage3DMultisample;
	piglit_dispatch_glTexStorageSparseAMD = stub_glTexStorageSparseAMD;
	piglit_dispatch_glTexSubImage1D = stub_glTexSubImage1D;
	piglit_dispatch_glTexSubImage2D = stub_glTexSubImage2D;
	piglit_dispatch_glTexSubImage3D = stub_glTexSubImage3D;
	piglit_dispatch_glTexSubImage4DSGIS = stub_glTexSubImage4DSGIS;
	piglit_dispatch_glTextureBarrierNV = stub_glTextureBarrierNV;
	piglit_dispatch_glTextureBufferEXT = stub_glTextureBufferEXT;
	piglit_dispatch_glTextureBufferRangeEXT = stub_glTextureBufferRangeEXT;
	piglit_dispatch_glTextureColorMaskSGIS = stub_glTextureColorMaskSGIS;
	piglit_dispatch_glTextureImage1DEXT = stub_glTextureImage1DEXT;
	piglit_dispatch_glTextureImage2DEXT = stub_glTextureImage2DEXT;
	piglit_dispatch_glTextureImage2DMultisampleCoverageNV = stub_glTextureImage2DMultisampleCoverageNV;
	piglit_dispatch_glTextureImage2DMultisampleNV = stub_glTextureImage2DMultisampleNV;
	piglit_dispatch_glTextureImage3DEXT = stub_glTextureImage3DEXT;
	piglit_dispatch_glTextureImage3DMultisampleCoverageNV = stub_glTextureImage3DMultisampleCoverageNV;
	piglit_dispatch_glTextureImage3DMultisampleNV = stub_glTextureImage3DMultisampleNV;
	piglit_dispatch_glTextureLightEXT = stub_glTextureLightEXT;
	piglit_dispatch_glTextureMaterialEXT = stub_glTextureMaterialEXT;
	piglit_dispatch_glTextureNormalEXT = stub_glTextureNormalEXT;
	piglit_dispatch_glTexturePageCommitmentEXT = stub_glTexturePageCommitmentEXT;
	piglit_dispatch_glTextureParameterIivEXT = stub_glTextureParameterIivEXT;
	piglit_dispatch_glTextureParameterIuivEXT = stub_glTextureParameterIuivEXT;
	piglit_dispatch_glTextureParameterfEXT = stub_glTextureParameterfEXT;
	piglit_dispatch_glTextureParameterfvEXT = stub_glTextureParameterfvEXT;
	piglit_dispatch_glTextureParameteriEXT = stub_glTextureParameteriEXT;
	piglit_dispatch_glTextureParameterivEXT = stub_glTextureParameterivEXT;
	piglit_dispatch_glTextureRangeAPPLE = stub_glTextureRangeAPPLE;
	piglit_dispatch_glTextureRenderbufferEXT = stub_glTextureRenderbufferEXT;
	piglit_dispatch_glTextureStorage1DEXT = stub_glTextureStorage1DEXT;
	piglit_dispatch_glTextureStorage2DEXT = stub_glTextureStorage2DEXT;
	piglit_dispatch_glTextureStorage2DMultisampleEXT = stub_glTextureStorage2DMultisampleEXT;
	piglit_dispatch_glTextureStorage3DEXT = stub_glTextureStorage3DEXT;
	piglit_dispatch_glTextureStorage3DMultisampleEXT = stub_glTextureStorage3DMultisampleEXT;
	piglit_dispatch_glTextureStorageSparseAMD = stub_glTextureStorageSparseAMD;
	piglit_dispatch_glTextureSubImage1DEXT = stub_glTextureSubImage1DEXT;
	piglit_dispatch_glTextureSubImage2DEXT = stub_glTextureSubImage2DEXT;
	piglit_dispatch_glTextureSubImage3DEXT = stub_glTextureSubImage3DEXT;
	piglit_dispatch_glTextureView = stub_glTextureView;
	piglit_dispatch_glTrackMatrixNV = stub_glTrackMatrixNV;
	piglit_dispatch_glTransformFeedbackAttribsNV = stub_glTransformFeedbackAttribsNV;
	piglit_dispatch_glTransformFeedbackStreamAttribsNV = stub_glTransformFeedbackStreamAttribsNV;
	piglit_dispatch_glTransformFeedbackVaryings = stub_glTransformFeedbackVaryings;
	piglit_dispatch_glTransformFeedbackVaryingsNV = stub_glTransformFeedbackVaryingsNV;
	piglit_dispatch_glTransformPathNV = stub_glTransformPathNV;
	piglit_dispatch_glTranslated = stub_glTranslated;
	piglit_dispatch_glTranslatef = stub_glTranslatef;
	piglit_dispatch_glTranslatex = stub_glTranslatex;
	piglit_dispatch_glTranslatexOES = stub_glTranslatexOES;
	piglit_dispatch_glUniform1d = stub_glUniform1d;
	piglit_dispatch_glUniform1dv = stub_glUniform1dv;
	piglit_dispatch_glUniform1f = stub_glUniform1f;
	piglit_dispatch_glUniform1fv = stub_glUniform1fv;
	piglit_dispatch_glUniform1i = stub_glUniform1i;
	piglit_dispatch_glUniform1i64NV = stub_glUniform1i64NV;
	piglit_dispatch_glUniform1i64vNV = stub_glUniform1i64vNV;
	piglit_dispatch_glUniform1iv = stub_glUniform1iv;
	piglit_dispatch_glUniform1ui = stub_glUniform1ui;
	piglit_dispatch_glUniform1ui64NV = stub_glUniform1ui64NV;
	piglit_dispatch_glUniform1ui64vNV = stub_glUniform1ui64vNV;
	piglit_dispatch_glUniform1uiv = stub_glUniform1uiv;
	piglit_dispatch_glUniform2d = stub_glUniform2d;
	piglit_dispatch_glUniform2dv = stub_glUniform2dv;
	piglit_dispatch_glUniform2f = stub_glUniform2f;
	piglit_dispatch_glUniform2fv = stub_glUniform2fv;
	piglit_dispatch_glUniform2i = stub_glUniform2i;
	piglit_dispatch_glUniform2i64NV = stub_glUniform2i64NV;
	piglit_dispatch_glUniform2i64vNV = stub_glUniform2i64vNV;
	piglit_dispatch_glUniform2iv = stub_glUniform2iv;
	piglit_dispatch_glUniform2ui = stub_glUniform2ui;
	piglit_dispatch_glUniform2ui64NV = stub_glUniform2ui64NV;
	piglit_dispatch_glUniform2ui64vNV = stub_glUniform2ui64vNV;
	piglit_dispatch_glUniform2uiv = stub_glUniform2uiv;
	piglit_dispatch_glUniform3d = stub_glUniform3d;
	piglit_dispatch_glUniform3dv = stub_glUniform3dv;
	piglit_dispatch_glUniform3f = stub_glUniform3f;
	piglit_dispatch_glUniform3fv = stub_glUniform3fv;
	piglit_dispatch_glUniform3i = stub_glUniform3i;
	piglit_dispatch_glUniform3i64NV = stub_glUniform3i64NV;
	piglit_dispatch_glUniform3i64vNV = stub_glUniform3i64vNV;
	piglit_dispatch_glUniform3iv = stub_glUniform3iv;
	piglit_dispatch_glUniform3ui = stub_glUniform3ui;
	piglit_dispatch_glUniform3ui64NV = stub_glUniform3ui64NV;
	piglit_dispatch_glUniform3ui64vNV = stub_glUniform3ui64vNV;
	piglit_dispatch_glUniform3uiv = stub_glUniform3uiv;
	piglit_dispatch_glUniform4d = stub_glUniform4d;
	piglit_dispatch_glUniform4dv = stub_glUniform4dv;
	piglit_dispatch_glUniform4f = stub_glUniform4f;
	piglit_dispatch_glUniform4fv = stub_glUniform4fv;
	piglit_dispatch_glUniform4i = stub_glUniform4i;
	piglit_dispatch_glUniform4i64NV = stub_glUniform4i64NV;
	piglit_dispatch_glUniform4i64vNV = stub_glUniform4i64vNV;
	piglit_dispatch_glUniform4iv = stub_glUniform4iv;
	piglit_dispatch_glUniform4ui = stub_glUniform4ui;
	piglit_dispatch_glUniform4ui64NV = stub_glUniform4ui64NV;
	piglit_dispatch_glUniform4ui64vNV = stub_glUniform4ui64vNV;
	piglit_dispatch_glUniform4uiv = stub_glUniform4uiv;
	piglit_dispatch_glUniformBlockBinding = stub_glUniformBlockBinding;
	piglit_dispatch_glUniformBufferEXT = stub_glUniformBufferEXT;
	piglit_dispatch_glUniformHandleui64ARB = stub_glUniformHandleui64ARB;
	piglit_dispatch_glUniformHandleui64NV = stub_glUniformHandleui64NV;
	piglit_dispatch_glUniformHandleui64vARB = stub_glUniformHandleui64vARB;
	piglit_dispatch_glUniformHandleui64vNV = stub_glUniformHandleui64vNV;
	piglit_dispatch_glUniformMatrix2dv = stub_glUniformMatrix2dv;
	piglit_dispatch_glUniformMatrix2fv = stub_glUniformMatrix2fv;
	piglit_dispatch_glUniformMatrix2x3dv = stub_glUniformMatrix2x3dv;
	piglit_dispatch_glUniformMatrix2x3fv = stub_glUniformMatrix2x3fv;
	piglit_dispatch_glUniformMatrix2x4dv = stub_glUniformMatrix2x4dv;
	piglit_dispatch_glUniformMatrix2x4fv = stub_glUniformMatrix2x4fv;
	piglit_dispatch_glUniformMatrix3dv = stub_glUniformMatrix3dv;
	piglit_dispatch_glUniformMatrix3fv = stub_glUniformMatrix3fv;
	piglit_dispatch_glUniformMatrix3x2dv = stub_glUniformMatrix3x2dv;
	piglit_dispatch_glUniformMatrix3x2fv = stub_glUniformMatrix3x2fv;
	piglit_dispatch_glUniformMatrix3x4dv = stub_glUniformMatrix3x4dv;
	piglit_dispatch_glUniformMatrix3x4fv = stub_glUniformMatrix3x4fv;
	piglit_dispatch_glUniformMatrix4dv = stub_glUniformMatrix4dv;
	piglit_dispatch_glUniformMatrix4fv = stub_glUniformMatrix4fv;
	piglit_dispatch_glUniformMatrix4x2dv = stub_glUniformMatrix4x2dv;
	piglit_dispatch_glUniformMatrix4x2fv = stub_glUniformMatrix4x2fv;
	piglit_dispatch_glUniformMatrix4x3dv = stub_glUniformMatrix4x3dv;
	piglit_dispatch_glUniformMatrix4x3fv = stub_glUniformMatrix4x3fv;
	piglit_dispatch_glUniformSubroutinesuiv = stub_glUniformSubroutinesuiv;
	piglit_dispatch_glUniformui64NV = stub_glUniformui64NV;
	piglit_dispatch_glUniformui64vNV = stub_glUniformui64vNV;
	piglit_dispatch_glUnlockArraysEXT = stub_glUnlockArraysEXT;
	piglit_dispatch_glUnmapBuffer = stub_glUnmapBuffer;
	piglit_dispatch_glUnmapNamedBufferEXT = stub_glUnmapNamedBufferEXT;
	piglit_dispatch_glUnmapObjectBufferATI = stub_glUnmapObjectBufferATI;
	piglit_dispatch_glUnmapTexture2DINTEL = stub_glUnmapTexture2DINTEL;
	piglit_dispatch_glUpdateObjectBufferATI = stub_glUpdateObjectBufferATI;
	piglit_dispatch_glUseProgram = stub_glUseProgram;
	piglit_dispatch_glUseProgramStages = stub_glUseProgramStages;
	piglit_dispatch_glUseProgramStagesEXT = stub_glUseProgramStagesEXT;
	piglit_dispatch_glUseShaderProgramEXT = stub_glUseShaderProgramEXT;
	piglit_dispatch_glVDPAUFiniNV = stub_glVDPAUFiniNV;
	piglit_dispatch_glVDPAUGetSurfaceivNV = stub_glVDPAUGetSurfaceivNV;
	piglit_dispatch_glVDPAUInitNV = stub_glVDPAUInitNV;
	piglit_dispatch_glVDPAUIsSurfaceNV = stub_glVDPAUIsSurfaceNV;
	piglit_dispatch_glVDPAUMapSurfacesNV = stub_glVDPAUMapSurfacesNV;
	piglit_dispatch_glVDPAURegisterOutputSurfaceNV = stub_glVDPAURegisterOutputSurfaceNV;
	piglit_dispatch_glVDPAURegisterVideoSurfaceNV = stub_glVDPAURegisterVideoSurfaceNV;
	piglit_dispatch_glVDPAUSurfaceAccessNV = stub_glVDPAUSurfaceAccessNV;
	piglit_dispatch_glVDPAUUnmapSurfacesNV = stub_glVDPAUUnmapSurfacesNV;
	piglit_dispatch_glVDPAUUnregisterSurfaceNV = stub_glVDPAUUnregisterSurfaceNV;
	piglit_dispatch_glValidateProgram = stub_glValidateProgram;
	piglit_dispatch_glValidateProgramPipeline = stub_glValidateProgramPipeline;
	piglit_dispatch_glValidateProgramPipelineEXT = stub_glValidateProgramPipelineEXT;
	piglit_dispatch_glVariantArrayObjectATI = stub_glVariantArrayObjectATI;
	piglit_dispatch_glVariantPointerEXT = stub_glVariantPointerEXT;
	piglit_dispatch_glVariantbvEXT = stub_glVariantbvEXT;
	piglit_dispatch_glVariantdvEXT = stub_glVariantdvEXT;
	piglit_dispatch_glVariantfvEXT = stub_glVariantfvEXT;
	piglit_dispatch_glVariantivEXT = stub_glVariantivEXT;
	piglit_dispatch_glVariantsvEXT = stub_glVariantsvEXT;
	piglit_dispatch_glVariantubvEXT = stub_glVariantubvEXT;
	piglit_dispatch_glVariantuivEXT = stub_glVariantuivEXT;
	piglit_dispatch_glVariantusvEXT = stub_glVariantusvEXT;
	piglit_dispatch_glVertex2bOES = stub_glVertex2bOES;
	piglit_dispatch_glVertex2bvOES = stub_glVertex2bvOES;
	piglit_dispatch_glVertex2d = stub_glVertex2d;
	piglit_dispatch_glVertex2dv = stub_glVertex2dv;
	piglit_dispatch_glVertex2f = stub_glVertex2f;
	piglit_dispatch_glVertex2fv = stub_glVertex2fv;
	piglit_dispatch_glVertex2hNV = stub_glVertex2hNV;
	piglit_dispatch_glVertex2hvNV = stub_glVertex2hvNV;
	piglit_dispatch_glVertex2i = stub_glVertex2i;
	piglit_dispatch_glVertex2iv = stub_glVertex2iv;
	piglit_dispatch_glVertex2s = stub_glVertex2s;
	piglit_dispatch_glVertex2sv = stub_glVertex2sv;
	piglit_dispatch_glVertex2xOES = stub_glVertex2xOES;
	piglit_dispatch_glVertex2xvOES = stub_glVertex2xvOES;
	piglit_dispatch_glVertex3bOES = stub_glVertex3bOES;
	piglit_dispatch_glVertex3bvOES = stub_glVertex3bvOES;
	piglit_dispatch_glVertex3d = stub_glVertex3d;
	piglit_dispatch_glVertex3dv = stub_glVertex3dv;
	piglit_dispatch_glVertex3f = stub_glVertex3f;
	piglit_dispatch_glVertex3fv = stub_glVertex3fv;
	piglit_dispatch_glVertex3hNV = stub_glVertex3hNV;
	piglit_dispatch_glVertex3hvNV = stub_glVertex3hvNV;
	piglit_dispatch_glVertex3i = stub_glVertex3i;
	piglit_dispatch_glVertex3iv = stub_glVertex3iv;
	piglit_dispatch_glVertex3s = stub_glVertex3s;
	piglit_dispatch_glVertex3sv = stub_glVertex3sv;
	piglit_dispatch_glVertex3xOES = stub_glVertex3xOES;
	piglit_dispatch_glVertex3xvOES = stub_glVertex3xvOES;
	piglit_dispatch_glVertex4bOES = stub_glVertex4bOES;
	piglit_dispatch_glVertex4bvOES = stub_glVertex4bvOES;
	piglit_dispatch_glVertex4d = stub_glVertex4d;
	piglit_dispatch_glVertex4dv = stub_glVertex4dv;
	piglit_dispatch_glVertex4f = stub_glVertex4f;
	piglit_dispatch_glVertex4fv = stub_glVertex4fv;
	piglit_dispatch_glVertex4hNV = stub_glVertex4hNV;
	piglit_dispatch_glVertex4hvNV = stub_glVertex4hvNV;
	piglit_dispatch_glVertex4i = stub_glVertex4i;
	piglit_dispatch_glVertex4iv = stub_glVertex4iv;
	piglit_dispatch_glVertex4s = stub_glVertex4s;
	piglit_dispatch_glVertex4sv = stub_glVertex4sv;
	piglit_dispatch_glVertex4xOES = stub_glVertex4xOES;
	piglit_dispatch_glVertex4xvOES = stub_glVertex4xvOES;
	piglit_dispatch_glVertexArrayBindVertexBufferEXT = stub_glVertexArrayBindVertexBufferEXT;
	piglit_dispatch_glVertexArrayColorOffsetEXT = stub_glVertexArrayColorOffsetEXT;
	piglit_dispatch_glVertexArrayEdgeFlagOffsetEXT = stub_glVertexArrayEdgeFlagOffsetEXT;
	piglit_dispatch_glVertexArrayFogCoordOffsetEXT = stub_glVertexArrayFogCoordOffsetEXT;
	piglit_dispatch_glVertexArrayIndexOffsetEXT = stub_glVertexArrayIndexOffsetEXT;
	piglit_dispatch_glVertexArrayMultiTexCoordOffsetEXT = stub_glVertexArrayMultiTexCoordOffsetEXT;
	piglit_dispatch_glVertexArrayNormalOffsetEXT = stub_glVertexArrayNormalOffsetEXT;
	piglit_dispatch_glVertexArrayParameteriAPPLE = stub_glVertexArrayParameteriAPPLE;
	piglit_dispatch_glVertexArrayRangeAPPLE = stub_glVertexArrayRangeAPPLE;
	piglit_dispatch_glVertexArrayRangeNV = stub_glVertexArrayRangeNV;
	piglit_dispatch_glVertexArraySecondaryColorOffsetEXT = stub_glVertexArraySecondaryColorOffsetEXT;
	piglit_dispatch_glVertexArrayTexCoordOffsetEXT = stub_glVertexArrayTexCoordOffsetEXT;
	piglit_dispatch_glVertexArrayVertexAttribBindingEXT = stub_glVertexArrayVertexAttribBindingEXT;
	piglit_dispatch_glVertexArrayVertexAttribDivisorEXT = stub_glVertexArrayVertexAttribDivisorEXT;
	piglit_dispatch_glVertexArrayVertexAttribFormatEXT = stub_glVertexArrayVertexAttribFormatEXT;
	piglit_dispatch_glVertexArrayVertexAttribIFormatEXT = stub_glVertexArrayVertexAttribIFormatEXT;
	piglit_dispatch_glVertexArrayVertexAttribIOffsetEXT = stub_glVertexArrayVertexAttribIOffsetEXT;
	piglit_dispatch_glVertexArrayVertexAttribLFormatEXT = stub_glVertexArrayVertexAttribLFormatEXT;
	piglit_dispatch_glVertexArrayVertexAttribLOffsetEXT = stub_glVertexArrayVertexAttribLOffsetEXT;
	piglit_dispatch_glVertexArrayVertexAttribOffsetEXT = stub_glVertexArrayVertexAttribOffsetEXT;
	piglit_dispatch_glVertexArrayVertexBindingDivisorEXT = stub_glVertexArrayVertexBindingDivisorEXT;
	piglit_dispatch_glVertexArrayVertexOffsetEXT = stub_glVertexArrayVertexOffsetEXT;
	piglit_dispatch_glVertexAttrib1d = stub_glVertexAttrib1d;
	piglit_dispatch_glVertexAttrib1dv = stub_glVertexAttrib1dv;
	piglit_dispatch_glVertexAttrib1f = stub_glVertexAttrib1f;
	piglit_dispatch_glVertexAttrib1fv = stub_glVertexAttrib1fv;
	piglit_dispatch_glVertexAttrib1hNV = stub_glVertexAttrib1hNV;
	piglit_dispatch_glVertexAttrib1hvNV = stub_glVertexAttrib1hvNV;
	piglit_dispatch_glVertexAttrib1s = stub_glVertexAttrib1s;
	piglit_dispatch_glVertexAttrib1sv = stub_glVertexAttrib1sv;
	piglit_dispatch_glVertexAttrib2d = stub_glVertexAttrib2d;
	piglit_dispatch_glVertexAttrib2dv = stub_glVertexAttrib2dv;
	piglit_dispatch_glVertexAttrib2f = stub_glVertexAttrib2f;
	piglit_dispatch_glVertexAttrib2fv = stub_glVertexAttrib2fv;
	piglit_dispatch_glVertexAttrib2hNV = stub_glVertexAttrib2hNV;
	piglit_dispatch_glVertexAttrib2hvNV = stub_glVertexAttrib2hvNV;
	piglit_dispatch_glVertexAttrib2s = stub_glVertexAttrib2s;
	piglit_dispatch_glVertexAttrib2sv = stub_glVertexAttrib2sv;
	piglit_dispatch_glVertexAttrib3d = stub_glVertexAttrib3d;
	piglit_dispatch_glVertexAttrib3dv = stub_glVertexAttrib3dv;
	piglit_dispatch_glVertexAttrib3f = stub_glVertexAttrib3f;
	piglit_dispatch_glVertexAttrib3fv = stub_glVertexAttrib3fv;
	piglit_dispatch_glVertexAttrib3hNV = stub_glVertexAttrib3hNV;
	piglit_dispatch_glVertexAttrib3hvNV = stub_glVertexAttrib3hvNV;
	piglit_dispatch_glVertexAttrib3s = stub_glVertexAttrib3s;
	piglit_dispatch_glVertexAttrib3sv = stub_glVertexAttrib3sv;
	piglit_dispatch_glVertexAttrib4Nbv = stub_glVertexAttrib4Nbv;
	piglit_dispatch_glVertexAttrib4Niv = stub_glVertexAttrib4Niv;
	piglit_dispatch_glVertexAttrib4Nsv = stub_glVertexAttrib4Nsv;
	piglit_dispatch_glVertexAttrib4Nub = stub_glVertexAttrib4Nub;
	piglit_dispatch_glVertexAttrib4Nubv = stub_glVertexAttrib4Nubv;
	piglit_dispatch_glVertexAttrib4Nuiv = stub_glVertexAttrib4Nuiv;
	piglit_dispatch_glVertexAttrib4Nusv = stub_glVertexAttrib4Nusv;
	piglit_dispatch_glVertexAttrib4bv = stub_glVertexAttrib4bv;
	piglit_dispatch_glVertexAttrib4d = stub_glVertexAttrib4d;
	piglit_dispatch_glVertexAttrib4dv = stub_glVertexAttrib4dv;
	piglit_dispatch_glVertexAttrib4f = stub_glVertexAttrib4f;
	piglit_dispatch_glVertexAttrib4fv = stub_glVertexAttrib4fv;
	piglit_dispatch_glVertexAttrib4hNV = stub_glVertexAttrib4hNV;
	piglit_dispatch_glVertexAttrib4hvNV = stub_glVertexAttrib4hvNV;
	piglit_dispatch_glVertexAttrib4iv = stub_glVertexAttrib4iv;
	piglit_dispatch_glVertexAttrib4s = stub_glVertexAttrib4s;
	piglit_dispatch_glVertexAttrib4sv = stub_glVertexAttrib4sv;
	piglit_dispatch_glVertexAttrib4ubv = stub_glVertexAttrib4ubv;
	piglit_dispatch_glVertexAttrib4uiv = stub_glVertexAttrib4uiv;
	piglit_dispatch_glVertexAttrib4usv = stub_glVertexAttrib4usv;
	piglit_dispatch_glVertexAttribArrayObjectATI = stub_glVertexAttribArrayObjectATI;
	piglit_dispatch_glVertexAttribBinding = stub_glVertexAttribBinding;
	piglit_dispatch_glVertexAttribDivisor = stub_glVertexAttribDivisor;
	piglit_dispatch_glVertexAttribFormat = stub_glVertexAttribFormat;
	piglit_dispatch_glVertexAttribFormatNV = stub_glVertexAttribFormatNV;
	piglit_dispatch_glVertexAttribI1i = stub_glVertexAttribI1i;
	piglit_dispatch_glVertexAttribI1iv = stub_glVertexAttribI1iv;
	piglit_dispatch_glVertexAttribI1ui = stub_glVertexAttribI1ui;
	piglit_dispatch_glVertexAttribI1uiv = stub_glVertexAttribI1uiv;
	piglit_dispatch_glVertexAttribI2i = stub_glVertexAttribI2i;
	piglit_dispatch_glVertexAttribI2iv = stub_glVertexAttribI2iv;
	piglit_dispatch_glVertexAttribI2ui = stub_glVertexAttribI2ui;
	piglit_dispatch_glVertexAttribI2uiv = stub_glVertexAttribI2uiv;
	piglit_dispatch_glVertexAttribI3i = stub_glVertexAttribI3i;
	piglit_dispatch_glVertexAttribI3iv = stub_glVertexAttribI3iv;
	piglit_dispatch_glVertexAttribI3ui = stub_glVertexAttribI3ui;
	piglit_dispatch_glVertexAttribI3uiv = stub_glVertexAttribI3uiv;
	piglit_dispatch_glVertexAttribI4bv = stub_glVertexAttribI4bv;
	piglit_dispatch_glVertexAttribI4i = stub_glVertexAttribI4i;
	piglit_dispatch_glVertexAttribI4iv = stub_glVertexAttribI4iv;
	piglit_dispatch_glVertexAttribI4sv = stub_glVertexAttribI4sv;
	piglit_dispatch_glVertexAttribI4ubv = stub_glVertexAttribI4ubv;
	piglit_dispatch_glVertexAttribI4ui = stub_glVertexAttribI4ui;
	piglit_dispatch_glVertexAttribI4uiv = stub_glVertexAttribI4uiv;
	piglit_dispatch_glVertexAttribI4usv = stub_glVertexAttribI4usv;
	piglit_dispatch_glVertexAttribIFormat = stub_glVertexAttribIFormat;
	piglit_dispatch_glVertexAttribIFormatNV = stub_glVertexAttribIFormatNV;
	piglit_dispatch_glVertexAttribIPointer = stub_glVertexAttribIPointer;
	piglit_dispatch_glVertexAttribL1d = stub_glVertexAttribL1d;
	piglit_dispatch_glVertexAttribL1dv = stub_glVertexAttribL1dv;
	piglit_dispatch_glVertexAttribL1i64NV = stub_glVertexAttribL1i64NV;
	piglit_dispatch_glVertexAttribL1i64vNV = stub_glVertexAttribL1i64vNV;
	piglit_dispatch_glVertexAttribL1ui64ARB = stub_glVertexAttribL1ui64ARB;
	piglit_dispatch_glVertexAttribL1ui64NV = stub_glVertexAttribL1ui64NV;
	piglit_dispatch_glVertexAttribL1ui64vARB = stub_glVertexAttribL1ui64vARB;
	piglit_dispatch_glVertexAttribL1ui64vNV = stub_glVertexAttribL1ui64vNV;
	piglit_dispatch_glVertexAttribL2d = stub_glVertexAttribL2d;
	piglit_dispatch_glVertexAttribL2dv = stub_glVertexAttribL2dv;
	piglit_dispatch_glVertexAttribL2i64NV = stub_glVertexAttribL2i64NV;
	piglit_dispatch_glVertexAttribL2i64vNV = stub_glVertexAttribL2i64vNV;
	piglit_dispatch_glVertexAttribL2ui64NV = stub_glVertexAttribL2ui64NV;
	piglit_dispatch_glVertexAttribL2ui64vNV = stub_glVertexAttribL2ui64vNV;
	piglit_dispatch_glVertexAttribL3d = stub_glVertexAttribL3d;
	piglit_dispatch_glVertexAttribL3dv = stub_glVertexAttribL3dv;
	piglit_dispatch_glVertexAttribL3i64NV = stub_glVertexAttribL3i64NV;
	piglit_dispatch_glVertexAttribL3i64vNV = stub_glVertexAttribL3i64vNV;
	piglit_dispatch_glVertexAttribL3ui64NV = stub_glVertexAttribL3ui64NV;
	piglit_dispatch_glVertexAttribL3ui64vNV = stub_glVertexAttribL3ui64vNV;
	piglit_dispatch_glVertexAttribL4d = stub_glVertexAttribL4d;
	piglit_dispatch_glVertexAttribL4dv = stub_glVertexAttribL4dv;
	piglit_dispatch_glVertexAttribL4i64NV = stub_glVertexAttribL4i64NV;
	piglit_dispatch_glVertexAttribL4i64vNV = stub_glVertexAttribL4i64vNV;
	piglit_dispatch_glVertexAttribL4ui64NV = stub_glVertexAttribL4ui64NV;
	piglit_dispatch_glVertexAttribL4ui64vNV = stub_glVertexAttribL4ui64vNV;
	piglit_dispatch_glVertexAttribLFormat = stub_glVertexAttribLFormat;
	piglit_dispatch_glVertexAttribLFormatNV = stub_glVertexAttribLFormatNV;
	piglit_dispatch_glVertexAttribLPointer = stub_glVertexAttribLPointer;
	piglit_dispatch_glVertexAttribP1ui = stub_glVertexAttribP1ui;
	piglit_dispatch_glVertexAttribP1uiv = stub_glVertexAttribP1uiv;
	piglit_dispatch_glVertexAttribP2ui = stub_glVertexAttribP2ui;
	piglit_dispatch_glVertexAttribP2uiv = stub_glVertexAttribP2uiv;
	piglit_dispatch_glVertexAttribP3ui = stub_glVertexAttribP3ui;
	piglit_dispatch_glVertexAttribP3uiv = stub_glVertexAttribP3uiv;
	piglit_dispatch_glVertexAttribP4ui = stub_glVertexAttribP4ui;
	piglit_dispatch_glVertexAttribP4uiv = stub_glVertexAttribP4uiv;
	piglit_dispatch_glVertexAttribParameteriAMD = stub_glVertexAttribParameteriAMD;
	piglit_dispatch_glVertexAttribPointer = stub_glVertexAttribPointer;
	piglit_dispatch_glVertexAttribPointerNV = stub_glVertexAttribPointerNV;
	piglit_dispatch_glVertexAttribs1dvNV = stub_glVertexAttribs1dvNV;
	piglit_dispatch_glVertexAttribs1fvNV = stub_glVertexAttribs1fvNV;
	piglit_dispatch_glVertexAttribs1hvNV = stub_glVertexAttribs1hvNV;
	piglit_dispatch_glVertexAttribs1svNV = stub_glVertexAttribs1svNV;
	piglit_dispatch_glVertexAttribs2dvNV = stub_glVertexAttribs2dvNV;
	piglit_dispatch_glVertexAttribs2fvNV = stub_glVertexAttribs2fvNV;
	piglit_dispatch_glVertexAttribs2hvNV = stub_glVertexAttribs2hvNV;
	piglit_dispatch_glVertexAttribs2svNV = stub_glVertexAttribs2svNV;
	piglit_dispatch_glVertexAttribs3dvNV = stub_glVertexAttribs3dvNV;
	piglit_dispatch_glVertexAttribs3fvNV = stub_glVertexAttribs3fvNV;
	piglit_dispatch_glVertexAttribs3hvNV = stub_glVertexAttribs3hvNV;
	piglit_dispatch_glVertexAttribs3svNV = stub_glVertexAttribs3svNV;
	piglit_dispatch_glVertexAttribs4dvNV = stub_glVertexAttribs4dvNV;
	piglit_dispatch_glVertexAttribs4fvNV = stub_glVertexAttribs4fvNV;
	piglit_dispatch_glVertexAttribs4hvNV = stub_glVertexAttribs4hvNV;
	piglit_dispatch_glVertexAttribs4svNV = stub_glVertexAttribs4svNV;
	piglit_dispatch_glVertexAttribs4ubvNV = stub_glVertexAttribs4ubvNV;
	piglit_dispatch_glVertexBindingDivisor = stub_glVertexBindingDivisor;
	piglit_dispatch_glVertexBlendARB = stub_glVertexBlendARB;
	piglit_dispatch_glVertexBlendEnvfATI = stub_glVertexBlendEnvfATI;
	piglit_dispatch_glVertexBlendEnviATI = stub_glVertexBlendEnviATI;
	piglit_dispatch_glVertexFormatNV = stub_glVertexFormatNV;
	piglit_dispatch_glVertexP2ui = stub_glVertexP2ui;
	piglit_dispatch_glVertexP2uiv = stub_glVertexP2uiv;
	piglit_dispatch_glVertexP3ui = stub_glVertexP3ui;
	piglit_dispatch_glVertexP3uiv = stub_glVertexP3uiv;
	piglit_dispatch_glVertexP4ui = stub_glVertexP4ui;
	piglit_dispatch_glVertexP4uiv = stub_glVertexP4uiv;
	piglit_dispatch_glVertexPointer = stub_glVertexPointer;
	piglit_dispatch_glVertexPointerEXT = stub_glVertexPointerEXT;
	piglit_dispatch_glVertexPointerListIBM = stub_glVertexPointerListIBM;
	piglit_dispatch_glVertexPointervINTEL = stub_glVertexPointervINTEL;
	piglit_dispatch_glVertexStream1dATI = stub_glVertexStream1dATI;
	piglit_dispatch_glVertexStream1dvATI = stub_glVertexStream1dvATI;
	piglit_dispatch_glVertexStream1fATI = stub_glVertexStream1fATI;
	piglit_dispatch_glVertexStream1fvATI = stub_glVertexStream1fvATI;
	piglit_dispatch_glVertexStream1iATI = stub_glVertexStream1iATI;
	piglit_dispatch_glVertexStream1ivATI = stub_glVertexStream1ivATI;
	piglit_dispatch_glVertexStream1sATI = stub_glVertexStream1sATI;
	piglit_dispatch_glVertexStream1svATI = stub_glVertexStream1svATI;
	piglit_dispatch_glVertexStream2dATI = stub_glVertexStream2dATI;
	piglit_dispatch_glVertexStream2dvATI = stub_glVertexStream2dvATI;
	piglit_dispatch_glVertexStream2fATI = stub_glVertexStream2fATI;
	piglit_dispatch_glVertexStream2fvATI = stub_glVertexStream2fvATI;
	piglit_dispatch_glVertexStream2iATI = stub_glVertexStream2iATI;
	piglit_dispatch_glVertexStream2ivATI = stub_glVertexStream2ivATI;
	piglit_dispatch_glVertexStream2sATI = stub_glVertexStream2sATI;
	piglit_dispatch_glVertexStream2svATI = stub_glVertexStream2svATI;
	piglit_dispatch_glVertexStream3dATI = stub_glVertexStream3dATI;
	piglit_dispatch_glVertexStream3dvATI = stub_glVertexStream3dvATI;
	piglit_dispatch_glVertexStream3fATI = stub_glVertexStream3fATI;
	piglit_dispatch_glVertexStream3fvATI = stub_glVertexStream3fvATI;
	piglit_dispatch_glVertexStream3iATI = stub_glVertexStream3iATI;
	piglit_dispatch_glVertexStream3ivATI = stub_glVertexStream3ivATI;
	piglit_dispatch_glVertexStream3sATI = stub_glVertexStream3sATI;
	piglit_dispatch_glVertexStream3svATI = stub_glVertexStream3svATI;
	piglit_dispatch_glVertexStream4dATI = stub_glVertexStream4dATI;
	piglit_dispatch_glVertexStream4dvATI = stub_glVertexStream4dvATI;
	piglit_dispatch_glVertexStream4fATI = stub_glVertexStream4fATI;
	piglit_dispatch_glVertexStream4fvATI = stub_glVertexStream4fvATI;
	piglit_dispatch_glVertexStream4iATI = stub_glVertexStream4iATI;
	piglit_dispatch_glVertexStream4ivATI = stub_glVertexStream4ivATI;
	piglit_dispatch_glVertexStream4sATI = stub_glVertexStream4sATI;
	piglit_dispatch_glVertexStream4svATI = stub_glVertexStream4svATI;
	piglit_dispatch_glVertexWeightPointerEXT = stub_glVertexWeightPointerEXT;
	piglit_dispatch_glVertexWeightfEXT = stub_glVertexWeightfEXT;
	piglit_dispatch_glVertexWeightfvEXT = stub_glVertexWeightfvEXT;
	piglit_dispatch_glVertexWeighthNV = stub_glVertexWeighthNV;
	piglit_dispatch_glVertexWeighthvNV = stub_glVertexWeighthvNV;
	piglit_dispatch_glVideoCaptureNV = stub_glVideoCaptureNV;
	piglit_dispatch_glVideoCaptureStreamParameterdvNV = stub_glVideoCaptureStreamParameterdvNV;
	piglit_dispatch_glVideoCaptureStreamParameterfvNV = stub_glVideoCaptureStreamParameterfvNV;
	piglit_dispatch_glVideoCaptureStreamParameterivNV = stub_glVideoCaptureStreamParameterivNV;
	piglit_dispatch_glViewport = stub_glViewport;
	piglit_dispatch_glViewportArrayv = stub_glViewportArrayv;
	piglit_dispatch_glViewportIndexedf = stub_glViewportIndexedf;
	piglit_dispatch_glViewportIndexedfv = stub_glViewportIndexedfv;
	piglit_dispatch_glWaitSync = stub_glWaitSync;
	piglit_dispatch_glWeightPathsNV = stub_glWeightPathsNV;
	piglit_dispatch_glWeightPointerARB = stub_glWeightPointerARB;
	piglit_dispatch_glWeightPointerOES = stub_glWeightPointerOES;
	piglit_dispatch_glWeightbvARB = stub_glWeightbvARB;
	piglit_dispatch_glWeightdvARB = stub_glWeightdvARB;
	piglit_dispatch_glWeightfvARB = stub_glWeightfvARB;
	piglit_dispatch_glWeightivARB = stub_glWeightivARB;
	piglit_dispatch_glWeightsvARB = stub_glWeightsvARB;
	piglit_dispatch_glWeightubvARB = stub_glWeightubvARB;
	piglit_dispatch_glWeightuivARB = stub_glWeightuivARB;
	piglit_dispatch_glWeightusvARB = stub_glWeightusvARB;
	piglit_dispatch_glWindowPos2d = stub_glWindowPos2d;
	piglit_dispatch_glWindowPos2dv = stub_glWindowPos2dv;
	piglit_dispatch_glWindowPos2f = stub_glWindowPos2f;
	piglit_dispatch_glWindowPos2fv = stub_glWindowPos2fv;
	piglit_dispatch_glWindowPos2i = stub_glWindowPos2i;
	piglit_dispatch_glWindowPos2iv = stub_glWindowPos2iv;
	piglit_dispatch_glWindowPos2s = stub_glWindowPos2s;
	piglit_dispatch_glWindowPos2sv = stub_glWindowPos2sv;
	piglit_dispatch_glWindowPos3d = stub_glWindowPos3d;
	piglit_dispatch_glWindowPos3dv = stub_glWindowPos3dv;
	piglit_dispatch_glWindowPos3f = stub_glWindowPos3f;
	piglit_dispatch_glWindowPos3fv = stub_glWindowPos3fv;
	piglit_dispatch_glWindowPos3i = stub_glWindowPos3i;
	piglit_dispatch_glWindowPos3iv = stub_glWindowPos3iv;
	piglit_dispatch_glWindowPos3s = stub_glWindowPos3s;
	piglit_dispatch_glWindowPos3sv = stub_glWindowPos3sv;
	piglit_dispatch_glWindowPos4dMESA = stub_glWindowPos4dMESA;
	piglit_dispatch_glWindowPos4dvMESA = stub_glWindowPos4dvMESA;
	piglit_dispatch_glWindowPos4fMESA = stub_glWindowPos4fMESA;
	piglit_dispatch_glWindowPos4fvMESA = stub_glWindowPos4fvMESA;
	piglit_dispatch_glWindowPos4iMESA = stub_glWindowPos4iMESA;
	piglit_dispatch_glWindowPos4ivMESA = stub_glWindowPos4ivMESA;
	piglit_dispatch_glWindowPos4sMESA = stub_glWindowPos4sMESA;
	piglit_dispatch_glWindowPos4svMESA = stub_glWindowPos4svMESA;
	piglit_dispatch_glWriteMaskEXT = stub_glWriteMaskEXT;
}

static const char * function_names[] = {
	"glAccum",
	"glAccumxOES",
	"glActiveProgramEXT",
	"glActiveShaderProgram",
	"glActiveShaderProgramEXT",
	"glActiveStencilFaceEXT",
	"glActiveTexture",
	"glActiveTextureARB",
	"glActiveVaryingNV",
	"glAlphaFragmentOp1ATI",
	"glAlphaFragmentOp2ATI",
	"glAlphaFragmentOp3ATI",
	"glAlphaFunc",
	"glAlphaFuncQCOM",
	"glAlphaFuncx",
	"glAlphaFuncxOES",
	"glApplyTextureEXT",
	"glAreProgramsResidentNV",
	"glAreTexturesResident",
	"glAreTexturesResidentEXT",
	"glArrayElement",
	"glArrayElementEXT",
	"glArrayObjectATI",
	"glAsyncMarkerSGIX",
	"glAttachObjectARB",
	"glAttachShader",
	"glBegin",
	"glBeginConditionalRender",
	"glBeginConditionalRenderNV",
	"glBeginConditionalRenderNVX",
	"glBeginFragmentShaderATI",
	"glBeginOcclusionQueryNV",
	"glBeginPerfMonitorAMD",
	"glBeginPerfQueryINTEL",
	"glBeginQuery",
	"glBeginQueryARB",
	"glBeginQueryEXT",
	"glBeginQueryIndexed",
	"glBeginTransformFeedback",
	"glBeginTransformFeedbackEXT",
	"glBeginTransformFeedbackNV",
	"glBeginVertexShaderEXT",
	"glBeginVideoCaptureNV",
	"glBindAttribLocation",
	"glBindAttribLocationARB",
	"glBindBuffer",
	"glBindBufferARB",
	"glBindBufferBase",
	"glBindBufferBaseEXT",
	"glBindBufferBaseNV",
	"glBindBufferOffsetEXT",
	"glBindBufferOffsetNV",
	"glBindBufferRange",
	"glBindBufferRangeEXT",
	"glBindBufferRangeNV",
	"glBindBuffersBase",
	"glBindBuffersRange",
	"glBindFragDataLocation",
	"glBindFragDataLocationEXT",
	"glBindFragDataLocationIndexed",
	"glBindFragmentShaderATI",
	"glBindFramebuffer",
	"glBindFramebufferEXT",
	"glBindFramebufferOES",
	"glBindImageTexture",
	"glBindImageTextureEXT",
	"glBindImageTextures",
	"glBindLightParameterEXT",
	"glBindMaterialParameterEXT",
	"glBindMultiTextureEXT",
	"glBindParameterEXT",
	"glBindProgramARB",
	"glBindProgramNV",
	"glBindProgramPipeline",
	"glBindProgramPipelineEXT",
	"glBindRenderbuffer",
	"glBindRenderbufferEXT",
	"glBindRenderbufferOES",
	"glBindSampler",
	"glBindSamplers",
	"glBindTexGenParameterEXT",
	"glBindTexture",
	"glBindTextureEXT",
	"glBindTextureUnitParameterEXT",
	"glBindTextures",
	"glBindTransformFeedback",
	"glBindTransformFeedbackNV",
	"glBindVertexArray",
	"glBindVertexArrayAPPLE",
	"glBindVertexArrayOES",
	"glBindVertexBuffer",
	"glBindVertexBuffers",
	"glBindVertexShaderEXT",
	"glBindVideoCaptureStreamBufferNV",
	"glBindVideoCaptureStreamTextureNV",
	"glBinormal3bEXT",
	"glBinormal3bvEXT",
	"glBinormal3dEXT",
	"glBinormal3dvEXT",
	"glBinormal3fEXT",
	"glBinormal3fvEXT",
	"glBinormal3iEXT",
	"glBinormal3ivEXT",
	"glBinormal3sEXT",
	"glBinormal3svEXT",
	"glBinormalPointerEXT",
	"glBitmap",
	"glBitmapxOES",
	"glBlendBarrierNV",
	"glBlendBarrierKHR",
	"glBlendColor",
	"glBlendColorEXT",
	"glBlendColorxOES",
	"glBlendEquation",
	"glBlendEquationEXT",
	"glBlendEquationIndexedAMD",
	"glBlendEquationOES",
	"glBlendEquationSeparate",
	"glBlendEquationSeparateEXT",
	"glBlendEquationSeparateIndexedAMD",
	"glBlendEquationSeparateOES",
	"glBlendEquationSeparatei",
	"glBlendEquationSeparateiARB",
	"glBlendEquationSeparateiEXT",
	"glBlendEquationi",
	"glBlendEquationiEXT",
	"glBlendEquationiARB",
	"glBlendFunc",
	"glBlendFuncIndexedAMD",
	"glBlendFuncSeparate",
	"glBlendFuncSeparateEXT",
	"glBlendFuncSeparateINGR",
	"glBlendFuncSeparateIndexedAMD",
	"glBlendFuncSeparateOES",
	"glBlendFuncSeparatei",
	"glBlendFuncSeparateiARB",
	"glBlendFuncSeparateiEXT",
	"glBlendFunci",
	"glBlendFunciARB",
	"glBlendFunciEXT",
	"glBlendParameteriNV",
	"glBlitFramebuffer",
	"glBlitFramebufferANGLE",
	"glBlitFramebufferEXT",
	"glBlitFramebufferNV",
	"glBufferAddressRangeNV",
	"glBufferData",
	"glBufferDataARB",
	"glBufferParameteriAPPLE",
	"glBufferStorage",
	"glBufferSubData",
	"glBufferSubDataARB",
	"glCallList",
	"glCallLists",
	"glCheckFramebufferStatus",
	"glCheckFramebufferStatusEXT",
	"glCheckFramebufferStatusOES",
	"glCheckNamedFramebufferStatusEXT",
	"glClampColor",
	"glClampColorARB",
	"glClear",
	"glClearAccum",
	"glClearAccumxOES",
	"glClearBufferData",
	"glClearBufferSubData",
	"glClearBufferfi",
	"glClearBufferfv",
	"glClearBufferiv",
	"glClearBufferuiv",
	"glClearColor",
	"glClearColorIiEXT",
	"glClearColorIuiEXT",
	"glClearColorx",
	"glClearColorxOES",
	"glClearDepth",
	"glClearDepthdNV",
	"glClearDepthf",
	"glClearDepthfOES",
	"glClearDepthx",
	"glClearDepthxOES",
	"glClearIndex",
	"glClearNamedBufferDataEXT",
	"glClearNamedBufferSubDataEXT",
	"glClearStencil",
	"glClearTexImage",
	"glClearTexSubImage",
	"glClientActiveTexture",
	"glClientActiveTextureARB",
	"glClientActiveVertexStreamATI",
	"glClientAttribDefaultEXT",
	"glClientWaitSync",
	"glClientWaitSyncAPPLE",
	"glClipPlane",
	"glClipPlanef",
	"glClipPlanefIMG",
	"glClipPlanefOES",
	"glClipPlanex",
	"glClipPlanexIMG",
	"glClipPlanexOES",
	"glColor3b",
	"glColor3bv",
	"glColor3d",
	"glColor3dv",
	"glColor3f",
	"glColor3fVertex3fSUN",
	"glColor3fVertex3fvSUN",
	"glColor3fv",
	"glColor3hNV",
	"glColor3hvNV",
	"glColor3i",
	"glColor3iv",
	"glColor3s",
	"glColor3sv",
	"glColor3ub",
	"glColor3ubv",
	"glColor3ui",
	"glColor3uiv",
	"glColor3us",
	"glColor3usv",
	"glColor3xOES",
	"glColor3xvOES",
	"glColor4b",
	"glColor4bv",
	"glColor4d",
	"glColor4dv",
	"glColor4f",
	"glColor4fNormal3fVertex3fSUN",
	"glColor4fNormal3fVertex3fvSUN",
	"glColor4fv",
	"glColor4hNV",
	"glColor4hvNV",
	"glColor4i",
	"glColor4iv",
	"glColor4s",
	"glColor4sv",
	"glColor4ub",
	"glColor4ubVertex2fSUN",
	"glColor4ubVertex2fvSUN",
	"glColor4ubVertex3fSUN",
	"glColor4ubVertex3fvSUN",
	"glColor4ubv",
	"glColor4ui",
	"glColor4uiv",
	"glColor4us",
	"glColor4usv",
	"glColor4x",
	"glColor4xOES",
	"glColor4xvOES",
	"glColorFormatNV",
	"glColorFragmentOp1ATI",
	"glColorFragmentOp2ATI",
	"glColorFragmentOp3ATI",
	"glColorMask",
	"glColorMaskIndexedEXT",
	"glColorMaski",
	"glColorMaskiEXT",
	"glColorMaterial",
	"glColorP3ui",
	"glColorP3uiv",
	"glColorP4ui",
	"glColorP4uiv",
	"glColorPointer",
	"glColorPointerEXT",
	"glColorPointerListIBM",
	"glColorPointervINTEL",
	"glColorSubTable",
	"glColorSubTableEXT",
	"glColorTable",
	"glColorTableEXT",
	"glColorTableParameterfv",
	"glColorTableParameterfvSGI",
	"glColorTableParameteriv",
	"glColorTableParameterivSGI",
	"glColorTableSGI",
	"glCombinerInputNV",
	"glCombinerOutputNV",
	"glCombinerParameterfNV",
	"glCombinerParameterfvNV",
	"glCombinerParameteriNV",
	"glCombinerParameterivNV",
	"glCombinerStageParameterfvNV",
	"glCompileShader",
	"glCompileShaderARB",
	"glCompileShaderIncludeARB",
	"glCompressedMultiTexImage1DEXT",
	"glCompressedMultiTexImage2DEXT",
	"glCompressedMultiTexImage3DEXT",
	"glCompressedMultiTexSubImage1DEXT",
	"glCompressedMultiTexSubImage2DEXT",
	"glCompressedMultiTexSubImage3DEXT",
	"glCompressedTexImage1D",
	"glCompressedTexImage1DARB",
	"glCompressedTexImage2D",
	"glCompressedTexImage2DARB",
	"glCompressedTexImage3D",
	"glCompressedTexImage3DARB",
	"glCompressedTexImage3DOES",
	"glCompressedTexSubImage1D",
	"glCompressedTexSubImage1DARB",
	"glCompressedTexSubImage2D",
	"glCompressedTexSubImage2DARB",
	"glCompressedTexSubImage3D",
	"glCompressedTexSubImage3DARB",
	"glCompressedTexSubImage3DOES",
	"glCompressedTextureImage1DEXT",
	"glCompressedTextureImage2DEXT",
	"glCompressedTextureImage3DEXT",
	"glCompressedTextureSubImage1DEXT",
	"glCompressedTextureSubImage2DEXT",
	"glCompressedTextureSubImage3DEXT",
	"glConvolutionFilter1D",
	"glConvolutionFilter1DEXT",
	"glConvolutionFilter2D",
	"glConvolutionFilter2DEXT",
	"glConvolutionParameterf",
	"glConvolutionParameterfEXT",
	"glConvolutionParameterfv",
	"glConvolutionParameterfvEXT",
	"glConvolutionParameteri",
	"glConvolutionParameteriEXT",
	"glConvolutionParameteriv",
	"glConvolutionParameterivEXT",
	"glConvolutionParameterxOES",
	"glConvolutionParameterxvOES",
	"glCopyBufferSubData",
	"glCopyBufferSubDataNV",
	"glCopyColorSubTable",
	"glCopyColorSubTableEXT",
	"glCopyColorTable",
	"glCopyColorTableSGI",
	"glCopyConvolutionFilter1D",
	"glCopyConvolutionFilter1DEXT",
	"glCopyConvolutionFilter2D",
	"glCopyConvolutionFilter2DEXT",
	"glCopyImageSubData",
	"glCopyImageSubDataEXT",
	"glCopyImageSubDataNV",
	"glCopyMultiTexImage1DEXT",
	"glCopyMultiTexImage2DEXT",
	"glCopyMultiTexSubImage1DEXT",
	"glCopyMultiTexSubImage2DEXT",
	"glCopyMultiTexSubImage3DEXT",
	"glCopyPathNV",
	"glCopyPixels",
	"glCopyTexImage1D",
	"glCopyTexImage1DEXT",
	"glCopyTexImage2D",
	"glCopyTexImage2DEXT",
	"glCopyTexSubImage1D",
	"glCopyTexSubImage1DEXT",
	"glCopyTexSubImage2D",
	"glCopyTexSubImage2DEXT",
	"glCopyTexSubImage3D",
	"glCopyTexSubImage3DEXT",
	"glCopyTexSubImage3DOES",
	"glCopyTextureImage1DEXT",
	"glCopyTextureImage2DEXT",
	"glCopyTextureLevelsAPPLE",
	"glCopyTextureSubImage1DEXT",
	"glCopyTextureSubImage2DEXT",
	"glCopyTextureSubImage3DEXT",
	"glCoverFillPathInstancedNV",
	"glCoverFillPathNV",
	"glCoverStrokePathInstancedNV",
	"glCoverStrokePathNV",
	"glCoverageMaskNV",
	"glCoverageOperationNV",
	"glCreatePerfQueryINTEL",
	"glCreateProgram",
	"glCreateProgramObjectARB",
	"glCreateShader",
	"glCreateShaderObjectARB",
	"glCreateShaderProgramEXT",
	"glCreateShaderProgramv",
	"glCreateShaderProgramvEXT",
	"glCreateSyncFromCLeventARB",
	"glCullFace",
	"glCullParameterdvEXT",
	"glCullParameterfvEXT",
	"glCurrentPaletteMatrixARB",
	"glCurrentPaletteMatrixOES",
	"glDebugMessageCallback",
	"glDebugMessageCallbackAMD",
	"glDebugMessageCallbackARB",
	"glDebugMessageCallbackKHR",
	"glDebugMessageControl",
	"glDebugMessageControlARB",
	"glDebugMessageControlKHR",
	"glDebugMessageEnableAMD",
	"glDebugMessageInsert",
	"glDebugMessageInsertAMD",
	"glDebugMessageInsertARB",
	"glDebugMessageInsertKHR",
	"glDeformSGIX",
	"glDeformationMap3dSGIX",
	"glDeformationMap3fSGIX",
	"glDeleteAsyncMarkersSGIX",
	"glDeleteBuffers",
	"glDeleteBuffersARB",
	"glDeleteFencesAPPLE",
	"glDeleteFencesNV",
	"glDeleteFragmentShaderATI",
	"glDeleteFramebuffers",
	"glDeleteFramebuffersEXT",
	"glDeleteFramebuffersOES",
	"glDeleteLists",
	"glDeleteNamedStringARB",
	"glDeleteNamesAMD",
	"glDeleteObjectARB",
	"glDeleteOcclusionQueriesNV",
	"glDeletePathsNV",
	"glDeletePerfMonitorsAMD",
	"glDeletePerfQueryINTEL",
	"glDeleteProgram",
	"glDeleteProgramPipelines",
	"glDeleteProgramPipelinesEXT",
	"glDeleteProgramsARB",
	"glDeleteProgramsNV",
	"glDeleteQueries",
	"glDeleteQueriesARB",
	"glDeleteQueriesEXT",
	"glDeleteRenderbuffers",
	"glDeleteRenderbuffersEXT",
	"glDeleteRenderbuffersOES",
	"glDeleteSamplers",
	"glDeleteShader",
	"glDeleteSync",
	"glDeleteSyncAPPLE",
	"glDeleteTextures",
	"glDeleteTexturesEXT",
	"glDeleteTransformFeedbacks",
	"glDeleteTransformFeedbacksNV",
	"glDeleteVertexArrays",
	"glDeleteVertexArraysAPPLE",
	"glDeleteVertexArraysOES",
	"glDeleteVertexShaderEXT",
	"glDepthBoundsEXT",
	"glDepthBoundsdNV",
	"glDepthFunc",
	"glDepthMask",
	"glDepthRange",
	"glDepthRangeArrayv",
	"glDepthRangeIndexed",
	"glDepthRangedNV",
	"glDepthRangef",
	"glDepthRangefOES",
	"glDepthRangex",
	"glDepthRangexOES",
	"glDetachObjectARB",
	"glDetachShader",
	"glDetailTexFuncSGIS",
	"glDisable",
	"glDisableClientState",
	"glDisableClientStateIndexedEXT",
	"glDisableClientStateiEXT",
	"glDisableDriverControlQCOM",
	"glDisableIndexedEXT",
	"glDisableVariantClientStateEXT",
	"glDisableVertexArrayAttribEXT",
	"glDisableVertexArrayEXT",
	"glDisableVertexAttribAPPLE",
	"glDisableVertexAttribArray",
	"glDisableVertexAttribArrayARB",
	"glDisablei",
	"glDisableiEXT",
	"glDiscardFramebufferEXT",
	"glDispatchCompute",
	"glDispatchComputeGroupSizeARB",
	"glDispatchComputeIndirect",
	"glDrawArrays",
	"glDrawArraysEXT",
	"glDrawArraysIndirect",
	"glDrawArraysInstanced",
	"glDrawArraysInstancedANGLE",
	"glDrawArraysInstancedARB",
	"glDrawArraysInstancedBaseInstance",
	"glDrawArraysInstancedEXT",
	"glDrawArraysInstancedNV",
	"glDrawBuffer",
	"glDrawBuffers",
	"glDrawBuffersARB",
	"glDrawBuffersATI",
	"glDrawBuffersEXT",
	"glDrawBuffersIndexedEXT",
	"glDrawBuffersNV",
	"glDrawElementArrayAPPLE",
	"glDrawElementArrayATI",
	"glDrawElements",
	"glDrawElementsBaseVertex",
	"glDrawElementsIndirect",
	"glDrawElementsInstanced",
	"glDrawElementsInstancedANGLE",
	"glDrawElementsInstancedARB",
	"glDrawElementsInstancedBaseInstance",
	"glDrawElementsInstancedBaseVertex",
	"glDrawElementsInstancedBaseVertexBaseInstance",
	"glDrawElementsInstancedEXT",
	"glDrawElementsInstancedNV",
	"glDrawMeshArraysSUN",
	"glDrawPixels",
	"glDrawRangeElementArrayAPPLE",
	"glDrawRangeElementArrayATI",
	"glDrawRangeElements",
	"glDrawRangeElementsBaseVertex",
	"glDrawRangeElementsEXT",
	"glDrawTexfOES",
	"glDrawTexfvOES",
	"glDrawTexiOES",
	"glDrawTexivOES",
	"glDrawTexsOES",
	"glDrawTexsvOES",
	"glDrawTextureNV",
	"glDrawTexxOES",
	"glDrawTexxvOES",
	"glDrawTransformFeedback",
	"glDrawTransformFeedbackInstanced",
	"glDrawTransformFeedbackNV",
	"glDrawTransformFeedbackStream",
	"glDrawTransformFeedbackStreamInstanced",
	"glEGLImageTargetRenderbufferStorageOES",
	"glEGLImageTargetTexture2DOES",
	"glEdgeFlag",
	"glEdgeFlagFormatNV",
	"glEdgeFlagPointer",
	"glEdgeFlagPointerEXT",
	"glEdgeFlagPointerListIBM",
	"glEdgeFlagv",
	"glElementPointerAPPLE",
	"glElementPointerATI",
	"glEnable",
	"glEnableClientState",
	"glEnableClientStateIndexedEXT",
	"glEnableClientStateiEXT",
	"glEnableDriverControlQCOM",
	"glEnableIndexedEXT",
	"glEnableVariantClientStateEXT",
	"glEnableVertexArrayAttribEXT",
	"glEnableVertexArrayEXT",
	"glEnableVertexAttribAPPLE",
	"glEnableVertexAttribArray",
	"glEnableVertexAttribArrayARB",
	"glEnablei",
	"glEnableiEXT",
	"glEnd",
	"glEndConditionalRender",
	"glEndConditionalRenderNV",
	"glEndConditionalRenderNVX",
	"glEndFragmentShaderATI",
	"glEndList",
	"glEndOcclusionQueryNV",
	"glEndPerfMonitorAMD",
	"glEndPerfQueryINTEL",
	"glEndQuery",
	"glEndQueryARB",
	"glEndQueryEXT",
	"glEndQueryIndexed",
	"glEndTilingQCOM",
	"glEndTransformFeedback",
	"glEndTransformFeedbackEXT",
	"glEndTransformFeedbackNV",
	"glEndVertexShaderEXT",
	"glEndVideoCaptureNV",
	"glEvalCoord1d",
	"glEvalCoord1dv",
	"glEvalCoord1f",
	"glEvalCoord1fv",
	"glEvalCoord1xOES",
	"glEvalCoord1xvOES",
	"glEvalCoord2d",
	"glEvalCoord2dv",
	"glEvalCoord2f",
	"glEvalCoord2fv",
	"glEvalCoord2xOES",
	"glEvalCoord2xvOES",
	"glEvalMapsNV",
	"glEvalMesh1",
	"glEvalMesh2",
	"glEvalPoint1",
	"glEvalPoint2",
	"glExecuteProgramNV",
	"glExtGetBufferPointervQCOM",
	"glExtGetBuffersQCOM",
	"glExtGetFramebuffersQCOM",
	"glExtGetProgramBinarySourceQCOM",
	"glExtGetProgramsQCOM",
	"glExtGetRenderbuffersQCOM",
	"glExtGetShadersQCOM",
	"glExtGetTexLevelParameterivQCOM",
	"glExtGetTexSubImageQCOM",
	"glExtGetTexturesQCOM",
	"glExtIsProgramBinaryQCOM",
	"glExtTexObjectStateOverrideiQCOM",
	"glExtractComponentEXT",
	"glFeedbackBuffer",
	"glFeedbackBufferxOES",
	"glFenceSync",
	"glFenceSyncAPPLE",
	"glFinalCombinerInputNV",
	"glFinish",
	"glFinishAsyncSGIX",
	"glFinishFenceAPPLE",
	"glFinishFenceNV",
	"glFinishObjectAPPLE",
	"glFinishTextureSUNX",
	"glFlush",
	"glFlushMappedBufferRange",
	"glFlushMappedBufferRangeAPPLE",
	"glFlushMappedBufferRangeEXT",
	"glFlushMappedNamedBufferRangeEXT",
	"glFlushPixelDataRangeNV",
	"glFlushRasterSGIX",
	"glFlushStaticDataIBM",
	"glFlushVertexArrayRangeAPPLE",
	"glFlushVertexArrayRangeNV",
	"glFogCoordFormatNV",
	"glFogCoordPointer",
	"glFogCoordPointerEXT",
	"glFogCoordPointerListIBM",
	"glFogCoordd",
	"glFogCoorddEXT",
	"glFogCoorddv",
	"glFogCoorddvEXT",
	"glFogCoordf",
	"glFogCoordfEXT",
	"glFogCoordfv",
	"glFogCoordfvEXT",
	"glFogCoordhNV",
	"glFogCoordhvNV",
	"glFogFuncSGIS",
	"glFogf",
	"glFogfv",
	"glFogi",
	"glFogiv",
	"glFogx",
	"glFogxOES",
	"glFogxv",
	"glFogxvOES",
	"glFragmentColorMaterialSGIX",
	"glFragmentLightModelfSGIX",
	"glFragmentLightModelfvSGIX",
	"glFragmentLightModeliSGIX",
	"glFragmentLightModelivSGIX",
	"glFragmentLightfSGIX",
	"glFragmentLightfvSGIX",
	"glFragmentLightiSGIX",
	"glFragmentLightivSGIX",
	"glFragmentMaterialfSGIX",
	"glFragmentMaterialfvSGIX",
	"glFragmentMaterialiSGIX",
	"glFragmentMaterialivSGIX",
	"glFrameTerminatorGREMEDY",
	"glFrameZoomSGIX",
	"glFramebufferDrawBufferEXT",
	"glFramebufferDrawBuffersEXT",
	"glFramebufferParameteri",
	"glFramebufferReadBufferEXT",
	"glFramebufferRenderbuffer",
	"glFramebufferRenderbufferEXT",
	"glFramebufferRenderbufferOES",
	"glFramebufferTexture",
	"glFramebufferTexture1D",
	"glFramebufferTexture1DEXT",
	"glFramebufferTexture2D",
	"glFramebufferTexture2DEXT",
	"glFramebufferTexture2DMultisampleEXT",
	"glFramebufferTexture2DMultisampleIMG",
	"glFramebufferTexture2DOES",
	"glFramebufferTexture3D",
	"glFramebufferTexture3DEXT",
	"glFramebufferTexture3DOES",
	"glFramebufferTextureARB",
	"glFramebufferTextureEXT",
	"glFramebufferTextureFaceARB",
	"glFramebufferTextureFaceEXT",
	"glFramebufferTextureLayer",
	"glFramebufferTextureLayerARB",
	"glFramebufferTextureLayerEXT",
	"glFreeObjectBufferATI",
	"glFrontFace",
	"glFrustum",
	"glFrustumf",
	"glFrustumfOES",
	"glFrustumx",
	"glFrustumxOES",
	"glGenAsyncMarkersSGIX",
	"glGenBuffers",
	"glGenBuffersARB",
	"glGenFencesAPPLE",
	"glGenFencesNV",
	"glGenFragmentShadersATI",
	"glGenFramebuffers",
	"glGenFramebuffersEXT",
	"glGenFramebuffersOES",
	"glGenLists",
	"glGenNamesAMD",
	"glGenOcclusionQueriesNV",
	"glGenPathsNV",
	"glGenPerfMonitorsAMD",
	"glGenProgramPipelines",
	"glGenProgramPipelinesEXT",
	"glGenProgramsARB",
	"glGenProgramsNV",
	"glGenQueries",
	"glGenQueriesARB",
	"glGenQueriesEXT",
	"glGenRenderbuffers",
	"glGenRenderbuffersEXT",
	"glGenRenderbuffersOES",
	"glGenSamplers",
	"glGenSymbolsEXT",
	"glGenTextures",
	"glGenTexturesEXT",
	"glGenTransformFeedbacks",
	"glGenTransformFeedbacksNV",
	"glGenVertexArrays",
	"glGenVertexArraysAPPLE",
	"glGenVertexArraysOES",
	"glGenVertexShadersEXT",
	"glGenerateMipmap",
	"glGenerateMipmapEXT",
	"glGenerateMipmapOES",
	"glGenerateMultiTexMipmapEXT",
	"glGenerateTextureMipmapEXT",
	"glGetActiveAtomicCounterBufferiv",
	"glGetActiveAttrib",
	"glGetActiveAttribARB",
	"glGetActiveSubroutineName",
	"glGetActiveSubroutineUniformName",
	"glGetActiveSubroutineUniformiv",
	"glGetActiveUniform",
	"glGetActiveUniformARB",
	"glGetActiveUniformBlockName",
	"glGetActiveUniformBlockiv",
	"glGetActiveUniformName",
	"glGetActiveUniformsiv",
	"glGetActiveVaryingNV",
	"glGetArrayObjectfvATI",
	"glGetArrayObjectivATI",
	"glGetAttachedObjectsARB",
	"glGetAttachedShaders",
	"glGetAttribLocation",
	"glGetAttribLocationARB",
	"glGetBooleanIndexedvEXT",
	"glGetBooleani_v",
	"glGetBooleanv",
	"glGetBufferParameteri64v",
	"glGetBufferParameteriv",
	"glGetBufferParameterivARB",
	"glGetBufferParameterui64vNV",
	"glGetBufferPointerv",
	"glGetBufferPointervARB",
	"glGetBufferPointervOES",
	"glGetBufferSubData",
	"glGetBufferSubDataARB",
	"glGetClipPlane",
	"glGetClipPlanef",
	"glGetClipPlanefOES",
	"glGetClipPlanex",
	"glGetClipPlanexOES",
	"glGetColorTable",
	"glGetColorTableEXT",
	"glGetColorTableParameterfv",
	"glGetColorTableParameterfvEXT",
	"glGetColorTableParameterfvSGI",
	"glGetColorTableParameteriv",
	"glGetColorTableParameterivEXT",
	"glGetColorTableParameterivSGI",
	"glGetColorTableSGI",
	"glGetCombinerInputParameterfvNV",
	"glGetCombinerInputParameterivNV",
	"glGetCombinerOutputParameterfvNV",
	"glGetCombinerOutputParameterivNV",
	"glGetCombinerStageParameterfvNV",
	"glGetCompressedMultiTexImageEXT",
	"glGetCompressedTexImage",
	"glGetCompressedTexImageARB",
	"glGetCompressedTextureImageEXT",
	"glGetConvolutionFilter",
	"glGetConvolutionFilterEXT",
	"glGetConvolutionParameterfv",
	"glGetConvolutionParameterfvEXT",
	"glGetConvolutionParameteriv",
	"glGetConvolutionParameterivEXT",
	"glGetConvolutionParameterxvOES",
	"glGetDebugMessageLog",
	"glGetDebugMessageLogAMD",
	"glGetDebugMessageLogARB",
	"glGetDebugMessageLogKHR",
	"glGetDetailTexFuncSGIS",
	"glGetDoubleIndexedvEXT",
	"glGetDoublei_v",
	"glGetDoublei_vEXT",
	"glGetDoublev",
	"glGetDriverControlStringQCOM",
	"glGetDriverControlsQCOM",
	"glGetError",
	"glGetFenceivNV",
	"glGetFinalCombinerInputParameterfvNV",
	"glGetFinalCombinerInputParameterivNV",
	"glGetFirstPerfQueryIdINTEL",
	"glGetFixedv",
	"glGetFixedvOES",
	"glGetFloatIndexedvEXT",
	"glGetFloati_v",
	"glGetFloati_vEXT",
	"glGetFloatv",
	"glGetFogFuncSGIS",
	"glGetFragDataIndex",
	"glGetFragDataLocation",
	"glGetFragDataLocationEXT",
	"glGetFragmentLightfvSGIX",
	"glGetFragmentLightivSGIX",
	"glGetFragmentMaterialfvSGIX",
	"glGetFragmentMaterialivSGIX",
	"glGetFramebufferAttachmentParameteriv",
	"glGetFramebufferAttachmentParameterivEXT",
	"glGetFramebufferAttachmentParameterivOES",
	"glGetFramebufferParameteriv",
	"glGetFramebufferParameterivEXT",
	"glGetGraphicsResetStatusARB",
	"glGetGraphicsResetStatusEXT",
	"glGetHandleARB",
	"glGetHistogram",
	"glGetHistogramEXT",
	"glGetHistogramParameterfv",
	"glGetHistogramParameterfvEXT",
	"glGetHistogramParameteriv",
	"glGetHistogramParameterivEXT",
	"glGetHistogramParameterxvOES",
	"glGetImageHandleARB",
	"glGetImageHandleNV",
	"glGetImageTransformParameterfvHP",
	"glGetImageTransformParameterivHP",
	"glGetInfoLogARB",
	"glGetInstrumentsSGIX",
	"glGetInteger64i_v",
	"glGetInteger64v",
	"glGetInteger64vAPPLE",
	"glGetIntegerIndexedvEXT",
	"glGetIntegeri_v",
	"glGetIntegeri_vEXT",
	"glGetIntegerui64i_vNV",
	"glGetIntegerui64vNV",
	"glGetIntegerv",
	"glGetInternalformati64v",
	"glGetInternalformativ",
	"glGetInvariantBooleanvEXT",
	"glGetInvariantFloatvEXT",
	"glGetInvariantIntegervEXT",
	"glGetLightfv",
	"glGetLightiv",
	"glGetLightxOES",
	"glGetLightxv",
	"glGetLightxvOES",
	"glGetListParameterfvSGIX",
	"glGetListParameterivSGIX",
	"glGetLocalConstantBooleanvEXT",
	"glGetLocalConstantFloatvEXT",
	"glGetLocalConstantIntegervEXT",
	"glGetMapAttribParameterfvNV",
	"glGetMapAttribParameterivNV",
	"glGetMapControlPointsNV",
	"glGetMapParameterfvNV",
	"glGetMapParameterivNV",
	"glGetMapdv",
	"glGetMapfv",
	"glGetMapiv",
	"glGetMapxvOES",
	"glGetMaterialfv",
	"glGetMaterialiv",
	"glGetMaterialxOES",
	"glGetMaterialxv",
	"glGetMaterialxvOES",
	"glGetMinmax",
	"glGetMinmaxEXT",
	"glGetMinmaxParameterfv",
	"glGetMinmaxParameterfvEXT",
	"glGetMinmaxParameteriv",
	"glGetMinmaxParameterivEXT",
	"glGetMultiTexEnvfvEXT",
	"glGetMultiTexEnvivEXT",
	"glGetMultiTexGendvEXT",
	"glGetMultiTexGenfvEXT",
	"glGetMultiTexGenivEXT",
	"glGetMultiTexImageEXT",
	"glGetMultiTexLevelParameterfvEXT",
	"glGetMultiTexLevelParameterivEXT",
	"glGetMultiTexParameterIivEXT",
	"glGetMultiTexParameterIuivEXT",
	"glGetMultiTexParameterfvEXT",
	"glGetMultiTexParameterivEXT",
	"glGetMultisamplefv",
	"glGetMultisamplefvNV",
	"glGetNamedBufferParameterivEXT",
	"glGetNamedBufferParameterui64vNV",
	"glGetNamedBufferPointervEXT",
	"glGetNamedBufferSubDataEXT",
	"glGetNamedFramebufferAttachmentParameterivEXT",
	"glGetNamedFramebufferParameterivEXT",
	"glGetNamedProgramLocalParameterIivEXT",
	"glGetNamedProgramLocalParameterIuivEXT",
	"glGetNamedProgramLocalParameterdvEXT",
	"glGetNamedProgramLocalParameterfvEXT",
	"glGetNamedProgramStringEXT",
	"glGetNamedProgramivEXT",
	"glGetNamedRenderbufferParameterivEXT",
	"glGetNamedStringARB",
	"glGetNamedStringivARB",
	"glGetNextPerfQueryIdINTEL",
	"glGetObjectBufferfvATI",
	"glGetObjectBufferivATI",
	"glGetObjectLabel",
	"glGetObjectLabelEXT",
	"glGetObjectLabelKHR",
	"glGetObjectParameterfvARB",
	"glGetObjectParameterivAPPLE",
	"glGetObjectParameterivARB",
	"glGetObjectPtrLabel",
	"glGetObjectPtrLabelKHR",
	"glGetOcclusionQueryivNV",
	"glGetOcclusionQueryuivNV",
	"glGetPathColorGenfvNV",
	"glGetPathColorGenivNV",
	"glGetPathCommandsNV",
	"glGetPathCoordsNV",
	"glGetPathDashArrayNV",
	"glGetPathLengthNV",
	"glGetPathMetricRangeNV",
	"glGetPathMetricsNV",
	"glGetPathParameterfvNV",
	"glGetPathParameterivNV",
	"glGetPathSpacingNV",
	"glGetPathTexGenfvNV",
	"glGetPathTexGenivNV",
	"glGetPerfCounterInfoINTEL",
	"glGetPerfMonitorCounterDataAMD",
	"glGetPerfMonitorCounterInfoAMD",
	"glGetPerfMonitorCounterStringAMD",
	"glGetPerfMonitorCountersAMD",
	"glGetPerfMonitorGroupStringAMD",
	"glGetPerfMonitorGroupsAMD",
	"glGetPerfQueryDataINTEL",
	"glGetPerfQueryIdByNameINTEL",
	"glGetPerfQueryInfoINTEL",
	"glGetPixelMapfv",
	"glGetPixelMapuiv",
	"glGetPixelMapusv",
	"glGetPixelMapxv",
	"glGetPixelTexGenParameterfvSGIS",
	"glGetPixelTexGenParameterivSGIS",
	"glGetPixelTransformParameterfvEXT",
	"glGetPixelTransformParameterivEXT",
	"glGetPointerIndexedvEXT",
	"glGetPointeri_vEXT",
	"glGetPointerv",
	"glGetPointervEXT",
	"glGetPointervKHR",
	"glGetPolygonStipple",
	"glGetProgramBinary",
	"glGetProgramBinaryOES",
	"glGetProgramEnvParameterIivNV",
	"glGetProgramEnvParameterIuivNV",
	"glGetProgramEnvParameterdvARB",
	"glGetProgramEnvParameterfvARB",
	"glGetProgramInfoLog",
	"glGetProgramInterfaceiv",
	"glGetProgramLocalParameterIivNV",
	"glGetProgramLocalParameterIuivNV",
	"glGetProgramLocalParameterdvARB",
	"glGetProgramLocalParameterfvARB",
	"glGetProgramNamedParameterdvNV",
	"glGetProgramNamedParameterfvNV",
	"glGetProgramParameterdvNV",
	"glGetProgramParameterfvNV",
	"glGetProgramPipelineInfoLog",
	"glGetProgramPipelineInfoLogEXT",
	"glGetProgramPipelineiv",
	"glGetProgramPipelineivEXT",
	"glGetProgramResourceIndex",
	"glGetProgramResourceLocation",
	"glGetProgramResourceLocationIndex",
	"glGetProgramResourceName",
	"glGetProgramResourceiv",
	"glGetProgramStageiv",
	"glGetProgramStringARB",
	"glGetProgramStringNV",
	"glGetProgramSubroutineParameteruivNV",
	"glGetProgramiv",
	"glGetProgramivARB",
	"glGetProgramivNV",
	"glGetQueryIndexediv",
	"glGetQueryObjecti64v",
	"glGetQueryObjecti64vEXT",
	"glGetQueryObjectiv",
	"glGetQueryObjectivARB",
	"glGetQueryObjectivEXT",
	"glGetQueryObjectui64v",
	"glGetQueryObjectui64vEXT",
	"glGetQueryObjectuiv",
	"glGetQueryObjectuivARB",
	"glGetQueryObjectuivEXT",
	"glGetQueryiv",
	"glGetQueryivARB",
	"glGetQueryivEXT",
	"glGetRenderbufferParameteriv",
	"glGetRenderbufferParameterivEXT",
	"glGetRenderbufferParameterivOES",
	"glGetSamplerParameterIiv",
	"glGetSamplerParameterIivEXT",
	"glGetSamplerParameterIuiv",
	"glGetSamplerParameterIuivEXT",
	"glGetSamplerParameterfv",
	"glGetSamplerParameteriv",
	"glGetSeparableFilter",
	"glGetSeparableFilterEXT",
	"glGetShaderInfoLog",
	"glGetShaderPrecisionFormat",
	"glGetShaderSource",
	"glGetShaderSourceARB",
	"glGetShaderiv",
	"glGetSharpenTexFuncSGIS",
	"glGetString",
	"glGetStringi",
	"glGetSubroutineIndex",
	"glGetSubroutineUniformLocation",
	"glGetSynciv",
	"glGetSyncivAPPLE",
	"glGetTexBumpParameterfvATI",
	"glGetTexBumpParameterivATI",
	"glGetTexEnvfv",
	"glGetTexEnviv",
	"glGetTexEnvxv",
	"glGetTexEnvxvOES",
	"glGetTexFilterFuncSGIS",
	"glGetTexGendv",
	"glGetTexGenfv",
	"glGetTexGenfvOES",
	"glGetTexGeniv",
	"glGetTexGenivOES",
	"glGetTexGenxvOES",
	"glGetTexImage",
	"glGetTexLevelParameterfv",
	"glGetTexLevelParameteriv",
	"glGetTexLevelParameterxvOES",
	"glGetTexParameterIiv",
	"glGetTexParameterIivEXT",
	"glGetTexParameterIuiv",
	"glGetTexParameterIuivEXT",
	"glGetTexParameterPointervAPPLE",
	"glGetTexParameterfv",
	"glGetTexParameteriv",
	"glGetTexParameterxv",
	"glGetTexParameterxvOES",
	"glGetTextureHandleARB",
	"glGetTextureHandleNV",
	"glGetTextureImageEXT",
	"glGetTextureLevelParameterfvEXT",
	"glGetTextureLevelParameterivEXT",
	"glGetTextureParameterIivEXT",
	"glGetTextureParameterIuivEXT",
	"glGetTextureParameterfvEXT",
	"glGetTextureParameterivEXT",
	"glGetTextureSamplerHandleARB",
	"glGetTextureSamplerHandleNV",
	"glGetTrackMatrixivNV",
	"glGetTransformFeedbackVarying",
	"glGetTransformFeedbackVaryingEXT",
	"glGetTransformFeedbackVaryingNV",
	"glGetTranslatedShaderSourceANGLE",
	"glGetUniformBlockIndex",
	"glGetUniformBufferSizeEXT",
	"glGetUniformIndices",
	"glGetUniformLocation",
	"glGetUniformLocationARB",
	"glGetUniformOffsetEXT",
	"glGetUniformSubroutineuiv",
	"glGetUniformdv",
	"glGetUniformfv",
	"glGetUniformfvARB",
	"glGetUniformi64vNV",
	"glGetUniformiv",
	"glGetUniformivARB",
	"glGetUniformui64vNV",
	"glGetUniformuiv",
	"glGetUniformuivEXT",
	"glGetVariantArrayObjectfvATI",
	"glGetVariantArrayObjectivATI",
	"glGetVariantBooleanvEXT",
	"glGetVariantFloatvEXT",
	"glGetVariantIntegervEXT",
	"glGetVariantPointervEXT",
	"glGetVaryingLocationNV",
	"glGetVertexArrayIntegeri_vEXT",
	"glGetVertexArrayIntegervEXT",
	"glGetVertexArrayPointeri_vEXT",
	"glGetVertexArrayPointervEXT",
	"glGetVertexAttribArrayObjectfvATI",
	"glGetVertexAttribArrayObjectivATI",
	"glGetVertexAttribIiv",
	"glGetVertexAttribIivEXT",
	"glGetVertexAttribIuiv",
	"glGetVertexAttribIuivEXT",
	"glGetVertexAttribLdv",
	"glGetVertexAttribLdvEXT",
	"glGetVertexAttribLi64vNV",
	"glGetVertexAttribLui64vARB",
	"glGetVertexAttribLui64vNV",
	"glGetVertexAttribPointerv",
	"glGetVertexAttribPointervARB",
	"glGetVertexAttribPointervNV",
	"glGetVertexAttribdv",
	"glGetVertexAttribdvARB",
	"glGetVertexAttribdvNV",
	"glGetVertexAttribfv",
	"glGetVertexAttribfvARB",
	"glGetVertexAttribfvNV",
	"glGetVertexAttribiv",
	"glGetVertexAttribivARB",
	"glGetVertexAttribivNV",
	"glGetVideoCaptureStreamdvNV",
	"glGetVideoCaptureStreamfvNV",
	"glGetVideoCaptureStreamivNV",
	"glGetVideoCaptureivNV",
	"glGetVideoi64vNV",
	"glGetVideoivNV",
	"glGetVideoui64vNV",
	"glGetVideouivNV",
	"glGetnColorTableARB",
	"glGetnCompressedTexImageARB",
	"glGetnConvolutionFilterARB",
	"glGetnHistogramARB",
	"glGetnMapdvARB",
	"glGetnMapfvARB",
	"glGetnMapivARB",
	"glGetnMinmaxARB",
	"glGetnPixelMapfvARB",
	"glGetnPixelMapuivARB",
	"glGetnPixelMapusvARB",
	"glGetnPolygonStippleARB",
	"glGetnSeparableFilterARB",
	"glGetnTexImageARB",
	"glGetnUniformdvARB",
	"glGetnUniformfvARB",
	"glGetnUniformfvEXT",
	"glGetnUniformivARB",
	"glGetnUniformivEXT",
	"glGetnUniformuivARB",
	"glGlobalAlphaFactorbSUN",
	"glGlobalAlphaFactordSUN",
	"glGlobalAlphaFactorfSUN",
	"glGlobalAlphaFactoriSUN",
	"glGlobalAlphaFactorsSUN",
	"glGlobalAlphaFactorubSUN",
	"glGlobalAlphaFactoruiSUN",
	"glGlobalAlphaFactorusSUN",
	"glHint",
	"glHintPGI",
	"glHistogram",
	"glHistogramEXT",
	"glIglooInterfaceSGIX",
	"glImageTransformParameterfHP",
	"glImageTransformParameterfvHP",
	"glImageTransformParameteriHP",
	"glImageTransformParameterivHP",
	"glImportSyncEXT",
	"glIndexFormatNV",
	"glIndexFuncEXT",
	"glIndexMask",
	"glIndexMaterialEXT",
	"glIndexPointer",
	"glIndexPointerEXT",
	"glIndexPointerListIBM",
	"glIndexd",
	"glIndexdv",
	"glIndexf",
	"glIndexfv",
	"glIndexi",
	"glIndexiv",
	"glIndexs",
	"glIndexsv",
	"glIndexub",
	"glIndexubv",
	"glIndexxOES",
	"glIndexxvOES",
	"glInitNames",
	"glInsertComponentEXT",
	"glInsertEventMarkerEXT",
	"glInstrumentsBufferSGIX",
	"glInterleavedArrays",
	"glInterpolatePathsNV",
	"glInvalidateBufferData",
	"glInvalidateBufferSubData",
	"glInvalidateFramebuffer",
	"glInvalidateSubFramebuffer",
	"glInvalidateTexImage",
	"glInvalidateTexSubImage",
	"glIsAsyncMarkerSGIX",
	"glIsBuffer",
	"glIsBufferARB",
	"glIsBufferResidentNV",
	"glIsEnabled",
	"glIsEnabledIndexedEXT",
	"glIsEnabledi",
	"glIsEnablediEXT",
	"glIsFenceAPPLE",
	"glIsFenceNV",
	"glIsFramebuffer",
	"glIsFramebufferEXT",
	"glIsFramebufferOES",
	"glIsImageHandleResidentARB",
	"glIsImageHandleResidentNV",
	"glIsList",
	"glIsNameAMD",
	"glIsNamedBufferResidentNV",
	"glIsNamedStringARB",
	"glIsObjectBufferATI",
	"glIsOcclusionQueryNV",
	"glIsPathNV",
	"glIsPointInFillPathNV",
	"glIsPointInStrokePathNV",
	"glIsProgram",
	"glIsProgramARB",
	"glIsProgramNV",
	"glIsProgramPipeline",
	"glIsProgramPipelineEXT",
	"glIsQuery",
	"glIsQueryARB",
	"glIsQueryEXT",
	"glIsRenderbuffer",
	"glIsRenderbufferEXT",
	"glIsRenderbufferOES",
	"glIsSampler",
	"glIsShader",
	"glIsSync",
	"glIsSyncAPPLE",
	"glIsTexture",
	"glIsTextureEXT",
	"glIsTextureHandleResidentARB",
	"glIsTextureHandleResidentNV",
	"glIsTransformFeedback",
	"glIsTransformFeedbackNV",
	"glIsVariantEnabledEXT",
	"glIsVertexArray",
	"glIsVertexArrayAPPLE",
	"glIsVertexArrayOES",
	"glIsVertexAttribEnabledAPPLE",
	"glLabelObjectEXT",
	"glLightEnviSGIX",
	"glLightModelf",
	"glLightModelfv",
	"glLightModeli",
	"glLightModeliv",
	"glLightModelx",
	"glLightModelxOES",
	"glLightModelxv",
	"glLightModelxvOES",
	"glLightf",
	"glLightfv",
	"glLighti",
	"glLightiv",
	"glLightx",
	"glLightxOES",
	"glLightxv",
	"glLightxvOES",
	"glLineStipple",
	"glLineWidth",
	"glLineWidthx",
	"glLineWidthxOES",
	"glLinkProgram",
	"glLinkProgramARB",
	"glListBase",
	"glListParameterfSGIX",
	"glListParameterfvSGIX",
	"glListParameteriSGIX",
	"glListParameterivSGIX",
	"glLoadIdentity",
	"glLoadIdentityDeformationMapSGIX",
	"glLoadMatrixd",
	"glLoadMatrixf",
	"glLoadMatrixx",
	"glLoadMatrixxOES",
	"glLoadName",
	"glLoadPaletteFromModelViewMatrixOES",
	"glLoadProgramNV",
	"glLoadTransposeMatrixd",
	"glLoadTransposeMatrixdARB",
	"glLoadTransposeMatrixf",
	"glLoadTransposeMatrixfARB",
	"glLoadTransposeMatrixxOES",
	"glLockArraysEXT",
	"glLogicOp",
	"glMakeBufferNonResidentNV",
	"glMakeBufferResidentNV",
	"glMakeImageHandleNonResidentARB",
	"glMakeImageHandleNonResidentNV",
	"glMakeImageHandleResidentARB",
	"glMakeImageHandleResidentNV",
	"glMakeNamedBufferNonResidentNV",
	"glMakeNamedBufferResidentNV",
	"glMakeTextureHandleNonResidentARB",
	"glMakeTextureHandleNonResidentNV",
	"glMakeTextureHandleResidentARB",
	"glMakeTextureHandleResidentNV",
	"glMap1d",
	"glMap1f",
	"glMap1xOES",
	"glMap2d",
	"glMap2f",
	"glMap2xOES",
	"glMapBuffer",
	"glMapBufferARB",
	"glMapBufferOES",
	"glMapBufferRange",
	"glMapBufferRangeEXT",
	"glMapControlPointsNV",
	"glMapGrid1d",
	"glMapGrid1f",
	"glMapGrid1xOES",
	"glMapGrid2d",
	"glMapGrid2f",
	"glMapGrid2xOES",
	"glMapNamedBufferEXT",
	"glMapNamedBufferRangeEXT",
	"glMapObjectBufferATI",
	"glMapParameterfvNV",
	"glMapParameterivNV",
	"glMapTexture2DINTEL",
	"glMapVertexAttrib1dAPPLE",
	"glMapVertexAttrib1fAPPLE",
	"glMapVertexAttrib2dAPPLE",
	"glMapVertexAttrib2fAPPLE",
	"glMaterialf",
	"glMaterialfv",
	"glMateriali",
	"glMaterialiv",
	"glMaterialx",
	"glMaterialxOES",
	"glMaterialxv",
	"glMaterialxvOES",
	"glMatrixFrustumEXT",
	"glMatrixIndexPointerARB",
	"glMatrixIndexPointerOES",
	"glMatrixIndexubvARB",
	"glMatrixIndexuivARB",
	"glMatrixIndexusvARB",
	"glMatrixLoadIdentityEXT",
	"glMatrixLoadTransposedEXT",
	"glMatrixLoadTransposefEXT",
	"glMatrixLoaddEXT",
	"glMatrixLoadfEXT",
	"glMatrixMode",
	"glMatrixMultTransposedEXT",
	"glMatrixMultTransposefEXT",
	"glMatrixMultdEXT",
	"glMatrixMultfEXT",
	"glMatrixOrthoEXT",
	"glMatrixPopEXT",
	"glMatrixPushEXT",
	"glMatrixRotatedEXT",
	"glMatrixRotatefEXT",
	"glMatrixScaledEXT",
	"glMatrixScalefEXT",
	"glMatrixTranslatedEXT",
	"glMatrixTranslatefEXT",
	"glMemoryBarrier",
	"glMemoryBarrierByRegion",
	"glMemoryBarrierEXT",
	"glMinSampleShading",
	"glMinSampleShadingARB",
	"glMinSampleShadingOES",
	"glMinmax",
	"glMinmaxEXT",
	"glMultMatrixd",
	"glMultMatrixf",
	"glMultMatrixx",
	"glMultMatrixxOES",
	"glMultTransposeMatrixd",
	"glMultTransposeMatrixdARB",
	"glMultTransposeMatrixf",
	"glMultTransposeMatrixfARB",
	"glMultTransposeMatrixxOES",
	"glMultiDrawArrays",
	"glMultiDrawArraysEXT",
	"glMultiDrawArraysIndirect",
	"glMultiDrawArraysIndirectAMD",
	"glMultiDrawArraysIndirectBindlessNV",
	"glMultiDrawArraysIndirectCountARB",
	"glMultiDrawElementArrayAPPLE",
	"glMultiDrawElements",
	"glMultiDrawElementsBaseVertex",
	"glMultiDrawElementsEXT",
	"glMultiDrawElementsIndirect",
	"glMultiDrawElementsIndirectAMD",
	"glMultiDrawElementsIndirectBindlessNV",
	"glMultiDrawElementsIndirectCountARB",
	"glMultiDrawRangeElementArrayAPPLE",
	"glMultiModeDrawArraysIBM",
	"glMultiModeDrawElementsIBM",
	"glMultiTexBufferEXT",
	"glMultiTexCoord1bOES",
	"glMultiTexCoord1bvOES",
	"glMultiTexCoord1d",
	"glMultiTexCoord1dARB",
	"glMultiTexCoord1dv",
	"glMultiTexCoord1dvARB",
	"glMultiTexCoord1f",
	"glMultiTexCoord1fARB",
	"glMultiTexCoord1fv",
	"glMultiTexCoord1fvARB",
	"glMultiTexCoord1hNV",
	"glMultiTexCoord1hvNV",
	"glMultiTexCoord1i",
	"glMultiTexCoord1iARB",
	"glMultiTexCoord1iv",
	"glMultiTexCoord1ivARB",
	"glMultiTexCoord1s",
	"glMultiTexCoord1sARB",
	"glMultiTexCoord1sv",
	"glMultiTexCoord1svARB",
	"glMultiTexCoord1xOES",
	"glMultiTexCoord1xvOES",
	"glMultiTexCoord2bOES",
	"glMultiTexCoord2bvOES",
	"glMultiTexCoord2d",
	"glMultiTexCoord2dARB",
	"glMultiTexCoord2dv",
	"glMultiTexCoord2dvARB",
	"glMultiTexCoord2f",
	"glMultiTexCoord2fARB",
	"glMultiTexCoord2fv",
	"glMultiTexCoord2fvARB",
	"glMultiTexCoord2hNV",
	"glMultiTexCoord2hvNV",
	"glMultiTexCoord2i",
	"glMultiTexCoord2iARB",
	"glMultiTexCoord2iv",
	"glMultiTexCoord2ivARB",
	"glMultiTexCoord2s",
	"glMultiTexCoord2sARB",
	"glMultiTexCoord2sv",
	"glMultiTexCoord2svARB",
	"glMultiTexCoord2xOES",
	"glMultiTexCoord2xvOES",
	"glMultiTexCoord3bOES",
	"glMultiTexCoord3bvOES",
	"glMultiTexCoord3d",
	"glMultiTexCoord3dARB",
	"glMultiTexCoord3dv",
	"glMultiTexCoord3dvARB",
	"glMultiTexCoord3f",
	"glMultiTexCoord3fARB",
	"glMultiTexCoord3fv",
	"glMultiTexCoord3fvARB",
	"glMultiTexCoord3hNV",
	"glMultiTexCoord3hvNV",
	"glMultiTexCoord3i",
	"glMultiTexCoord3iARB",
	"glMultiTexCoord3iv",
	"glMultiTexCoord3ivARB",
	"glMultiTexCoord3s",
	"glMultiTexCoord3sARB",
	"glMultiTexCoord3sv",
	"glMultiTexCoord3svARB",
	"glMultiTexCoord3xOES",
	"glMultiTexCoord3xvOES",
	"glMultiTexCoord4bOES",
	"glMultiTexCoord4bvOES",
	"glMultiTexCoord4d",
	"glMultiTexCoord4dARB",
	"glMultiTexCoord4dv",
	"glMultiTexCoord4dvARB",
	"glMultiTexCoord4f",
	"glMultiTexCoord4fARB",
	"glMultiTexCoord4fv",
	"glMultiTexCoord4fvARB",
	"glMultiTexCoord4hNV",
	"glMultiTexCoord4hvNV",
	"glMultiTexCoord4i",
	"glMultiTexCoord4iARB",
	"glMultiTexCoord4iv",
	"glMultiTexCoord4ivARB",
	"glMultiTexCoord4s",
	"glMultiTexCoord4sARB",
	"glMultiTexCoord4sv",
	"glMultiTexCoord4svARB",
	"glMultiTexCoord4x",
	"glMultiTexCoord4xOES",
	"glMultiTexCoord4xvOES",
	"glMultiTexCoordP1ui",
	"glMultiTexCoordP1uiv",
	"glMultiTexCoordP2ui",
	"glMultiTexCoordP2uiv",
	"glMultiTexCoordP3ui",
	"glMultiTexCoordP3uiv",
	"glMultiTexCoordP4ui",
	"glMultiTexCoordP4uiv",
	"glMultiTexCoordPointerEXT",
	"glMultiTexEnvfEXT",
	"glMultiTexEnvfvEXT",
	"glMultiTexEnviEXT",
	"glMultiTexEnvivEXT",
	"glMultiTexGendEXT",
	"glMultiTexGendvEXT",
	"glMultiTexGenfEXT",
	"glMultiTexGenfvEXT",
	"glMultiTexGeniEXT",
	"glMultiTexGenivEXT",
	"glMultiTexImage1DEXT",
	"glMultiTexImage2DEXT",
	"glMultiTexImage3DEXT",
	"glMultiTexParameterIivEXT",
	"glMultiTexParameterIuivEXT",
	"glMultiTexParameterfEXT",
	"glMultiTexParameterfvEXT",
	"glMultiTexParameteriEXT",
	"glMultiTexParameterivEXT",
	"glMultiTexRenderbufferEXT",
	"glMultiTexSubImage1DEXT",
	"glMultiTexSubImage2DEXT",
	"glMultiTexSubImage3DEXT",
	"glNamedBufferDataEXT",
	"glNamedBufferStorageEXT",
	"glNamedBufferSubDataEXT",
	"glNamedCopyBufferSubDataEXT",
	"glNamedFramebufferParameteriEXT",
	"glNamedFramebufferRenderbufferEXT",
	"glNamedFramebufferTexture1DEXT",
	"glNamedFramebufferTexture2DEXT",
	"glNamedFramebufferTexture3DEXT",
	"glNamedFramebufferTextureEXT",
	"glNamedFramebufferTextureFaceEXT",
	"glNamedFramebufferTextureLayerEXT",
	"glNamedProgramLocalParameter4dEXT",
	"glNamedProgramLocalParameter4dvEXT",
	"glNamedProgramLocalParameter4fEXT",
	"glNamedProgramLocalParameter4fvEXT",
	"glNamedProgramLocalParameterI4iEXT",
	"glNamedProgramLocalParameterI4ivEXT",
	"glNamedProgramLocalParameterI4uiEXT",
	"glNamedProgramLocalParameterI4uivEXT",
	"glNamedProgramLocalParameters4fvEXT",
	"glNamedProgramLocalParametersI4ivEXT",
	"glNamedProgramLocalParametersI4uivEXT",
	"glNamedProgramStringEXT",
	"glNamedRenderbufferStorageEXT",
	"glNamedRenderbufferStorageMultisampleCoverageEXT",
	"glNamedRenderbufferStorageMultisampleEXT",
	"glNamedStringARB",
	"glNewList",
	"glNewObjectBufferATI",
	"glNormal3b",
	"glNormal3bv",
	"glNormal3d",
	"glNormal3dv",
	"glNormal3f",
	"glNormal3fVertex3fSUN",
	"glNormal3fVertex3fvSUN",
	"glNormal3fv",
	"glNormal3hNV",
	"glNormal3hvNV",
	"glNormal3i",
	"glNormal3iv",
	"glNormal3s",
	"glNormal3sv",
	"glNormal3x",
	"glNormal3xOES",
	"glNormal3xvOES",
	"glNormalFormatNV",
	"glNormalP3ui",
	"glNormalP3uiv",
	"glNormalPointer",
	"glNormalPointerEXT",
	"glNormalPointerListIBM",
	"glNormalPointervINTEL",
	"glNormalStream3bATI",
	"glNormalStream3bvATI",
	"glNormalStream3dATI",
	"glNormalStream3dvATI",
	"glNormalStream3fATI",
	"glNormalStream3fvATI",
	"glNormalStream3iATI",
	"glNormalStream3ivATI",
	"glNormalStream3sATI",
	"glNormalStream3svATI",
	"glObjectLabel",
	"glObjectLabelKHR",
	"glObjectPtrLabel",
	"glObjectPtrLabelKHR",
	"glObjectPurgeableAPPLE",
	"glObjectUnpurgeableAPPLE",
	"glOrtho",
	"glOrthof",
	"glOrthofOES",
	"glOrthox",
	"glOrthoxOES",
	"glPNTrianglesfATI",
	"glPNTrianglesiATI",
	"glPassTexCoordATI",
	"glPassThrough",
	"glPassThroughxOES",
	"glPatchParameterfv",
	"glPatchParameteri",
	"glPatchParameteriEXT",
	"glPathColorGenNV",
	"glPathCommandsNV",
	"glPathCoordsNV",
	"glPathCoverDepthFuncNV",
	"glPathDashArrayNV",
	"glPathFogGenNV",
	"glPathGlyphRangeNV",
	"glPathGlyphsNV",
	"glPathParameterfNV",
	"glPathParameterfvNV",
	"glPathParameteriNV",
	"glPathParameterivNV",
	"glPathStencilDepthOffsetNV",
	"glPathStencilFuncNV",
	"glPathStringNV",
	"glPathSubCommandsNV",
	"glPathSubCoordsNV",
	"glPathTexGenNV",
	"glPauseTransformFeedback",
	"glPauseTransformFeedbackNV",
	"glPixelDataRangeNV",
	"glPixelMapfv",
	"glPixelMapuiv",
	"glPixelMapusv",
	"glPixelMapx",
	"glPixelStoref",
	"glPixelStorei",
	"glPixelStorex",
	"glPixelTexGenParameterfSGIS",
	"glPixelTexGenParameterfvSGIS",
	"glPixelTexGenParameteriSGIS",
	"glPixelTexGenParameterivSGIS",
	"glPixelTexGenSGIX",
	"glPixelTransferf",
	"glPixelTransferi",
	"glPixelTransferxOES",
	"glPixelTransformParameterfEXT",
	"glPixelTransformParameterfvEXT",
	"glPixelTransformParameteriEXT",
	"glPixelTransformParameterivEXT",
	"glPixelZoom",
	"glPixelZoomxOES",
	"glPointAlongPathNV",
	"glPointParameterf",
	"glPointParameterfARB",
	"glPointParameterfEXT",
	"glPointParameterfSGIS",
	"glPointParameterfv",
	"glPointParameterfvARB",
	"glPointParameterfvEXT",
	"glPointParameterfvSGIS",
	"glPointParameteri",
	"glPointParameteriNV",
	"glPointParameteriv",
	"glPointParameterivNV",
	"glPointParameterx",
	"glPointParameterxOES",
	"glPointParameterxv",
	"glPointParameterxvOES",
	"glPointSize",
	"glPointSizePointerOES",
	"glPointSizex",
	"glPointSizexOES",
	"glPollAsyncSGIX",
	"glPollInstrumentsSGIX",
	"glPolygonMode",
	"glPolygonOffset",
	"glPolygonOffsetEXT",
	"glPolygonOffsetx",
	"glPolygonOffsetxOES",
	"glPolygonStipple",
	"glPopAttrib",
	"glPopClientAttrib",
	"glPopDebugGroup",
	"glPopDebugGroupKHR",
	"glPopGroupMarkerEXT",
	"glPopMatrix",
	"glPopName",
	"glPresentFrameDualFillNV",
	"glPresentFrameKeyedNV",
	"glPrimitiveRestartIndex",
	"glPrimitiveRestartIndexNV",
	"glPrimitiveRestartNV",
	"glPrioritizeTextures",
	"glPrioritizeTexturesEXT",
	"glPrioritizeTexturesxOES",
	"glProgramBinary",
	"glProgramBinaryOES",
	"glProgramBufferParametersIivNV",
	"glProgramBufferParametersIuivNV",
	"glProgramBufferParametersfvNV",
	"glProgramEnvParameter4dARB",
	"glProgramEnvParameter4dvARB",
	"glProgramEnvParameter4fARB",
	"glProgramEnvParameter4fvARB",
	"glProgramEnvParameterI4iNV",
	"glProgramEnvParameterI4ivNV",
	"glProgramEnvParameterI4uiNV",
	"glProgramEnvParameterI4uivNV",
	"glProgramEnvParameters4fvEXT",
	"glProgramEnvParametersI4ivNV",
	"glProgramEnvParametersI4uivNV",
	"glProgramLocalParameter4dARB",
	"glProgramLocalParameter4dvARB",
	"glProgramLocalParameter4fARB",
	"glProgramLocalParameter4fvARB",
	"glProgramLocalParameterI4iNV",
	"glProgramLocalParameterI4ivNV",
	"glProgramLocalParameterI4uiNV",
	"glProgramLocalParameterI4uivNV",
	"glProgramLocalParameters4fvEXT",
	"glProgramLocalParametersI4ivNV",
	"glProgramLocalParametersI4uivNV",
	"glProgramNamedParameter4dNV",
	"glProgramNamedParameter4dvNV",
	"glProgramNamedParameter4fNV",
	"glProgramNamedParameter4fvNV",
	"glProgramParameter4dNV",
	"glProgramParameter4dvNV",
	"glProgramParameter4fNV",
	"glProgramParameter4fvNV",
	"glProgramParameteri",
	"glProgramParameteriARB",
	"glProgramParameteriEXT",
	"glProgramParameters4dvNV",
	"glProgramParameters4fvNV",
	"glProgramStringARB",
	"glProgramSubroutineParametersuivNV",
	"glProgramUniform1d",
	"glProgramUniform1dEXT",
	"glProgramUniform1dv",
	"glProgramUniform1dvEXT",
	"glProgramUniform1f",
	"glProgramUniform1fEXT",
	"glProgramUniform1fv",
	"glProgramUniform1fvEXT",
	"glProgramUniform1i",
	"glProgramUniform1i64NV",
	"glProgramUniform1i64vNV",
	"glProgramUniform1iEXT",
	"glProgramUniform1iv",
	"glProgramUniform1ivEXT",
	"glProgramUniform1ui",
	"glProgramUniform1ui64NV",
	"glProgramUniform1ui64vNV",
	"glProgramUniform1uiEXT",
	"glProgramUniform1uiv",
	"glProgramUniform1uivEXT",
	"glProgramUniform2d",
	"glProgramUniform2dEXT",
	"glProgramUniform2dv",
	"glProgramUniform2dvEXT",
	"glProgramUniform2f",
	"glProgramUniform2fEXT",
	"glProgramUniform2fv",
	"glProgramUniform2fvEXT",
	"glProgramUniform2i",
	"glProgramUniform2i64NV",
	"glProgramUniform2i64vNV",
	"glProgramUniform2iEXT",
	"glProgramUniform2iv",
	"glProgramUniform2ivEXT",
	"glProgramUniform2ui",
	"glProgramUniform2ui64NV",
	"glProgramUniform2ui64vNV",
	"glProgramUniform2uiEXT",
	"glProgramUniform2uiv",
	"glProgramUniform2uivEXT",
	"glProgramUniform3d",
	"glProgramUniform3dEXT",
	"glProgramUniform3dv",
	"glProgramUniform3dvEXT",
	"glProgramUniform3f",
	"glProgramUniform3fEXT",
	"glProgramUniform3fv",
	"glProgramUniform3fvEXT",
	"glProgramUniform3i",
	"glProgramUniform3i64NV",
	"glProgramUniform3i64vNV",
	"glProgramUniform3iEXT",
	"glProgramUniform3iv",
	"glProgramUniform3ivEXT",
	"glProgramUniform3ui",
	"glProgramUniform3ui64NV",
	"glProgramUniform3ui64vNV",
	"glProgramUniform3uiEXT",
	"glProgramUniform3uiv",
	"glProgramUniform3uivEXT",
	"glProgramUniform4d",
	"glProgramUniform4dEXT",
	"glProgramUniform4dv",
	"glProgramUniform4dvEXT",
	"glProgramUniform4f",
	"glProgramUniform4fEXT",
	"glProgramUniform4fv",
	"glProgramUniform4fvEXT",
	"glProgramUniform4i",
	"glProgramUniform4i64NV",
	"glProgramUniform4i64vNV",
	"glProgramUniform4iEXT",
	"glProgramUniform4iv",
	"glProgramUniform4ivEXT",
	"glProgramUniform4ui",
	"glProgramUniform4ui64NV",
	"glProgramUniform4ui64vNV",
	"glProgramUniform4uiEXT",
	"glProgramUniform4uiv",
	"glProgramUniform4uivEXT",
	"glProgramUniformHandleui64ARB",
	"glProgramUniformHandleui64NV",
	"glProgramUniformHandleui64vARB",
	"glProgramUniformHandleui64vNV",
	"glProgramUniformMatrix2dv",
	"glProgramUniformMatrix2dvEXT",
	"glProgramUniformMatrix2fv",
	"glProgramUniformMatrix2fvEXT",
	"glProgramUniformMatrix2x3dv",
	"glProgramUniformMatrix2x3dvEXT",
	"glProgramUniformMatrix2x3fv",
	"glProgramUniformMatrix2x3fvEXT",
	"glProgramUniformMatrix2x4dv",
	"glProgramUniformMatrix2x4dvEXT",
	"glProgramUniformMatrix2x4fv",
	"glProgramUniformMatrix2x4fvEXT",
	"glProgramUniformMatrix3dv",
	"glProgramUniformMatrix3dvEXT",
	"glProgramUniformMatrix3fv",
	"glProgramUniformMatrix3fvEXT",
	"glProgramUniformMatrix3x2dv",
	"glProgramUniformMatrix3x2dvEXT",
	"glProgramUniformMatrix3x2fv",
	"glProgramUniformMatrix3x2fvEXT",
	"glProgramUniformMatrix3x4dv",
	"glProgramUniformMatrix3x4dvEXT",
	"glProgramUniformMatrix3x4fv",
	"glProgramUniformMatrix3x4fvEXT",
	"glProgramUniformMatrix4dv",
	"glProgramUniformMatrix4dvEXT",
	"glProgramUniformMatrix4fv",
	"glProgramUniformMatrix4fvEXT",
	"glProgramUniformMatrix4x2dv",
	"glProgramUniformMatrix4x2dvEXT",
	"glProgramUniformMatrix4x2fv",
	"glProgramUniformMatrix4x2fvEXT",
	"glProgramUniformMatrix4x3dv",
	"glProgramUniformMatrix4x3dvEXT",
	"glProgramUniformMatrix4x3fv",
	"glProgramUniformMatrix4x3fvEXT",
	"glProgramUniformui64NV",
	"glProgramUniformui64vNV",
	"glProgramVertexLimitNV",
	"glProvokingVertex",
	"glProvokingVertexEXT",
	"glPushAttrib",
	"glPushClientAttrib",
	"glPushClientAttribDefaultEXT",
	"glPushDebugGroup",
	"glPushDebugGroupKHR",
	"glPushGroupMarkerEXT",
	"glPushMatrix",
	"glPushName",
	"glQueryCounter",
	"glQueryCounterEXT",
	"glQueryMatrixxOES",
	"glQueryObjectParameteruiAMD",
	"glRasterPos2d",
	"glRasterPos2dv",
	"glRasterPos2f",
	"glRasterPos2fv",
	"glRasterPos2i",
	"glRasterPos2iv",
	"glRasterPos2s",
	"glRasterPos2sv",
	"glRasterPos2xOES",
	"glRasterPos2xvOES",
	"glRasterPos3d",
	"glRasterPos3dv",
	"glRasterPos3f",
	"glRasterPos3fv",
	"glRasterPos3i",
	"glRasterPos3iv",
	"glRasterPos3s",
	"glRasterPos3sv",
	"glRasterPos3xOES",
	"glRasterPos3xvOES",
	"glRasterPos4d",
	"glRasterPos4dv",
	"glRasterPos4f",
	"glRasterPos4fv",
	"glRasterPos4i",
	"glRasterPos4iv",
	"glRasterPos4s",
	"glRasterPos4sv",
	"glRasterPos4xOES",
	"glRasterPos4xvOES",
	"glReadBuffer",
	"glReadBufferIndexedEXT",
	"glReadBufferNV",
	"glReadInstrumentsSGIX",
	"glReadPixels",
	"glReadnPixelsARB",
	"glReadnPixelsEXT",
	"glRectd",
	"glRectdv",
	"glRectf",
	"glRectfv",
	"glRecti",
	"glRectiv",
	"glRects",
	"glRectsv",
	"glRectxOES",
	"glRectxvOES",
	"glReferencePlaneSGIX",
	"glReleaseShaderCompiler",
	"glRenderMode",
	"glRenderbufferStorage",
	"glRenderbufferStorageEXT",
	"glRenderbufferStorageMultisample",
	"glRenderbufferStorageMultisampleANGLE",
	"glRenderbufferStorageMultisampleAPPLE",
	"glRenderbufferStorageMultisampleCoverageNV",
	"glRenderbufferStorageMultisampleEXT",
	"glRenderbufferStorageMultisampleIMG",
	"glRenderbufferStorageMultisampleNV",
	"glRenderbufferStorageOES",
	"glReplacementCodePointerSUN",
	"glReplacementCodeubSUN",
	"glReplacementCodeubvSUN",
	"glReplacementCodeuiColor3fVertex3fSUN",
	"glReplacementCodeuiColor3fVertex3fvSUN",
	"glReplacementCodeuiColor4fNormal3fVertex3fSUN",
	"glReplacementCodeuiColor4fNormal3fVertex3fvSUN",
	"glReplacementCodeuiColor4ubVertex3fSUN",
	"glReplacementCodeuiColor4ubVertex3fvSUN",
	"glReplacementCodeuiNormal3fVertex3fSUN",
	"glReplacementCodeuiNormal3fVertex3fvSUN",
	"glReplacementCodeuiSUN",
	"glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN",
	"glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN",
	"glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN",
	"glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN",
	"glReplacementCodeuiTexCoord2fVertex3fSUN",
	"glReplacementCodeuiTexCoord2fVertex3fvSUN",
	"glReplacementCodeuiVertex3fSUN",
	"glReplacementCodeuiVertex3fvSUN",
	"glReplacementCodeuivSUN",
	"glReplacementCodeusSUN",
	"glReplacementCodeusvSUN",
	"glRequestResidentProgramsNV",
	"glResetHistogram",
	"glResetHistogramEXT",
	"glResetMinmax",
	"glResetMinmaxEXT",
	"glResizeBuffersMESA",
	"glResolveMultisampleFramebufferAPPLE",
	"glResumeTransformFeedback",
	"glResumeTransformFeedbackNV",
	"glRotated",
	"glRotatef",
	"glRotatex",
	"glRotatexOES",
	"glSampleCoverage",
	"glSampleCoverageARB",
	"glSampleCoverageOES",
	"glSampleCoveragex",
	"glSampleCoveragexOES",
	"glSampleMapATI",
	"glSampleMaskEXT",
	"glSampleMaskIndexedNV",
	"glSampleMaskSGIS",
	"glSampleMaski",
	"glSamplePatternEXT",
	"glSamplePatternSGIS",
	"glSamplerParameterIiv",
	"glSamplerParameterIivEXT",
	"glSamplerParameterIuiv",
	"glSamplerParameterIuivEXT",
	"glSamplerParameterf",
	"glSamplerParameterfv",
	"glSamplerParameteri",
	"glSamplerParameteriv",
	"glScaled",
	"glScalef",
	"glScalex",
	"glScalexOES",
	"glScissor",
	"glScissorArrayv",
	"glScissorIndexed",
	"glScissorIndexedv",
	"glSecondaryColor3b",
	"glSecondaryColor3bEXT",
	"glSecondaryColor3bv",
	"glSecondaryColor3bvEXT",
	"glSecondaryColor3d",
	"glSecondaryColor3dEXT",
	"glSecondaryColor3dv",
	"glSecondaryColor3dvEXT",
	"glSecondaryColor3f",
	"glSecondaryColor3fEXT",
	"glSecondaryColor3fv",
	"glSecondaryColor3fvEXT",
	"glSecondaryColor3hNV",
	"glSecondaryColor3hvNV",
	"glSecondaryColor3i",
	"glSecondaryColor3iEXT",
	"glSecondaryColor3iv",
	"glSecondaryColor3ivEXT",
	"glSecondaryColor3s",
	"glSecondaryColor3sEXT",
	"glSecondaryColor3sv",
	"glSecondaryColor3svEXT",
	"glSecondaryColor3ub",
	"glSecondaryColor3ubEXT",
	"glSecondaryColor3ubv",
	"glSecondaryColor3ubvEXT",
	"glSecondaryColor3ui",
	"glSecondaryColor3uiEXT",
	"glSecondaryColor3uiv",
	"glSecondaryColor3uivEXT",
	"glSecondaryColor3us",
	"glSecondaryColor3usEXT",
	"glSecondaryColor3usv",
	"glSecondaryColor3usvEXT",
	"glSecondaryColorFormatNV",
	"glSecondaryColorP3ui",
	"glSecondaryColorP3uiv",
	"glSecondaryColorPointer",
	"glSecondaryColorPointerEXT",
	"glSecondaryColorPointerListIBM",
	"glSelectBuffer",
	"glSelectPerfMonitorCountersAMD",
	"glSeparableFilter2D",
	"glSeparableFilter2DEXT",
	"glSetFenceAPPLE",
	"glSetFenceNV",
	"glSetFragmentShaderConstantATI",
	"glSetInvariantEXT",
	"glSetLocalConstantEXT",
	"glSetMultisamplefvAMD",
	"glShadeModel",
	"glShaderBinary",
	"glShaderOp1EXT",
	"glShaderOp2EXT",
	"glShaderOp3EXT",
	"glShaderSource",
	"glShaderSourceARB",
	"glShaderStorageBlockBinding",
	"glSharpenTexFuncSGIS",
	"glSpriteParameterfSGIX",
	"glSpriteParameterfvSGIX",
	"glSpriteParameteriSGIX",
	"glSpriteParameterivSGIX",
	"glStartInstrumentsSGIX",
	"glStartTilingQCOM",
	"glStencilClearTagEXT",
	"glStencilFillPathInstancedNV",
	"glStencilFillPathNV",
	"glStencilFunc",
	"glStencilFuncSeparate",
	"glStencilFuncSeparateATI",
	"glStencilMask",
	"glStencilMaskSeparate",
	"glStencilOp",
	"glStencilOpSeparate",
	"glStencilOpSeparateATI",
	"glStencilOpValueAMD",
	"glStencilStrokePathInstancedNV",
	"glStencilStrokePathNV",
	"glStopInstrumentsSGIX",
	"glStringMarkerGREMEDY",
	"glSwizzleEXT",
	"glSyncTextureINTEL",
	"glTagSampleBufferSGIX",
	"glTangent3bEXT",
	"glTangent3bvEXT",
	"glTangent3dEXT",
	"glTangent3dvEXT",
	"glTangent3fEXT",
	"glTangent3fvEXT",
	"glTangent3iEXT",
	"glTangent3ivEXT",
	"glTangent3sEXT",
	"glTangent3svEXT",
	"glTangentPointerEXT",
	"glTbufferMask3DFX",
	"glTessellationFactorAMD",
	"glTessellationModeAMD",
	"glTestFenceAPPLE",
	"glTestFenceNV",
	"glTestObjectAPPLE",
	"glTexBuffer",
	"glTexBufferARB",
	"glTexBufferEXT",
	"glTexBufferRange",
	"glTexBufferRangeEXT",
	"glTexBumpParameterfvATI",
	"glTexBumpParameterivATI",
	"glTexCoord1bOES",
	"glTexCoord1bvOES",
	"glTexCoord1d",
	"glTexCoord1dv",
	"glTexCoord1f",
	"glTexCoord1fv",
	"glTexCoord1hNV",
	"glTexCoord1hvNV",
	"glTexCoord1i",
	"glTexCoord1iv",
	"glTexCoord1s",
	"glTexCoord1sv",
	"glTexCoord1xOES",
	"glTexCoord1xvOES",
	"glTexCoord2bOES",
	"glTexCoord2bvOES",
	"glTexCoord2d",
	"glTexCoord2dv",
	"glTexCoord2f",
	"glTexCoord2fColor3fVertex3fSUN",
	"glTexCoord2fColor3fVertex3fvSUN",
	"glTexCoord2fColor4fNormal3fVertex3fSUN",
	"glTexCoord2fColor4fNormal3fVertex3fvSUN",
	"glTexCoord2fColor4ubVertex3fSUN",
	"glTexCoord2fColor4ubVertex3fvSUN",
	"glTexCoord2fNormal3fVertex3fSUN",
	"glTexCoord2fNormal3fVertex3fvSUN",
	"glTexCoord2fVertex3fSUN",
	"glTexCoord2fVertex3fvSUN",
	"glTexCoord2fv",
	"glTexCoord2hNV",
	"glTexCoord2hvNV",
	"glTexCoord2i",
	"glTexCoord2iv",
	"glTexCoord2s",
	"glTexCoord2sv",
	"glTexCoord2xOES",
	"glTexCoord2xvOES",
	"glTexCoord3bOES",
	"glTexCoord3bvOES",
	"glTexCoord3d",
	"glTexCoord3dv",
	"glTexCoord3f",
	"glTexCoord3fv",
	"glTexCoord3hNV",
	"glTexCoord3hvNV",
	"glTexCoord3i",
	"glTexCoord3iv",
	"glTexCoord3s",
	"glTexCoord3sv",
	"glTexCoord3xOES",
	"glTexCoord3xvOES",
	"glTexCoord4bOES",
	"glTexCoord4bvOES",
	"glTexCoord4d",
	"glTexCoord4dv",
	"glTexCoord4f",
	"glTexCoord4fColor4fNormal3fVertex4fSUN",
	"glTexCoord4fColor4fNormal3fVertex4fvSUN",
	"glTexCoord4fVertex4fSUN",
	"glTexCoord4fVertex4fvSUN",
	"glTexCoord4fv",
	"glTexCoord4hNV",
	"glTexCoord4hvNV",
	"glTexCoord4i",
	"glTexCoord4iv",
	"glTexCoord4s",
	"glTexCoord4sv",
	"glTexCoord4xOES",
	"glTexCoord4xvOES",
	"glTexCoordFormatNV",
	"glTexCoordP1ui",
	"glTexCoordP1uiv",
	"glTexCoordP2ui",
	"glTexCoordP2uiv",
	"glTexCoordP3ui",
	"glTexCoordP3uiv",
	"glTexCoordP4ui",
	"glTexCoordP4uiv",
	"glTexCoordPointer",
	"glTexCoordPointerEXT",
	"glTexCoordPointerListIBM",
	"glTexCoordPointervINTEL",
	"glTexEnvf",
	"glTexEnvfv",
	"glTexEnvi",
	"glTexEnviv",
	"glTexEnvx",
	"glTexEnvxOES",
	"glTexEnvxv",
	"glTexEnvxvOES",
	"glTexFilterFuncSGIS",
	"glTexGend",
	"glTexGendv",
	"glTexGenf",
	"glTexGenfOES",
	"glTexGenfv",
	"glTexGenfvOES",
	"glTexGeni",
	"glTexGeniOES",
	"glTexGeniv",
	"glTexGenivOES",
	"glTexGenxOES",
	"glTexGenxvOES",
	"glTexImage1D",
	"glTexImage2D",
	"glTexImage2DMultisample",
	"glTexImage2DMultisampleCoverageNV",
	"glTexImage3D",
	"glTexImage3DEXT",
	"glTexImage3DMultisample",
	"glTexImage3DMultisampleCoverageNV",
	"glTexImage3DOES",
	"glTexImage4DSGIS",
	"glTexPageCommitmentARB",
	"glTexParameterIiv",
	"glTexParameterIivEXT",
	"glTexParameterIuiv",
	"glTexParameterIuivEXT",
	"glTexParameterf",
	"glTexParameterfv",
	"glTexParameteri",
	"glTexParameteriv",
	"glTexParameterx",
	"glTexParameterxOES",
	"glTexParameterxv",
	"glTexParameterxvOES",
	"glTexRenderbufferNV",
	"glTexStorage1D",
	"glTexStorage1DEXT",
	"glTexStorage2D",
	"glTexStorage2DEXT",
	"glTexStorage2DMultisample",
	"glTexStorage3D",
	"glTexStorage3DEXT",
	"glTexStorage3DMultisample",
	"glTexStorage3DMultisampleOES",
	"glTexStorageSparseAMD",
	"glTexSubImage1D",
	"glTexSubImage1DEXT",
	"glTexSubImage2D",
	"glTexSubImage2DEXT",
	"glTexSubImage3D",
	"glTexSubImage3DEXT",
	"glTexSubImage3DOES",
	"glTexSubImage4DSGIS",
	"glTextureBarrierNV",
	"glTextureBufferEXT",
	"glTextureBufferRangeEXT",
	"glTextureColorMaskSGIS",
	"glTextureImage1DEXT",
	"glTextureImage2DEXT",
	"glTextureImage2DMultisampleCoverageNV",
	"glTextureImage2DMultisampleNV",
	"glTextureImage3DEXT",
	"glTextureImage3DMultisampleCoverageNV",
	"glTextureImage3DMultisampleNV",
	"glTextureLightEXT",
	"glTextureMaterialEXT",
	"glTextureNormalEXT",
	"glTexturePageCommitmentEXT",
	"glTextureParameterIivEXT",
	"glTextureParameterIuivEXT",
	"glTextureParameterfEXT",
	"glTextureParameterfvEXT",
	"glTextureParameteriEXT",
	"glTextureParameterivEXT",
	"glTextureRangeAPPLE",
	"glTextureRenderbufferEXT",
	"glTextureStorage1DEXT",
	"glTextureStorage2DEXT",
	"glTextureStorage2DMultisampleEXT",
	"glTextureStorage3DEXT",
	"glTextureStorage3DMultisampleEXT",
	"glTextureStorageSparseAMD",
	"glTextureSubImage1DEXT",
	"glTextureSubImage2DEXT",
	"glTextureSubImage3DEXT",
	"glTextureView",
	"glTextureViewEXT",
	"glTrackMatrixNV",
	"glTransformFeedbackAttribsNV",
	"glTransformFeedbackStreamAttribsNV",
	"glTransformFeedbackVaryings",
	"glTransformFeedbackVaryingsEXT",
	"glTransformFeedbackVaryingsNV",
	"glTransformPathNV",
	"glTranslated",
	"glTranslatef",
	"glTranslatex",
	"glTranslatexOES",
	"glUniform1d",
	"glUniform1dv",
	"glUniform1f",
	"glUniform1fARB",
	"glUniform1fv",
	"glUniform1fvARB",
	"glUniform1i",
	"glUniform1i64NV",
	"glUniform1i64vNV",
	"glUniform1iARB",
	"glUniform1iv",
	"glUniform1ivARB",
	"glUniform1ui",
	"glUniform1ui64NV",
	"glUniform1ui64vNV",
	"glUniform1uiEXT",
	"glUniform1uiv",
	"glUniform1uivEXT",
	"glUniform2d",
	"glUniform2dv",
	"glUniform2f",
	"glUniform2fARB",
	"glUniform2fv",
	"glUniform2fvARB",
	"glUniform2i",
	"glUniform2i64NV",
	"glUniform2i64vNV",
	"glUniform2iARB",
	"glUniform2iv",
	"glUniform2ivARB",
	"glUniform2ui",
	"glUniform2ui64NV",
	"glUniform2ui64vNV",
	"glUniform2uiEXT",
	"glUniform2uiv",
	"glUniform2uivEXT",
	"glUniform3d",
	"glUniform3dv",
	"glUniform3f",
	"glUniform3fARB",
	"glUniform3fv",
	"glUniform3fvARB",
	"glUniform3i",
	"glUniform3i64NV",
	"glUniform3i64vNV",
	"glUniform3iARB",
	"glUniform3iv",
	"glUniform3ivARB",
	"glUniform3ui",
	"glUniform3ui64NV",
	"glUniform3ui64vNV",
	"glUniform3uiEXT",
	"glUniform3uiv",
	"glUniform3uivEXT",
	"glUniform4d",
	"glUniform4dv",
	"glUniform4f",
	"glUniform4fARB",
	"glUniform4fv",
	"glUniform4fvARB",
	"glUniform4i",
	"glUniform4i64NV",
	"glUniform4i64vNV",
	"glUniform4iARB",
	"glUniform4iv",
	"glUniform4ivARB",
	"glUniform4ui",
	"glUniform4ui64NV",
	"glUniform4ui64vNV",
	"glUniform4uiEXT",
	"glUniform4uiv",
	"glUniform4uivEXT",
	"glUniformBlockBinding",
	"glUniformBufferEXT",
	"glUniformHandleui64ARB",
	"glUniformHandleui64NV",
	"glUniformHandleui64vARB",
	"glUniformHandleui64vNV",
	"glUniformMatrix2dv",
	"glUniformMatrix2fv",
	"glUniformMatrix2fvARB",
	"glUniformMatrix2x3dv",
	"glUniformMatrix2x3fv",
	"glUniformMatrix2x3fvNV",
	"glUniformMatrix2x4dv",
	"glUniformMatrix2x4fv",
	"glUniformMatrix2x4fvNV",
	"glUniformMatrix3dv",
	"glUniformMatrix3fv",
	"glUniformMatrix3fvARB",
	"glUniformMatrix3x2dv",
	"glUniformMatrix3x2fv",
	"glUniformMatrix3x2fvNV",
	"glUniformMatrix3x4dv",
	"glUniformMatrix3x4fv",
	"glUniformMatrix3x4fvNV",
	"glUniformMatrix4dv",
	"glUniformMatrix4fv",
	"glUniformMatrix4fvARB",
	"glUniformMatrix4x2dv",
	"glUniformMatrix4x2fv",
	"glUniformMatrix4x2fvNV",
	"glUniformMatrix4x3dv",
	"glUniformMatrix4x3fv",
	"glUniformMatrix4x3fvNV",
	"glUniformSubroutinesuiv",
	"glUniformui64NV",
	"glUniformui64vNV",
	"glUnlockArraysEXT",
	"glUnmapBuffer",
	"glUnmapBufferARB",
	"glUnmapBufferOES",
	"glUnmapNamedBufferEXT",
	"glUnmapObjectBufferATI",
	"glUnmapTexture2DINTEL",
	"glUpdateObjectBufferATI",
	"glUseProgram",
	"glUseProgramObjectARB",
	"glUseProgramStages",
	"glUseProgramStagesEXT",
	"glUseShaderProgramEXT",
	"glVDPAUFiniNV",
	"glVDPAUGetSurfaceivNV",
	"glVDPAUInitNV",
	"glVDPAUIsSurfaceNV",
	"glVDPAUMapSurfacesNV",
	"glVDPAURegisterOutputSurfaceNV",
	"glVDPAURegisterVideoSurfaceNV",
	"glVDPAUSurfaceAccessNV",
	"glVDPAUUnmapSurfacesNV",
	"glVDPAUUnregisterSurfaceNV",
	"glValidateProgram",
	"glValidateProgramARB",
	"glValidateProgramPipeline",
	"glValidateProgramPipelineEXT",
	"glVariantArrayObjectATI",
	"glVariantPointerEXT",
	"glVariantbvEXT",
	"glVariantdvEXT",
	"glVariantfvEXT",
	"glVariantivEXT",
	"glVariantsvEXT",
	"glVariantubvEXT",
	"glVariantuivEXT",
	"glVariantusvEXT",
	"glVertex2bOES",
	"glVertex2bvOES",
	"glVertex2d",
	"glVertex2dv",
	"glVertex2f",
	"glVertex2fv",
	"glVertex2hNV",
	"glVertex2hvNV",
	"glVertex2i",
	"glVertex2iv",
	"glVertex2s",
	"glVertex2sv",
	"glVertex2xOES",
	"glVertex2xvOES",
	"glVertex3bOES",
	"glVertex3bvOES",
	"glVertex3d",
	"glVertex3dv",
	"glVertex3f",
	"glVertex3fv",
	"glVertex3hNV",
	"glVertex3hvNV",
	"glVertex3i",
	"glVertex3iv",
	"glVertex3s",
	"glVertex3sv",
	"glVertex3xOES",
	"glVertex3xvOES",
	"glVertex4bOES",
	"glVertex4bvOES",
	"glVertex4d",
	"glVertex4dv",
	"glVertex4f",
	"glVertex4fv",
	"glVertex4hNV",
	"glVertex4hvNV",
	"glVertex4i",
	"glVertex4iv",
	"glVertex4s",
	"glVertex4sv",
	"glVertex4xOES",
	"glVertex4xvOES",
	"glVertexArrayBindVertexBufferEXT",
	"glVertexArrayColorOffsetEXT",
	"glVertexArrayEdgeFlagOffsetEXT",
	"glVertexArrayFogCoordOffsetEXT",
	"glVertexArrayIndexOffsetEXT",
	"glVertexArrayMultiTexCoordOffsetEXT",
	"glVertexArrayNormalOffsetEXT",
	"glVertexArrayParameteriAPPLE",
	"glVertexArrayRangeAPPLE",
	"glVertexArrayRangeNV",
	"glVertexArraySecondaryColorOffsetEXT",
	"glVertexArrayTexCoordOffsetEXT",
	"glVertexArrayVertexAttribBindingEXT",
	"glVertexArrayVertexAttribDivisorEXT",
	"glVertexArrayVertexAttribFormatEXT",
	"glVertexArrayVertexAttribIFormatEXT",
	"glVertexArrayVertexAttribIOffsetEXT",
	"glVertexArrayVertexAttribLFormatEXT",
	"glVertexArrayVertexAttribLOffsetEXT",
	"glVertexArrayVertexAttribOffsetEXT",
	"glVertexArrayVertexBindingDivisorEXT",
	"glVertexArrayVertexOffsetEXT",
	"glVertexAttrib1d",
	"glVertexAttrib1dARB",
	"glVertexAttrib1dNV",
	"glVertexAttrib1dv",
	"glVertexAttrib1dvARB",
	"glVertexAttrib1dvNV",
	"glVertexAttrib1f",
	"glVertexAttrib1fARB",
	"glVertexAttrib1fNV",
	"glVertexAttrib1fv",
	"glVertexAttrib1fvARB",
	"glVertexAttrib1fvNV",
	"glVertexAttrib1hNV",
	"glVertexAttrib1hvNV",
	"glVertexAttrib1s",
	"glVertexAttrib1sARB",
	"glVertexAttrib1sNV",
	"glVertexAttrib1sv",
	"glVertexAttrib1svARB",
	"glVertexAttrib1svNV",
	"glVertexAttrib2d",
	"glVertexAttrib2dARB",
	"glVertexAttrib2dNV",
	"glVertexAttrib2dv",
	"glVertexAttrib2dvARB",
	"glVertexAttrib2dvNV",
	"glVertexAttrib2f",
	"glVertexAttrib2fARB",
	"glVertexAttrib2fNV",
	"glVertexAttrib2fv",
	"glVertexAttrib2fvARB",
	"glVertexAttrib2fvNV",
	"glVertexAttrib2hNV",
	"glVertexAttrib2hvNV",
	"glVertexAttrib2s",
	"glVertexAttrib2sARB",
	"glVertexAttrib2sNV",
	"glVertexAttrib2sv",
	"glVertexAttrib2svARB",
	"glVertexAttrib2svNV",
	"glVertexAttrib3d",
	"glVertexAttrib3dARB",
	"glVertexAttrib3dNV",
	"glVertexAttrib3dv",
	"glVertexAttrib3dvARB",
	"glVertexAttrib3dvNV",
	"glVertexAttrib3f",
	"glVertexAttrib3fARB",
	"glVertexAttrib3fNV",
	"glVertexAttrib3fv",
	"glVertexAttrib3fvARB",
	"glVertexAttrib3fvNV",
	"glVertexAttrib3hNV",
	"glVertexAttrib3hvNV",
	"glVertexAttrib3s",
	"glVertexAttrib3sARB",
	"glVertexAttrib3sNV",
	"glVertexAttrib3sv",
	"glVertexAttrib3svARB",
	"glVertexAttrib3svNV",
	"glVertexAttrib4Nbv",
	"glVertexAttrib4NbvARB",
	"glVertexAttrib4Niv",
	"glVertexAttrib4NivARB",
	"glVertexAttrib4Nsv",
	"glVertexAttrib4NsvARB",
	"glVertexAttrib4Nub",
	"glVertexAttrib4NubARB",
	"glVertexAttrib4Nubv",
	"glVertexAttrib4NubvARB",
	"glVertexAttrib4Nuiv",
	"glVertexAttrib4NuivARB",
	"glVertexAttrib4Nusv",
	"glVertexAttrib4NusvARB",
	"glVertexAttrib4bv",
	"glVertexAttrib4bvARB",
	"glVertexAttrib4d",
	"glVertexAttrib4dARB",
	"glVertexAttrib4dNV",
	"glVertexAttrib4dv",
	"glVertexAttrib4dvARB",
	"glVertexAttrib4dvNV",
	"glVertexAttrib4f",
	"glVertexAttrib4fARB",
	"glVertexAttrib4fNV",
	"glVertexAttrib4fv",
	"glVertexAttrib4fvARB",
	"glVertexAttrib4fvNV",
	"glVertexAttrib4hNV",
	"glVertexAttrib4hvNV",
	"glVertexAttrib4iv",
	"glVertexAttrib4ivARB",
	"glVertexAttrib4s",
	"glVertexAttrib4sARB",
	"glVertexAttrib4sNV",
	"glVertexAttrib4sv",
	"glVertexAttrib4svARB",
	"glVertexAttrib4svNV",
	"glVertexAttrib4ubNV",
	"glVertexAttrib4ubv",
	"glVertexAttrib4ubvARB",
	"glVertexAttrib4ubvNV",
	"glVertexAttrib4uiv",
	"glVertexAttrib4uivARB",
	"glVertexAttrib4usv",
	"glVertexAttrib4usvARB",
	"glVertexAttribArrayObjectATI",
	"glVertexAttribBinding",
	"glVertexAttribDivisor",
	"glVertexAttribDivisorANGLE",
	"glVertexAttribDivisorARB",
	"glVertexAttribDivisorEXT",
	"glVertexAttribDivisorNV",
	"glVertexAttribFormat",
	"glVertexAttribFormatNV",
	"glVertexAttribI1i",
	"glVertexAttribI1iEXT",
	"glVertexAttribI1iv",
	"glVertexAttribI1ivEXT",
	"glVertexAttribI1ui",
	"glVertexAttribI1uiEXT",
	"glVertexAttribI1uiv",
	"glVertexAttribI1uivEXT",
	"glVertexAttribI2i",
	"glVertexAttribI2iEXT",
	"glVertexAttribI2iv",
	"glVertexAttribI2ivEXT",
	"glVertexAttribI2ui",
	"glVertexAttribI2uiEXT",
	"glVertexAttribI2uiv",
	"glVertexAttribI2uivEXT",
	"glVertexAttribI3i",
	"glVertexAttribI3iEXT",
	"glVertexAttribI3iv",
	"glVertexAttribI3ivEXT",
	"glVertexAttribI3ui",
	"glVertexAttribI3uiEXT",
	"glVertexAttribI3uiv",
	"glVertexAttribI3uivEXT",
	"glVertexAttribI4bv",
	"glVertexAttribI4bvEXT",
	"glVertexAttribI4i",
	"glVertexAttribI4iEXT",
	"glVertexAttribI4iv",
	"glVertexAttribI4ivEXT",
	"glVertexAttribI4sv",
	"glVertexAttribI4svEXT",
	"glVertexAttribI4ubv",
	"glVertexAttribI4ubvEXT",
	"glVertexAttribI4ui",
	"glVertexAttribI4uiEXT",
	"glVertexAttribI4uiv",
	"glVertexAttribI4uivEXT",
	"glVertexAttribI4usv",
	"glVertexAttribI4usvEXT",
	"glVertexAttribIFormat",
	"glVertexAttribIFormatNV",
	"glVertexAttribIPointer",
	"glVertexAttribIPointerEXT",
	"glVertexAttribL1d",
	"glVertexAttribL1dEXT",
	"glVertexAttribL1dv",
	"glVertexAttribL1dvEXT",
	"glVertexAttribL1i64NV",
	"glVertexAttribL1i64vNV",
	"glVertexAttribL1ui64ARB",
	"glVertexAttribL1ui64NV",
	"glVertexAttribL1ui64vARB",
	"glVertexAttribL1ui64vNV",
	"glVertexAttribL2d",
	"glVertexAttribL2dEXT",
	"glVertexAttribL2dv",
	"glVertexAttribL2dvEXT",
	"glVertexAttribL2i64NV",
	"glVertexAttribL2i64vNV",
	"glVertexAttribL2ui64NV",
	"glVertexAttribL2ui64vNV",
	"glVertexAttribL3d",
	"glVertexAttribL3dEXT",
	"glVertexAttribL3dv",
	"glVertexAttribL3dvEXT",
	"glVertexAttribL3i64NV",
	"glVertexAttribL3i64vNV",
	"glVertexAttribL3ui64NV",
	"glVertexAttribL3ui64vNV",
	"glVertexAttribL4d",
	"glVertexAttribL4dEXT",
	"glVertexAttribL4dv",
	"glVertexAttribL4dvEXT",
	"glVertexAttribL4i64NV",
	"glVertexAttribL4i64vNV",
	"glVertexAttribL4ui64NV",
	"glVertexAttribL4ui64vNV",
	"glVertexAttribLFormat",
	"glVertexAttribLFormatNV",
	"glVertexAttribLPointer",
	"glVertexAttribLPointerEXT",
	"glVertexAttribP1ui",
	"glVertexAttribP1uiv",
	"glVertexAttribP2ui",
	"glVertexAttribP2uiv",
	"glVertexAttribP3ui",
	"glVertexAttribP3uiv",
	"glVertexAttribP4ui",
	"glVertexAttribP4uiv",
	"glVertexAttribParameteriAMD",
	"glVertexAttribPointer",
	"glVertexAttribPointerARB",
	"glVertexAttribPointerNV",
	"glVertexAttribs1dvNV",
	"glVertexAttribs1fvNV",
	"glVertexAttribs1hvNV",
	"glVertexAttribs1svNV",
	"glVertexAttribs2dvNV",
	"glVertexAttribs2fvNV",
	"glVertexAttribs2hvNV",
	"glVertexAttribs2svNV",
	"glVertexAttribs3dvNV",
	"glVertexAttribs3fvNV",
	"glVertexAttribs3hvNV",
	"glVertexAttribs3svNV",
	"glVertexAttribs4dvNV",
	"glVertexAttribs4fvNV",
	"glVertexAttribs4hvNV",
	"glVertexAttribs4svNV",
	"glVertexAttribs4ubvNV",
	"glVertexBindingDivisor",
	"glVertexBlendARB",
	"glVertexBlendEnvfATI",
	"glVertexBlendEnviATI",
	"glVertexFormatNV",
	"glVertexP2ui",
	"glVertexP2uiv",
	"glVertexP3ui",
	"glVertexP3uiv",
	"glVertexP4ui",
	"glVertexP4uiv",
	"glVertexPointer",
	"glVertexPointerEXT",
	"glVertexPointerListIBM",
	"glVertexPointervINTEL",
	"glVertexStream1dATI",
	"glVertexStream1dvATI",
	"glVertexStream1fATI",
	"glVertexStream1fvATI",
	"glVertexStream1iATI",
	"glVertexStream1ivATI",
	"glVertexStream1sATI",
	"glVertexStream1svATI",
	"glVertexStream2dATI",
	"glVertexStream2dvATI",
	"glVertexStream2fATI",
	"glVertexStream2fvATI",
	"glVertexStream2iATI",
	"glVertexStream2ivATI",
	"glVertexStream2sATI",
	"glVertexStream2svATI",
	"glVertexStream3dATI",
	"glVertexStream3dvATI",
	"glVertexStream3fATI",
	"glVertexStream3fvATI",
	"glVertexStream3iATI",
	"glVertexStream3ivATI",
	"glVertexStream3sATI",
	"glVertexStream3svATI",
	"glVertexStream4dATI",
	"glVertexStream4dvATI",
	"glVertexStream4fATI",
	"glVertexStream4fvATI",
	"glVertexStream4iATI",
	"glVertexStream4ivATI",
	"glVertexStream4sATI",
	"glVertexStream4svATI",
	"glVertexWeightPointerEXT",
	"glVertexWeightfEXT",
	"glVertexWeightfvEXT",
	"glVertexWeighthNV",
	"glVertexWeighthvNV",
	"glVideoCaptureNV",
	"glVideoCaptureStreamParameterdvNV",
	"glVideoCaptureStreamParameterfvNV",
	"glVideoCaptureStreamParameterivNV",
	"glViewport",
	"glViewportArrayv",
	"glViewportIndexedf",
	"glViewportIndexedfv",
	"glWaitSync",
	"glWaitSyncAPPLE",
	"glWeightPathsNV",
	"glWeightPointerARB",
	"glWeightPointerOES",
	"glWeightbvARB",
	"glWeightdvARB",
	"glWeightfvARB",
	"glWeightivARB",
	"glWeightsvARB",
	"glWeightubvARB",
	"glWeightuivARB",
	"glWeightusvARB",
	"glWindowPos2d",
	"glWindowPos2dARB",
	"glWindowPos2dMESA",
	"glWindowPos2dv",
	"glWindowPos2dvARB",
	"glWindowPos2dvMESA",
	"glWindowPos2f",
	"glWindowPos2fARB",
	"glWindowPos2fMESA",
	"glWindowPos2fv",
	"glWindowPos2fvARB",
	"glWindowPos2fvMESA",
	"glWindowPos2i",
	"glWindowPos2iARB",
	"glWindowPos2iMESA",
	"glWindowPos2iv",
	"glWindowPos2ivARB",
	"glWindowPos2ivMESA",
	"glWindowPos2s",
	"glWindowPos2sARB",
	"glWindowPos2sMESA",
	"glWindowPos2sv",
	"glWindowPos2svARB",
	"glWindowPos2svMESA",
	"glWindowPos3d",
	"glWindowPos3dARB",
	"glWindowPos3dMESA",
	"glWindowPos3dv",
	"glWindowPos3dvARB",
	"glWindowPos3dvMESA",
	"glWindowPos3f",
	"glWindowPos3fARB",
	"glWindowPos3fMESA",
	"glWindowPos3fv",
	"glWindowPos3fvARB",
	"glWindowPos3fvMESA",
	"glWindowPos3i",
	"glWindowPos3iARB",
	"glWindowPos3iMESA",
	"glWindowPos3iv",
	"glWindowPos3ivARB",
	"glWindowPos3ivMESA",
	"glWindowPos3s",
	"glWindowPos3sARB",
	"glWindowPos3sMESA",
	"glWindowPos3sv",
	"glWindowPos3svARB",
	"glWindowPos3svMESA",
	"glWindowPos4dMESA",
	"glWindowPos4dvMESA",
	"glWindowPos4fMESA",
	"glWindowPos4fvMESA",
	"glWindowPos4iMESA",
	"glWindowPos4ivMESA",
	"glWindowPos4sMESA",
	"glWindowPos4svMESA",
	"glWriteMaskEXT",
};

static void* (*const function_resolvers[])(void) = {
	resolve_glAccum,
	resolve_glAccumxOES,
	resolve_glActiveProgramEXT,
	resolve_glActiveShaderProgram,
	resolve_glActiveShaderProgramEXT,
	resolve_glActiveStencilFaceEXT,
	resolve_glActiveTexture,
	resolve_glActiveVaryingNV,
	resolve_glAlphaFragmentOp1ATI,
	resolve_glAlphaFragmentOp2ATI,
	resolve_glAlphaFragmentOp3ATI,
	resolve_glAlphaFunc,
	resolve_glAlphaFuncQCOM,
	resolve_glAlphaFuncx,
	resolve_glAlphaFuncxOES,
	resolve_glApplyTextureEXT,
	resolve_glAreProgramsResidentNV,
	resolve_glAreTexturesResident,
	resolve_glAreTexturesResidentEXT,
	resolve_glArrayElement,
	resolve_glArrayObjectATI,
	resolve_glAsyncMarkerSGIX,
	resolve_glAttachObjectARB,
	resolve_glBegin,
	resolve_glBeginConditionalRender,
	resolve_glBeginConditionalRenderNVX,
	resolve_glBeginFragmentShaderATI,
	resolve_glBeginOcclusionQueryNV,
	resolve_glBeginPerfMonitorAMD,
	resolve_glBeginPerfQueryINTEL,
	resolve_glBeginQuery,
	resolve_glBeginQueryEXT,
	resolve_glBeginQueryIndexed,
	resolve_glBeginTransformFeedback,
	resolve_glBeginVertexShaderEXT,
	resolve_glBeginVideoCaptureNV,
	resolve_glBindAttribLocation,
	resolve_glBindBuffer,
	resolve_glBindBufferBase,
	resolve_glBindBufferOffsetEXT,
	resolve_glBindBufferRange,
	resolve_glBindBuffersBase,
	resolve_glBindBuffersRange,
	resolve_glBindFragDataLocation,
	resolve_glBindFragDataLocationIndexed,
	resolve_glBindFragmentShaderATI,
	resolve_glBindFramebuffer,
	resolve_glBindFramebufferEXT,
	resolve_glBindFramebufferOES,
	resolve_glBindImageTexture,
	resolve_glBindImageTextureEXT,
	resolve_glBindImageTextures,
	resolve_glBindLightParameterEXT,
	resolve_glBindMaterialParameterEXT,
	resolve_glBindMultiTextureEXT,
	resolve_glBindParameterEXT,
	resolve_glBindProgramARB,
	resolve_glBindProgramPipeline,
	resolve_glBindProgramPipelineEXT,
	resolve_glBindRenderbuffer,
	resolve_glBindRenderbufferEXT,
	resolve_glBindRenderbufferOES,
	resolve_glBindSampler,
	resolve_glBindSamplers,
	resolve_glBindTexGenParameterEXT,
	resolve_glBindTexture,
	resolve_glBindTextureUnitParameterEXT,
	resolve_glBindTextures,
	resolve_glBindTransformFeedback,
	resolve_glBindTransformFeedbackNV,
	resolve_glBindVertexArray,
	resolve_glBindVertexArrayAPPLE,
	resolve_glBindVertexBuffer,
	resolve_glBindVertexBuffers,
	resolve_glBindVertexShaderEXT,
	resolve_glBindVideoCaptureStreamBufferNV,
	resolve_glBindVideoCaptureStreamTextureNV,
	resolve_glBinormal3bEXT,
	resolve_glBinormal3bvEXT,
	resolve_glBinormal3dEXT,
	resolve_glBinormal3dvEXT,
	resolve_glBinormal3fEXT,
	resolve_glBinormal3fvEXT,
	resolve_glBinormal3iEXT,
	resolve_glBinormal3ivEXT,
	resolve_glBinormal3sEXT,
	resolve_glBinormal3svEXT,
	resolve_glBinormalPointerEXT,
	resolve_glBitmap,
	resolve_glBitmapxOES,
	resolve_glBlendBarrierKHR,
	resolve_glBlendBarrierNV,
	resolve_glBlendColor,
	resolve_glBlendColorxOES,
	resolve_glBlendEquation,
	resolve_glBlendEquationIndexedAMD,
	resolve_glBlendEquationOES,
	resolve_glBlendEquationSeparate,
	resolve_glBlendEquationSeparateIndexedAMD,
	resolve_glBlendEquationSeparateOES,
	resolve_glBlendFunc,
	resolve_glBlendFuncIndexedAMD,
	resolve_glBlendFuncSeparate,
	resolve_glBlendFuncSeparateIndexedAMD,
	resolve_glBlendFuncSeparateOES,
	resolve_glBlendParameteriNV,
	resolve_glBlitFramebuffer,
	resolve_glBlitFramebufferANGLE,
	resolve_glBufferAddressRangeNV,
	resolve_glBufferData,
	resolve_glBufferParameteriAPPLE,
	resolve_glBufferStorage,
	resolve_glBufferSubData,
	resolve_glCallList,
	resolve_glCallLists,
	resolve_glCheckFramebufferStatus,
	resolve_glCheckFramebufferStatusOES,
	resolve_glCheckNamedFramebufferStatusEXT,
	resolve_glClampColor,
	resolve_glClear,
	resolve_glClearAccum,
	resolve_glClearAccumxOES,
	resolve_glClearBufferData,
	resolve_glClearBufferSubData,
	resolve_glClearBufferfi,
	resolve_glClearBufferfv,
	resolve_glClearBufferiv,
	resolve_glClearBufferuiv,
	resolve_glClearColor,
	resolve_glClearColorIiEXT,
	resolve_glClearColorIuiEXT,
	resolve_glClearColorx,
	resolve_glClearColorxOES,
	resolve_glClearDepth,
	resolve_glClearDepthdNV,
	resolve_glClearDepthf,
	resolve_glClearDepthx,
	resolve_glClearDepthxOES,
	resolve_glClearIndex,
	resolve_glClearNamedBufferDataEXT,
	resolve_glClearNamedBufferSubDataEXT,
	resolve_glClearStencil,
	resolve_glClearTexImage,
	resolve_glClearTexSubImage,
	resolve_glClientActiveTexture,
	resolve_glClientActiveVertexStreamATI,
	resolve_glClientAttribDefaultEXT,
	resolve_glClientWaitSync,
	resolve_glClipPlane,
	resolve_glClipPlanef,
	resolve_glClipPlanefIMG,
	resolve_glClipPlanefOES,
	resolve_glClipPlanex,
	resolve_glClipPlanexIMG,
	resolve_glClipPlanexOES,
	resolve_glColor3b,
	resolve_glColor3bv,
	resolve_glColor3d,
	resolve_glColor3dv,
	resolve_glColor3f,
	resolve_glColor3fVertex3fSUN,
	resolve_glColor3fVertex3fvSUN,
	resolve_glColor3fv,
	resolve_glColor3hNV,
	resolve_glColor3hvNV,
	resolve_glColor3i,
	resolve_glColor3iv,
	resolve_glColor3s,
	resolve_glColor3sv,
	resolve_glColor3ub,
	resolve_glColor3ubv,
	resolve_glColor3ui,
	resolve_glColor3uiv,
	resolve_glColor3us,
	resolve_glColor3usv,
	resolve_glColor3xOES,
	resolve_glColor3xvOES,
	resolve_glColor4b,
	resolve_glColor4bv,
	resolve_glColor4d,
	resolve_glColor4dv,
	resolve_glColor4f,
	resolve_glColor4fNormal3fVertex3fSUN,
	resolve_glColor4fNormal3fVertex3fvSUN,
	resolve_glColor4fv,
	resolve_glColor4hNV,
	resolve_glColor4hvNV,
	resolve_glColor4i,
	resolve_glColor4iv,
	resolve_glColor4s,
	resolve_glColor4sv,
	resolve_glColor4ub,
	resolve_glColor4ubVertex2fSUN,
	resolve_glColor4ubVertex2fvSUN,
	resolve_glColor4ubVertex3fSUN,
	resolve_glColor4ubVertex3fvSUN,
	resolve_glColor4ubv,
	resolve_glColor4ui,
	resolve_glColor4uiv,
	resolve_glColor4us,
	resolve_glColor4usv,
	resolve_glColor4x,
	resolve_glColor4xOES,
	resolve_glColor4xvOES,
	resolve_glColorFormatNV,
	resolve_glColorFragmentOp1ATI,
	resolve_glColorFragmentOp2ATI,
	resolve_glColorFragmentOp3ATI,
	resolve_glColorMask,
	resolve_glColorMaskIndexedEXT,
	resolve_glColorMaterial,
	resolve_glColorP3ui,
	resolve_glColorP3uiv,
	resolve_glColorP4ui,
	resolve_glColorP4uiv,
	resolve_glColorPointer,
	resolve_glColorPointerEXT,
	resolve_glColorPointerListIBM,
	resolve_glColorPointervINTEL,
	resolve_glColorSubTable,
	resolve_glColorTable,
	resolve_glColorTableParameterfv,
	resolve_glColorTableParameteriv,
	resolve_glCombinerInputNV,
	resolve_glCombinerOutputNV,
	resolve_glCombinerParameterfNV,
	resolve_glCombinerParameterfvNV,
	resolve_glCombinerParameteriNV,
	resolve_glCombinerParameterivNV,
	resolve_glCombinerStageParameterfvNV,
	resolve_glCompileShader,
	resolve_glCompileShaderIncludeARB,
	resolve_glCompressedMultiTexImage1DEXT,
	resolve_glCompressedMultiTexImage2DEXT,
	resolve_glCompressedMultiTexImage3DEXT,
	resolve_glCompressedMultiTexSubImage1DEXT,
	resolve_glCompressedMultiTexSubImage2DEXT,
	resolve_glCompressedMultiTexSubImage3DEXT,
	resolve_glCompressedTexImage1D,
	resolve_glCompressedTexImage2D,
	resolve_glCompressedTexImage3D,
	resolve_glCompressedTexSubImage1D,
	resolve_glCompressedTexSubImage2D,
	resolve_glCompressedTexSubImage3D,
	resolve_glCompressedTextureImage1DEXT,
	resolve_glCompressedTextureImage2DEXT,
	resolve_glCompressedTextureImage3DEXT,
	resolve_glCompressedTextureSubImage1DEXT,
	resolve_glCompressedTextureSubImage2DEXT,
	resolve_glCompressedTextureSubImage3DEXT,
	resolve_glConvolutionFilter1D,
	resolve_glConvolutionFilter2D,
	resolve_glConvolutionParameterf,
	resolve_glConvolutionParameterfv,
	resolve_glConvolutionParameteri,
	resolve_glConvolutionParameteriv,
	resolve_glConvolutionParameterxOES,
	resolve_glConvolutionParameterxvOES,
	resolve_glCopyBufferSubData,
	resolve_glCopyColorSubTable,
	resolve_glCopyColorTable,
	resolve_glCopyConvolutionFilter1D,
	resolve_glCopyConvolutionFilter2D,
	resolve_glCopyImageSubData,
	resolve_glCopyImageSubDataNV,
	resolve_glCopyMultiTexImage1DEXT,
	resolve_glCopyMultiTexImage2DEXT,
	resolve_glCopyMultiTexSubImage1DEXT,
	resolve_glCopyMultiTexSubImage2DEXT,
	resolve_glCopyMultiTexSubImage3DEXT,
	resolve_glCopyPathNV,
	resolve_glCopyPixels,
	resolve_glCopyTexImage1D,
	resolve_glCopyTexImage2D,
	resolve_glCopyTexSubImage1D,
	resolve_glCopyTexSubImage2D,
	resolve_glCopyTexSubImage3D,
	resolve_glCopyTextureImage1DEXT,
	resolve_glCopyTextureImage2DEXT,
	resolve_glCopyTextureLevelsAPPLE,
	resolve_glCopyTextureSubImage1DEXT,
	resolve_glCopyTextureSubImage2DEXT,
	resolve_glCopyTextureSubImage3DEXT,
	resolve_glCoverFillPathInstancedNV,
	resolve_glCoverFillPathNV,
	resolve_glCoverStrokePathInstancedNV,
	resolve_glCoverStrokePathNV,
	resolve_glCoverageMaskNV,
	resolve_glCoverageOperationNV,
	resolve_glCreatePerfQueryINTEL,
	resolve_glCreateProgram,
	resolve_glCreateShader,
	resolve_glCreateShaderProgramEXT,
	resolve_glCreateShaderProgramv,
	resolve_glCreateShaderProgramvEXT,
	resolve_glCreateSyncFromCLeventARB,
	resolve_glCullFace,
	resolve_glCullParameterdvEXT,
	resolve_glCullParameterfvEXT,
	resolve_glCurrentPaletteMatrixARB,
	resolve_glCurrentPaletteMatrixOES,
	resolve_glDebugMessageCallback,
	resolve_glDebugMessageCallbackAMD,
	resolve_glDebugMessageControl,
	resolve_glDebugMessageEnableAMD,
	resolve_glDebugMessageInsert,
	resolve_glDebugMessageInsertAMD,
	resolve_glDeformSGIX,
	resolve_glDeformationMap3dSGIX,
	resolve_glDeformationMap3fSGIX,
	resolve_glDeleteAsyncMarkersSGIX,
	resolve_glDeleteBuffers,
	resolve_glDeleteFencesAPPLE,
	resolve_glDeleteFencesNV,
	resolve_glDeleteFragmentShaderATI,
	resolve_glDeleteFramebuffers,
	resolve_glDeleteFramebuffersOES,
	resolve_glDeleteLists,
	resolve_glDeleteNamedStringARB,
	resolve_glDeleteNamesAMD,
	resolve_glDeleteObjectARB,
	resolve_glDeleteOcclusionQueriesNV,
	resolve_glDeletePathsNV,
	resolve_glDeletePerfMonitorsAMD,
	resolve_glDeletePerfQueryINTEL,
	resolve_glDeleteProgram,
	resolve_glDeleteProgramPipelines,
	resolve_glDeleteProgramPipelinesEXT,
	resolve_glDeleteProgramsARB,
	resolve_glDeleteQueries,
	resolve_glDeleteQueriesEXT,
	resolve_glDeleteRenderbuffers,
	resolve_glDeleteRenderbuffersOES,
	resolve_glDeleteSamplers,
	resolve_glDeleteShader,
	resolve_glDeleteSync,
	resolve_glDeleteTextures,
	resolve_glDeleteTexturesEXT,
	resolve_glDeleteTransformFeedbacks,
	resolve_glDeleteVertexArrays,
	resolve_glDeleteVertexShaderEXT,
	resolve_glDepthBoundsEXT,
	resolve_glDepthBoundsdNV,
	resolve_glDepthFunc,
	resolve_glDepthMask,
	resolve_glDepthRange,
	resolve_glDepthRangeArrayv,
	resolve_glDepthRangeIndexed,
	resolve_glDepthRangedNV,
	resolve_glDepthRangef,
	resolve_glDepthRangex,
	resolve_glDepthRangexOES,
	resolve_glDetachObjectARB,
	resolve_glDetailTexFuncSGIS,
	resolve_glDisable,
	resolve_glDisableClientState,
	resolve_glDisableClientStateIndexedEXT,
	resolve_glDisableClientStateiEXT,
	resolve_glDisableDriverControlQCOM,
	resolve_glDisableIndexedEXT,
	resolve_glDisableVariantClientStateEXT,
	resolve_glDisableVertexArrayAttribEXT,
	resolve_glDisableVertexArrayEXT,
	resolve_glDisableVertexAttribAPPLE,
	resolve_glDisableVertexAttribArray,
	resolve_glDiscardFramebufferEXT,
	resolve_glDispatchCompute,
	resolve_glDispatchComputeGroupSizeARB,
	resolve_glDispatchComputeIndirect,
	resolve_glDrawArrays,
	resolve_glDrawArraysIndirect,
	resolve_glDrawArraysInstanced,
	resolve_glDrawArraysInstancedBaseInstance,
	resolve_glDrawBuffer,
	resolve_glDrawBuffers,
	resolve_glDrawBuffersIndexedEXT,
	resolve_glDrawBuffersNV,
	resolve_glDrawElementArrayAPPLE,
	resolve_glDrawElementArrayATI,
	resolve_glDrawElements,
	resolve_glDrawElementsBaseVertex,
	resolve_glDrawElementsIndirect,
	resolve_glDrawElementsInstanced,
	resolve_glDrawElementsInstancedBaseInstance,
	resolve_glDrawElementsInstancedBaseVertex,
	resolve_glDrawElementsInstancedBaseVertexBaseInstance,
	resolve_glDrawMeshArraysSUN,
	resolve_glDrawPixels,
	resolve_glDrawRangeElementArrayAPPLE,
	resolve_glDrawRangeElementArrayATI,
	resolve_glDrawRangeElements,
	resolve_glDrawRangeElementsBaseVertex,
	resolve_glDrawTexfOES,
	resolve_glDrawTexfvOES,
	resolve_glDrawTexiOES,
	resolve_glDrawTexivOES,
	resolve_glDrawTexsOES,
	resolve_glDrawTexsvOES,
	resolve_glDrawTextureNV,
	resolve_glDrawTexxOES,
	resolve_glDrawTexxvOES,
	resolve_glDrawTransformFeedback,
	resolve_glDrawTransformFeedbackInstanced,
	resolve_glDrawTransformFeedbackStream,
	resolve_glDrawTransformFeedbackStreamInstanced,
	resolve_glEGLImageTargetRenderbufferStorageOES,
	resolve_glEGLImageTargetTexture2DOES,
	resolve_glEdgeFlag,
	resolve_glEdgeFlagFormatNV,
	resolve_glEdgeFlagPointer,
	resolve_glEdgeFlagPointerEXT,
	resolve_glEdgeFlagPointerListIBM,
	resolve_glEdgeFlagv,
	resolve_glElementPointerAPPLE,
	resolve_glElementPointerATI,
	resolve_glEnable,
	resolve_glEnableClientState,
	resolve_glEnableClientStateIndexedEXT,
	resolve_glEnableClientStateiEXT,
	resolve_glEnableDriverControlQCOM,
	resolve_glEnableIndexedEXT,
	resolve_glEnableVariantClientStateEXT,
	resolve_glEnableVertexArrayAttribEXT,
	resolve_glEnableVertexArrayEXT,
	resolve_glEnableVertexAttribAPPLE,
	resolve_glEnableVertexAttribArray,
	resolve_glEnd,
	resolve_glEndConditionalRender,
	resolve_glEndFragmentShaderATI,
	resolve_glEndList,
	resolve_glEndOcclusionQueryNV,
	resolve_glEndPerfMonitorAMD,
	resolve_glEndPerfQueryINTEL,
	resolve_glEndQuery,
	resolve_glEndQueryEXT,
	resolve_glEndQueryIndexed,
	resolve_glEndTilingQCOM,
	resolve_glEndTransformFeedback,
	resolve_glEndVertexShaderEXT,
	resolve_glEndVideoCaptureNV,
	resolve_glEvalCoord1d,
	resolve_glEvalCoord1dv,
	resolve_glEvalCoord1f,
	resolve_glEvalCoord1fv,
	resolve_glEvalCoord1xOES,
	resolve_glEvalCoord1xvOES,
	resolve_glEvalCoord2d,
	resolve_glEvalCoord2dv,
	resolve_glEvalCoord2f,
	resolve_glEvalCoord2fv,
	resolve_glEvalCoord2xOES,
	resolve_glEvalCoord2xvOES,
	resolve_glEvalMapsNV,
	resolve_glEvalMesh1,
	resolve_glEvalMesh2,
	resolve_glEvalPoint1,
	resolve_glEvalPoint2,
	resolve_glExecuteProgramNV,
	resolve_glExtGetBufferPointervQCOM,
	resolve_glExtGetBuffersQCOM,
	resolve_glExtGetFramebuffersQCOM,
	resolve_glExtGetProgramBinarySourceQCOM,
	resolve_glExtGetProgramsQCOM,
	resolve_glExtGetRenderbuffersQCOM,
	resolve_glExtGetShadersQCOM,
	resolve_glExtGetTexLevelParameterivQCOM,
	resolve_glExtGetTexSubImageQCOM,
	resolve_glExtGetTexturesQCOM,
	resolve_glExtIsProgramBinaryQCOM,
	resolve_glExtTexObjectStateOverrideiQCOM,
	resolve_glExtractComponentEXT,
	resolve_glFeedbackBuffer,
	resolve_glFeedbackBufferxOES,
	resolve_glFenceSync,
	resolve_glFinalCombinerInputNV,
	resolve_glFinish,
	resolve_glFinishAsyncSGIX,
	resolve_glFinishFenceAPPLE,
	resolve_glFinishFenceNV,
	resolve_glFinishObjectAPPLE,
	resolve_glFinishTextureSUNX,
	resolve_glFlush,
	resolve_glFlushMappedBufferRange,
	resolve_glFlushMappedNamedBufferRangeEXT,
	resolve_glFlushPixelDataRangeNV,
	resolve_glFlushRasterSGIX,
	resolve_glFlushStaticDataIBM,
	resolve_glFlushVertexArrayRangeAPPLE,
	resolve_glFlushVertexArrayRangeNV,
	resolve_glFogCoordFormatNV,
	resolve_glFogCoordPointer,
	resolve_glFogCoordPointerListIBM,
	resolve_glFogCoordd,
	resolve_glFogCoorddv,
	resolve_glFogCoordf,
	resolve_glFogCoordfv,
	resolve_glFogCoordhNV,
	resolve_glFogCoordhvNV,
	resolve_glFogFuncSGIS,
	resolve_glFogf,
	resolve_glFogfv,
	resolve_glFogi,
	resolve_glFogiv,
	resolve_glFogx,
	resolve_glFogxOES,
	resolve_glFogxv,
	resolve_glFogxvOES,
	resolve_glFragmentColorMaterialSGIX,
	resolve_glFragmentLightModelfSGIX,
	resolve_glFragmentLightModelfvSGIX,
	resolve_glFragmentLightModeliSGIX,
	resolve_glFragmentLightModelivSGIX,
	resolve_glFragmentLightfSGIX,
	resolve_glFragmentLightfvSGIX,
	resolve_glFragmentLightiSGIX,
	resolve_glFragmentLightivSGIX,
	resolve_glFragmentMaterialfSGIX,
	resolve_glFragmentMaterialfvSGIX,
	resolve_glFragmentMaterialiSGIX,
	resolve_glFragmentMaterialivSGIX,
	resolve_glFrameTerminatorGREMEDY,
	resolve_glFrameZoomSGIX,
	resolve_glFramebufferDrawBufferEXT,
	resolve_glFramebufferDrawBuffersEXT,
	resolve_glFramebufferParameteri,
	resolve_glFramebufferReadBufferEXT,
	resolve_glFramebufferRenderbuffer,
	resolve_glFramebufferRenderbufferOES,
	resolve_glFramebufferTexture,
	resolve_glFramebufferTexture1D,
	resolve_glFramebufferTexture2D,
	resolve_glFramebufferTexture2DMultisampleEXT,
	resolve_glFramebufferTexture2DMultisampleIMG,
	resolve_glFramebufferTexture2DOES,
	resolve_glFramebufferTexture3D,
	resolve_glFramebufferTextureFaceARB,
	resolve_glFramebufferTextureLayer,
	resolve_glFreeObjectBufferATI,
	resolve_glFrontFace,
	resolve_glFrustum,
	resolve_glFrustumf,
	resolve_glFrustumfOES,
	resolve_glFrustumx,
	resolve_glFrustumxOES,
	resolve_glGenAsyncMarkersSGIX,
	resolve_glGenBuffers,
	resolve_glGenFencesAPPLE,
	resolve_glGenFencesNV,
	resolve_glGenFragmentShadersATI,
	resolve_glGenFramebuffers,
	resolve_glGenFramebuffersOES,
	resolve_glGenLists,
	resolve_glGenNamesAMD,
	resolve_glGenOcclusionQueriesNV,
	resolve_glGenPathsNV,
	resolve_glGenPerfMonitorsAMD,
	resolve_glGenProgramPipelines,
	resolve_glGenProgramPipelinesEXT,
	resolve_glGenProgramsARB,
	resolve_glGenQueries,
	resolve_glGenQueriesEXT,
	resolve_glGenRenderbuffers,
	resolve_glGenRenderbuffersOES,
	resolve_glGenSamplers,
	resolve_glGenSymbolsEXT,
	resolve_glGenTextures,
	resolve_glGenTexturesEXT,
	resolve_glGenTransformFeedbacks,
	resolve_glGenVertexArrays,
	resolve_glGenVertexShadersEXT,
	resolve_glGenerateMipmap,
	resolve_glGenerateMipmapOES,
	resolve_glGenerateMultiTexMipmapEXT,
	resolve_glGenerateTextureMipmapEXT,
	resolve_glGetActiveAtomicCounterBufferiv,
	resolve_glGetActiveAttrib,
	resolve_glGetActiveSubroutineName,
	resolve_glGetActiveSubroutineUniformName,
	resolve_glGetActiveSubroutineUniformiv,
	resolve_glGetActiveUniform,
	resolve_glGetActiveUniformBlockName,
	resolve_glGetActiveUniformBlockiv,
	resolve_glGetActiveUniformName,
	resolve_glGetActiveUniformsiv,
	resolve_glGetActiveVaryingNV,
	resolve_glGetArrayObjectfvATI,
	resolve_glGetArrayObjectivATI,
	resolve_glGetAttachedObjectsARB,
	resolve_glGetAttachedShaders,
	resolve_glGetAttribLocation,
	resolve_glGetBooleanIndexedvEXT,
	resolve_glGetBooleanv,
	resolve_glGetBufferParameteri64v,
	resolve_glGetBufferParameteriv,
	resolve_glGetBufferParameterui64vNV,
	resolve_glGetBufferPointerv,
	resolve_glGetBufferSubData,
	resolve_glGetClipPlane,
	resolve_glGetClipPlanef,
	resolve_glGetClipPlanefOES,
	resolve_glGetClipPlanex,
	resolve_glGetClipPlanexOES,
	resolve_glGetColorTable,
	resolve_glGetColorTableParameterfv,
	resolve_glGetColorTableParameterfvSGI,
	resolve_glGetColorTableParameteriv,
	resolve_glGetColorTableParameterivSGI,
	resolve_glGetColorTableSGI,
	resolve_glGetCombinerInputParameterfvNV,
	resolve_glGetCombinerInputParameterivNV,
	resolve_glGetCombinerOutputParameterfvNV,
	resolve_glGetCombinerOutputParameterivNV,
	resolve_glGetCombinerStageParameterfvNV,
	resolve_glGetCompressedMultiTexImageEXT,
	resolve_glGetCompressedTexImage,
	resolve_glGetCompressedTextureImageEXT,
	resolve_glGetConvolutionFilter,
	resolve_glGetConvolutionFilterEXT,
	resolve_glGetConvolutionParameterfv,
	resolve_glGetConvolutionParameterfvEXT,
	resolve_glGetConvolutionParameteriv,
	resolve_glGetConvolutionParameterivEXT,
	resolve_glGetConvolutionParameterxvOES,
	resolve_glGetDebugMessageLog,
	resolve_glGetDebugMessageLogAMD,
	resolve_glGetDetailTexFuncSGIS,
	resolve_glGetDoubleIndexedvEXT,
	resolve_glGetDoublev,
	resolve_glGetDriverControlStringQCOM,
	resolve_glGetDriverControlsQCOM,
	resolve_glGetError,
	resolve_glGetFenceivNV,
	resolve_glGetFinalCombinerInputParameterfvNV,
	resolve_glGetFinalCombinerInputParameterivNV,
	resolve_glGetFirstPerfQueryIdINTEL,
	resolve_glGetFixedv,
	resolve_glGetFixedvOES,
	resolve_glGetFloatIndexedvEXT,
	resolve_glGetFloatv,
	resolve_glGetFogFuncSGIS,
	resolve_glGetFragDataIndex,
	resolve_glGetFragDataLocation,
	resolve_glGetFragmentLightfvSGIX,
	resolve_glGetFragmentLightivSGIX,
	resolve_glGetFragmentMaterialfvSGIX,
	resolve_glGetFragmentMaterialivSGIX,
	resolve_glGetFramebufferAttachmentParameteriv,
	resolve_glGetFramebufferAttachmentParameterivOES,
	resolve_glGetFramebufferParameteriv,
	resolve_glGetFramebufferParameterivEXT,
	resolve_glGetGraphicsResetStatusARB,
	resolve_glGetGraphicsResetStatusEXT,
	resolve_glGetHandleARB,
	resolve_glGetHistogram,
	resolve_glGetHistogramEXT,
	resolve_glGetHistogramParameterfv,
	resolve_glGetHistogramParameterfvEXT,
	resolve_glGetHistogramParameteriv,
	resolve_glGetHistogramParameterivEXT,
	resolve_glGetHistogramParameterxvOES,
	resolve_glGetImageHandleARB,
	resolve_glGetImageHandleNV,
	resolve_glGetImageTransformParameterfvHP,
	resolve_glGetImageTransformParameterivHP,
	resolve_glGetInfoLogARB,
	resolve_glGetInstrumentsSGIX,
	resolve_glGetInteger64i_v,
	resolve_glGetInteger64v,
	resolve_glGetIntegerIndexedvEXT,
	resolve_glGetIntegeri_vEXT,
	resolve_glGetIntegerui64i_vNV,
	resolve_glGetIntegerui64vNV,
	resolve_glGetIntegerv,
	resolve_glGetInternalformati64v,
	resolve_glGetInternalformativ,
	resolve_glGetInvariantBooleanvEXT,
	resolve_glGetInvariantFloatvEXT,
	resolve_glGetInvariantIntegervEXT,
	resolve_glGetLightfv,
	resolve_glGetLightiv,
	resolve_glGetLightxOES,
	resolve_glGetLightxv,
	resolve_glGetLightxvOES,
	resolve_glGetListParameterfvSGIX,
	resolve_glGetListParameterivSGIX,
	resolve_glGetLocalConstantBooleanvEXT,
	resolve_glGetLocalConstantFloatvEXT,
	resolve_glGetLocalConstantIntegervEXT,
	resolve_glGetMapAttribParameterfvNV,
	resolve_glGetMapAttribParameterivNV,
	resolve_glGetMapControlPointsNV,
	resolve_glGetMapParameterfvNV,
	resolve_glGetMapParameterivNV,
	resolve_glGetMapdv,
	resolve_glGetMapfv,
	resolve_glGetMapiv,
	resolve_glGetMapxvOES,
	resolve_glGetMaterialfv,
	resolve_glGetMaterialiv,
	resolve_glGetMaterialxOES,
	resolve_glGetMaterialxv,
	resolve_glGetMaterialxvOES,
	resolve_glGetMinmax,
	resolve_glGetMinmaxEXT,
	resolve_glGetMinmaxParameterfv,
	resolve_glGetMinmaxParameterfvEXT,
	resolve_glGetMinmaxParameteriv,
	resolve_glGetMinmaxParameterivEXT,
	resolve_glGetMultiTexEnvfvEXT,
	resolve_glGetMultiTexEnvivEXT,
	resolve_glGetMultiTexGendvEXT,
	resolve_glGetMultiTexGenfvEXT,
	resolve_glGetMultiTexGenivEXT,
	resolve_glGetMultiTexImageEXT,
	resolve_glGetMultiTexLevelParameterfvEXT,
	resolve_glGetMultiTexLevelParameterivEXT,
	resolve_glGetMultiTexParameterIivEXT,
	resolve_glGetMultiTexParameterIuivEXT,
	resolve_glGetMultiTexParameterfvEXT,
	resolve_glGetMultiTexParameterivEXT,
	resolve_glGetMultisamplefv,
	resolve_glGetNamedBufferParameterivEXT,
	resolve_glGetNamedBufferParameterui64vNV,
	resolve_glGetNamedBufferPointervEXT,
	resolve_glGetNamedBufferSubDataEXT,
	resolve_glGetNamedFramebufferAttachmentParameterivEXT,
	resolve_glGetNamedFramebufferParameterivEXT,
	resolve_glGetNamedProgramLocalParameterIivEXT,
	resolve_glGetNamedProgramLocalParameterIuivEXT,
	resolve_glGetNamedProgramLocalParameterdvEXT,
	resolve_glGetNamedProgramLocalParameterfvEXT,
	resolve_glGetNamedProgramStringEXT,
	resolve_glGetNamedProgramivEXT,
	resolve_glGetNamedRenderbufferParameterivEXT,
	resolve_glGetNamedStringARB,
	resolve_glGetNamedStringivARB,
	resolve_glGetNextPerfQueryIdINTEL,
	resolve_glGetObjectBufferfvATI,
	resolve_glGetObjectBufferivATI,
	resolve_glGetObjectLabel,
	resolve_glGetObjectLabelEXT,
	resolve_glGetObjectParameterfvARB,
	resolve_glGetObjectParameterivAPPLE,
	resolve_glGetObjectParameterivARB,
	resolve_glGetObjectPtrLabel,
	resolve_glGetOcclusionQueryivNV,
	resolve_glGetOcclusionQueryuivNV,
	resolve_glGetPathColorGenfvNV,
	resolve_glGetPathColorGenivNV,
	resolve_glGetPathCommandsNV,
	resolve_glGetPathCoordsNV,
	resolve_glGetPathDashArrayNV,
	resolve_glGetPathLengthNV,
	resolve_glGetPathMetricRangeNV,
	resolve_glGetPathMetricsNV,
	resolve_glGetPathParameterfvNV,
	resolve_glGetPathParameterivNV,
	resolve_glGetPathSpacingNV,
	resolve_glGetPathTexGenfvNV,
	resolve_glGetPathTexGenivNV,
	resolve_glGetPerfCounterInfoINTEL,
	resolve_glGetPerfMonitorCounterDataAMD,
	resolve_glGetPerfMonitorCounterInfoAMD,
	resolve_glGetPerfMonitorCounterStringAMD,
	resolve_glGetPerfMonitorCountersAMD,
	resolve_glGetPerfMonitorGroupStringAMD,
	resolve_glGetPerfMonitorGroupsAMD,
	resolve_glGetPerfQueryDataINTEL,
	resolve_glGetPerfQueryIdByNameINTEL,
	resolve_glGetPerfQueryInfoINTEL,
	resolve_glGetPixelMapfv,
	resolve_glGetPixelMapuiv,
	resolve_glGetPixelMapusv,
	resolve_glGetPixelMapxv,
	resolve_glGetPixelTexGenParameterfvSGIS,
	resolve_glGetPixelTexGenParameterivSGIS,
	resolve_glGetPixelTransformParameterfvEXT,
	resolve_glGetPixelTransformParameterivEXT,
	resolve_glGetPointerIndexedvEXT,
	resolve_glGetPointeri_vEXT,
	resolve_glGetPointerv,
	resolve_glGetPolygonStipple,
	resolve_glGetProgramBinary,
	resolve_glGetProgramEnvParameterIivNV,
	resolve_glGetProgramEnvParameterIuivNV,
	resolve_glGetProgramEnvParameterdvARB,
	resolve_glGetProgramEnvParameterfvARB,
	resolve_glGetProgramInfoLog,
	resolve_glGetProgramInterfaceiv,
	resolve_glGetProgramLocalParameterIivNV,
	resolve_glGetProgramLocalParameterIuivNV,
	resolve_glGetProgramLocalParameterdvARB,
	resolve_glGetProgramLocalParameterfvARB,
	resolve_glGetProgramNamedParameterdvNV,
	resolve_glGetProgramNamedParameterfvNV,
	resolve_glGetProgramParameterdvNV,
	resolve_glGetProgramParameterfvNV,
	resolve_glGetProgramPipelineInfoLog,
	resolve_glGetProgramPipelineInfoLogEXT,
	resolve_glGetProgramPipelineiv,
	resolve_glGetProgramPipelineivEXT,
	resolve_glGetProgramResourceIndex,
	resolve_glGetProgramResourceLocation,
	resolve_glGetProgramResourceLocationIndex,
	resolve_glGetProgramResourceName,
	resolve_glGetProgramResourceiv,
	resolve_glGetProgramStageiv,
	resolve_glGetProgramStringARB,
	resolve_glGetProgramStringNV,
	resolve_glGetProgramSubroutineParameteruivNV,
	resolve_glGetProgramiv,
	resolve_glGetProgramivARB,
	resolve_glGetProgramivNV,
	resolve_glGetQueryIndexediv,
	resolve_glGetQueryObjecti64v,
	resolve_glGetQueryObjectiv,
	resolve_glGetQueryObjectui64v,
	resolve_glGetQueryObjectuiv,
	resolve_glGetQueryObjectuivEXT,
	resolve_glGetQueryiv,
	resolve_glGetQueryivEXT,
	resolve_glGetRenderbufferParameteriv,
	resolve_glGetRenderbufferParameterivOES,
	resolve_glGetSamplerParameterIiv,
	resolve_glGetSamplerParameterIuiv,
	resolve_glGetSamplerParameterfv,
	resolve_glGetSamplerParameteriv,
	resolve_glGetSeparableFilter,
	resolve_glGetSeparableFilterEXT,
	resolve_glGetShaderInfoLog,
	resolve_glGetShaderPrecisionFormat,
	resolve_glGetShaderSource,
	resolve_glGetShaderiv,
	resolve_glGetSharpenTexFuncSGIS,
	resolve_glGetString,
	resolve_glGetStringi,
	resolve_glGetSubroutineIndex,
	resolve_glGetSubroutineUniformLocation,
	resolve_glGetSynciv,
	resolve_glGetTexBumpParameterfvATI,
	resolve_glGetTexBumpParameterivATI,
	resolve_glGetTexEnvfv,
	resolve_glGetTexEnviv,
	resolve_glGetTexEnvxv,
	resolve_glGetTexEnvxvOES,
	resolve_glGetTexFilterFuncSGIS,
	resolve_glGetTexGendv,
	resolve_glGetTexGenfv,
	resolve_glGetTexGenfvOES,
	resolve_glGetTexGeniv,
	resolve_glGetTexGenivOES,
	resolve_glGetTexGenxvOES,
	resolve_glGetTexImage,
	resolve_glGetTexLevelParameterfv,
	resolve_glGetTexLevelParameteriv,
	resolve_glGetTexLevelParameterxvOES,
	resolve_glGetTexParameterIiv,
	resolve_glGetTexParameterIuiv,
	resolve_glGetTexParameterPointervAPPLE,
	resolve_glGetTexParameterfv,
	resolve_glGetTexParameteriv,
	resolve_glGetTexParameterxv,
	resolve_glGetTexParameterxvOES,
	resolve_glGetTextureHandleARB,
	resolve_glGetTextureHandleNV,
	resolve_glGetTextureImageEXT,
	resolve_glGetTextureLevelParameterfvEXT,
	resolve_glGetTextureLevelParameterivEXT,
	resolve_glGetTextureParameterIivEXT,
	resolve_glGetTextureParameterIuivEXT,
	resolve_glGetTextureParameterfvEXT,
	resolve_glGetTextureParameterivEXT,
	resolve_glGetTextureSamplerHandleARB,
	resolve_glGetTextureSamplerHandleNV,
	resolve_glGetTrackMatrixivNV,
	resolve_glGetTransformFeedbackVarying,
	resolve_glGetTransformFeedbackVaryingNV,
	resolve_glGetTranslatedShaderSourceANGLE,
	resolve_glGetUniformBlockIndex,
	resolve_glGetUniformBufferSizeEXT,
	resolve_glGetUniformIndices,
	resolve_glGetUniformLocation,
	resolve_glGetUniformOffsetEXT,
	resolve_glGetUniformSubroutineuiv,
	resolve_glGetUniformdv,
	resolve_glGetUniformfv,
	resolve_glGetUniformi64vNV,
	resolve_glGetUniformiv,
	resolve_glGetUniformui64vNV,
	resolve_glGetUniformuiv,
	resolve_glGetVariantArrayObjectfvATI,
	resolve_glGetVariantArrayObjectivATI,
	resolve_glGetVariantBooleanvEXT,
	resolve_glGetVariantFloatvEXT,
	resolve_glGetVariantIntegervEXT,
	resolve_glGetVariantPointervEXT,
	resolve_glGetVaryingLocationNV,
	resolve_glGetVertexArrayIntegeri_vEXT,
	resolve_glGetVertexArrayIntegervEXT,
	resolve_glGetVertexArrayPointeri_vEXT,
	resolve_glGetVertexArrayPointervEXT,
	resolve_glGetVertexAttribArrayObjectfvATI,
	resolve_glGetVertexAttribArrayObjectivATI,
	resolve_glGetVertexAttribIiv,
	resolve_glGetVertexAttribIuiv,
	resolve_glGetVertexAttribLdv,
	resolve_glGetVertexAttribLi64vNV,
	resolve_glGetVertexAttribLui64vARB,
	resolve_glGetVertexAttribLui64vNV,
	resolve_glGetVertexAttribPointerv,
	resolve_glGetVertexAttribdv,
	resolve_glGetVertexAttribfv,
	resolve_glGetVertexAttribiv,
	resolve_glGetVideoCaptureStreamdvNV,
	resolve_glGetVideoCaptureStreamfvNV,
	resolve_glGetVideoCaptureStreamivNV,
	resolve_glGetVideoCaptureivNV,
	resolve_glGetVideoi64vNV,
	resolve_glGetVideoivNV,
	resolve_glGetVideoui64vNV,
	resolve_glGetVideouivNV,
	resolve_glGetnColorTableARB,
	resolve_glGetnCompressedTexImageARB,
	resolve_glGetnConvolutionFilterARB,
	resolve_glGetnHistogramARB,
	resolve_glGetnMapdvARB,
	resolve_glGetnMapfvARB,
	resolve_glGetnMapivARB,
	resolve_glGetnMinmaxARB,
	resolve_glGetnPixelMapfvARB,
	resolve_glGetnPixelMapuivARB,
	resolve_glGetnPixelMapusvARB,
	resolve_glGetnPolygonStippleARB,
	resolve_glGetnSeparableFilterARB,
	resolve_glGetnTexImageARB,
	resolve_glGetnUniformdvARB,
	resolve_glGetnUniformfvARB,
	resolve_glGetnUniformfvEXT,
	resolve_glGetnUniformivARB,
	resolve_glGetnUniformivEXT,
	resolve_glGetnUniformuivARB,
	resolve_glGlobalAlphaFactorbSUN,
	resolve_glGlobalAlphaFactordSUN,
	resolve_glGlobalAlphaFactorfSUN,
	resolve_glGlobalAlphaFactoriSUN,
	resolve_glGlobalAlphaFactorsSUN,
	resolve_glGlobalAlphaFactorubSUN,
	resolve_glGlobalAlphaFactoruiSUN,
	resolve_glGlobalAlphaFactorusSUN,
	resolve_glHint,
	resolve_glHintPGI,
	resolve_glHistogram,
	resolve_glIglooInterfaceSGIX,
	resolve_glImageTransformParameterfHP,
	resolve_glImageTransformParameterfvHP,
	resolve_glImageTransformParameteriHP,
	resolve_glImageTransformParameterivHP,
	resolve_glImportSyncEXT,
	resolve_glIndexFormatNV,
	resolve_glIndexFuncEXT,
	resolve_glIndexMask,
	resolve_glIndexMaterialEXT,
	resolve_glIndexPointer,
	resolve_glIndexPointerEXT,
	resolve_glIndexPointerListIBM,
	resolve_glIndexd,
	resolve_glIndexdv,
	resolve_glIndexf,
	resolve_glIndexfv,
	resolve_glIndexi,
	resolve_glIndexiv,
	resolve_glIndexs,
	resolve_glIndexsv,
	resolve_glIndexub,
	resolve_glIndexubv,
	resolve_glIndexxOES,
	resolve_glIndexxvOES,
	resolve_glInitNames,
	resolve_glInsertComponentEXT,
	resolve_glInsertEventMarkerEXT,
	resolve_glInstrumentsBufferSGIX,
	resolve_glInterleavedArrays,
	resolve_glInterpolatePathsNV,
	resolve_glInvalidateBufferData,
	resolve_glInvalidateBufferSubData,
	resolve_glInvalidateFramebuffer,
	resolve_glInvalidateSubFramebuffer,
	resolve_glInvalidateTexImage,
	resolve_glInvalidateTexSubImage,
	resolve_glIsAsyncMarkerSGIX,
	resolve_glIsBuffer,
	resolve_glIsBufferResidentNV,
	resolve_glIsEnabled,
	resolve_glIsEnabledIndexedEXT,
	resolve_glIsFenceAPPLE,
	resolve_glIsFenceNV,
	resolve_glIsFramebuffer,
	resolve_glIsFramebufferOES,
	resolve_glIsImageHandleResidentARB,
	resolve_glIsImageHandleResidentNV,
	resolve_glIsList,
	resolve_glIsNameAMD,
	resolve_glIsNamedBufferResidentNV,
	resolve_glIsNamedStringARB,
	resolve_glIsObjectBufferATI,
	resolve_glIsOcclusionQueryNV,
	resolve_glIsPathNV,
	resolve_glIsPointInFillPathNV,
	resolve_glIsPointInStrokePathNV,
	resolve_glIsProgram,
	resolve_glIsProgramARB,
	resolve_glIsProgramPipeline,
	resolve_glIsProgramPipelineEXT,
	resolve_glIsQuery,
	resolve_glIsQueryEXT,
	resolve_glIsRenderbuffer,
	resolve_glIsRenderbufferOES,
	resolve_glIsSampler,
	resolve_glIsShader,
	resolve_glIsSync,
	resolve_glIsTexture,
	resolve_glIsTextureEXT,
	resolve_glIsTextureHandleResidentARB,
	resolve_glIsTextureHandleResidentNV,
	resolve_glIsTransformFeedback,
	resolve_glIsVariantEnabledEXT,
	resolve_glIsVertexArray,
	resolve_glIsVertexAttribEnabledAPPLE,
	resolve_glLabelObjectEXT,
	resolve_glLightEnviSGIX,
	resolve_glLightModelf,
	resolve_glLightModelfv,
	resolve_glLightModeli,
	resolve_glLightModeliv,
	resolve_glLightModelx,
	resolve_glLightModelxOES,
	resolve_glLightModelxv,
	resolve_glLightModelxvOES,
	resolve_glLightf,
	resolve_glLightfv,
	resolve_glLighti,
	resolve_glLightiv,
	resolve_glLightx,
	resolve_glLightxOES,
	resolve_glLightxv,
	resolve_glLightxvOES,
	resolve_glLineStipple,
	resolve_glLineWidth,
	resolve_glLineWidthx,
	resolve_glLineWidthxOES,
	resolve_glLinkProgram,
	resolve_glListBase,
	resolve_glListParameterfSGIX,
	resolve_glListParameterfvSGIX,
	resolve_glListParameteriSGIX,
	resolve_glListParameterivSGIX,
	resolve_glLoadIdentity,
	resolve_glLoadIdentityDeformationMapSGIX,
	resolve_glLoadMatrixd,
	resolve_glLoadMatrixf,
	resolve_glLoadMatrixx,
	resolve_glLoadMatrixxOES,
	resolve_glLoadName,
	resolve_glLoadPaletteFromModelViewMatrixOES,
	resolve_glLoadProgramNV,
	resolve_glLoadTransposeMatrixd,
	resolve_glLoadTransposeMatrixf,
	resolve_glLoadTransposeMatrixxOES,
	resolve_glLockArraysEXT,
	resolve_glLogicOp,
	resolve_glMakeBufferNonResidentNV,
	resolve_glMakeBufferResidentNV,
	resolve_glMakeImageHandleNonResidentARB,
	resolve_glMakeImageHandleNonResidentNV,
	resolve_glMakeImageHandleResidentARB,
	resolve_glMakeImageHandleResidentNV,
	resolve_glMakeNamedBufferNonResidentNV,
	resolve_glMakeNamedBufferResidentNV,
	resolve_glMakeTextureHandleNonResidentARB,
	resolve_glMakeTextureHandleNonResidentNV,
	resolve_glMakeTextureHandleResidentARB,
	resolve_glMakeTextureHandleResidentNV,
	resolve_glMap1d,
	resolve_glMap1f,
	resolve_glMap1xOES,
	resolve_glMap2d,
	resolve_glMap2f,
	resolve_glMap2xOES,
	resolve_glMapBuffer,
	resolve_glMapBufferRange,
	resolve_glMapControlPointsNV,
	resolve_glMapGrid1d,
	resolve_glMapGrid1f,
	resolve_glMapGrid1xOES,
	resolve_glMapGrid2d,
	resolve_glMapGrid2f,
	resolve_glMapGrid2xOES,
	resolve_glMapNamedBufferEXT,
	resolve_glMapNamedBufferRangeEXT,
	resolve_glMapObjectBufferATI,
	resolve_glMapParameterfvNV,
	resolve_glMapParameterivNV,
	resolve_glMapTexture2DINTEL,
	resolve_glMapVertexAttrib1dAPPLE,
	resolve_glMapVertexAttrib1fAPPLE,
	resolve_glMapVertexAttrib2dAPPLE,
	resolve_glMapVertexAttrib2fAPPLE,
	resolve_glMaterialf,
	resolve_glMaterialfv,
	resolve_glMateriali,
	resolve_glMaterialiv,
	resolve_glMaterialx,
	resolve_glMaterialxOES,
	resolve_glMaterialxv,
	resolve_glMaterialxvOES,
	resolve_glMatrixFrustumEXT,
	resolve_glMatrixIndexPointerARB,
	resolve_glMatrixIndexPointerOES,
	resolve_glMatrixIndexubvARB,
	resolve_glMatrixIndexuivARB,
	resolve_glMatrixIndexusvARB,
	resolve_glMatrixLoadIdentityEXT,
	resolve_glMatrixLoadTransposedEXT,
	resolve_glMatrixLoadTransposefEXT,
	resolve_glMatrixLoaddEXT,
	resolve_glMatrixLoadfEXT,
	resolve_glMatrixMode,
	resolve_glMatrixMultTransposedEXT,
	resolve_glMatrixMultTransposefEXT,
	resolve_glMatrixMultdEXT,
	resolve_glMatrixMultfEXT,
	resolve_glMatrixOrthoEXT,
	resolve_glMatrixPopEXT,
	resolve_glMatrixPushEXT,
	resolve_glMatrixRotatedEXT,
	resolve_glMatrixRotatefEXT,
	resolve_glMatrixScaledEXT,
	resolve_glMatrixScalefEXT,
	resolve_glMatrixTranslatedEXT,
	resolve_glMatrixTranslatefEXT,
	resolve_glMemoryBarrier,
	resolve_glMemoryBarrierByRegion,
	resolve_glMinSampleShading,
	resolve_glMinmax,
	resolve_glMultMatrixd,
	resolve_glMultMatrixf,
	resolve_glMultMatrixx,
	resolve_glMultMatrixxOES,
	resolve_glMultTransposeMatrixd,
	resolve_glMultTransposeMatrixf,
	resolve_glMultTransposeMatrixxOES,
	resolve_glMultiDrawArrays,
	resolve_glMultiDrawArraysIndirect,
	resolve_glMultiDrawArraysIndirectBindlessNV,
	resolve_glMultiDrawArraysIndirectCountARB,
	resolve_glMultiDrawElementArrayAPPLE,
	resolve_glMultiDrawElements,
	resolve_glMultiDrawElementsBaseVertex,
	resolve_glMultiDrawElementsIndirect,
	resolve_glMultiDrawElementsIndirectBindlessNV,
	resolve_glMultiDrawElementsIndirectCountARB,
	resolve_glMultiDrawRangeElementArrayAPPLE,
	resolve_glMultiModeDrawArraysIBM,
	resolve_glMultiModeDrawElementsIBM,
	resolve_glMultiTexBufferEXT,
	resolve_glMultiTexCoord1bOES,
	resolve_glMultiTexCoord1bvOES,
	resolve_glMultiTexCoord1d,
	resolve_glMultiTexCoord1dv,
	resolve_glMultiTexCoord1f,
	resolve_glMultiTexCoord1fv,
	resolve_glMultiTexCoord1hNV,
	resolve_glMultiTexCoord1hvNV,
	resolve_glMultiTexCoord1i,
	resolve_glMultiTexCoord1iv,
	resolve_glMultiTexCoord1s,
	resolve_glMultiTexCoord1sv,
	resolve_glMultiTexCoord1xOES,
	resolve_glMultiTexCoord1xvOES,
	resolve_glMultiTexCoord2bOES,
	resolve_glMultiTexCoord2bvOES,
	resolve_glMultiTexCoord2d,
	resolve_glMultiTexCoord2dv,
	resolve_glMultiTexCoord2f,
	resolve_glMultiTexCoord2fv,
	resolve_glMultiTexCoord2hNV,
	resolve_glMultiTexCoord2hvNV,
	resolve_glMultiTexCoord2i,
	resolve_glMultiTexCoord2iv,
	resolve_glMultiTexCoord2s,
	resolve_glMultiTexCoord2sv,
	resolve_glMultiTexCoord2xOES,
	resolve_glMultiTexCoord2xvOES,
	resolve_glMultiTexCoord3bOES,
	resolve_glMultiTexCoord3bvOES,
	resolve_glMultiTexCoord3d,
	resolve_glMultiTexCoord3dv,
	resolve_glMultiTexCoord3f,
	resolve_glMultiTexCoord3fv,
	resolve_glMultiTexCoord3hNV,
	resolve_glMultiTexCoord3hvNV,
	resolve_glMultiTexCoord3i,
	resolve_glMultiTexCoord3iv,
	resolve_glMultiTexCoord3s,
	resolve_glMultiTexCoord3sv,
	resolve_glMultiTexCoord3xOES,
	resolve_glMultiTexCoord3xvOES,
	resolve_glMultiTexCoord4bOES,
	resolve_glMultiTexCoord4bvOES,
	resolve_glMultiTexCoord4d,
	resolve_glMultiTexCoord4dv,
	resolve_glMultiTexCoord4f,
	resolve_glMultiTexCoord4fv,
	resolve_glMultiTexCoord4hNV,
	resolve_glMultiTexCoord4hvNV,
	resolve_glMultiTexCoord4i,
	resolve_glMultiTexCoord4iv,
	resolve_glMultiTexCoord4s,
	resolve_glMultiTexCoord4sv,
	resolve_glMultiTexCoord4x,
	resolve_glMultiTexCoord4xOES,
	resolve_glMultiTexCoord4xvOES,
	resolve_glMultiTexCoordP1ui,
	resolve_glMultiTexCoordP1uiv,
	resolve_glMultiTexCoordP2ui,
	resolve_glMultiTexCoordP2uiv,
	resolve_glMultiTexCoordP3ui,
	resolve_glMultiTexCoordP3uiv,
	resolve_glMultiTexCoordP4ui,
	resolve_glMultiTexCoordP4uiv,
	resolve_glMultiTexCoordPointerEXT,
	resolve_glMultiTexEnvfEXT,
	resolve_glMultiTexEnvfvEXT,
	resolve_glMultiTexEnviEXT,
	resolve_glMultiTexEnvivEXT,
	resolve_glMultiTexGendEXT,
	resolve_glMultiTexGendvEXT,
	resolve_glMultiTexGenfEXT,
	resolve_glMultiTexGenfvEXT,
	resolve_glMultiTexGeniEXT,
	resolve_glMultiTexGenivEXT,
	resolve_glMultiTexImage1DEXT,
	resolve_glMultiTexImage2DEXT,
	resolve_glMultiTexImage3DEXT,
	resolve_glMultiTexParameterIivEXT,
	resolve_glMultiTexParameterIuivEXT,
	resolve_glMultiTexParameterfEXT,
	resolve_glMultiTexParameterfvEXT,
	resolve_glMultiTexParameteriEXT,
	resolve_glMultiTexParameterivEXT,
	resolve_glMultiTexRenderbufferEXT,
	resolve_glMultiTexSubImage1DEXT,
	resolve_glMultiTexSubImage2DEXT,
	resolve_glMultiTexSubImage3DEXT,
	resolve_glNamedBufferDataEXT,
	resolve_glNamedBufferStorageEXT,
	resolve_glNamedBufferSubDataEXT,
	resolve_glNamedCopyBufferSubDataEXT,
	resolve_glNamedFramebufferParameteriEXT,
	resolve_glNamedFramebufferRenderbufferEXT,
	resolve_glNamedFramebufferTexture1DEXT,
	resolve_glNamedFramebufferTexture2DEXT,
	resolve_glNamedFramebufferTexture3DEXT,
	resolve_glNamedFramebufferTextureEXT,
	resolve_glNamedFramebufferTextureFaceEXT,
	resolve_glNamedFramebufferTextureLayerEXT,
	resolve_glNamedProgramLocalParameter4dEXT,
	resolve_glNamedProgramLocalParameter4dvEXT,
	resolve_glNamedProgramLocalParameter4fEXT,
	resolve_glNamedProgramLocalParameter4fvEXT,
	resolve_glNamedProgramLocalParameterI4iEXT,
	resolve_glNamedProgramLocalParameterI4ivEXT,
	resolve_glNamedProgramLocalParameterI4uiEXT,
	resolve_glNamedProgramLocalParameterI4uivEXT,
	resolve_glNamedProgramLocalParameters4fvEXT,
	resolve_glNamedProgramLocalParametersI4ivEXT,
	resolve_glNamedProgramLocalParametersI4uivEXT,
	resolve_glNamedProgramStringEXT,
	resolve_glNamedRenderbufferStorageEXT,
	resolve_glNamedRenderbufferStorageMultisampleCoverageEXT,
	resolve_glNamedRenderbufferStorageMultisampleEXT,
	resolve_glNamedStringARB,
	resolve_glNewList,
	resolve_glNewObjectBufferATI,
	resolve_glNormal3b,
	resolve_glNormal3bv,
	resolve_glNormal3d,
	resolve_glNormal3dv,
	resolve_glNormal3f,
	resolve_glNormal3fVertex3fSUN,
	resolve_glNormal3fVertex3fvSUN,
	resolve_glNormal3fv,
	resolve_glNormal3hNV,
	resolve_glNormal3hvNV,
	resolve_glNormal3i,
	resolve_glNormal3iv,
	resolve_glNormal3s,
	resolve_glNormal3sv,
	resolve_glNormal3x,
	resolve_glNormal3xOES,
	resolve_glNormal3xvOES,
	resolve_glNormalFormatNV,
	resolve_glNormalP3ui,
	resolve_glNormalP3uiv,
	resolve_glNormalPointer,
	resolve_glNormalPointerEXT,
	resolve_glNormalPointerListIBM,
	resolve_glNormalPointervINTEL,
	resolve_glNormalStream3bATI,
	resolve_glNormalStream3bvATI,
	resolve_glNormalStream3dATI,
	resolve_glNormalStream3dvATI,
	resolve_glNormalStream3fATI,
	resolve_glNormalStream3fvATI,
	resolve_glNormalStream3iATI,
	resolve_glNormalStream3ivATI,
	resolve_glNormalStream3sATI,
	resolve_glNormalStream3svATI,
	resolve_glObjectLabel,
	resolve_glObjectPtrLabel,
	resolve_glObjectPurgeableAPPLE,
	resolve_glObjectUnpurgeableAPPLE,
	resolve_glOrtho,
	resolve_glOrthof,
	resolve_glOrthofOES,
	resolve_glOrthox,
	resolve_glOrthoxOES,
	resolve_glPNTrianglesfATI,
	resolve_glPNTrianglesiATI,
	resolve_glPassTexCoordATI,
	resolve_glPassThrough,
	resolve_glPassThroughxOES,
	resolve_glPatchParameterfv,
	resolve_glPatchParameteri,
	resolve_glPathColorGenNV,
	resolve_glPathCommandsNV,
	resolve_glPathCoordsNV,
	resolve_glPathCoverDepthFuncNV,
	resolve_glPathDashArrayNV,
	resolve_glPathFogGenNV,
	resolve_glPathGlyphRangeNV,
	resolve_glPathGlyphsNV,
	resolve_glPathParameterfNV,
	resolve_glPathParameterfvNV,
	resolve_glPathParameteriNV,
	resolve_glPathParameterivNV,
	resolve_glPathStencilDepthOffsetNV,
	resolve_glPathStencilFuncNV,
	resolve_glPathStringNV,
	resolve_glPathSubCommandsNV,
	resolve_glPathSubCoordsNV,
	resolve_glPathTexGenNV,
	resolve_glPauseTransformFeedback,
	resolve_glPixelDataRangeNV,
	resolve_glPixelMapfv,
	resolve_glPixelMapuiv,
	resolve_glPixelMapusv,
	resolve_glPixelMapx,
	resolve_glPixelStoref,
	resolve_glPixelStorei,
	resolve_glPixelStorex,
	resolve_glPixelTexGenParameterfSGIS,
	resolve_glPixelTexGenParameterfvSGIS,
	resolve_glPixelTexGenParameteriSGIS,
	resolve_glPixelTexGenParameterivSGIS,
	resolve_glPixelTexGenSGIX,
	resolve_glPixelTransferf,
	resolve_glPixelTransferi,
	resolve_glPixelTransferxOES,
	resolve_glPixelTransformParameterfEXT,
	resolve_glPixelTransformParameterfvEXT,
	resolve_glPixelTransformParameteriEXT,
	resolve_glPixelTransformParameterivEXT,
	resolve_glPixelZoom,
	resolve_glPixelZoomxOES,
	resolve_glPointAlongPathNV,
	resolve_glPointParameterf,
	resolve_glPointParameterfv,
	resolve_glPointParameteri,
	resolve_glPointParameteriv,
	resolve_glPointParameterx,
	resolve_glPointParameterxOES,
	resolve_glPointParameterxv,
	resolve_glPointParameterxvOES,
	resolve_glPointSize,
	resolve_glPointSizePointerOES,
	resolve_glPointSizex,
	resolve_glPointSizexOES,
	resolve_glPollAsyncSGIX,
	resolve_glPollInstrumentsSGIX,
	resolve_glPolygonMode,
	resolve_glPolygonOffset,
	resolve_glPolygonOffsetEXT,
	resolve_glPolygonOffsetx,
	resolve_glPolygonOffsetxOES,
	resolve_glPolygonStipple,
	resolve_glPopAttrib,
	resolve_glPopClientAttrib,
	resolve_glPopDebugGroup,
	resolve_glPopGroupMarkerEXT,
	resolve_glPopMatrix,
	resolve_glPopName,
	resolve_glPresentFrameDualFillNV,
	resolve_glPresentFrameKeyedNV,
	resolve_glPrimitiveRestartIndex,
	resolve_glPrimitiveRestartIndexNV,
	resolve_glPrimitiveRestartNV,
	resolve_glPrioritizeTextures,
	resolve_glPrioritizeTexturesxOES,
	resolve_glProgramBinary,
	resolve_glProgramBufferParametersIivNV,
	resolve_glProgramBufferParametersIuivNV,
	resolve_glProgramBufferParametersfvNV,
	resolve_glProgramEnvParameter4dARB,
	resolve_glProgramEnvParameter4dvARB,
	resolve_glProgramEnvParameter4fARB,
	resolve_glProgramEnvParameter4fvARB,
	resolve_glProgramEnvParameterI4iNV,
	resolve_glProgramEnvParameterI4ivNV,
	resolve_glProgramEnvParameterI4uiNV,
	resolve_glProgramEnvParameterI4uivNV,
	resolve_glProgramEnvParameters4fvEXT,
	resolve_glProgramEnvParametersI4ivNV,
	resolve_glProgramEnvParametersI4uivNV,
	resolve_glProgramLocalParameter4dARB,
	resolve_glProgramLocalParameter4dvARB,
	resolve_glProgramLocalParameter4fARB,
	resolve_glProgramLocalParameter4fvARB,
	resolve_glProgramLocalParameterI4iNV,
	resolve_glProgramLocalParameterI4ivNV,
	resolve_glProgramLocalParameterI4uiNV,
	resolve_glProgramLocalParameterI4uivNV,
	resolve_glProgramLocalParameters4fvEXT,
	resolve_glProgramLocalParametersI4ivNV,
	resolve_glProgramLocalParametersI4uivNV,
	resolve_glProgramNamedParameter4dNV,
	resolve_glProgramNamedParameter4dvNV,
	resolve_glProgramNamedParameter4fNV,
	resolve_glProgramNamedParameter4fvNV,
	resolve_glProgramParameter4dNV,
	resolve_glProgramParameter4dvNV,
	resolve_glProgramParameter4fNV,
	resolve_glProgramParameter4fvNV,
	resolve_glProgramParameteri,
	resolve_glProgramParameters4dvNV,
	resolve_glProgramParameters4fvNV,
	resolve_glProgramStringARB,
	resolve_glProgramSubroutineParametersuivNV,
	resolve_glProgramUniform1d,
	resolve_glProgramUniform1dEXT,
	resolve_glProgramUniform1dv,
	resolve_glProgramUniform1dvEXT,
	resolve_glProgramUniform1f,
	resolve_glProgramUniform1fv,
	resolve_glProgramUniform1i,
	resolve_glProgramUniform1i64NV,
	resolve_glProgramUniform1i64vNV,
	resolve_glProgramUniform1iv,
	resolve_glProgramUniform1ui,
	resolve_glProgramUniform1ui64NV,
	resolve_glProgramUniform1ui64vNV,
	resolve_glProgramUniform1uiv,
	resolve_glProgramUniform2d,
	resolve_glProgramUniform2dEXT,
	resolve_glProgramUniform2dv,
	resolve_glProgramUniform2dvEXT,
	resolve_glProgramUniform2f,
	resolve_glProgramUniform2fv,
	resolve_glProgramUniform2i,
	resolve_glProgramUniform2i64NV,
	resolve_glProgramUniform2i64vNV,
	resolve_glProgramUniform2iv,
	resolve_glProgramUniform2ui,
	resolve_glProgramUniform2ui64NV,
	resolve_glProgramUniform2ui64vNV,
	resolve_glProgramUniform2uiv,
	resolve_glProgramUniform3d,
	resolve_glProgramUniform3dEXT,
	resolve_glProgramUniform3dv,
	resolve_glProgramUniform3dvEXT,
	resolve_glProgramUniform3f,
	resolve_glProgramUniform3fv,
	resolve_glProgramUniform3i,
	resolve_glProgramUniform3i64NV,
	resolve_glProgramUniform3i64vNV,
	resolve_glProgramUniform3iv,
	resolve_glProgramUniform3ui,
	resolve_glProgramUniform3ui64NV,
	resolve_glProgramUniform3ui64vNV,
	resolve_glProgramUniform3uiv,
	resolve_glProgramUniform4d,
	resolve_glProgramUniform4dEXT,
	resolve_glProgramUniform4dv,
	resolve_glProgramUniform4dvEXT,
	resolve_glProgramUniform4f,
	resolve_glProgramUniform4fv,
	resolve_glProgramUniform4i,
	resolve_glProgramUniform4i64NV,
	resolve_glProgramUniform4i64vNV,
	resolve_glProgramUniform4iv,
	resolve_glProgramUniform4ui,
	resolve_glProgramUniform4ui64NV,
	resolve_glProgramUniform4ui64vNV,
	resolve_glProgramUniform4uiv,
	resolve_glProgramUniformHandleui64ARB,
	resolve_glProgramUniformHandleui64NV,
	resolve_glProgramUniformHandleui64vARB,
	resolve_glProgramUniformHandleui64vNV,
	resolve_glProgramUniformMatrix2dv,
	resolve_glProgramUniformMatrix2dvEXT,
	resolve_glProgramUniformMatrix2fv,
	resolve_glProgramUniformMatrix2x3dv,
	resolve_glProgramUniformMatrix2x3dvEXT,
	resolve_glProgramUniformMatrix2x3fv,
	resolve_glProgramUniformMatrix2x4dv,
	resolve_glProgramUniformMatrix2x4dvEXT,
	resolve_glProgramUniformMatrix2x4fv,
	resolve_glProgramUniformMatrix3dv,
	resolve_glProgramUniformMatrix3dvEXT,
	resolve_glProgramUniformMatrix3fv,
	resolve_glProgramUniformMatrix3x2dv,
	resolve_glProgramUniformMatrix3x2dvEXT,
	resolve_glProgramUniformMatrix3x2fv,
	resolve_glProgramUniformMatrix3x4dv,
	resolve_glProgramUniformMatrix3x4dvEXT,
	resolve_glProgramUniformMatrix3x4fv,
	resolve_glProgramUniformMatrix4dv,
	resolve_glProgramUniformMatrix4dvEXT,
	resolve_glProgramUniformMatrix4fv,
	resolve_glProgramUniformMatrix4x2dv,
	resolve_glProgramUniformMatrix4x2dvEXT,
	resolve_glProgramUniformMatrix4x2fv,
	resolve_glProgramUniformMatrix4x3dv,
	resolve_glProgramUniformMatrix4x3dvEXT,
	resolve_glProgramUniformMatrix4x3fv,
	resolve_glProgramUniformui64NV,
	resolve_glProgramUniformui64vNV,
	resolve_glProgramVertexLimitNV,
	resolve_glProvokingVertex,
	resolve_glPushAttrib,
	resolve_glPushClientAttrib,
	resolve_glPushClientAttribDefaultEXT,
	resolve_glPushDebugGroup,
	resolve_glPushGroupMarkerEXT,
	resolve_glPushMatrix,
	resolve_glPushName,
	resolve_glQueryCounter,
	resolve_glQueryMatrixxOES,
	resolve_glQueryObjectParameteruiAMD,
	resolve_glRasterPos2d,
	resolve_glRasterPos2dv,
	resolve_glRasterPos2f,
	resolve_glRasterPos2fv,
	resolve_glRasterPos2i,
	resolve_glRasterPos2iv,
	resolve_glRasterPos2s,
	resolve_glRasterPos2sv,
	resolve_glRasterPos2xOES,
	resolve_glRasterPos2xvOES,
	resolve_glRasterPos3d,
	resolve_glRasterPos3dv,
	resolve_glRasterPos3f,
	resolve_glRasterPos3fv,
	resolve_glRasterPos3i,
	resolve_glRasterPos3iv,
	resolve_glRasterPos3s,
	resolve_glRasterPos3sv,
	resolve_glRasterPos3xOES,
	resolve_glRasterPos3xvOES,
	resolve_glRasterPos4d,
	resolve_glRasterPos4dv,
	resolve_glRasterPos4f,
	resolve_glRasterPos4fv,
	resolve_glRasterPos4i,
	resolve_glRasterPos4iv,
	resolve_glRasterPos4s,
	resolve_glRasterPos4sv,
	resolve_glRasterPos4xOES,
	resolve_glRasterPos4xvOES,
	resolve_glReadBuffer,
	resolve_glReadBufferIndexedEXT,
	resolve_glReadBufferNV,
	resolve_glReadInstrumentsSGIX,
	resolve_glReadPixels,
	resolve_glReadnPixelsARB,
	resolve_glReadnPixelsEXT,
	resolve_glRectd,
	resolve_glRectdv,
	resolve_glRectf,
	resolve_glRectfv,
	resolve_glRecti,
	resolve_glRectiv,
	resolve_glRects,
	resolve_glRectsv,
	resolve_glRectxOES,
	resolve_glRectxvOES,
	resolve_glReferencePlaneSGIX,
	resolve_glReleaseShaderCompiler,
	resolve_glRenderMode,
	resolve_glRenderbufferStorage,
	resolve_glRenderbufferStorageMultisample,
	resolve_glRenderbufferStorageMultisampleANGLE,
	resolve_glRenderbufferStorageMultisampleAPPLE,
	resolve_glRenderbufferStorageMultisampleCoverageNV,
	resolve_glRenderbufferStorageMultisampleIMG,
	resolve_glRenderbufferStorageOES,
	resolve_glReplacementCodePointerSUN,
	resolve_glReplacementCodeubSUN,
	resolve_glReplacementCodeubvSUN,
	resolve_glReplacementCodeuiColor3fVertex3fSUN,
	resolve_glReplacementCodeuiColor3fVertex3fvSUN,
	resolve_glReplacementCodeuiColor4fNormal3fVertex3fSUN,
	resolve_glReplacementCodeuiColor4fNormal3fVertex3fvSUN,
	resolve_glReplacementCodeuiColor4ubVertex3fSUN,
	resolve_glReplacementCodeuiColor4ubVertex3fvSUN,
	resolve_glReplacementCodeuiNormal3fVertex3fSUN,
	resolve_glReplacementCodeuiNormal3fVertex3fvSUN,
	resolve_glReplacementCodeuiSUN,
	resolve_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN,
	resolve_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN,
	resolve_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN,
	resolve_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN,
	resolve_glReplacementCodeuiTexCoord2fVertex3fSUN,
	resolve_glReplacementCodeuiTexCoord2fVertex3fvSUN,
	resolve_glReplacementCodeuiVertex3fSUN,
	resolve_glReplacementCodeuiVertex3fvSUN,
	resolve_glReplacementCodeuivSUN,
	resolve_glReplacementCodeusSUN,
	resolve_glReplacementCodeusvSUN,
	resolve_glRequestResidentProgramsNV,
	resolve_glResetHistogram,
	resolve_glResetMinmax,
	resolve_glResizeBuffersMESA,
	resolve_glResolveMultisampleFramebufferAPPLE,
	resolve_glResumeTransformFeedback,
	resolve_glRotated,
	resolve_glRotatef,
	resolve_glRotatex,
	resolve_glRotatexOES,
	resolve_glSampleCoverage,
	resolve_glSampleCoverageOES,
	resolve_glSampleCoveragex,
	resolve_glSampleCoveragexOES,
	resolve_glSampleMapATI,
	resolve_glSampleMaskEXT,
	resolve_glSampleMaskIndexedNV,
	resolve_glSampleMaski,
	resolve_glSamplePatternEXT,
	resolve_glSamplerParameterIiv,
	resolve_glSamplerParameterIuiv,
	resolve_glSamplerParameterf,
	resolve_glSamplerParameterfv,
	resolve_glSamplerParameteri,
	resolve_glSamplerParameteriv,
	resolve_glScaled,
	resolve_glScalef,
	resolve_glScalex,
	resolve_glScalexOES,
	resolve_glScissor,
	resolve_glScissorArrayv,
	resolve_glScissorIndexed,
	resolve_glScissorIndexedv,
	resolve_glSecondaryColor3b,
	resolve_glSecondaryColor3bv,
	resolve_glSecondaryColor3d,
	resolve_glSecondaryColor3dv,
	resolve_glSecondaryColor3f,
	resolve_glSecondaryColor3fv,
	resolve_glSecondaryColor3hNV,
	resolve_glSecondaryColor3hvNV,
	resolve_glSecondaryColor3i,
	resolve_glSecondaryColor3iv,
	resolve_glSecondaryColor3s,
	resolve_glSecondaryColor3sv,
	resolve_glSecondaryColor3ub,
	resolve_glSecondaryColor3ubv,
	resolve_glSecondaryColor3ui,
	resolve_glSecondaryColor3uiv,
	resolve_glSecondaryColor3us,
	resolve_glSecondaryColor3usv,
	resolve_glSecondaryColorFormatNV,
	resolve_glSecondaryColorP3ui,
	resolve_glSecondaryColorP3uiv,
	resolve_glSecondaryColorPointer,
	resolve_glSecondaryColorPointerListIBM,
	resolve_glSelectBuffer,
	resolve_glSelectPerfMonitorCountersAMD,
	resolve_glSeparableFilter2D,
	resolve_glSetFenceAPPLE,
	resolve_glSetFenceNV,
	resolve_glSetFragmentShaderConstantATI,
	resolve_glSetInvariantEXT,
	resolve_glSetLocalConstantEXT,
	resolve_glSetMultisamplefvAMD,
	resolve_glShadeModel,
	resolve_glShaderBinary,
	resolve_glShaderOp1EXT,
	resolve_glShaderOp2EXT,
	resolve_glShaderOp3EXT,
	resolve_glShaderSource,
	resolve_glShaderStorageBlockBinding,
	resolve_glSharpenTexFuncSGIS,
	resolve_glSpriteParameterfSGIX,
	resolve_glSpriteParameterfvSGIX,
	resolve_glSpriteParameteriSGIX,
	resolve_glSpriteParameterivSGIX,
	resolve_glStartInstrumentsSGIX,
	resolve_glStartTilingQCOM,
	resolve_glStencilClearTagEXT,
	resolve_glStencilFillPathInstancedNV,
	resolve_glStencilFillPathNV,
	resolve_glStencilFunc,
	resolve_glStencilFuncSeparate,
	resolve_glStencilFuncSeparateATI,
	resolve_glStencilMask,
	resolve_glStencilMaskSeparate,
	resolve_glStencilOp,
	resolve_glStencilOpSeparate,
	resolve_glStencilOpValueAMD,
	resolve_glStencilStrokePathInstancedNV,
	resolve_glStencilStrokePathNV,
	resolve_glStopInstrumentsSGIX,
	resolve_glStringMarkerGREMEDY,
	resolve_glSwizzleEXT,
	resolve_glSyncTextureINTEL,
	resolve_glTagSampleBufferSGIX,
	resolve_glTangent3bEXT,
	resolve_glTangent3bvEXT,
	resolve_glTangent3dEXT,
	resolve_glTangent3dvEXT,
	resolve_glTangent3fEXT,
	resolve_glTangent3fvEXT,
	resolve_glTangent3iEXT,
	resolve_glTangent3ivEXT,
	resolve_glTangent3sEXT,
	resolve_glTangent3svEXT,
	resolve_glTangentPointerEXT,
	resolve_glTbufferMask3DFX,
	resolve_glTessellationFactorAMD,
	resolve_glTessellationModeAMD,
	resolve_glTestFenceAPPLE,
	resolve_glTestFenceNV,
	resolve_glTestObjectAPPLE,
	resolve_glTexBuffer,
	resolve_glTexBufferRange,
	resolve_glTexBumpParameterfvATI,
	resolve_glTexBumpParameterivATI,
	resolve_glTexCoord1bOES,
	resolve_glTexCoord1bvOES,
	resolve_glTexCoord1d,
	resolve_glTexCoord1dv,
	resolve_glTexCoord1f,
	resolve_glTexCoord1fv,
	resolve_glTexCoord1hNV,
	resolve_glTexCoord1hvNV,
	resolve_glTexCoord1i,
	resolve_glTexCoord1iv,
	resolve_glTexCoord1s,
	resolve_glTexCoord1sv,
	resolve_glTexCoord1xOES,
	resolve_glTexCoord1xvOES,
	resolve_glTexCoord2bOES,
	resolve_glTexCoord2bvOES,
	resolve_glTexCoord2d,
	resolve_glTexCoord2dv,
	resolve_glTexCoord2f,
	resolve_glTexCoord2fColor3fVertex3fSUN,
	resolve_glTexCoord2fColor3fVertex3fvSUN,
	resolve_glTexCoord2fColor4fNormal3fVertex3fSUN,
	resolve_glTexCoord2fColor4fNormal3fVertex3fvSUN,
	resolve_glTexCoord2fColor4ubVertex3fSUN,
	resolve_glTexCoord2fColor4ubVertex3fvSUN,
	resolve_glTexCoord2fNormal3fVertex3fSUN,
	resolve_glTexCoord2fNormal3fVertex3fvSUN,
	resolve_glTexCoord2fVertex3fSUN,
	resolve_glTexCoord2fVertex3fvSUN,
	resolve_glTexCoord2fv,
	resolve_glTexCoord2hNV,
	resolve_glTexCoord2hvNV,
	resolve_glTexCoord2i,
	resolve_glTexCoord2iv,
	resolve_glTexCoord2s,
	resolve_glTexCoord2sv,
	resolve_glTexCoord2xOES,
	resolve_glTexCoord2xvOES,
	resolve_glTexCoord3bOES,
	resolve_glTexCoord3bvOES,
	resolve_glTexCoord3d,
	resolve_glTexCoord3dv,
	resolve_glTexCoord3f,
	resolve_glTexCoord3fv,
	resolve_glTexCoord3hNV,
	resolve_glTexCoord3hvNV,
	resolve_glTexCoord3i,
	resolve_glTexCoord3iv,
	resolve_glTexCoord3s,
	resolve_glTexCoord3sv,
	resolve_glTexCoord3xOES,
	resolve_glTexCoord3xvOES,
	resolve_glTexCoord4bOES,
	resolve_glTexCoord4bvOES,
	resolve_glTexCoord4d,
	resolve_glTexCoord4dv,
	resolve_glTexCoord4f,
	resolve_glTexCoord4fColor4fNormal3fVertex4fSUN,
	resolve_glTexCoord4fColor4fNormal3fVertex4fvSUN,
	resolve_glTexCoord4fVertex4fSUN,
	resolve_glTexCoord4fVertex4fvSUN,
	resolve_glTexCoord4fv,
	resolve_glTexCoord4hNV,
	resolve_glTexCoord4hvNV,
	resolve_glTexCoord4i,
	resolve_glTexCoord4iv,
	resolve_glTexCoord4s,
	resolve_glTexCoord4sv,
	resolve_glTexCoord4xOES,
	resolve_glTexCoord4xvOES,
	resolve_glTexCoordFormatNV,
	resolve_glTexCoordP1ui,
	resolve_glTexCoordP1uiv,
	resolve_glTexCoordP2ui,
	resolve_glTexCoordP2uiv,
	resolve_glTexCoordP3ui,
	resolve_glTexCoordP3uiv,
	resolve_glTexCoordP4ui,
	resolve_glTexCoordP4uiv,
	resolve_glTexCoordPointer,
	resolve_glTexCoordPointerEXT,
	resolve_glTexCoordPointerListIBM,
	resolve_glTexCoordPointervINTEL,
	resolve_glTexEnvf,
	resolve_glTexEnvfv,
	resolve_glTexEnvi,
	resolve_glTexEnviv,
	resolve_glTexEnvx,
	resolve_glTexEnvxOES,
	resolve_glTexEnvxv,
	resolve_glTexEnvxvOES,
	resolve_glTexFilterFuncSGIS,
	resolve_glTexGend,
	resolve_glTexGendv,
	resolve_glTexGenf,
	resolve_glTexGenfOES,
	resolve_glTexGenfv,
	resolve_glTexGenfvOES,
	resolve_glTexGeni,
	resolve_glTexGeniOES,
	resolve_glTexGeniv,
	resolve_glTexGenivOES,
	resolve_glTexGenxOES,
	resolve_glTexGenxvOES,
	resolve_glTexImage1D,
	resolve_glTexImage2D,
	resolve_glTexImage2DMultisample,
	resolve_glTexImage2DMultisampleCoverageNV,
	resolve_glTexImage3D,
	resolve_glTexImage3DMultisample,
	resolve_glTexImage3DMultisampleCoverageNV,
	resolve_glTexImage4DSGIS,
	resolve_glTexPageCommitmentARB,
	resolve_glTexParameterIiv,
	resolve_glTexParameterIuiv,
	resolve_glTexParameterf,
	resolve_glTexParameterfv,
	resolve_glTexParameteri,
	resolve_glTexParameteriv,
	resolve_glTexParameterx,
	resolve_glTexParameterxOES,
	resolve_glTexParameterxv,
	resolve_glTexParameterxvOES,
	resolve_glTexRenderbufferNV,
	resolve_glTexStorage1D,
	resolve_glTexStorage2D,
	resolve_glTexStorage2DMultisample,
	resolve_glTexStorage3D,
	resolve_glTexStorage3DMultisample,
	resolve_glTexStorageSparseAMD,
	resolve_glTexSubImage1D,
	resolve_glTexSubImage2D,
	resolve_glTexSubImage3D,
	resolve_glTexSubImage4DSGIS,
	resolve_glTextureBarrierNV,
	resolve_glTextureBufferEXT,
	resolve_glTextureBufferRangeEXT,
	resolve_glTextureColorMaskSGIS,
	resolve_glTextureImage1DEXT,
	resolve_glTextureImage2DEXT,
	resolve_glTextureImage2DMultisampleCoverageNV,
	resolve_glTextureImage2DMultisampleNV,
	resolve_glTextureImage3DEXT,
	resolve_glTextureImage3DMultisampleCoverageNV,
	resolve_glTextureImage3DMultisampleNV,
	resolve_glTextureLightEXT,
	resolve_glTextureMaterialEXT,
	resolve_glTextureNormalEXT,
	resolve_glTexturePageCommitmentEXT,
	resolve_glTextureParameterIivEXT,
	resolve_glTextureParameterIuivEXT,
	resolve_glTextureParameterfEXT,
	resolve_glTextureParameterfvEXT,
	resolve_glTextureParameteriEXT,
	resolve_glTextureParameterivEXT,
	resolve_glTextureRangeAPPLE,
	resolve_glTextureRenderbufferEXT,
	resolve_glTextureStorage1DEXT,
	resolve_glTextureStorage2DEXT,
	resolve_glTextureStorage2DMultisampleEXT,
	resolve_glTextureStorage3DEXT,
	resolve_glTextureStorage3DMultisampleEXT,
	resolve_glTextureStorageSparseAMD,
	resolve_glTextureSubImage1DEXT,
	resolve_glTextureSubImage2DEXT,
	resolve_glTextureSubImage3DEXT,
	resolve_glTextureView,
	resolve_glTrackMatrixNV,
	resolve_glTransformFeedbackAttribsNV,
	resolve_glTransformFeedbackStreamAttribsNV,
	resolve_glTransformFeedbackVaryings,
	resolve_glTransformFeedbackVaryingsNV,
	resolve_glTransformPathNV,
	resolve_glTranslated,
	resolve_glTranslatef,
	resolve_glTranslatex,
	resolve_glTranslatexOES,
	resolve_glUniform1d,
	resolve_glUniform1dv,
	resolve_glUniform1f,
	resolve_glUniform1fv,
	resolve_glUniform1i,
	resolve_glUniform1i64NV,
	resolve_glUniform1i64vNV,
	resolve_glUniform1iv,
	resolve_glUniform1ui,
	resolve_glUniform1ui64NV,
	resolve_glUniform1ui64vNV,
	resolve_glUniform1uiv,
	resolve_glUniform2d,
	resolve_glUniform2dv,
	resolve_glUniform2f,
	resolve_glUniform2fv,
	resolve_glUniform2i,
	resolve_glUniform2i64NV,
	resolve_glUniform2i64vNV,
	resolve_glUniform2iv,
	resolve_glUniform2ui,
	resolve_glUniform2ui64NV,
	resolve_glUniform2ui64vNV,
	resolve_glUniform2uiv,
	resolve_glUniform3d,
	resolve_glUniform3dv,
	resolve_glUniform3f,
	resolve_glUniform3fv,
	resolve_glUniform3i,
	resolve_glUniform3i64NV,
	resolve_glUniform3i64vNV,
	resolve_glUniform3iv,
	resolve_glUniform3ui,
	resolve_glUniform3ui64NV,
	resolve_glUniform3ui64vNV,
	resolve_glUniform3uiv,
	resolve_glUniform4d,
	resolve_glUniform4dv,
	resolve_glUniform4f,
	resolve_glUniform4fv,
	resolve_glUniform4i,
	resolve_glUniform4i64NV,
	resolve_glUniform4i64vNV,
	resolve_glUniform4iv,
	resolve_glUniform4ui,
	resolve_glUniform4ui64NV,
	resolve_glUniform4ui64vNV,
	resolve_glUniform4uiv,
	resolve_glUniformBlockBinding,
	resolve_glUniformBufferEXT,
	resolve_glUniformHandleui64ARB,
	resolve_glUniformHandleui64NV,
	resolve_glUniformHandleui64vARB,
	resolve_glUniformHandleui64vNV,
	resolve_glUniformMatrix2dv,
	resolve_glUniformMatrix2fv,
	resolve_glUniformMatrix2x3dv,
	resolve_glUniformMatrix2x3fv,
	resolve_glUniformMatrix2x4dv,
	resolve_glUniformMatrix2x4fv,
	resolve_glUniformMatrix3dv,
	resolve_glUniformMatrix3fv,
	resolve_glUniformMatrix3x2dv,
	resolve_glUniformMatrix3x2fv,
	resolve_glUniformMatrix3x4dv,
	resolve_glUniformMatrix3x4fv,
	resolve_glUniformMatrix4dv,
	resolve_glUniformMatrix4fv,
	resolve_glUniformMatrix4x2dv,
	resolve_glUniformMatrix4x2fv,
	resolve_glUniformMatrix4x3dv,
	resolve_glUniformMatrix4x3fv,
	resolve_glUniformSubroutinesuiv,
	resolve_glUniformui64NV,
	resolve_glUniformui64vNV,
	resolve_glUnlockArraysEXT,
	resolve_glUnmapBuffer,
	resolve_glUnmapNamedBufferEXT,
	resolve_glUnmapObjectBufferATI,
	resolve_glUnmapTexture2DINTEL,
	resolve_glUpdateObjectBufferATI,
	resolve_glUseProgram,
	resolve_glUseProgramStages,
	resolve_glUseProgramStagesEXT,
	resolve_glUseShaderProgramEXT,
	resolve_glVDPAUFiniNV,
	resolve_glVDPAUGetSurfaceivNV,
	resolve_glVDPAUInitNV,
	resolve_glVDPAUIsSurfaceNV,
	resolve_glVDPAUMapSurfacesNV,
	resolve_glVDPAURegisterOutputSurfaceNV,
	resolve_glVDPAURegisterVideoSurfaceNV,
	resolve_glVDPAUSurfaceAccessNV,
	resolve_glVDPAUUnmapSurfacesNV,
	resolve_glVDPAUUnregisterSurfaceNV,
	resolve_glValidateProgram,
	resolve_glValidateProgramPipeline,
	resolve_glValidateProgramPipelineEXT,
	resolve_glVariantArrayObjectATI,
	resolve_glVariantPointerEXT,
	resolve_glVariantbvEXT,
	resolve_glVariantdvEXT,
	resolve_glVariantfvEXT,
	resolve_glVariantivEXT,
	resolve_glVariantsvEXT,
	resolve_glVariantubvEXT,
	resolve_glVariantuivEXT,
	resolve_glVariantusvEXT,
	resolve_glVertex2bOES,
	resolve_glVertex2bvOES,
	resolve_glVertex2d,
	resolve_glVertex2dv,
	resolve_glVertex2f,
	resolve_glVertex2fv,
	resolve_glVertex2hNV,
	resolve_glVertex2hvNV,
	resolve_glVertex2i,
	resolve_glVertex2iv,
	resolve_glVertex2s,
	resolve_glVertex2sv,
	resolve_glVertex2xOES,
	resolve_glVertex2xvOES,
	resolve_glVertex3bOES,
	resolve_glVertex3bvOES,
	resolve_glVertex3d,
	resolve_glVertex3dv,
	resolve_glVertex3f,
	resolve_glVertex3fv,
	resolve_glVertex3hNV,
	resolve_glVertex3hvNV,
	resolve_glVertex3i,
	resolve_glVertex3iv,
	resolve_glVertex3s,
	resolve_glVertex3sv,
	resolve_glVertex3xOES,
	resolve_glVertex3xvOES,
	resolve_glVertex4bOES,
	resolve_glVertex4bvOES,
	resolve_glVertex4d,
	resolve_glVertex4dv,
	resolve_glVertex4f,
	resolve_glVertex4fv,
	resolve_glVertex4hNV,
	resolve_glVertex4hvNV,
	resolve_glVertex4i,
	resolve_glVertex4iv,
	resolve_glVertex4s,
	resolve_glVertex4sv,
	resolve_glVertex4xOES,
	resolve_glVertex4xvOES,
	resolve_glVertexArrayBindVertexBufferEXT,
	resolve_glVertexArrayColorOffsetEXT,
	resolve_glVertexArrayEdgeFlagOffsetEXT,
	resolve_glVertexArrayFogCoordOffsetEXT,
	resolve_glVertexArrayIndexOffsetEXT,
	resolve_glVertexArrayMultiTexCoordOffsetEXT,
	resolve_glVertexArrayNormalOffsetEXT,
	resolve_glVertexArrayParameteriAPPLE,
	resolve_glVertexArrayRangeAPPLE,
	resolve_glVertexArrayRangeNV,
	resolve_glVertexArraySecondaryColorOffsetEXT,
	resolve_glVertexArrayTexCoordOffsetEXT,
	resolve_glVertexArrayVertexAttribBindingEXT,
	resolve_glVertexArrayVertexAttribDivisorEXT,
	resolve_glVertexArrayVertexAttribFormatEXT,
	resolve_glVertexArrayVertexAttribIFormatEXT,
	resolve_glVertexArrayVertexAttribIOffsetEXT,
	resolve_glVertexArrayVertexAttribLFormatEXT,
	resolve_glVertexArrayVertexAttribLOffsetEXT,
	resolve_glVertexArrayVertexAttribOffsetEXT,
	resolve_glVertexArrayVertexBindingDivisorEXT,
	resolve_glVertexArrayVertexOffsetEXT,
	resolve_glVertexAttrib1d,
	resolve_glVertexAttrib1dv,
	resolve_glVertexAttrib1f,
	resolve_glVertexAttrib1fv,
	resolve_glVertexAttrib1hNV,
	resolve_glVertexAttrib1hvNV,
	resolve_glVertexAttrib1s,
	resolve_glVertexAttrib1sv,
	resolve_glVertexAttrib2d,
	resolve_glVertexAttrib2dv,
	resolve_glVertexAttrib2f,
	resolve_glVertexAttrib2fv,
	resolve_glVertexAttrib2hNV,
	resolve_glVertexAttrib2hvNV,
	resolve_glVertexAttrib2s,
	resolve_glVertexAttrib2sv,
	resolve_glVertexAttrib3d,
	resolve_glVertexAttrib3dv,
	resolve_glVertexAttrib3f,
	resolve_glVertexAttrib3fv,
	resolve_glVertexAttrib3hNV,
	resolve_glVertexAttrib3hvNV,
	resolve_glVertexAttrib3s,
	resolve_glVertexAttrib3sv,
	resolve_glVertexAttrib4Nbv,
	resolve_glVertexAttrib4Niv,
	resolve_glVertexAttrib4Nsv,
	resolve_glVertexAttrib4Nub,
	resolve_glVertexAttrib4Nubv,
	resolve_glVertexAttrib4Nuiv,
	resolve_glVertexAttrib4Nusv,
	resolve_glVertexAttrib4bv,
	resolve_glVertexAttrib4d,
	resolve_glVertexAttrib4dv,
	resolve_glVertexAttrib4f,
	resolve_glVertexAttrib4fv,
	resolve_glVertexAttrib4hNV,
	resolve_glVertexAttrib4hvNV,
	resolve_glVertexAttrib4iv,
	resolve_glVertexAttrib4s,
	resolve_glVertexAttrib4sv,
	resolve_glVertexAttrib4ubv,
	resolve_glVertexAttrib4uiv,
	resolve_glVertexAttrib4usv,
	resolve_glVertexAttribArrayObjectATI,
	resolve_glVertexAttribBinding,
	resolve_glVertexAttribDivisor,
	resolve_glVertexAttribFormat,
	resolve_glVertexAttribFormatNV,
	resolve_glVertexAttribI1i,
	resolve_glVertexAttribI1iv,
	resolve_glVertexAttribI1ui,
	resolve_glVertexAttribI1uiv,
	resolve_glVertexAttribI2i,
	resolve_glVertexAttribI2iv,
	resolve_glVertexAttribI2ui,
	resolve_glVertexAttribI2uiv,
	resolve_glVertexAttribI3i,
	resolve_glVertexAttribI3iv,
	resolve_glVertexAttribI3ui,
	resolve_glVertexAttribI3uiv,
	resolve_glVertexAttribI4bv,
	resolve_glVertexAttribI4i,
	resolve_glVertexAttribI4iv,
	resolve_glVertexAttribI4sv,
	resolve_glVertexAttribI4ubv,
	resolve_glVertexAttribI4ui,
	resolve_glVertexAttribI4uiv,
	resolve_glVertexAttribI4usv,
	resolve_glVertexAttribIFormat,
	resolve_glVertexAttribIFormatNV,
	resolve_glVertexAttribIPointer,
	resolve_glVertexAttribL1d,
	resolve_glVertexAttribL1dv,
	resolve_glVertexAttribL1i64NV,
	resolve_glVertexAttribL1i64vNV,
	resolve_glVertexAttribL1ui64ARB,
	resolve_glVertexAttribL1ui64NV,
	resolve_glVertexAttribL1ui64vARB,
	resolve_glVertexAttribL1ui64vNV,
	resolve_glVertexAttribL2d,
	resolve_glVertexAttribL2dv,
	resolve_glVertexAttribL2i64NV,
	resolve_glVertexAttribL2i64vNV,
	resolve_glVertexAttribL2ui64NV,
	resolve_glVertexAttribL2ui64vNV,
	resolve_glVertexAttribL3d,
	resolve_glVertexAttribL3dv,
	resolve_glVertexAttribL3i64NV,
	resolve_glVertexAttribL3i64vNV,
	resolve_glVertexAttribL3ui64NV,
	resolve_glVertexAttribL3ui64vNV,
	resolve_glVertexAttribL4d,
	resolve_glVertexAttribL4dv,
	resolve_glVertexAttribL4i64NV,
	resolve_glVertexAttribL4i64vNV,
	resolve_glVertexAttribL4ui64NV,
	resolve_glVertexAttribL4ui64vNV,
	resolve_glVertexAttribLFormat,
	resolve_glVertexAttribLFormatNV,
	resolve_glVertexAttribLPointer,
	resolve_glVertexAttribP1ui,
	resolve_glVertexAttribP1uiv,
	resolve_glVertexAttribP2ui,
	resolve_glVertexAttribP2uiv,
	resolve_glVertexAttribP3ui,
	resolve_glVertexAttribP3uiv,
	resolve_glVertexAttribP4ui,
	resolve_glVertexAttribP4uiv,
	resolve_glVertexAttribParameteriAMD,
	resolve_glVertexAttribPointer,
	resolve_glVertexAttribPointerNV,
	resolve_glVertexAttribs1dvNV,
	resolve_glVertexAttribs1fvNV,
	resolve_glVertexAttribs1hvNV,
	resolve_glVertexAttribs1svNV,
	resolve_glVertexAttribs2dvNV,
	resolve_glVertexAttribs2fvNV,
	resolve_glVertexAttribs2hvNV,
	resolve_glVertexAttribs2svNV,
	resolve_glVertexAttribs3dvNV,
	resolve_glVertexAttribs3fvNV,
	resolve_glVertexAttribs3hvNV,
	resolve_glVertexAttribs3svNV,
	resolve_glVertexAttribs4dvNV,
	resolve_glVertexAttribs4fvNV,
	resolve_glVertexAttribs4hvNV,
	resolve_glVertexAttribs4svNV,
	resolve_glVertexAttribs4ubvNV,
	resolve_glVertexBindingDivisor,
	resolve_glVertexBlendARB,
	resolve_glVertexBlendEnvfATI,
	resolve_glVertexBlendEnviATI,
	resolve_glVertexFormatNV,
	resolve_glVertexP2ui,
	resolve_glVertexP2uiv,
	resolve_glVertexP3ui,
	resolve_glVertexP3uiv,
	resolve_glVertexP4ui,
	resolve_glVertexP4uiv,
	resolve_glVertexPointer,
	resolve_glVertexPointerEXT,
	resolve_glVertexPointerListIBM,
	resolve_glVertexPointervINTEL,
	resolve_glVertexStream1dATI,
	resolve_glVertexStream1dvATI,
	resolve_glVertexStream1fATI,
	resolve_glVertexStream1fvATI,
	resolve_glVertexStream1iATI,
	resolve_glVertexStream1ivATI,
	resolve_glVertexStream1sATI,
	resolve_glVertexStream1svATI,
	resolve_glVertexStream2dATI,
	resolve_glVertexStream2dvATI,
	resolve_glVertexStream2fATI,
	resolve_glVertexStream2fvATI,
	resolve_glVertexStream2iATI,
	resolve_glVertexStream2ivATI,
	resolve_glVertexStream2sATI,
	resolve_glVertexStream2svATI,
	resolve_glVertexStream3dATI,
	resolve_glVertexStream3dvATI,
	resolve_glVertexStream3fATI,
	resolve_glVertexStream3fvATI,
	resolve_glVertexStream3iATI,
	resolve_glVertexStream3ivATI,
	resolve_glVertexStream3sATI,
	resolve_glVertexStream3svATI,
	resolve_glVertexStream4dATI,
	resolve_glVertexStream4dvATI,
	resolve_glVertexStream4fATI,
	resolve_glVertexStream4fvATI,
	resolve_glVertexStream4iATI,
	resolve_glVertexStream4ivATI,
	resolve_glVertexStream4sATI,
	resolve_glVertexStream4svATI,
	resolve_glVertexWeightPointerEXT,
	resolve_glVertexWeightfEXT,
	resolve_glVertexWeightfvEXT,
	resolve_glVertexWeighthNV,
	resolve_glVertexWeighthvNV,
	resolve_glVideoCaptureNV,
	resolve_glVideoCaptureStreamParameterdvNV,
	resolve_glVideoCaptureStreamParameterfvNV,
	resolve_glVideoCaptureStreamParameterivNV,
	resolve_glViewport,
	resolve_glViewportArrayv,
	resolve_glViewportIndexedf,
	resolve_glViewportIndexedfv,
	resolve_glWaitSync,
	resolve_glWeightPathsNV,
	resolve_glWeightPointerARB,
	resolve_glWeightPointerOES,
	resolve_glWeightbvARB,
	resolve_glWeightdvARB,
	resolve_glWeightfvARB,
	resolve_glWeightivARB,
	resolve_glWeightsvARB,
	resolve_glWeightubvARB,
	resolve_glWeightuivARB,
	resolve_glWeightusvARB,
	resolve_glWindowPos2d,
	resolve_glWindowPos2dv,
	resolve_glWindowPos2f,
	resolve_glWindowPos2fv,
	resolve_glWindowPos2i,
	resolve_glWindowPos2iv,
	resolve_glWindowPos2s,
	resolve_glWindowPos2sv,
	resolve_glWindowPos3d,
	resolve_glWindowPos3dv,
	resolve_glWindowPos3f,
	resolve_glWindowPos3fv,
	resolve_glWindowPos3i,
	resolve_glWindowPos3iv,
	resolve_glWindowPos3s,
	resolve_glWindowPos3sv,
	resolve_glWindowPos4dMESA,
	resolve_glWindowPos4dvMESA,
	resolve_glWindowPos4fMESA,
	resolve_glWindowPos4fvMESA,
	resolve_glWindowPos4iMESA,
	resolve_glWindowPos4ivMESA,
	resolve_glWindowPos4sMESA,
	resolve_glWindowPos4svMESA,
	resolve_glWriteMaskEXT,
};
