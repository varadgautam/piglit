;[opencv]
; Set the opencv_test_ocl_bindir variable to run the OpenCV OpenCL tests.
;opencv_test_ocl_bindir=/home/user/opencv/build/bin
;opencv_workdir=/home/user/opencv/samples/c/
; Run each subtest individiually to so a result is recored for each subtest.
; For example, default behavior:
; opencv/OCL_ML/Kmeans -> Pass
;
; With 'individual' option:
; OCL_ML/Kmeans.Mat/0 -> Pass
; OCL_ML/Kmeans.Mat/1 -> Pass
; OCL_ML/Kmeans.Mat/2 -> Pass
;
;individual
;
[xts]
; Set bindir equal to the root of the xts directory
;path=/home/user/src/xts

[igt]
; Set bindir equal to the absolute root of the igt directory
;path=/home/user/src/igt

[oglconform]
; Set bindir equal to the absolute root of the oglconform directory
;path=/home/usr/src/oglconform

[oclconform]
; bindir is the directory that the commands to run tests and list subtests
; will be executed in.
bindir=/home/usr/oclconform
; List the tests you want to run
testA
testB

;[deqp-gles3]
;
; Path to the deqp-gles3 executable. You can also set this with the environment
; variable PIGLIT_DEQP_GLES3_EXE. Piglit will run the dEQP-GLES3 tests if and
; only if this option is set.
;exe=/home/knuth/deqp/modules/gles3/deqp-gles3
;
; Space-separated list of extra command line arguments for deqp-gles3. The
; option is not required. The environment variable PIGLIT_DEQP_GLES3_EXTRA_ARGS
; overrides the value set here.
;extra_args=--deqp-visibility hidden

; Section for specific oclconform test.  One of these sections is required for
; each test list in the oclconform section and must be called:
; oclconform-$testname
[oclconform-testA]
test_name=testA
; Add concurrent to this section if the test can be run concurrently
; concurrent

; For tests with subtests:

; The value of list_subtests is a command that will list all the subtest for
; this test
; list_subtest=./%(test_name)s --list-tests

; The value of subtest_regex should be a regular expression used to select
; which subtests to run.
; subtest_regex=fast.+

; run_subtest is a command to execute a subtest.  Anywhere <subtest> is found
; in the command, it will be replaced with the name of the subtest.
; run_subtest=./%(test_name)s --test=<subtest>

; For regular tests:
; run_test is the command used for running the test
run_test=./%(test_name)s

[core]
; Set the default platform to use.
; Options can be found by running piglit run -h and reading the section
; for -p/--platform
;
; The default on Linux will be mixed_glx_egl
;platform=gbm

; Set the default backend to use
; Options can be found running piglit run -h and reading the section for
; -b/--backend
;backend=json

[expected-failures]
; Provide a list of test names that are expected to fail.  These tests
; will be listed as passing in JUnit output when they fail.  Any
; unexpected result (pass/crash) will be listed as a failure.  The
; test name must be written in the JUnit format ('.' instead of '/').
; Special characters for config file format ('=' and ':') must be
; replaced with '.'

[expected-crashes]
; Like expected-failures, but specifies that a test is expected to
; crash.